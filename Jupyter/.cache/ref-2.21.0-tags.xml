<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AddScores.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>AddScores_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::AddScores</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>algebra.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>algebra_8h</filename>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="Cone3D_8h" name="Cone3D.h" local="no" imported="no">IMP/algebra/Cone3D.h</includes>
    <includes id="Cylinder3D_8h" name="Cylinder3D.h" local="no" imported="no">IMP/algebra/Cylinder3D.h</includes>
    <includes id="Ellipsoid3D_8h" name="Ellipsoid3D.h" local="no" imported="no">IMP/algebra/Ellipsoid3D.h</includes>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="no" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="no" imported="no">IMP/algebra/GeometricPrimitiveD.h</includes>
    <includes id="GridD_8h" name="GridD.h" local="no" imported="no">IMP/algebra/GridD.h</includes>
    <includes id="Line3D_8h" name="Line3D.h" local="no" imported="no">IMP/algebra/Line3D.h</includes>
    <includes id="LinearFit_8h" name="LinearFit.h" local="no" imported="no">IMP/algebra/LinearFit.h</includes>
    <includes id="ParabolicFit_8h" name="ParabolicFit.h" local="no" imported="no">IMP/algebra/ParabolicFit.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="no" imported="no">IMP/algebra/Plane3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="Reflection3D_8h" name="Reflection3D.h" local="no" imported="no">IMP/algebra/Reflection3D.h</includes>
    <includes id="Rotation2D_8h" name="Rotation2D.h" local="no" imported="no">IMP/algebra/Rotation2D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="no" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="no" imported="no">IMP/algebra/Segment3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="SphereD_8h" name="SphereD.h" local="no" imported="no">IMP/algebra/SphereD.h</includes>
    <includes id="SpherePatch3D_8h" name="SpherePatch3D.h" local="no" imported="no">IMP/algebra/SpherePatch3D.h</includes>
    <includes id="SphericalVector3D_8h" name="SphericalVector3D.h" local="no" imported="no">IMP/algebra/SphericalVector3D.h</includes>
    <includes id="Torus3D_8h" name="Torus3D.h" local="no" imported="no">IMP/algebra/Torus3D.h</includes>
    <includes id="Transformation2D_8h" name="Transformation2D.h" local="no" imported="no">IMP/algebra/Transformation2D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Triangle3D_8h" name="Triangle3D.h" local="no" imported="no">IMP/algebra/Triangle3D.h</includes>
    <includes id="UnitSimplexD_8h" name="UnitSimplexD.h" local="no" imported="no">IMP/algebra/UnitSimplexD.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="VectorBaseD_8h" name="VectorBaseD.h" local="no" imported="no">IMP/algebra/VectorBaseD.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="no" imported="no">IMP/algebra/algebra_macros.h</includes>
    <includes id="algebra_2connolly__surface_8h" name="algebra/connolly_surface.h" local="no" imported="no">IMP/algebra/connolly_surface.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="no" imported="no">IMP/algebra/constants.h</includes>
    <includes id="algebra_2distance_8h" name="algebra/distance.h" local="no" imported="no">IMP/algebra/distance.h</includes>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <includes id="endian_8h" name="endian.h" local="no" imported="no">IMP/algebra/endian.h</includes>
    <includes id="geometric__alignment_8h" name="geometric_alignment.h" local="no" imported="no">IMP/algebra/geometric_alignment.h</includes>
    <includes id="geometric__primitive__macros_8h" name="geometric_primitive_macros.h" local="no" imported="no">IMP/algebra/geometric_primitive_macros.h</includes>
    <includes id="grid__embeddings_8h" name="grid_embeddings.h" local="no" imported="no">IMP/algebra/grid_embeddings.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="no" imported="no">IMP/algebra/grid_indexes.h</includes>
    <includes id="grid__ranges_8h" name="grid_ranges.h" local="no" imported="no">IMP/algebra/grid_ranges.h</includes>
    <includes id="grid__storages_8h" name="grid_storages.h" local="no" imported="no">IMP/algebra/grid_storages.h</includes>
    <includes id="grid__utility_8h" name="grid_utility.h" local="no" imported="no">IMP/algebra/grid_utility.h</includes>
    <includes id="algebra_2io_8h" name="algebra/io.h" local="no" imported="no">IMP/algebra/io.h</includes>
    <includes id="algebra_2python__only_8h" name="algebra/python_only.h" local="no" imported="no">IMP/algebra/python_only.h</includes>
    <includes id="shortest__segment_8h" name="shortest_segment.h" local="no" imported="no">IMP/algebra/shortest_segment.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="vector__generators_8h" name="vector_generators.h" local="no" imported="no">IMP/algebra/vector_generators.h</includes>
    <includes id="vector__metrics_8h" name="vector_metrics.h" local="no" imported="no">IMP/algebra/vector_metrics.h</includes>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
  </compound>
  <compound kind="file">
    <name>algebra_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra__macros_8h</filename>
    <includes id="geometric__primitive__macros_8h" name="geometric_primitive_macros.h" local="yes" imported="no">geometric_primitive_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>align2D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>align2D_8h</filename>
    <includes id="PolarResamplingParameters_8h" name="PolarResamplingParameters.h" local="yes" imported="no">IMP/em2d/PolarResamplingParameters.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="yes" imported="no">IMP/algebra/utility.h</includes>
    <includes id="Transformation2D_8h" name="Transformation2D.h" local="yes" imported="no">IMP/algebra/Transformation2D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>std::pair&lt; algebra::Transformation2D, double &gt;</type>
      <name>ResultAlign2D</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4c37119ae034ad39a0c88a08541e69b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_complete_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af9561a34940e234bd416361bbd60a4f3</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>em2d::ResultAlign2D</type>
      <name>get_complete_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae25b0c486162ad343e3726233a5bb67b</anchor>
      <arglist>(const cv::Mat &amp;input, const cv::Mat &amp;INPUT, const cv::Mat &amp;POLAR1, cv::Mat &amp;m_to_align, const cv::Mat &amp;POLAR2, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_complete_alignment_with_centers_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a954d8f810fcee18ed744ecfa15e88ae7</anchor>
      <arglist>(const algebra::Vector2D &amp;center1, const algebra::Vector2D &amp;center2, const cv::Mat &amp;AUTOC_POLAR1, const cv::Mat &amp;AUTOC_POLAR2)</arglist>
    </member>
    <member kind="function">
      <type>em2d::ResultAlign2D</type>
      <name>get_rotational_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acd41cbc70027d6b1e2323a0fbc8c8f6f</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_rotational_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a474214ff2650f42c9343cad13ada1455</anchor>
      <arglist>(const cv::Mat &amp;POLAR1, const cv::Mat &amp;POLAR2)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_translational_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acc2a6e0d87808c808547926da2570f67</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_translational_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8fd176906f67285d66aebe5ce9dfd02c</anchor>
      <arglist>(const cv::Mat &amp;M1, const cv::Mat &amp;M2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alignment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>alignment_8h</filename>
    <includes id="Selection_8h" name="Selection.h" local="no" imported="no">IMP/atom/Selection.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a72ceba6f0fb3a05221086170a55f4d46</anchor>
      <arglist>(const Selection &amp;s1, const Selection &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AlignmentParams.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>AlignmentParams_8h</filename>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; AlignmentParams &gt;</type>
      <name>AlignmentParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a7322c47f87051feba6b29f57caf424c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ComplementarityParams &gt;</type>
      <name>ComplementarityParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a593a1ed5ac7e0ef5ee8a68b3141d506e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ConnectivityParams &gt;</type>
      <name>ConnectivityParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aeaac2f10810a915d85456ad41e193480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DominoParams &gt;</type>
      <name>DominoParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a4e3f2661912e8a4dff17bf2ed1ad41ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; EVParams &gt;</type>
      <name>EVParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad4855c8ffbd12a1be19dd55fc0fe2a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FiltersParams &gt;</type>
      <name>FiltersParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af5ab3713c53a19c1ab9f0dc327b65d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingParams &gt;</type>
      <name>FittingParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a31b91e93553f49b37f3091f75d3949ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FragmentsParams &gt;</type>
      <name>FragmentsParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>abe9467dc6e8812b2b604896a2cb6ea89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; RogParams &gt;</type>
      <name>RogParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a2bc56dd1adeb81281f92cb66e347e4b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; XlinkParams &gt;</type>
      <name>XlinkParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aa04d4a4969fea5408c08e77644f65ead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AlignSymmetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>AlignSymmetric_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="CnSymmAxisDetector_8h" name="CnSymmAxisDetector.h" local="yes" imported="no">CnSymmAxisDetector.h</includes>
    <class kind="class">IMP::cnmultifit::AlignSymmetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; AlignSymmetric &gt;</type>
      <name>AlignSymmetrics</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a177ce1d54e6e7c85e4b2f9eb4b4f2652</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AllBipartitePairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>AllBipartitePairContainer_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ListPairContainer_8h" name="ListPairContainer.h" local="no" imported="no">IMP/container/ListPairContainer.h</includes>
    <includes id="PairContainerSet_8h" name="PairContainerSet.h" local="no" imported="no">IMP/container/PairContainerSet.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::container::AllBipartitePairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AllBipartitePairContainer &gt; &gt;</type>
      <name>AllBipartitePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab761781244b1ebd5d74353c713690db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AllBipartitePairContainer &gt; &gt;</type>
      <name>AllBipartitePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a17ff3bd4406299bc873b413b9c20d52d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AllPairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>AllPairContainer_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ListPairContainer_8h" name="ListPairContainer.h" local="no" imported="no">IMP/container/ListPairContainer.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::container::AllPairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AllPairContainer &gt; &gt;</type>
      <name>AllPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a76a6c8982bed2236c7f99e7451c745f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AllPairContainer &gt; &gt;</type>
      <name>AllPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aacad5b2d3a0593e544fd63ef8d2e575c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AmbiguousNOERestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>AmbiguousNOERestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <class kind="class">IMP::isd::AmbiguousNOERestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>AmbiguousRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>AmbiguousRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::isd::AmbiguousRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>analysis.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>analysis_8h</filename>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="function">
      <type>Assignments</type>
      <name>get_state_clusters</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a7b094ee7dac304dfc212772818a9ba04</anchor>
      <arglist>(const Subset &amp;subset, const Assignments &amp;states, ParticleStatesTable *pst, double resolution)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>anchor_graph.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>anchor__graph_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="yes" imported="no">FittingSolutionRecord.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::multifit::ProbabilisticAnchorGraph</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProbabilisticAnchorGraph &gt; &gt;</type>
      <name>ProbabilisticAnchorGraphs</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aea7b9650d8e2c7cdb2637f980cc3de8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProbabilisticAnchorGraph &gt; &gt;</type>
      <name>ProbabilisticAnchorGraphsTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a25826ed1f67bba53f060e30e6a533c63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>anchor_utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>anchor__utilities_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="DataPointsAssignment_8h" name="DataPointsAssignment.h" local="yes" imported="no">DataPointsAssignment.h</includes>
    <includes id="anchors__reader_8h" name="anchors_reader.h" local="yes" imported="no">anchors_reader.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>IntsList</type>
      <name>get_anchor_indices_matching_secondary_structure</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a173eff7add1e1652a69ce9c1365ddf2f</anchor>
      <arglist>(const AnchorsData &amp;ad, const atom::SecondaryStructureResidues &amp;ssrs, Float max_rmsd=0.7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_anchors_for_density</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af5cfce601c0bc38d4fd668dec337b3f4</anchor>
      <arglist>(em::DensityMap *dmap, int number_of_means, float density_threshold, std::string pdb_filename, std::string cmm_filename, std::string seg_filename, std::string txt_filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>anchors_reader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>anchors__reader_8h</filename>
    <includes id="SecondaryStructureResidue_8h" name="SecondaryStructureResidue.h" local="no" imported="no">IMP/atom/SecondaryStructureResidue.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="DataPointsAssignment_8h" name="DataPointsAssignment.h" local="yes" imported="no">DataPointsAssignment.h</includes>
    <class kind="class">IMP::multifit::AnchorsData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; AnchorsData &gt;</type>
      <name>AnchorsDataList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a36f015b797d0053d39ac1ba53928bd7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnchorToCylindricalPorePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>AnchorToCylindricalPorePairScore_8h</filename>
    <includes id="SlabWithCylindricalPore_8h" name="SlabWithCylindricalPore.h" local="yes" imported="no">SlabWithCylindricalPore.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="score__functor_2Harmonic_8h" name="score_functor/Harmonic.h" local="no" imported="no">IMP/score_functor/Harmonic.h</includes>
    <class kind="class">IMP::npctransport::AnchorToCylidnricalPorePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>angle_decorators.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>angle__decorators_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Angle</class>
    <class kind="class">IMP::atom::Dihedral</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>AngleRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>AngleRestraint_8h</filename>
    <includes id="AngleTripletScore_8h" name="AngleTripletScore.h" local="yes" imported="no">AngleTripletScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="TripletRestraint_8h" name="TripletRestraint.h" local="no" imported="no">IMP/core/TripletRestraint.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::AngleRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>AngleSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>AngleSingletonScore_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::atom::AngleSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AngleSingletonScore &gt; &gt;</type>
      <name>AngleSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3781207e6f4e06c17fee7d675b8722a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AngleSingletonScore &gt; &gt;</type>
      <name>AngleSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a941da35b55a8212342384e0e28921e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AngleTripletScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>AngleTripletScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <class kind="class">IMP::core::AngleTripletScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Array.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Array_8h</filename>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="yes" imported="no">comparison_macros.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="yes" imported="no">hash_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="yes" imported="no">check_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <class kind="class">IMP::Array</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>Assignment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>Assignment_8h</filename>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="ConstVector_8h" name="ConstVector.h" local="no" imported="no">IMP/ConstVector.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <class kind="class">IMP::domino::Assignment</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Assignment &gt;</type>
      <name>Assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aafae17b45c6d2fe87c2bef10853d98ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assignment_containers.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>assignment__containers_8h</filename>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Order_8h" name="Order.h" local="yes" imported="no">Order.h</includes>
    <includes id="subset__scores_8h" name="subset_scores.h" local="yes" imported="no">subset_scores.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <includes id="metric__clustering_8h" name="metric_clustering.h" local="no" imported="no">IMP/statistics/metric_clustering.h</includes>
    <class kind="class">IMP::domino::AssignmentContainer</class>
    <class kind="class">IMP::domino::CappedAssignmentContainer</class>
    <class kind="class">IMP::domino::HeapAssignmentContainer</class>
    <class kind="class">IMP::domino::ListAssignmentContainer</class>
    <class kind="class">IMP::domino::PackedAssignmentContainer</class>
    <class kind="class">IMP::domino::RangeViewAssignmentContainer</class>
    <class kind="class">IMP::domino::ReadAssignmentContainer</class>
    <class kind="class">IMP::domino::ReadHDF5AssignmentContainer</class>
    <class kind="class">IMP::domino::SampleAssignmentContainer</class>
    <class kind="class">IMP::domino::WriteAssignmentContainer</class>
    <class kind="class">IMP::domino::WriteHDF5AssignmentContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AssignmentContainer &gt; &gt;</type>
      <name>AssignmentContainers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a6cfca68865188cc1d2e53b33c52e9af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AssignmentContainer &gt; &gt;</type>
      <name>AssignmentContainersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>adf0811b02a04625cd377a12e53fa0b7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>assignment_tables.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>assignment__tables_8h</filename>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="yes" imported="no">subset_filters.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="assignment__containers_8h" name="assignment_containers.h" local="yes" imported="no">assignment_containers.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <class kind="class">IMP::domino::AssignmentsTable</class>
    <class kind="class">IMP::domino::BranchAndBoundAssignmentsTable</class>
    <class kind="class">IMP::domino::ListAssignmentsTable</class>
    <class kind="class">IMP::domino::RecursiveAssignmentsTable</class>
    <class kind="class">IMP::domino::SimpleAssignmentsTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AssignmentsTable &gt; &gt;</type>
      <name>AssignmentsTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a28315e6ca9b2b1236a0b635d620118ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AssignmentsTable &gt; &gt;</type>
      <name>AssignmentsTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ae6aa74f5ce4756f94bf4d6e75344d47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_order</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0f43ef4b4efed8a9481e65694ce3fadb</anchor>
      <arglist>(const Subset &amp;s, const SubsetFilterTables &amp;sft)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>associations.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>associations_8h</filename>
    <includes id="links_8h" name="links.h" local="yes" imported="no">links.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>atom/Atom.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2Atom_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="element_8h" name="element.h" local="yes" imported="no">element.h</includes>
    <includes id="core_2utility_8h" name="core/utility.h" local="no" imported="no">IMP/core/utility.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::atom::Atom</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; AtomType &gt;</type>
      <name>AtomTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa9508a06c406ba18afe3312d33384318</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AtomType</type>
      <name>add_atom_type</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a02a38fbf0485b7d9642be56a9ee6bdc1</anchor>
      <arglist>(std::string name, Element e)</arglist>
    </member>
    <member kind="function">
      <type>Atom</type>
      <name>get_atom</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a899927712a6b9ae00aa8875407f5311a</anchor>
      <arglist>(Residue rd, AtomType at)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_atom_type_exists</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa58a2e5af4c746151822c5188873f7fb</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>Residue</type>
      <name>get_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b9a562a6a9548c3e85047d8fe53183d</anchor>
      <arglist>(Atom d, bool nothrow=false)</arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_CA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2f312cc4e3aa5febaad48402fc159d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_N</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab4bfd46e74935ae8dd65cab7a9200de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_UNKNOWN</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afcefa4f848ed0a61a61c1252c933fa43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Atom.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Atom_8h</filename>
    <includes id="AngleSingletonScore_8h" name="AngleSingletonScore.h" local="no" imported="no">IMP/atom/AngleSingletonScore.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="BerendsenThermostatOptimizerState_8h" name="BerendsenThermostatOptimizerState.h" local="no" imported="no">IMP/atom/BerendsenThermostatOptimizerState.h</includes>
    <includes id="BondEndpointsRefiner_8h" name="BondEndpointsRefiner.h" local="no" imported="no">IMP/atom/BondEndpointsRefiner.h</includes>
    <includes id="BondPairContainer_8h" name="BondPairContainer.h" local="no" imported="no">IMP/atom/BondPairContainer.h</includes>
    <includes id="BondSingletonScore_8h" name="BondSingletonScore.h" local="no" imported="no">IMP/atom/BondSingletonScore.h</includes>
    <includes id="BondedPairFilter_8h" name="BondedPairFilter.h" local="no" imported="no">IMP/atom/BondedPairFilter.h</includes>
    <includes id="BrownianDynamics_8h" name="BrownianDynamics.h" local="no" imported="no">IMP/atom/BrownianDynamics.h</includes>
    <includes id="BrownianDynamicsTAMD_8h" name="BrownianDynamicsTAMD.h" local="no" imported="no">IMP/atom/BrownianDynamicsTAMD.h</includes>
    <includes id="CAAngleRestraint_8h" name="CAAngleRestraint.h" local="no" imported="no">IMP/atom/CAAngleRestraint.h</includes>
    <includes id="CADihedralRestraint_8h" name="CADihedralRestraint.h" local="no" imported="no">IMP/atom/CADihedralRestraint.h</includes>
    <includes id="CHARMMAtom_8h" name="CHARMMAtom.h" local="no" imported="no">IMP/atom/CHARMMAtom.h</includes>
    <includes id="CHARMMParameters_8h" name="CHARMMParameters.h" local="no" imported="no">IMP/atom/CHARMMParameters.h</includes>
    <includes id="CHARMMStereochemistryRestraint_8h" name="CHARMMStereochemistryRestraint.h" local="no" imported="no">IMP/atom/CHARMMStereochemistryRestraint.h</includes>
    <includes id="CenterOfMass_8h" name="CenterOfMass.h" local="no" imported="no">IMP/atom/CenterOfMass.h</includes>
    <includes id="Chain_8h" name="Chain.h" local="no" imported="no">IMP/atom/Chain.h</includes>
    <includes id="Charged_8h" name="Charged.h" local="no" imported="no">IMP/atom/Charged.h</includes>
    <includes id="Copy_8h" name="Copy.h" local="no" imported="no">IMP/atom/Copy.h</includes>
    <includes id="CoulombPairScore_8h" name="CoulombPairScore.h" local="no" imported="no">IMP/atom/CoulombPairScore.h</includes>
    <includes id="CoverBond_8h" name="CoverBond.h" local="no" imported="no">IMP/atom/CoverBond.h</includes>
    <includes id="Diffusion_8h" name="Diffusion.h" local="no" imported="no">IMP/atom/Diffusion.h</includes>
    <includes id="DihedralSingletonScore_8h" name="DihedralSingletonScore.h" local="no" imported="no">IMP/atom/DihedralSingletonScore.h</includes>
    <includes id="Domain_8h" name="Domain.h" local="no" imported="no">IMP/atom/Domain.h</includes>
    <includes id="DopePairScore_8h" name="DopePairScore.h" local="no" imported="no">IMP/atom/DopePairScore.h</includes>
    <includes id="EzRestraint_8h" name="EzRestraint.h" local="no" imported="no">IMP/atom/EzRestraint.h</includes>
    <includes id="ForceFieldParameters_8h" name="ForceFieldParameters.h" local="no" imported="no">IMP/atom/ForceFieldParameters.h</includes>
    <includes id="Fragment_8h" name="Fragment.h" local="no" imported="no">IMP/atom/Fragment.h</includes>
    <includes id="HelixRestraint_8h" name="HelixRestraint.h" local="no" imported="no">IMP/atom/HelixRestraint.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="ImproperSingletonScore_8h" name="ImproperSingletonScore.h" local="no" imported="no">IMP/atom/ImproperSingletonScore.h</includes>
    <includes id="LangevinThermostatOptimizerState_8h" name="LangevinThermostatOptimizerState.h" local="no" imported="no">IMP/atom/LangevinThermostatOptimizerState.h</includes>
    <includes id="LennardJones_8h" name="LennardJones.h" local="no" imported="no">IMP/atom/LennardJones.h</includes>
    <includes id="LennardJonesPairScore_8h" name="LennardJonesPairScore.h" local="no" imported="no">IMP/atom/LennardJonesPairScore.h</includes>
    <includes id="LoopStatisticalPairScore_8h" name="LoopStatisticalPairScore.h" local="no" imported="no">IMP/atom/LoopStatisticalPairScore.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="atom_2MolecularDynamics_8h" name="atom/MolecularDynamics.h" local="no" imported="no">IMP/atom/MolecularDynamics.h</includes>
    <includes id="Molecule_8h" name="Molecule.h" local="no" imported="no">IMP/atom/Molecule.h</includes>
    <includes id="OrientedSoapPairScore_8h" name="OrientedSoapPairScore.h" local="no" imported="no">IMP/atom/OrientedSoapPairScore.h</includes>
    <includes id="RemoveRigidMotionOptimizerState_8h" name="RemoveRigidMotionOptimizerState.h" local="no" imported="no">IMP/atom/RemoveRigidMotionOptimizerState.h</includes>
    <includes id="RemoveTranslationOptimizerState_8h" name="RemoveTranslationOptimizerState.h" local="no" imported="no">IMP/atom/RemoveTranslationOptimizerState.h</includes>
    <includes id="Representation_8h" name="Representation.h" local="no" imported="no">IMP/atom/Representation.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="no" imported="no">IMP/atom/Residue.h</includes>
    <includes id="SameResiduePairFilter_8h" name="SameResiduePairFilter.h" local="no" imported="no">IMP/atom/SameResiduePairFilter.h</includes>
    <includes id="SecondaryStructureResidue_8h" name="SecondaryStructureResidue.h" local="no" imported="no">IMP/atom/SecondaryStructureResidue.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="no" imported="no">IMP/atom/Selection.h</includes>
    <includes id="Simulator_8h" name="Simulator.h" local="no" imported="no">IMP/atom/Simulator.h</includes>
    <includes id="SoapPairFilter_8h" name="SoapPairFilter.h" local="no" imported="no">IMP/atom/SoapPairFilter.h</includes>
    <includes id="State_8h" name="State.h" local="no" imported="no">IMP/atom/State.h</includes>
    <includes id="StereochemistryPairFilter_8h" name="StereochemistryPairFilter.h" local="no" imported="no">IMP/atom/StereochemistryPairFilter.h</includes>
    <includes id="StructureSource_8h" name="StructureSource.h" local="no" imported="no">IMP/atom/StructureSource.h</includes>
    <includes id="TAMDCentroid_8h" name="TAMDCentroid.h" local="no" imported="no">IMP/atom/TAMDCentroid.h</includes>
    <includes id="TAMDParticle_8h" name="TAMDParticle.h" local="no" imported="no">IMP/atom/TAMDParticle.h</includes>
    <includes id="VelocityScalingOptimizerState_8h" name="VelocityScalingOptimizerState.h" local="no" imported="no">IMP/atom/VelocityScalingOptimizerState.h</includes>
    <includes id="alignment_8h" name="alignment.h" local="no" imported="no">IMP/atom/alignment.h</includes>
    <includes id="angle__decorators_8h" name="angle_decorators.h" local="no" imported="no">IMP/atom/angle_decorators.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="no" imported="no">IMP/atom/atom_macros.h</includes>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="no" imported="no">IMP/atom/bond_decorators.h</includes>
    <includes id="bond__graph_8h" name="bond_graph.h" local="no" imported="no">IMP/atom/bond_graph.h</includes>
    <includes id="charmm__segment__topology_8h" name="charmm_segment_topology.h" local="no" imported="no">IMP/atom/charmm_segment_topology.h</includes>
    <includes id="charmm__topology_8h" name="charmm_topology.h" local="no" imported="no">IMP/atom/charmm_topology.h</includes>
    <includes id="atom_2constants_8h" name="atom/constants.h" local="no" imported="no">IMP/atom/constants.h</includes>
    <includes id="dihedrals_8h" name="dihedrals.h" local="no" imported="no">IMP/atom/dihedrals.h</includes>
    <includes id="atom_2distance_8h" name="atom/distance.h" local="no" imported="no">IMP/atom/distance.h</includes>
    <includes id="element_8h" name="element.h" local="no" imported="no">IMP/atom/element.h</includes>
    <includes id="estimates_8h" name="estimates.h" local="no" imported="no">IMP/atom/estimates.h</includes>
    <includes id="force__fields_8h" name="force_fields.h" local="no" imported="no">IMP/atom/force_fields.h</includes>
    <includes id="hierarchy__tools_8h" name="hierarchy_tools.h" local="no" imported="no">IMP/atom/hierarchy_tools.h</includes>
    <includes id="mmcif_8h" name="mmcif.h" local="no" imported="no">IMP/atom/mmcif.h</includes>
    <includes id="mol2_8h" name="mol2.h" local="no" imported="no">IMP/atom/mol2.h</includes>
    <includes id="pdb_8h" name="pdb.h" local="no" imported="no">IMP/atom/pdb.h</includes>
    <includes id="protein__ligand__score_8h" name="protein_ligand_score.h" local="no" imported="no">IMP/atom/protein_ligand_score.h</includes>
    <includes id="atom_2python__only_8h" name="atom/python_only.h" local="no" imported="no">IMP/atom/python_only.h</includes>
    <includes id="secondary__structure__reader_8h" name="secondary_structure_reader.h" local="no" imported="no">IMP/atom/secondary_structure_reader.h</includes>
    <includes id="smoothing__functions_8h" name="smoothing_functions.h" local="no" imported="no">IMP/atom/smoothing_functions.h</includes>
  </compound>
  <compound kind="file">
    <name>atom_io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>atom__io_8h</filename>
    <includes id="link__macros_8h" name="link_macros.h" local="yes" imported="no">link_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>adbc5eb9278e61f0a4449eb181cbd2a74</anchor>
      <arglist>(RMF::FileHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a9f63044bfe82f715e14e819e1ae3a2f4</anchor>
      <arglist>(RMF::NodeHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchy</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>afb3c4144b9161813668b971b21295c8e</anchor>
      <arglist>(RMF::FileHandle fh, atom::Hierarchy hs)</arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchies</type>
      <name>create_hierarchies</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a34bff2a310116bc205e199ae6442be5d</anchor>
      <arglist>(RMF::FileConstHandle fh, Model *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_hierarchies</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a5bc1f4e588466260be12aba4bac30255</anchor>
      <arglist>(RMF::FileConstHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom_links.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>atom__links_8h</filename>
    <includes id="HierarchyLoadLink_8h" name="HierarchyLoadLink.h" local="yes" imported="no">HierarchyLoadLink.h</includes>
    <includes id="HierarchySaveLink_8h" name="HierarchySaveLink.h" local="yes" imported="no">HierarchySaveLink.h</includes>
  </compound>
  <compound kind="file">
    <name>atom_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom__macros_8h</filename>
  </compound>
  <compound kind="file">
    <name>AtomicCrossLinkMSRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>AtomicCrossLinkMSRestraint_8h</filename>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::AtomicCrossLinkMSRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>AttributeDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>AttributeDistancePairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::spb::AttributeDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AttributeDistancePairScore &gt; &gt;</type>
      <name>AttributeDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a515daf5a237fc4ba71e58e58fbe2c33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AttributeDistancePairScore &gt; &gt;</type>
      <name>AttributeDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>adc6aa221bf61f3086177b6099cd3db7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AttributeOptimizer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>AttributeOptimizer_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="yes" imported="no">Optimizer.h</includes>
    <class kind="class">IMP::AttributeOptimizer</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AttributeOptimizer &gt; &gt;</type>
      <name>AttributeOptimizers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e57750edebd36bc6b31988e1ef05087</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AttributeOptimizer &gt; &gt;</type>
      <name>AttributeOptimizersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e87e522bbdb3efc23f0db9a16d0c7fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>automatic_parameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>automatic__parameters_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_close_pairs_range</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a17bebb9f71a3e88f728ab1143be6ced3</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_dump_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa174c1bd53dad496c36ddbf37489d850</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_frames_from_ns</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a69b7ae68cdd585c391d323f98618e2fc</anchor>
      <arglist>(double ns, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac7d10e7dd3edaec53eca4229c332dcaf</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_output_statistics_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae5bae0ea68f8773f9742ce7e84a423d9</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;assign, double time_step, double default_value_ns=1.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_statistics_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aeb94e10598ebff8e89e1e62f977d01fe</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;assign, double time_step, double default_value_ns=0.1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_time_step</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a921fab686a7875df90b021d0386c2bb3</anchor>
      <arglist>(double max_d_factor, double max_k, double min_radius, double min_range, double max_trans_relative_to_radius=0.1, double time_step_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_time_step</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a3067958671f46fc9b0b5f08c55f0efd7</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double max_trans_relative_to_radius=0.1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Avro2PBReader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>Avro2PBReader_8h</filename>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Avro2PBReader &gt;</type>
      <name>Avro2PBReaders</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a54793188ddf7661ff5fd6e4f3ffefc04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/BallMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2BallMover_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::BallMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>symmetry/BallMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/symmetry/</path>
    <filename>symmetry_2BallMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="algebra_8h" name="algebra.h" local="no" imported="no">IMP/algebra.h</includes>
    <class kind="class">IMP::symmetry::BallMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::symmetry</namespace>
  </compound>
  <compound kind="file">
    <name>base_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>base__macros_8h</filename>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="yes" imported="no">compiler_macros.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="yes" imported="no">hash_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="yes" imported="no">bracket_macros.h</includes>
    <includes id="swap__macros_8h" name="swap_macros.h" local="yes" imported="no">swap_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="yes" imported="no">object_macros.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="yes" imported="no">tuple_macros.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="yes" imported="no">comparison_macros.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <includes id="graph__macros_8h" name="graph_macros.h" local="yes" imported="no">graph_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="yes" imported="no">ref_counted_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="yes" imported="no">warning_macros.h</includes>
    <includes id="doxygen__macros_8h" name="doxygen_macros.h" local="yes" imported="no">doxygen_macros.h</includes>
    <includes id="swig__macros_8h" name="swig_macros.h" local="yes" imported="no">swig_macros.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>base_types.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>base__types_8h</filename>
    <includes id="Key_8h" name="Key.h" local="yes" imported="no">Key.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Array_8h" name="Array.h" local="no" imported="no">IMP/Array.h</includes>
    <includes id="Index_8h" name="Index.h" local="no" imported="no">IMP/Index.h</includes>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Container &gt; &gt;</type>
      <name>Containers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a253000b1c7f4d3350c8ef4c27142f469</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Container &gt; &gt;</type>
      <name>ContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0e4e1276d7355dedce0890d6a99d283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ModelObject &gt; &gt;</type>
      <name>ModelObjects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a95391c7f8ed4c97fe8fe485480cd9f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ModelObject &gt; &gt;</type>
      <name>ModelObjectsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a1c6cbd237b82ff951283c6dda35ad276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Model &gt; &gt;</type>
      <name>Models</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5bc8f1104b2e2a3b0581cd72ab92f607</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Model &gt; &gt;</type>
      <name>ModelsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7f3207df6e931de8bef7ad5912c2d073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OptimizerState &gt; &gt;</type>
      <name>OptimizerStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad0dfe95ed61ec535d0c8a562691cdc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OptimizerState &gt; &gt;</type>
      <name>OptimizerStatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae37dac59213501af700e07ac00151335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairContainer &gt; &gt;</type>
      <name>PairContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e2a43cf872cf753deca1701c9cf5d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairContainer &gt; &gt;</type>
      <name>PairContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abe4de15a5d46ca6165940dd94dda4eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairModifier &gt; &gt;</type>
      <name>PairModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a25df1381ef02cccfe4ad0f43b46a49d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairModifier &gt; &gt;</type>
      <name>PairModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e8f23dd8fcfa1b3a2255b666be7e205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairPredicate &gt; &gt;</type>
      <name>PairPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a52f189fe35231c2c3f8599ef839de572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairPredicate &gt; &gt;</type>
      <name>PairPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aad7fad1d9dcb13dbe39133c7f7961a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairScore &gt; &gt;</type>
      <name>PairScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab28674a5ec2a50421ddc21b3f9a7ce2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairScore &gt; &gt;</type>
      <name>PairScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a128bfcd14abee62ff2f06e6beb18171a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Index&lt; ParticleIndexTag &gt;</type>
      <name>ParticleIndex</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0fb12cf46147695b0365cfb8566dc7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexPair, std::allocator&lt; ParticleIndexPair &gt; &gt;</type>
      <name>ParticleIndexPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7f5bc4971dca3cc2c665c127a1138d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexQuad, std::allocator&lt; ParticleIndexQuad &gt; &gt;</type>
      <name>ParticleIndexQuads</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab6581f6a58b7b7da70ad126dfe33c6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexTriplet, std::allocator&lt; ParticleIndexTriplet &gt; &gt;</type>
      <name>ParticleIndexTriplets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a52871bad76ac983ebcede8e82735c760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 2, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticlePair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a86eb3979a08bd365b0f3bfb2ab1debd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticlePair &gt;</type>
      <name>ParticlePairsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af2c5498b9c239d1de81615cd3f862ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 4, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticleQuad</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3bea39c93d3cd27860781d0c060a17cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleQuad &gt;</type>
      <name>ParticleQuadsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>affef61fd70b4c50734740e15dac00ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 3, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticleTriplet</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a613d15b3ae8dfe0c7a535d7250020a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleTriplet &gt;</type>
      <name>ParticleTripletsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6a1c662c3711e134a30418dede0e2add</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadContainer &gt; &gt;</type>
      <name>QuadContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad9d81ff55d9811a67488d33cdc0235c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadContainer &gt; &gt;</type>
      <name>QuadContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afbcf03e9967e7b8b968fd2b755d7eb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadModifier &gt; &gt;</type>
      <name>QuadModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab8c544ce0065e188126d720a19e834e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadModifier &gt; &gt;</type>
      <name>QuadModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae1b3066661a985a2aac2867c3da8ab5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadPredicate &gt; &gt;</type>
      <name>QuadPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2cbcb756440e989cd634504fd30011a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadPredicate &gt; &gt;</type>
      <name>QuadPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a18919cd1d353842ec23e3640672db6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadScore &gt; &gt;</type>
      <name>QuadScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afc25eb9ed045e9e3379989a19cd07bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadScore &gt; &gt;</type>
      <name>QuadScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af85d6e7b0482a34035bd91354655eeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Restraint &gt; &gt;</type>
      <name>Restraints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a349823de4c765f28451fa168fe226a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RestraintSet &gt; &gt;</type>
      <name>RestraintSets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aed52c0a9d7e77fe8dcee78162bd06229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RestraintSet &gt; &gt;</type>
      <name>RestraintSetsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad13234811d85751c6ffc38adc2663c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Restraint &gt; &gt;</type>
      <name>RestraintsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8ee8250078bde97153d08a7566bbafa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoreState &gt; &gt;</type>
      <name>ScoreStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a82ae113817a9eebee046d9ee3d9cf3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoreState &gt; &gt;</type>
      <name>ScoreStatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a17bd0c7aa6226512d217a90d34d55120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoringFunction &gt; &gt;</type>
      <name>ScoringFunctions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a82ca81a62ef47c8bc9b36c09bb3d737e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoringFunction &gt; &gt;</type>
      <name>ScoringFunctionsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a46cb27970b559904b9b5c88d0a6e1bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonContainer &gt; &gt;</type>
      <name>SingletonContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a70a3a03933a96ba8bd26c5bb20270fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonContainer &gt; &gt;</type>
      <name>SingletonContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>adfc8554c95a6a0d56a76627d622e92f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonModifier &gt; &gt;</type>
      <name>SingletonModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9f2bad21c076749b31f9e601d8f3c61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonModifier &gt; &gt;</type>
      <name>SingletonModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e7ef4f734830298d33a4fd9c67c896f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonPredicate &gt; &gt;</type>
      <name>SingletonPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a1b04ea5f7281a34e52f4a098485a9748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonPredicate &gt; &gt;</type>
      <name>SingletonPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac2e3e22a239c2058b8502626f2d8b9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonScore &gt; &gt;</type>
      <name>SingletonScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a543a59dfaa86351d39cda5c407af0a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonScore &gt; &gt;</type>
      <name>SingletonScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2c9b37a40b435b8a12f9250798096ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletContainer &gt; &gt;</type>
      <name>TripletContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a06542f6867bd646aae10f4fed199abb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletContainer &gt; &gt;</type>
      <name>TripletContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a320cd612f335b70579322e4c037f246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletModifier &gt; &gt;</type>
      <name>TripletModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7a2c92ce0cf32fe4bb3d69e01546cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletModifier &gt; &gt;</type>
      <name>TripletModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9f9348e4565e9375335543c82065c60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletPredicate &gt; &gt;</type>
      <name>TripletPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa4de228b810435d80b80fef2ca565ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletPredicate &gt; &gt;</type>
      <name>TripletPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a747b726f241c73f40a5da258419d6c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletScore &gt; &gt;</type>
      <name>TripletScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4d7c637de479254a34f681424421b857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletScore &gt; &gt;</type>
      <name>TripletScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a86b6d21a3b8496a2b3cc3f4a74299c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 0 &gt;</type>
      <name>FloatKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7f88df80a1131e13126e45aaf012b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatKey &gt;</type>
      <name>FloatKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa58de330503de7d5a2671d1925209328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 1 &gt;</type>
      <name>IntKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9ae4b870a3737245489e7cc98a8161ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntKey &gt;</type>
      <name>IntKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9eabd7cb2478f5563bd996f74474f706</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 2 &gt;</type>
      <name>StringKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a1dcd350cf6cc040f7aa9df3f49b7c126</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; StringKey &gt;</type>
      <name>StringKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2656341d7c42c7059cde7e3ee900dd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 3 &gt;</type>
      <name>ParticleIndexKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abb9ce47d93f56ea4b3c8586c1bf88236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexKey &gt;</type>
      <name>ParticleIndexKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6dd7aa69894a4e1791ca5f8fb9f9847d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 4 &gt;</type>
      <name>ObjectKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9622886823cc1020a92d77dc19254009</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ObjectKey &gt;</type>
      <name>ObjectKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6f8f15bea686243f5e25fc779aa0bf13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 9 &gt;</type>
      <name>WeakObjectKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae019e5461e9249451e468ea04c73ff94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; WeakObjectKey &gt;</type>
      <name>WeakObjectKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2f367744c647bf86269e40bd93e15c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 5 &gt;</type>
      <name>IntsKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad40172c67ea4a41278354a1d91f55327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntsKey &gt;</type>
      <name>IntsKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a40ae652bc6a544221acbae9a93981b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 10 &gt;</type>
      <name>FloatsKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aeeb4afd1b5d80ebccb56bf94f1d0265c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatsKey &gt;</type>
      <name>FloatsKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9db1a96b9ea2d2d3ddd628db2028af42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 6 &gt;</type>
      <name>ParticleIndexesKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad7cd65bb13a5ac6155dcbb9197ccf0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexesKey &gt;</type>
      <name>ParticleIndexesKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5b0cd35dfd1a02e09299f505dc466b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 7 &gt;</type>
      <name>ObjectsKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4388c1b26171a15bd7242da042d95ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ObjectsKey &gt;</type>
      <name>ObjectsKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa3bc1b47fd7591acce3b1a9b164c9e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 8 &gt;</type>
      <name>ModelKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af7b40bdd71bc048d12d81a4722635335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ModelKey &gt;</type>
      <name>ModelKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5874c6153fe6bdce3f363ae193d4aad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 11 &gt;</type>
      <name>TriggerKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>acb262d8a40899348946ed31fa01a104a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; TriggerKey &gt;</type>
      <name>TriggerKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad7be03cf68296e2fd12026e2e49087b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 12 &gt;</type>
      <name>SparseStringKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac70df6b5eaa6034aced0227d0f35b6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SparseStringKey &gt;</type>
      <name>SparseStringKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a82de116f6b3e75c15ae05903aa5d2c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 13 &gt;</type>
      <name>SparseIntKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aceb959727f39c83fc7d96920a84fc44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SparseIntKey &gt;</type>
      <name>SparseIntKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>adad87765784c7f244e85b8707e612a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 14 &gt;</type>
      <name>SparseFloatKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad218c4eeeeed589d0ce663df0a1ff581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SparseFloatKey &gt;</type>
      <name>SparseFloatKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afb558eca7e933e3cc01eaa5f12b99217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 15 &gt;</type>
      <name>SparseParticleIndexKey</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8b3d088e6c2ea5409efd944989ecb83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SparseParticleIndexKey &gt;</type>
      <name>SparseParticleIndexKeys</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>adce3e52d3703667590287c1f1caef0ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BayesEM3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>BayesEM3D_8h</filename>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="no" imported="no">IMP/em/KernelParameters.h</includes>
    <includes id="MRCReaderWriter_8h" name="MRCReaderWriter.h" local="no" imported="no">IMP/em/MRCReaderWriter.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a97f77317e298df3b4573ca3907c66638</anchor>
      <arglist>(const DensityMap *em1, const DensityMap *em2)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>bayesem3d_get_cumulative_sum</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7c137733471276a4bec62dd3614c3849</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; double, double &gt;</type>
      <name>bayesem3d_get_cumulative_sum_with_reference</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac260890ecbfef938c627e3fecc89aacb</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>bayesem3d_get_density_from_particle</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7e08fd743778d6b18b8e759bea705454</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution, const double window_size=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; double, int &gt;</type>
      <name>bayesem3d_get_distinct_and_counts</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aea9d3382eae88ebccecf5d47768eeb72</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_em_density_squared</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0fd16ec8233e9e763b995827b7496ffd</anchor>
      <arglist>(DensityMap *em, long number_of_voxels)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_logabssumexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a57e785a4088ec5176a7b0e24b2e7ae71</anchor>
      <arglist>(double x, double y, double sx, double sy)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_logabssumprodexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a430688703dec07bcd214cbfc3bb1fa1a</anchor>
      <arglist>(double x, double y, double wx, double wy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_logsumexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa3e0e6333ca4cf0b7b4d7a974dc71f17</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_logsumprodexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a2db0fd551bae9c033cae4d8c83485799</anchor>
      <arglist>(double x, double y, double wx, double wy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bayesem3d_get_normalized_intensities</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae027b772ce1eeb542809f08605b47679</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, algebra::Vector3Ds &gt;</type>
      <name>bayesem3d_get_score_and_derivative</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a247c0133e66b108ee7d36e98cea961c9</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution, double sigma, const double window_size=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>bayesem3d_get_value</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>acf93458d53bb786095f8fcfc32782929</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;pt, double mass_ii, const IMP::em::KernelParameters &amp;kps)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>bayesem3d_get_value_no_deriv</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7cc0ae516db501ad39635d0066092094</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;pt, double mass_ii, const IMP::em::KernelParameters &amp;kps)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_linear_interpolate</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a81f70ec8a459b19554dd3cc9501f5a66</anchor>
      <arglist>(const Floats &amp;x_data, const Floats &amp;y_data, double x, bool extrapolate)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bayesianem.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>bayesianem_8h</filename>
    <includes id="bayesianem_2GaussianEMRestraint_8h" name="bayesianem/GaussianEMRestraint.h" local="no" imported="no">IMP/bayesianem/GaussianEMRestraint.h</includes>
    <includes id="bayesianem_2utilities_8h" name="bayesianem/utilities.h" local="no" imported="no">IMP/bayesianem/utilities.h</includes>
  </compound>
  <compound kind="file">
    <name>benchmark.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>benchmark_8h</filename>
    <includes id="Profiler_8h" name="Profiler.h" local="no" imported="no">IMP/benchmark/Profiler.h</includes>
    <includes id="benchmark__macros_8h" name="benchmark_macros.h" local="no" imported="no">IMP/benchmark/benchmark_macros.h</includes>
    <includes id="benchmark_2utility_8h" name="benchmark/utility.h" local="no" imported="no">IMP/benchmark/utility.h</includes>
  </compound>
  <compound kind="file">
    <name>benchmark_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/benchmark/</path>
    <filename>benchmark__macros_8h</filename>
    <includes id="flags_8h" name="flags.h" local="no" imported="no">IMP/flags.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TIME</name>
      <anchorfile>benchmark__macros_8h.html</anchorfile>
      <anchor>a5be41233a2d8bf407504da84a88c38f8</anchor>
      <arglist>(block, timev)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TIME_N</name>
      <anchorfile>benchmark__macros_8h.html</anchorfile>
      <anchor>a05196ddae40012f8a7777b065c1ea045</anchor>
      <arglist>(block, timev, N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_WALLTIME</name>
      <anchorfile>benchmark__macros_8h.html</anchorfile>
      <anchor>a44f2dbf8cd7a42974f58baf375e79c75</anchor>
      <arglist>(block, timev)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BerendsenThermostatOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BerendsenThermostatOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::BerendsenThermostatOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BerendsenThermostatOptimizerState &gt; &gt;</type>
      <name>BerendsenThermostatOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a774a168400f1dbead3ca9769a7ac4dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BerendsenThermostatOptimizerState &gt; &gt;</type>
      <name>BerendsenThermostatOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5809551d48be0fc81a9cd66551ca4f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BipartitePairsStatisticsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>BipartitePairsStatisticsOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <class kind="class">IMP::npctransport::BipartitePairsStatisticsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BipartitePairsStatisticsOptimizerState &gt; &gt;</type>
      <name>BipartitePairsStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ab5a9ebf601515b3aa00f9d762522893d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BipartitePairsStatisticsOptimizerState &gt; &gt;</type>
      <name>BipartitePairsStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a839cae30351a60b49a17744f12f1df85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bivariate_functions.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>bivariate__functions_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Switching_8h" name="Switching.h" local="no" imported="no">IMP/isd/Switching.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::isd::BivariateFunction</class>
    <class kind="class">IMP::isd::Covariance1DFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>blame.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>blame_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>void</type>
      <name>assign_blame</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ae0adf8c625b9410b8fbcf490f7d46d9e</anchor>
      <arglist>(const RestraintsTemp &amp;rs, const ParticlesTemp &amp;ps, FloatKey attribute)</arglist>
    </member>
    <member kind="function">
      <type>display::Geometries</type>
      <name>create_blame_geometries</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aec2608fca14a0c657e461ed34b9f7317</anchor>
      <arglist>(const RestraintsTemp &amp;rs, const ParticlesTemp &amp;ps, double max=NO_MAX, std::string name=std::string())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BodyStatisticsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>BodyStatisticsOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <class kind="class">IMP::npctransport::BodyStatisticsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BodyStatisticsOptimizerState &gt; &gt;</type>
      <name>BodyStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0e824b76a53c0cdedb6f9179f6344b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BodyStatisticsOptimizerState &gt; &gt;</type>
      <name>BodyStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a20f8a3c3e4e66facd711bb39b4f481f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bond_decorators.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>bond__decorators_8h</filename>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="no" imported="no">IMP/display/primitive_geometries.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <class kind="class">IMP::atom::Bond</class>
    <class kind="class">IMP::atom::Bonded</class>
    <class kind="class">IMP::atom::BondGeometry</class>
    <class kind="class">IMP::atom::BondsGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gad928d4afc3de5646070a1a55499772d3</anchor>
      <arglist>(Bonded a, Bonded b, Int t)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga1c817f9827d6115fe10530ca349098fa</anchor>
      <arglist>(Bonded a, Bonded b, Bond o)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_custom_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga4434a119a32491177223b0fe0d6f7d6d</anchor>
      <arglist>(Bonded a, Bonded b, Float length, Float stiffness=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga53d105256db430c876b1a83c5a2786a4</anchor>
      <arglist>(Bond b)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>get_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gaf75358e1a709b3b9cf2153bf741b5efa</anchor>
      <arglist>(Bonded a, Bonded b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bond_graph.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>bond__graph_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <class kind="class">IMP::atom::BondGraph</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>BondedPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BondedPairFilter_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::atom::BondedPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondedPairFilter &gt; &gt;</type>
      <name>BondedPairFilters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af4dbdd86f7132fd0ad6cff521f6d5654</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondedPairFilter &gt; &gt;</type>
      <name>BondedPairFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5f0d861ac1d00c810187779e9c2619b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BondEndpointsRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BondEndpointsRefiner_8h</filename>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::atom::BondEndpointsRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondEndpointsRefiner &gt; &gt;</type>
      <name>BondEndpointsRefiners</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9c24e2eb00bf9e5f632f2ebecb6a82b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondEndpointsRefiner &gt; &gt;</type>
      <name>BondEndpointsRefinersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2a1d98c3e5602b47cf28cd59a48ffe56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BondPairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BondPairContainer_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <includes id="PairRestraint_8h" name="PairRestraint.h" local="no" imported="no">IMP/core/PairRestraint.h</includes>
    <class kind="class">IMP::atom::BondPairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondPairContainer &gt; &gt;</type>
      <name>BondPairContainers</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aba3eef5a64b7179db51682f0ab9e4da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondPairContainer &gt; &gt;</type>
      <name>BondPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a949f18a82b270a785328e1612800de4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BondSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BondSingletonScore_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::atom::BondSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondSingletonScore &gt; &gt;</type>
      <name>BondSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afdf802e05d9f77026b44ed1f13027b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondSingletonScore &gt; &gt;</type>
      <name>BondSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6e04a84744ddc9db0b6a4bfae06de276</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingBox3DSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>BoundingBox3DSingletonScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <class kind="class">IMP::core::GenericBoundingBox3DSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>GenericBoundingBox3DSingletonScore&lt; UnaryFunction &gt;</type>
      <name>BoundingBox3DSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab2c0619500bd423c7708b180c007424c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingBoxD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>BoundingBoxD_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::algebra::BoundingBoxD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 1 &gt;</type>
      <name>BoundingBox1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7eb3cac9d0dd97a605a803c3c1c9a7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox1D &gt;</type>
      <name>BoundingBox1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a994e2c2aae43e308fbc0d3d96790ca3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 2 &gt;</type>
      <name>BoundingBox2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1b14e4914ad97543ce955f34f2e61752</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox2D &gt;</type>
      <name>BoundingBox2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9b8e42fea79aa584d27dcadda8971ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>BoundingBox3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a185f2504357db1e9a24a03d26cec4079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox3D &gt;</type>
      <name>BoundingBox3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7541ed26cfd8dfb1a59719464a9a296d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 4 &gt;</type>
      <name>BoundingBox4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af9789e57e6fd60240be2f8bb4a9eabb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox4D &gt;</type>
      <name>BoundingBox4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3b43fb6706765c75adb324c7a6698a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 5 &gt;</type>
      <name>BoundingBox5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0ee9f049309eb6756f2ce1a6d7d4d3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox5D &gt;</type>
      <name>BoundingBox5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae1351d28391b466c818cfc811653d3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 6 &gt;</type>
      <name>BoundingBox6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abe8e949accf9c66f00dde408e29794ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox6D &gt;</type>
      <name>BoundingBox6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4c92d644283c16a846a05a881c59f7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>BoundingBoxKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4882602f27f726c425028dc402de4562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBoxKD &gt;</type>
      <name>BoundingBoxKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4797ce61c4a2e51db6953f360520eb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_cube_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afc7bf8d6b520c4abfed644b0eb7b1288</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>get_cube_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aecec6f9c6ca668315e6693773ac1c15f</anchor>
      <arglist>(unsigned int d, double radius)</arglist>
    </member>
    <member kind="function">
      <type>IntPairs</type>
      <name>get_edges</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a17aeb2742e60928cf687ef786530d44c</anchor>
      <arglist>(const BoundingBoxD&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_interiors_intersect</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab00c98290b98833acf41b7cdfaa1a701</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_intersection</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7d107e54c2f6c82ac6af484a62dba718</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_length</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a06143c1eada26a19c52b0727f8ab2028</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_union</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5884c6b32a247dd314db4c33b92508b8</anchor>
      <arglist>(BoundingBoxD&lt; D &gt; a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_unit_bounding_box_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aefe76b06844e6f12a5c08da8673517b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>get_unit_bounding_box_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa88ff22c3c9a9a857314e714d69dea62</anchor>
      <arglist>(unsigned int d)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_vertices</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae9bb408f4492a9ce063d095b02cd4cd1</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a94f280e1b578da3b5875fb157cfc7c68</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundingSphere3DSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>BoundingSphere3DSingletonScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <class kind="class">IMP::core::GenericBoundingSphere3DSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>GenericBoundingSphere3DSingletonScore&lt; UnaryFunction &gt;</type>
      <name>BoundingSphere3DSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a3ad985f8c117f94011a009be955d6eb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxedMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>BoxedMover_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <class kind="class">IMP::spb::BoxedMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>BoxSweepClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>BoxSweepClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="yes" imported="no">ClosePairsFinder.h</includes>
    <class kind="class">IMP::core::BoxSweepClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>bracket_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>bracket__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_BRACKET</name>
      <anchorfile>bracket__macros_8h.html</anchorfile>
      <anchor>aa1bb587f1e54d76ea084648d7e14e6cb</anchor>
      <arglist>(Value, Index, bounds_check_expr, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONST_BRACKET</name>
      <anchorfile>bracket__macros_8h.html</anchorfile>
      <anchor>aeb719a8336c2b79a95345c98a0d271bb</anchor>
      <arglist>(Value, Index, bounds_check_expr, expr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BranchAndBoundSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>BranchAndBoundSampler_8h</filename>
    <includes id="DiscreteSampler_8h" name="DiscreteSampler.h" local="yes" imported="no">DiscreteSampler.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::domino::BranchAndBoundSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BranchAndBoundSampler &gt; &gt;</type>
      <name>BranchAndBoundSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>affa641b60a18ca2289c3923d9a217e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BranchAndBoundSampler &gt; &gt;</type>
      <name>BranchAndBoundSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>adc6b77ae6ddc0090e52be8bbbce75176</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BrownianDynamics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BrownianDynamics_8h</filename>
    <includes id="Diffusion_8h" name="Diffusion.h" local="yes" imported="no">Diffusion.h</includes>
    <includes id="Simulator_8h" name="Simulator.h" local="yes" imported="no">Simulator.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::atom::BrownianDynamics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_time_step_estimate</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0e5dbe5aa039ab94bb0bdd9cb18bf91e</anchor>
      <arglist>(BrownianDynamics *bd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BrownianDynamicsTAMD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>BrownianDynamicsTAMD_8h</filename>
    <includes id="Diffusion_8h" name="Diffusion.h" local="yes" imported="no">Diffusion.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="BrownianDynamics_8h" name="BrownianDynamics.h" local="no" imported="no">IMP/atom/BrownianDynamics.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::atom::BrownianDynamicsTAMD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>BrownianDynamicsTAMDWithSlabSupport.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>BrownianDynamicsTAMDWithSlabSupport_8h</filename>
    <includes id="BrownianDynamicsTAMD_8h" name="BrownianDynamicsTAMD.h" local="no" imported="no">IMP/atom/BrownianDynamicsTAMD.h</includes>
    <class kind="class">IMP::npctransport::BrownianDynamicsTAMDWithSlabSupport</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>CAAngleRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CAAngleRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::atom::CAAngleRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>cache.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>cache_8h</filename>
    <includes id="check__macros_8h" name="check_macros.h" local="yes" imported="no">check_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="yes" imported="no">log_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="yes" imported="no">Vector.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">Array.h</includes>
    <class kind="class">IMP::LRUCache</class>
    <class kind="class">IMP::Memoizer</class>
    <class kind="class">IMP::SparseSymmetricPairMemoizer</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>CADihedralRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CADihedralRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::atom::CADihedralRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>CCDLoopClosure.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>CCDLoopClosure_8h</filename>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="no" imported="no">IMP/kinematics/revolute_joints.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::kinematics::CCDLoopClosure</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>CellMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>CellMover_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::spb::CellMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>CenterOfMass.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CenterOfMass_8h</filename>
    <includes id="CentroidOfRefined_8h" name="CentroidOfRefined.h" local="no" imported="no">IMP/core/CentroidOfRefined.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::atom::CenterOfMass</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>CentroidOfRefined.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>CentroidOfRefined_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="DerivativesToRefined_8h" name="DerivativesToRefined.h" local="yes" imported="no">DerivativesToRefined.h</includes>
    <class kind="class">IMP::core::Centroid</class>
    <class kind="class">IMP::core::CentroidOfRefined</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>cgal.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>cgal_8h</filename>
  </compound>
  <compound kind="file">
    <name>Chain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Chain_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::atom::Chain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ChainType &gt;</type>
      <name>ChainTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8d114daa6b6f3f037d897c75b4098593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Chain</type>
      <name>get_chain</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a13fb268fe2be9e83bbd9a1a2197499ef</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_chain_id</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a46482205ec4626a8fb4800a6bce46af7</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DNA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa39170558ade9ac48ba3b94b8161af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DPolypeptide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab6dbd6ee946499eaff703bb7793656d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DPolysaccharide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adec46a8b5cc98b9916f72edab2129c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>LPolypeptide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a529767a238ec55d47044f0ba5d1f72c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>LPolysaccharide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab19006ac46d5997994f8df82317aa091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Polydeoxyribonucleotide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2086774982c178a64fcf8a799838c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Polyribonucleotide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adf163b714b8264d370f734ce412b518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1919544ecbb7c05f31ee4512a6d3a940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>RNA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad11beec11ed3d037be4a2943d5cd9f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>UnknownChainType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2a14c889d613e67e902f303e33c6cfc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChainStatisticsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ChainStatisticsOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <class kind="class">IMP::npctransport::ChainStatisticsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ChainStatisticsOptimizerState &gt; &gt;</type>
      <name>ChainStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa55614066c76de54898df413a803dadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ChainStatisticsOptimizerState &gt; &gt;</type>
      <name>ChainStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>afdd6f87b107df6c7836740d61654fd5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Charged.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Charged_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::atom::Charged</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>charmm_segment_topology.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>charmm__segment__topology_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">IMP/Object.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="charmm__topology_8h" name="charmm_topology.h" local="yes" imported="no">charmm_topology.h</includes>
    <includes id="CHARMMParameters_8h" name="CHARMMParameters.h" local="yes" imported="no">CHARMMParameters.h</includes>
    <class kind="class">IMP::atom::CHARMMSegmentTopology</class>
    <class kind="class">IMP::atom::CHARMMTopology</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMSegmentTopology &gt; &gt;</type>
      <name>CHARMMSegmentTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad91086863d8f4be8da592f9d51ba4bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMSegmentTopology &gt; &gt;</type>
      <name>CHARMMSegmentTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab53b96f0e53b6ad75e326e42b4f92112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMTopology &gt; &gt;</type>
      <name>CHARMMTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4445668753dd56e233e90be3cc1c6569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMTopology &gt; &gt;</type>
      <name>CHARMMTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a801fffabe7cdbaaf7056173ae6a66e6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>charmm_topology.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>charmm__topology_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">IMP/Object.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <class kind="class">IMP::atom::CHARMMAtomTopology</class>
    <class kind="class">IMP::atom::CHARMMBondEndpoint</class>
    <class kind="class">IMP::atom::CHARMMConnection</class>
    <class kind="class">IMP::atom::CHARMMIdealResidueTopology</class>
    <class kind="class">IMP::atom::CHARMMInternalCoordinate</class>
    <class kind="class">IMP::atom::CHARMMPatch</class>
    <class kind="class">IMP::atom::CHARMMResidueTopology</class>
    <class kind="class">IMP::atom::CHARMMResidueTopologyBase</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMAngle &gt;</type>
      <name>CHARMMAngles</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af0d43e79b453208ace07301c37afd913</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMAtomTopology &gt;</type>
      <name>CHARMMAtomTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af6f743a211d1fc5c29d3c3850a2fab20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBondEndpoint &gt;</type>
      <name>CHARMMBondEndpoints</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5bf8f931680568d918d3b94ecbe4cf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBond &gt;</type>
      <name>CHARMMBonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8c11162408638705ce39905ba7ba1051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMDihedral &gt;</type>
      <name>CHARMMDihedrals</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abaa63821b46d509610cc38ea2c9e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMIdealResidueTopology &gt; &gt;</type>
      <name>CHARMMIdealResidueTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aafea5f281a5685c770d64557c9ea51eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMIdealResidueTopology &gt; &gt;</type>
      <name>CHARMMIdealResidueTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a621b297d670e1f541f65d73ff20e9077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMInternalCoordinate &gt;</type>
      <name>CHARMMInternalCoordinates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b4d7f993d9c5b592fdaa553662e74eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMPatch &gt; &gt;</type>
      <name>CHARMMPatches</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae874c014ac0b1b686345dc146e781d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMPatch &gt; &gt;</type>
      <name>CHARMMPatchesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9535a374fa40484b37efa87ea053cfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMResidueTopology &gt; &gt;</type>
      <name>CHARMMResidueTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae9eb283b8437503c1cc6b33765fc25a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMResidueTopology &gt; &gt;</type>
      <name>CHARMMResidueTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa5a2af7839a7b7d2dc7194ccf75e913c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMResidueTopologyBase &gt; &gt;</type>
      <name>CHARMMResidueTopologyBases</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a660c22cf47ce2baab841c9069f607fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMResidueTopologyBase &gt; &gt;</type>
      <name>CHARMMResidueTopologyBasesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a66674dde7eb6f57ca3039a2649fbb595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CHARMMAtom.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CHARMMAtom_8h</filename>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::atom::CHARMMAtom</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Atoms</type>
      <name>get_charmm_untyped_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8f2e62640647e36570c22b0328283a9c</anchor>
      <arglist>(Hierarchy hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_charmm_untyped_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab986bb0421e989ecdf45675e06e143fd</anchor>
      <arglist>(Hierarchy hierarchy)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CHARMMParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CHARMMParameters_8h</filename>
    <includes id="ForceFieldParameters_8h" name="ForceFieldParameters.h" local="yes" imported="no">ForceFieldParameters.h</includes>
    <includes id="charmm__topology_8h" name="charmm_topology.h" local="yes" imported="no">charmm_topology.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="struct">IMP::atom::CHARMMBondParameters</class>
    <class kind="struct">IMP::atom::CHARMMDihedralParameters</class>
    <class kind="class">IMP::atom::CHARMMParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBondParameters &gt;</type>
      <name>CHARMMBondParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af481b30cc3db20fceb70a0a5a3a117cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMDihedralParameters &gt;</type>
      <name>CHARMMDihedralParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a428ee3c1393001178bcb26d146d0e46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMParameters &gt; &gt;</type>
      <name>CHARMMParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab2ac400dd87af91dad6f2f15d4333c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMParameters &gt; &gt;</type>
      <name>CHARMMParametersListTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a29661c07982e76ea0761d58f02e73fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CHARMMParameters *</type>
      <name>get_all_atom_CHARMM_parameters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7150f310d5f5da0275933bfbe4c68d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CHARMMParameters *</type>
      <name>get_heavy_atom_CHARMM_parameters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4ab4248f452a6a9ccf43447d83f3e685</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CHARMMStereochemistryRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CHARMMStereochemistryRestraint_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="StereochemistryPairFilter_8h" name="StereochemistryPairFilter.h" local="yes" imported="no">StereochemistryPairFilter.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="charmm__segment__topology_8h" name="charmm_segment_topology.h" local="yes" imported="no">charmm_segment_topology.h</includes>
    <includes id="angle__decorators_8h" name="angle_decorators.h" local="yes" imported="no">angle_decorators.h</includes>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="BondSingletonScore_8h" name="BondSingletonScore.h" local="yes" imported="no">BondSingletonScore.h</includes>
    <includes id="AngleSingletonScore_8h" name="AngleSingletonScore.h" local="yes" imported="no">AngleSingletonScore.h</includes>
    <includes id="DihedralSingletonScore_8h" name="DihedralSingletonScore.h" local="yes" imported="no">DihedralSingletonScore.h</includes>
    <includes id="ImproperSingletonScore_8h" name="ImproperSingletonScore.h" local="yes" imported="no">ImproperSingletonScore.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="yes" imported="no">Selection.h</includes>
    <class kind="class">IMP::atom::CHARMMStereochemistryRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>check_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>check__macros_8h</filename>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">exception.h</includes>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="yes" imported="no">compiler_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_ALWAYS_CHECK</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a83db202d2f7f99176144eee23240d216</anchor>
      <arglist>(condition, message, exception_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CATCH_AND_TERMINATE</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>af8e549eebfdd268ef074cd7c33a15335</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CHECK_CODE</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>adf9031c9d00d7bed5984f4aaf18d2b27</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CHECK_OBJECT</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a29fd14fefb07bb724d0d0c3b18d34fe1</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_FAILURE</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>ad0763b7349d491c5da65827853fcf0f6</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IF_CHECK</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a4c0aa88e4de74dd2bf71021b73c0f1cf</anchor>
      <arglist>(level)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INTERNAL_CHECK</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a7da5a7a47e501dd0f8c82a207327a84f</anchor>
      <arglist>(expr, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INTERNAL_CHECK_FLOAT_EQUAL</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a28c6de0508d85a568f84b4d080cea7a3</anchor>
      <arglist>(expra, exprb, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INTERNAL_CHECK_VARIABLE</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>afd31b3fc9bcdbed12a84e36f7c7a66be</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_NOT_IMPLEMENTED</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a40cc1a5b60a8aecf674691e8794b20fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_THROW</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a3c15870e26f5e37943ea45dae5585a27</anchor>
      <arglist>(message, exception_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_USAGE_CHECK</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>aebcc20f55d66f2c78eecfc6312f64eb5</anchor>
      <arglist>(expr, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_USAGE_CHECK_FLOAT_EQUAL</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a881e42451062481d2b347c2bebae21eb</anchor>
      <arglist>(expra, exprb, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_USAGE_CHECK_VARIABLE</name>
      <anchorfile>check__macros_8h.html</anchorfile>
      <anchor>a829cb9abb927618c0268e64413f3dc2c</anchor>
      <arglist>(variable)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChecksScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ChecksScoreState_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::core::ChecksScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ChiFreeScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>ChiFreeScore_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <class kind="class">IMP::saxs::ChiFreeScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>ChildrenRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ChildrenRefiner_8h</filename>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::ChildrenRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ChiScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>ChiScore_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <class kind="class">IMP::saxs::ChiScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>ChiScoreLog.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>ChiScoreLog_8h</filename>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <class kind="class">IMP::saxs::ChiScoreLog</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>spb/ChiSquareMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb_2ChiSquareMetric_8h</filename>
    <includes id="algebra_8h" name="algebra.h" local="no" imported="no">IMP/algebra.h</includes>
    <includes id="Statistics_8h" name="Statistics.h" local="no" imported="no">IMP/statistics.h</includes>
    <class kind="class">IMP::spb::ChiSquareMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>statistics/ChiSquareMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>statistics_2ChiSquareMetric_8h</filename>
    <includes id="Metric_8h" name="Metric.h" local="no" imported="no">IMP/statistics/Metric.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::statistics::ChiSquareMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>CloseBipartitePairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>CloseBipartitePairContainer_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="no" imported="no">IMP/core/ClosePairsFinder.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ListPairContainer_8h" name="ListPairContainer.h" local="no" imported="no">IMP/container/ListPairContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <class kind="class">IMP::container::CloseBipartitePairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>ClosedCubicSpline.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ClosedCubicSpline_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::ClosedCubicSpline</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ClosePairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ClosePairContainer_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <class kind="class">IMP::container::ClosePairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ClosePairContainer &gt; &gt;</type>
      <name>ClosePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>adc910776e48140f0c8250f6fc1405541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ClosePairContainer &gt; &gt;</type>
      <name>ClosePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a9726bdac46baac6b428fde142a83c3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_slack_estimate</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac8965a95934fc142a9797c44fdc03d88</anchor>
      <arglist>(Model *m, ParticleIndexes ps, double upper_bound, double step, const RestraintsTemp &amp;restraints, bool derivatives, Optimizer *opt, ClosePairContainer *cpc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ClosePairsFinder_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="no" imported="no">IMP/model_object_helpers.h</includes>
    <class kind="class">IMP::core::ClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ClosePairsPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ClosePairsPairScore_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="RigidClosePairsFinder_8h" name="RigidClosePairsFinder.h" local="yes" imported="no">RigidClosePairsFinder.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::ClosePairsPairScore</class>
    <class kind="class">IMP::core::KClosePairsPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>cn_rmsd.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>cn__rmsd_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
  </compound>
  <compound kind="file">
    <name>cnmultifit.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>cnmultifit_8h</filename>
    <includes id="AlignSymmetric_8h" name="AlignSymmetric.h" local="no" imported="no">IMP/cnmultifit/AlignSymmetric.h</includes>
    <includes id="CnSymmAxisDetector_8h" name="CnSymmAxisDetector.h" local="no" imported="no">IMP/cnmultifit/CnSymmAxisDetector.h</includes>
    <includes id="MolCnSymmAxisDetector_8h" name="MolCnSymmAxisDetector.h" local="no" imported="no">IMP/cnmultifit/MolCnSymmAxisDetector.h</includes>
    <includes id="cn__rmsd_8h" name="cn_rmsd.h" local="no" imported="no">IMP/cnmultifit/cn_rmsd.h</includes>
    <includes id="symmetric__multifit_8h" name="symmetric_multifit.h" local="no" imported="no">IMP/cnmultifit/symmetric_multifit.h</includes>
    <includes id="symmetry__utils_8h" name="symmetry_utils.h" local="no" imported="no">IMP/cnmultifit/symmetry_utils.h</includes>
  </compound>
  <compound kind="file">
    <name>CnSymmAxisDetector.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>CnSymmAxisDetector_8h</filename>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <class kind="class">IMP::cnmultifit::CnSymmAxisDetector</class>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; CnSymmAxisDetector &gt;</type>
      <name>CnSymmAxisDetectors</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a4997abca587b8f9910e4728b5aa88d4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>coarse_molecule.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>coarse__molecule_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>atom::Hierarchy</type>
      <name>create_coarse_molecule_from_density</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3ae2f2b63f2b07f548e4fd095871d9b8</anchor>
      <arglist>(em::DensityMap *dmap, float dens_threshold, int num_beads, Model *mdl, float bead_radius)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoarseCC.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>CoarseCC_8h</filename>
    <includes id="exp_8h" name="exp.h" local="yes" imported="no">exp.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="SurfaceShellDensityMap_8h" name="SurfaceShellDensityMap.h" local="yes" imported="no">SurfaceShellDensityMap.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="masking_8h" name="masking.h" local="yes" imported="no">masking.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a31277ed67fe1b97b72bab4454be1e5af</anchor>
      <arglist>(const DensityMap *grid1, const DensityMap *grid2, double grid2_voxel_data_threshold, bool allow_padding=false, FloatPair norm_factors=FloatPair(0., 0.))</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_local_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8b478cdb42f4ae609c02907320cd5be1</anchor>
      <arglist>(const DensityMap *em_map, DensityMap *model_map, double voxel_data_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_score</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a29fc47f6607faab06b83b42ab6511aba</anchor>
      <arglist>(DensityMap *data, SampledDensityMap *model_map, double scalefactor, bool recalc_rms=true, bool resample=true, FloatPair norm_factors=FloatPair(0., 0.))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoarseCCatIntervals.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>CoarseCCatIntervals_8h</filename>
    <includes id="CoarseCC_8h" name="CoarseCC.h" local="yes" imported="no">CoarseCC.h</includes>
    <class kind="class">IMP::em::CoarseCCatIntervals</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>CoarseConvolution.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>CoarseConvolution_8h</filename>
    <includes id="exp_8h" name="exp.h" local="yes" imported="no">exp.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <class kind="class">IMP::em::CoarseConvolution</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionCrossSection.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>CollisionCrossSection_8h</filename>
    <includes id="ProjectionMask_8h" name="ProjectionMask.h" local="yes" imported="no">IMP/em2d/ProjectionMask.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="yes" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="project_8h" name="project.h" local="yes" imported="no">IMP/em2d/project.h</includes>
    <includes id="macros_8h" name="macros.h" local="yes" imported="no">IMP/macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::em2d::CollisionCrossSection</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CollisionCrossSection &gt; &gt;</type>
      <name>CollisionCrossSections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae6d211c9475a6dcb3056d88e5305005b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CollisionCrossSection &gt; &gt;</type>
      <name>CollisionCrossSectionsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aef65a4af40d204bd3397e55ed13fb417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Color.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>Color_8h</filename>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="no" imported="no">IMP/comparison_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <class kind="class">IMP::display::Color</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Color &gt;</type>
      <name>Colors</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7e55766fd29b9ed3a4f56f8a8e0ca070</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_display_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7139e3c2ffdf998ca304a7f01e6e237e</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_interpolated_rgb</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ada2a3156a15dd0217840bfc8675724d8</anchor>
      <arglist>(const Color &amp;a, const Color &amp;b, double f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_linear_color_map_value</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>af2fb3a798a826b59ab3fb354fe165f69</anchor>
      <arglist>(double min, double max, double value)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_jet_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a8873da49642f951ec86570656e98e908</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_hot_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae15042a6bb4f4548ec2876ceddfd3165</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_rgb_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a3ea1c11940d14e4ac022768e96514dff</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_gray_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>abd278fa3123b329c7fe1784b02f4ca31</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_gnuplot_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ad982e4a6182db9aa8157f3fc020da33f</anchor>
      <arglist>(double f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Colored.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>Colored_8h</filename>
    <includes id="Color_8h" name="Color.h" local="yes" imported="no">Color.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::display::Colored</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>CommonEndpointPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>CommonEndpointPairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::misc::CommonEndpointPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>comparison_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>comparison__macros_8h</filename>
    <includes id="warning__macros_8h" name="warning_macros.h" local="yes" imported="no">warning_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COMPARE_ONE</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>a4aff687b155ed2bb6cdc5398e49565ae</anchor>
      <arglist>(vara, varb)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SAFE_BOOL</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>a5347713edc1b16b67fbceff4bbff666d</anchor>
      <arglist>(Name, expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COMPARISONS</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>a0e9a8cb0a149387b165259a1080dccab</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COMPARISONS_1</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>a56ddd6d6a9292b8c53c795c68471711d</anchor>
      <arglist>(Name, field)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COMPARISONS_2</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>a52aa3e61bdedab02f71543e8cb1de955</anchor>
      <arglist>(Name, f0, f1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COMPARISONS_3</name>
      <anchorfile>comparison__macros_8h.html</anchorfile>
      <anchor>ae103d89f4ad0587574f85a4a0066b6d7</anchor>
      <arglist>(Name, f0, f1, f2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compiler_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>compiler__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_C_OPEN</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>a3ce4b9f5ba89013d77f41658e2527eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_C_OPEN_FLAG</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>abad1f936bf8866b00a215c90b3e039d2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_NO_SIDEEFFECTS</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>a8e071c961b550cc8acd29938d5ffc460</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_RESTRICT</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>a686613ba3c7f4d94a814c444d89e7868</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SWIG_FINAL</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>aa062d60201c1d9affc5b0a8192ef367f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_UNUSED_FUNCTION</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>aa7a5d73ce2a8fe9e3b1e34a82c767b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_WARN_UNUSED_RESULT</name>
      <anchorfile>compiler__macros_8h.html</anchorfile>
      <anchor>ad2867817ebb8a4ff9376f5ead7b6a259</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ComplementarityRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>ComplementarityRestraint_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="DataObject_8h" name="DataObject.h" local="no" imported="no">IMP/core/DataObject.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <class kind="class">IMP::multifit::ComplementarityRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>CompositeJoint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>CompositeJoint_8h</filename>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::kinematics::CompositeJoint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CompositeJoint &gt; &gt;</type>
      <name>CompositeJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a0bf3d3914b63901e185a5fc108dfc4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CompositeJoint &gt; &gt;</type>
      <name>CompositeJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aadfebfaf3e5c3fe6ebd70ee10aaa4085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>npc/CompositeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>npc_2CompositeRestraint_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::npc::CompositeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>pmi/CompositeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>pmi_2CompositeRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="class">IMP::pmi::CompositeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>pmi1/CompositeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>pmi1_2CompositeRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="class">IMP::pmi1::CompositeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>Cone3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Cone3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="yes" imported="no">Sphere3D.h</includes>
    <includes id="SpherePatch3D_8h" name="SpherePatch3D.h" local="yes" imported="no">SpherePatch3D.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="yes" imported="no">Plane3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="yes" imported="no">Segment3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <class kind="class">IMP::algebra::Cone3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Cone3D &gt;</type>
      <name>Cone3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac06ebe231231089e3fc7721863ae2ee0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Configuration.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Configuration_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <class kind="class">IMP::Configuration</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Configuration &gt; &gt;</type>
      <name>Configurations</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a12047f864f5db7afddc5cc49057de1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Configuration &gt; &gt;</type>
      <name>ConfigurationsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa6c19a7f0b57804ad95ba98c2a92828c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConfigurationSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ConfigurationSet_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="Configuration_8h" name="Configuration.h" local="yes" imported="no">Configuration.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="yes" imported="no">OptimizerState.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::ConfigurationSet</class>
    <class kind="class">IMP::SaveToConfigurationSetOptimizerState</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConfigurationSet &gt; &gt;</type>
      <name>ConfigurationSets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab2cf06098172860cad42b5e146275b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConfigurationSet &gt; &gt;</type>
      <name>ConfigurationSetsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a574121f72b5f322cba37f41ea0779c3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/ConjugateGradients.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2ConjugateGradients_8h</filename>
    <includes id="AttributeOptimizer_8h" name="AttributeOptimizer.h" local="no" imported="no">IMP/AttributeOptimizer.h</includes>
    <class kind="class">IMP::core::ConjugateGradients</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>gsl/ConjugateGradients.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/gsl/</path>
    <filename>gsl_2ConjugateGradients_8h</filename>
    <includes id="GSLOptimizer_8h" name="GSLOptimizer.h" local="yes" imported="no">GSLOptimizer.h</includes>
    <class kind="class">IMP::gsl::ConjugateGradients</class>
    <namespace>IMP</namespace>
    <namespace>IMP::gsl</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectingPairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ConnectingPairContainer_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::container::ConnectingPairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConnectingPairContainer &gt; &gt;</type>
      <name>ConnectingPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>abb8498caf7d99832c03382c2a71707bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConnectingPairContainer &gt; &gt;</type>
      <name>ConnectingPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a99c0bcf836fee3e3774b4dd6214dd32d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConnectivityRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ConnectivityRestraint_8h</filename>
    <includes id="DistanceRestraint_8h" name="DistanceRestraint.h" local="yes" imported="no">DistanceRestraint.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::core::ConnectivityRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>algebra/connolly_surface.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2connolly__surface_8h</filename>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="yes" imported="no">Sphere3D.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::algebra::ConnollySurfacePoint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ConnollySurfacePoint &gt;</type>
      <name>ConnollySurfacePoints</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a32ed4fa7e3d7afd2e60de17508aad26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ConnollySurfacePoints</type>
      <name>get_connolly_surface</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a64a1c062bcafe2d51a77853d06506938</anchor>
      <arglist>(const algebra::Sphere3Ds &amp;spheres, double density, double probe_radius)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multifit/connolly_surface.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>multifit_2connolly__surface_8h</filename>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>void</type>
      <name>write_connolly_surface</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad3f92bb765e32aee3d6f1c0d15366d5a</anchor>
      <arglist>(atom::Atoms atoms, TextOutput fn, float density, float probe_radius)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConsecutivePairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ConsecutivePairContainer_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ListPairContainer_8h" name="ListPairContainer.h" local="no" imported="no">IMP/container/ListPairContainer.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::container::ConsecutivePairContainer</class>
    <class kind="class">IMP::container::ConsecutivePairFilter</class>
    <class kind="class">IMP::container::ExclusiveConsecutivePairContainer</class>
    <class kind="class">IMP::container::ExclusiveConsecutivePairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConsecutivePairContainer &gt; &gt;</type>
      <name>ConsecutivePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac476738b57684f9ed14377f2a02882ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConsecutivePairContainer &gt; &gt;</type>
      <name>ConsecutivePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aab17dbbce3997259c801e677db632d62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstantRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ConstantRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::core::ConstantRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>algebra/constants.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2constants_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PI</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a071394330f4828c69b25f99767b5fc5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom/constants.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2constants_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_kt</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab38f2fa7b34299a330209cc19b9f0527</anchor>
      <arglist>(double T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>constants.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>constants_8h</filename>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="no" imported="no">IMP/algebra/constants.h</includes>
    <namespace>IMP</namespace>
    <member kind="variable">
      <type>const double</type>
      <name>BAD_SCORE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4224eb6634397a782d17f850534a1f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>NO_MAX</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa27f95bed7fac81929db8729845be717</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Constraint_8h</filename>
    <includes id="ScoreState_8h" name="ScoreState.h" local="yes" imported="no">ScoreState.h</includes>
    <class kind="class">IMP::Constraint</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Constraint &gt; &gt;</type>
      <name>Constraints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae085194580d3f4bd73cfb67d7774acad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Constraint &gt; &gt;</type>
      <name>ConstraintsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5346910999ef12ed58666ebd10cb425f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstVector.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ConstVector_8h</filename>
    <includes id="base__macros_8h" name="base_macros.h" local="yes" imported="no">base_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">exception.h</includes>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <class kind="class">IMP::ConstVector</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>ContactMapMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>ContactMapMetric_8h</filename>
    <includes id="algebra_8h" name="algebra.h" local="no" imported="no">IMP/algebra.h</includes>
    <includes id="Statistics_8h" name="Statistics.h" local="no" imported="no">IMP/statistics.h</includes>
    <class kind="class">IMP::spb::ContactMapMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>container.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>container_8h</filename>
    <includes id="AllBipartitePairContainer_8h" name="AllBipartitePairContainer.h" local="no" imported="no">IMP/container/AllBipartitePairContainer.h</includes>
    <includes id="AllPairContainer_8h" name="AllPairContainer.h" local="no" imported="no">IMP/container/AllPairContainer.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="ClosePairContainer_8h" name="ClosePairContainer.h" local="no" imported="no">IMP/container/ClosePairContainer.h</includes>
    <includes id="ConnectingPairContainer_8h" name="ConnectingPairContainer.h" local="no" imported="no">IMP/container/ConnectingPairContainer.h</includes>
    <includes id="ConsecutivePairContainer_8h" name="ConsecutivePairContainer.h" local="no" imported="no">IMP/container/ConsecutivePairContainer.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="no" imported="no">IMP/container/generic.h</includes>
    <includes id="SingletonContainerSet_8h" name="SingletonContainerSet.h" local="no" imported="no">IMP/container/SingletonContainerSet.h</includes>
    <includes id="SingletonContainerStatistics_8h" name="SingletonContainerStatistics.h" local="no" imported="no">IMP/container/SingletonContainerStatistics.h</includes>
    <includes id="SingletonsConstraint_8h" name="SingletonsConstraint.h" local="no" imported="no">IMP/container/SingletonsConstraint.h</includes>
    <includes id="SingletonsOptimizerState_8h" name="SingletonsOptimizerState.h" local="no" imported="no">IMP/container/SingletonsOptimizerState.h</includes>
    <includes id="SingletonsRestraint_8h" name="SingletonsRestraint.h" local="no" imported="no">IMP/container/SingletonsRestraint.h</includes>
    <includes id="DistributeSingletonsScoreState_8h" name="DistributeSingletonsScoreState.h" local="no" imported="no">IMP/container/DistributeSingletonsScoreState.h</includes>
    <includes id="DynamicListSingletonContainer_8h" name="DynamicListSingletonContainer.h" local="no" imported="no">IMP/container/DynamicListSingletonContainer.h</includes>
    <includes id="EventSingletonsOptimizerState_8h" name="EventSingletonsOptimizerState.h" local="no" imported="no">IMP/container/EventSingletonsOptimizerState.h</includes>
    <includes id="InContainerSingletonFilter_8h" name="InContainerSingletonFilter.h" local="no" imported="no">IMP/container/InContainerSingletonFilter.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="MinimumSingletonRestraint_8h" name="MinimumSingletonRestraint.h" local="no" imported="no">IMP/container/MinimumSingletonRestraint.h</includes>
    <includes id="MinimumSingletonScore_8h" name="MinimumSingletonScore.h" local="no" imported="no">IMP/container/MinimumSingletonScore.h</includes>
    <includes id="PredicateSingletonsRestraint_8h" name="PredicateSingletonsRestraint.h" local="no" imported="no">IMP/container/PredicateSingletonsRestraint.h</includes>
    <includes id="PairContainerSet_8h" name="PairContainerSet.h" local="no" imported="no">IMP/container/PairContainerSet.h</includes>
    <includes id="PairContainerStatistics_8h" name="PairContainerStatistics.h" local="no" imported="no">IMP/container/PairContainerStatistics.h</includes>
    <includes id="PairsConstraint_8h" name="PairsConstraint.h" local="no" imported="no">IMP/container/PairsConstraint.h</includes>
    <includes id="PairsOptimizerState_8h" name="PairsOptimizerState.h" local="no" imported="no">IMP/container/PairsOptimizerState.h</includes>
    <includes id="PairsRestraint_8h" name="PairsRestraint.h" local="no" imported="no">IMP/container/PairsRestraint.h</includes>
    <includes id="DistributePairsScoreState_8h" name="DistributePairsScoreState.h" local="no" imported="no">IMP/container/DistributePairsScoreState.h</includes>
    <includes id="DynamicListPairContainer_8h" name="DynamicListPairContainer.h" local="no" imported="no">IMP/container/DynamicListPairContainer.h</includes>
    <includes id="EventPairsOptimizerState_8h" name="EventPairsOptimizerState.h" local="no" imported="no">IMP/container/EventPairsOptimizerState.h</includes>
    <includes id="InContainerPairFilter_8h" name="InContainerPairFilter.h" local="no" imported="no">IMP/container/InContainerPairFilter.h</includes>
    <includes id="ListPairContainer_8h" name="ListPairContainer.h" local="no" imported="no">IMP/container/ListPairContainer.h</includes>
    <includes id="MinimumPairRestraint_8h" name="MinimumPairRestraint.h" local="no" imported="no">IMP/container/MinimumPairRestraint.h</includes>
    <includes id="MinimumPairScore_8h" name="MinimumPairScore.h" local="no" imported="no">IMP/container/MinimumPairScore.h</includes>
    <includes id="PredicatePairsRestraint_8h" name="PredicatePairsRestraint.h" local="no" imported="no">IMP/container/PredicatePairsRestraint.h</includes>
    <includes id="TripletContainerSet_8h" name="TripletContainerSet.h" local="no" imported="no">IMP/container/TripletContainerSet.h</includes>
    <includes id="TripletContainerStatistics_8h" name="TripletContainerStatistics.h" local="no" imported="no">IMP/container/TripletContainerStatistics.h</includes>
    <includes id="TripletsConstraint_8h" name="TripletsConstraint.h" local="no" imported="no">IMP/container/TripletsConstraint.h</includes>
    <includes id="TripletsOptimizerState_8h" name="TripletsOptimizerState.h" local="no" imported="no">IMP/container/TripletsOptimizerState.h</includes>
    <includes id="TripletsRestraint_8h" name="TripletsRestraint.h" local="no" imported="no">IMP/container/TripletsRestraint.h</includes>
    <includes id="DistributeTripletsScoreState_8h" name="DistributeTripletsScoreState.h" local="no" imported="no">IMP/container/DistributeTripletsScoreState.h</includes>
    <includes id="DynamicListTripletContainer_8h" name="DynamicListTripletContainer.h" local="no" imported="no">IMP/container/DynamicListTripletContainer.h</includes>
    <includes id="EventTripletsOptimizerState_8h" name="EventTripletsOptimizerState.h" local="no" imported="no">IMP/container/EventTripletsOptimizerState.h</includes>
    <includes id="InContainerTripletFilter_8h" name="InContainerTripletFilter.h" local="no" imported="no">IMP/container/InContainerTripletFilter.h</includes>
    <includes id="ListTripletContainer_8h" name="ListTripletContainer.h" local="no" imported="no">IMP/container/ListTripletContainer.h</includes>
    <includes id="MinimumTripletRestraint_8h" name="MinimumTripletRestraint.h" local="no" imported="no">IMP/container/MinimumTripletRestraint.h</includes>
    <includes id="MinimumTripletScore_8h" name="MinimumTripletScore.h" local="no" imported="no">IMP/container/MinimumTripletScore.h</includes>
    <includes id="PredicateTripletsRestraint_8h" name="PredicateTripletsRestraint.h" local="no" imported="no">IMP/container/PredicateTripletsRestraint.h</includes>
    <includes id="QuadContainerSet_8h" name="QuadContainerSet.h" local="no" imported="no">IMP/container/QuadContainerSet.h</includes>
    <includes id="QuadContainerStatistics_8h" name="QuadContainerStatistics.h" local="no" imported="no">IMP/container/QuadContainerStatistics.h</includes>
    <includes id="QuadsConstraint_8h" name="QuadsConstraint.h" local="no" imported="no">IMP/container/QuadsConstraint.h</includes>
    <includes id="QuadsOptimizerState_8h" name="QuadsOptimizerState.h" local="no" imported="no">IMP/container/QuadsOptimizerState.h</includes>
    <includes id="QuadsRestraint_8h" name="QuadsRestraint.h" local="no" imported="no">IMP/container/QuadsRestraint.h</includes>
    <includes id="DistributeQuadsScoreState_8h" name="DistributeQuadsScoreState.h" local="no" imported="no">IMP/container/DistributeQuadsScoreState.h</includes>
    <includes id="DynamicListQuadContainer_8h" name="DynamicListQuadContainer.h" local="no" imported="no">IMP/container/DynamicListQuadContainer.h</includes>
    <includes id="EventQuadsOptimizerState_8h" name="EventQuadsOptimizerState.h" local="no" imported="no">IMP/container/EventQuadsOptimizerState.h</includes>
    <includes id="InContainerQuadFilter_8h" name="InContainerQuadFilter.h" local="no" imported="no">IMP/container/InContainerQuadFilter.h</includes>
    <includes id="ListQuadContainer_8h" name="ListQuadContainer.h" local="no" imported="no">IMP/container/ListQuadContainer.h</includes>
    <includes id="MinimumQuadRestraint_8h" name="MinimumQuadRestraint.h" local="no" imported="no">IMP/container/MinimumQuadRestraint.h</includes>
    <includes id="MinimumQuadScore_8h" name="MinimumQuadScore.h" local="no" imported="no">IMP/container/MinimumQuadScore.h</includes>
    <includes id="PredicateQuadsRestraint_8h" name="PredicateQuadsRestraint.h" local="no" imported="no">IMP/container/PredicateQuadsRestraint.h</includes>
  </compound>
  <compound kind="file">
    <name>container_base.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>container__base_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <class kind="class">IMP::Container</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>container_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>container__macros_8h</filename>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="SetCheckState_8h" name="SetCheckState.h" local="no" imported="no">IMP/SetCheckState.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="doxygen__macros_8h" name="doxygen_macros.h" local="no" imported="no">IMP/doxygen_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONTAINER_ACCESS</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>ada4341dc2cef11f85269a451b901dfa6</anchor>
      <arglist>(ContainerType, container, operation)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONTAINER_FOREACH</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>a8424713be0e190d356687abf6a4c662a</anchor>
      <arglist>(ContainerType, container, operation)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONTAINER_FOREACH_TEMPLATE</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>a7b286735083f6583bb86f460d2fec634</anchor>
      <arglist>(ContainerType, container, operation)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_EXPOSE_ITERATORS</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>a58428fbce7eb4a7f286aa207fd82a428</anchor>
      <arglist>(ContainerType, container_name, Ucname, Ucnames, lcname, lcnames)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LIST</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>a16e8d027c8eae96d6e1a6b1e940569bd</anchor>
      <arglist>(protection, Ucname, lcname, Data, PluralData)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LIST_IMPL</name>
      <anchorfile>container__macros_8h.html</anchorfile>
      <anchor>a8a1d6a3d338a1238b95e3a8a18871886</anchor>
      <arglist>(Class, Ucname, lcname, Data, PluralData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>converters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>converters_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="SurfaceShellDensityMap_8h" name="SurfaceShellDensityMap.h" local="yes" imported="no">SurfaceShellDensityMap.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>Particles</type>
      <name>density2particles</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ad7c905f64de2740109026908aaa1e952</anchor>
      <arglist>(DensityMap *dmap, Float threshold, Model *m, int step=1)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3Ds</type>
      <name>density2vectors</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a5cbea21ee3c92fa5008bea0e8a6fc612</anchor>
      <arglist>(DensityMap *dmap, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>SampledDensityMap *</type>
      <name>particles2binarized_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a12121a1c9d4ec3f58b959b1b8c136ecb</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float resolution, Float apix, int sig_cutoff=3, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>SampledDensityMap *</type>
      <name>particles2density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>af47d3d5898cb50aecaf7b8cf5a40d167</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float resolution, Float apix, int sig_cutoff=3, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>SurfaceShellDensityMap *</type>
      <name>particles2surface</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a4c18a8d1e939db80e5767b8b3e9c040f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float apix, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Copy.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Copy_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Molecule_8h" name="Molecule.h" local="yes" imported="no">Molecule.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Copy</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>int</type>
      <name>get_copy_index</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa9d8e71ec12f5e1011ed0f457c70ec3a</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>core_8h</filename>
    <includes id="AngleRestraint_8h" name="AngleRestraint.h" local="no" imported="no">IMP/core/AngleRestraint.h</includes>
    <includes id="AngleTripletScore_8h" name="AngleTripletScore.h" local="no" imported="no">IMP/core/AngleTripletScore.h</includes>
    <includes id="core_2BallMover_8h" name="core/BallMover.h" local="no" imported="no">IMP/core/BallMover.h</includes>
    <includes id="BoundingBox3DSingletonScore_8h" name="BoundingBox3DSingletonScore.h" local="no" imported="no">IMP/core/BoundingBox3DSingletonScore.h</includes>
    <includes id="BoundingSphere3DSingletonScore_8h" name="BoundingSphere3DSingletonScore.h" local="no" imported="no">IMP/core/BoundingSphere3DSingletonScore.h</includes>
    <includes id="BoxSweepClosePairsFinder_8h" name="BoxSweepClosePairsFinder.h" local="no" imported="no">IMP/core/BoxSweepClosePairsFinder.h</includes>
    <includes id="CentroidOfRefined_8h" name="CentroidOfRefined.h" local="no" imported="no">IMP/core/CentroidOfRefined.h</includes>
    <includes id="ChecksScoreState_8h" name="ChecksScoreState.h" local="no" imported="no">IMP/core/ChecksScoreState.h</includes>
    <includes id="ChildrenRefiner_8h" name="ChildrenRefiner.h" local="no" imported="no">IMP/core/ChildrenRefiner.h</includes>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="no" imported="no">IMP/core/ClosePairsFinder.h</includes>
    <includes id="ClosePairsPairScore_8h" name="ClosePairsPairScore.h" local="no" imported="no">IMP/core/ClosePairsPairScore.h</includes>
    <includes id="ClosedCubicSpline_8h" name="ClosedCubicSpline.h" local="no" imported="no">IMP/core/ClosedCubicSpline.h</includes>
    <includes id="core_2ConjugateGradients_8h" name="core/ConjugateGradients.h" local="no" imported="no">IMP/core/ConjugateGradients.h</includes>
    <includes id="ConnectivityRestraint_8h" name="ConnectivityRestraint.h" local="no" imported="no">IMP/core/ConnectivityRestraint.h</includes>
    <includes id="ConstantRestraint_8h" name="ConstantRestraint.h" local="no" imported="no">IMP/core/ConstantRestraint.h</includes>
    <includes id="Cosine_8h" name="Cosine.h" local="no" imported="no">IMP/core/Cosine.h</includes>
    <includes id="CoverRefined_8h" name="CoverRefined.h" local="no" imported="no">IMP/core/CoverRefined.h</includes>
    <includes id="DataObject_8h" name="DataObject.h" local="no" imported="no">IMP/core/DataObject.h</includes>
    <includes id="DerivativesFromRefined_8h" name="DerivativesFromRefined.h" local="no" imported="no">IMP/core/DerivativesFromRefined.h</includes>
    <includes id="DerivativesToRefined_8h" name="DerivativesToRefined.h" local="no" imported="no">IMP/core/DerivativesToRefined.h</includes>
    <includes id="DiameterRestraint_8h" name="DiameterRestraint.h" local="no" imported="no">IMP/core/DiameterRestraint.h</includes>
    <includes id="DihedralRestraint_8h" name="DihedralRestraint.h" local="no" imported="no">IMP/core/DihedralRestraint.h</includes>
    <includes id="DirectionMover_8h" name="DirectionMover.h" local="no" imported="no">IMP/core/DirectionMover.h</includes>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="no" imported="no">IMP/core/DistancePairScore.h</includes>
    <includes id="DistanceRestraint_8h" name="DistanceRestraint.h" local="no" imported="no">IMP/core/DistanceRestraint.h</includes>
    <includes id="DistanceToSingletonScore_8h" name="DistanceToSingletonScore.h" local="no" imported="no">IMP/core/DistanceToSingletonScore.h</includes>
    <includes id="ExcludedVolumeRestraint_8h" name="ExcludedVolumeRestraint.h" local="no" imported="no">IMP/core/ExcludedVolumeRestraint.h</includes>
    <includes id="FixedRefiner_8h" name="FixedRefiner.h" local="no" imported="no">IMP/core/FixedRefiner.h</includes>
    <includes id="core_2Gaussian_8h" name="core/Gaussian.h" local="no" imported="no">IMP/core/Gaussian.h</includes>
    <includes id="GenericAttributeSingletonScore_8h" name="GenericAttributeSingletonScore.h" local="no" imported="no">IMP/core/GenericAttributeSingletonScore.h</includes>
    <includes id="GridClosePairsFinder_8h" name="GridClosePairsFinder.h" local="no" imported="no">IMP/core/GridClosePairsFinder.h</includes>
    <includes id="core_2Harmonic_8h" name="core/Harmonic.h" local="no" imported="no">IMP/core/Harmonic.h</includes>
    <includes id="core_2HarmonicLowerBound_8h" name="core/HarmonicLowerBound.h" local="no" imported="no">IMP/core/HarmonicLowerBound.h</includes>
    <includes id="core_2HarmonicUpperBound_8h" name="core/HarmonicUpperBound.h" local="no" imported="no">IMP/core/HarmonicUpperBound.h</includes>
    <includes id="HarmonicWell_8h" name="HarmonicWell.h" local="no" imported="no">IMP/core/HarmonicWell.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="LeavesRefiner_8h" name="LeavesRefiner.h" local="no" imported="no">IMP/core/LeavesRefiner.h</includes>
    <includes id="Linear_8h" name="Linear.h" local="no" imported="no">IMP/core/Linear.h</includes>
    <includes id="LogNormalMover_8h" name="LogNormalMover.h" local="no" imported="no">IMP/core/LogNormalMover.h</includes>
    <includes id="MCCGSampler_8h" name="MCCGSampler.h" local="no" imported="no">IMP/core/MCCGSampler.h</includes>
    <includes id="MSConnectivityRestraint_8h" name="MSConnectivityRestraint.h" local="no" imported="no">IMP/core/MSConnectivityRestraint.h</includes>
    <includes id="MinimumRestraint_8h" name="MinimumRestraint.h" local="no" imported="no">IMP/core/MinimumRestraint.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="MoveStatisticsScoreState_8h" name="MoveStatisticsScoreState.h" local="no" imported="no">IMP/core/MoveStatisticsScoreState.h</includes>
    <includes id="MultipleBinormalRestraint_8h" name="MultipleBinormalRestraint.h" local="no" imported="no">IMP/core/MultipleBinormalRestraint.h</includes>
    <includes id="NearestNeighborsClosePairsFinder_8h" name="NearestNeighborsClosePairsFinder.h" local="no" imported="no">IMP/core/NearestNeighborsClosePairsFinder.h</includes>
    <includes id="NeighborsTable_8h" name="NeighborsTable.h" local="no" imported="no">IMP/core/NeighborsTable.h</includes>
    <includes id="NormalMover_8h" name="NormalMover.h" local="no" imported="no">IMP/core/NormalMover.h</includes>
    <includes id="core_2OpenCubicSpline_8h" name="core/OpenCubicSpline.h" local="no" imported="no">IMP/core/OpenCubicSpline.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="QuadraticClosePairsFinder_8h" name="QuadraticClosePairsFinder.h" local="no" imported="no">IMP/core/QuadraticClosePairsFinder.h</includes>
    <includes id="RefinedPairsPairScore_8h" name="RefinedPairsPairScore.h" local="no" imported="no">IMP/core/RefinedPairsPairScore.h</includes>
    <includes id="RestraintsScoringFunction_8h" name="RestraintsScoringFunction.h" local="no" imported="no">IMP/core/RestraintsScoringFunction.h</includes>
    <includes id="RigidBodyAnglePairScore_8h" name="RigidBodyAnglePairScore.h" local="no" imported="no">IMP/core/RigidBodyAnglePairScore.h</includes>
    <includes id="RigidBodyDistancePairScore_8h" name="RigidBodyDistancePairScore.h" local="no" imported="no">IMP/core/RigidBodyDistancePairScore.h</includes>
    <includes id="core_2RigidBodyMover_8h" name="core/RigidBodyMover.h" local="no" imported="no">IMP/core/RigidBodyMover.h</includes>
    <includes id="RigidBodyTunneler_8h" name="RigidBodyTunneler.h" local="no" imported="no">IMP/core/RigidBodyTunneler.h</includes>
    <includes id="RigidBodyUmbrella_8h" name="RigidBodyUmbrella.h" local="no" imported="no">IMP/core/RigidBodyUmbrella.h</includes>
    <includes id="RigidClosePairsFinder_8h" name="RigidClosePairsFinder.h" local="no" imported="no">IMP/core/RigidClosePairsFinder.h</includes>
    <includes id="SerialMover_8h" name="SerialMover.h" local="no" imported="no">IMP/core/SerialMover.h</includes>
    <includes id="SphereDistancePairScore_8h" name="SphereDistancePairScore.h" local="no" imported="no">IMP/core/SphereDistancePairScore.h</includes>
    <includes id="StatisticalPairScore_8h" name="StatisticalPairScore.h" local="no" imported="no">IMP/core/StatisticalPairScore.h</includes>
    <includes id="SteepestDescent_8h" name="SteepestDescent.h" local="no" imported="no">IMP/core/SteepestDescent.h</includes>
    <includes id="SubsetMover_8h" name="SubsetMover.h" local="no" imported="no">IMP/core/SubsetMover.h</includes>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">IMP/core/Surface.h</includes>
    <includes id="core_2SurfaceDistancePairScore_8h" name="core/SurfaceDistancePairScore.h" local="no" imported="no">IMP/core/SurfaceDistancePairScore.h</includes>
    <includes id="SurfaceMover_8h" name="SurfaceMover.h" local="no" imported="no">IMP/core/SurfaceMover.h</includes>
    <includes id="SurfaceSymmetryConstraint_8h" name="SurfaceSymmetryConstraint.h" local="no" imported="no">IMP/core/SurfaceSymmetryConstraint.h</includes>
    <includes id="SurfaceTetheredChain_8h" name="SurfaceTetheredChain.h" local="no" imported="no">IMP/core/SurfaceTetheredChain.h</includes>
    <includes id="TableRefiner_8h" name="TableRefiner.h" local="no" imported="no">IMP/core/TableRefiner.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="no" imported="no">IMP/core/Transform.h</includes>
    <includes id="TransformedDistancePairScore_8h" name="TransformedDistancePairScore.h" local="no" imported="no">IMP/core/TransformedDistancePairScore.h</includes>
    <includes id="TruncatedHarmonic_8h" name="TruncatedHarmonic.h" local="no" imported="no">IMP/core/TruncatedHarmonic.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="TypedPairScore_8h" name="TypedPairScore.h" local="no" imported="no">IMP/core/TypedPairScore.h</includes>
    <includes id="VolumeRestraint_8h" name="VolumeRestraint.h" local="no" imported="no">IMP/core/VolumeRestraint.h</includes>
    <includes id="WeightedDerivativesToRefined_8h" name="WeightedDerivativesToRefined.h" local="no" imported="no">IMP/core/WeightedDerivativesToRefined.h</includes>
    <includes id="WeightedSum_8h" name="WeightedSum.h" local="no" imported="no">IMP/core/WeightedSum.h</includes>
    <includes id="WeightedSumOfExponential_8h" name="WeightedSumOfExponential.h" local="no" imported="no">IMP/core/WeightedSumOfExponential.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="blame_8h" name="blame.h" local="no" imported="no">IMP/core/blame.h</includes>
    <includes id="direction_8h" name="direction.h" local="no" imported="no">IMP/core/direction.h</includes>
    <includes id="core_2generic_8h" name="core/generic.h" local="no" imported="no">IMP/core/generic.h</includes>
    <includes id="model__statistics_8h" name="model_statistics.h" local="no" imported="no">IMP/core/model_statistics.h</includes>
    <includes id="predicates_8h" name="predicates.h" local="no" imported="no">IMP/core/predicates.h</includes>
    <includes id="provenance_8h" name="provenance.h" local="no" imported="no">IMP/core/provenance.h</includes>
    <includes id="core_2python__only_8h" name="core/python_only.h" local="no" imported="no">IMP/core/python_only.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="rigid__body__geometries_8h" name="rigid_body_geometries.h" local="no" imported="no">IMP/core/rigid_body_geometries.h</includes>
    <includes id="core_2symmetry_8h" name="core/symmetry.h" local="no" imported="no">IMP/core/symmetry.h</includes>
    <includes id="core_2utility_8h" name="core/utility.h" local="no" imported="no">IMP/core/utility.h</includes>
    <includes id="SingletonConstraint_8h" name="SingletonConstraint.h" local="no" imported="no">IMP/core/SingletonConstraint.h</includes>
    <includes id="SingletonRestraint_8h" name="SingletonRestraint.h" local="no" imported="no">IMP/core/SingletonRestraint.h</includes>
    <includes id="singleton__predicates_8h" name="singleton_predicates.h" local="no" imported="no">IMP/core/singleton_predicates.h</includes>
    <includes id="PairConstraint_8h" name="PairConstraint.h" local="no" imported="no">IMP/core/PairConstraint.h</includes>
    <includes id="PairRestraint_8h" name="PairRestraint.h" local="no" imported="no">IMP/core/PairRestraint.h</includes>
    <includes id="pair__predicates_8h" name="pair_predicates.h" local="no" imported="no">IMP/core/pair_predicates.h</includes>
    <includes id="TripletConstraint_8h" name="TripletConstraint.h" local="no" imported="no">IMP/core/TripletConstraint.h</includes>
    <includes id="TripletRestraint_8h" name="TripletRestraint.h" local="no" imported="no">IMP/core/TripletRestraint.h</includes>
    <includes id="triplet__predicates_8h" name="triplet_predicates.h" local="no" imported="no">IMP/core/triplet_predicates.h</includes>
    <includes id="QuadConstraint_8h" name="QuadConstraint.h" local="no" imported="no">IMP/core/QuadConstraint.h</includes>
    <includes id="QuadRestraint_8h" name="QuadRestraint.h" local="no" imported="no">IMP/core/QuadRestraint.h</includes>
    <includes id="quad__predicates_8h" name="quad_predicates.h" local="no" imported="no">IMP/core/quad_predicates.h</includes>
  </compound>
  <compound kind="file">
    <name>Cosine.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>Cosine_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::Cosine</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>CoulombPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CoulombPairScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="smoothing__functions_8h" name="smoothing_functions.h" local="no" imported="no">IMP/atom/smoothing_functions.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::atom::CoulombPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CoulombPairScore &gt; &gt;</type>
      <name>CoulombPairScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abc885b84f61aee2dc63925c23514854f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CoulombPairScore &gt; &gt;</type>
      <name>CoulombPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5b9d6ca353d9449ac1ef483ac59bbf6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>counting.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>counting_8h</filename>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_incidences</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>af8c9f5150402309a3284c9fb93e55efa</anchor>
      <arglist>(const ParticlesTemp &amp;psa, const ParticlesTemp &amp;psb, double point_distance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoverBond.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>CoverBond_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::atom::CoverBond</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CoverBond &gt; &gt;</type>
      <name>CoverBonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>affa4a73e96f9ecc4f6fab4ae9198b03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CoverBond &gt; &gt;</type>
      <name>CoverBondsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af9211f52101a4e5f1559f652fc53d303</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoverRefined.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>CoverRefined_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <class kind="class">IMP::core::Cover</class>
    <class kind="class">IMP::core::CoverRefined</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>CreateLogContext.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>CreateLogContext_8h</filename>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <includes id="log_8h" name="log.h" local="yes" imported="no">log.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <class kind="class">IMP::CreateLogContext</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>creating_restraints.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>creating__restraints_8h</filename>
    <includes id="ClosePairContainer_8h" name="ClosePairContainer.h" local="no" imported="no">IMP/container/ClosePairContainer.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="no" imported="no">IMP/container/generic.h</includes>
    <includes id="ConsecutivePairContainer_8h" name="ConsecutivePairContainer.h" local="no" imported="no">IMP/container/ConsecutivePairContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="SphereDistancePairScore_8h" name="SphereDistancePairScore.h" local="no" imported="no">IMP/core/SphereDistancePairScore.h</includes>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="no" imported="no">IMP/core/DistancePairScore.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_chain_restraint</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a9aa2ea9cadf531860b3041ded1973637</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps, double length_factor, double k, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a3664740d13bae6e46e99912a842c5160</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps, double k, std::string name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CrossLinkData.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>CrossLinkData_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::CrossLinkData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>CrossLinkMSRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>CrossLinkMSRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <class kind="class">IMP::isd::CrossLinkMSRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>CrossLinkRestraintSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>CrossLinkRestraintSet_8h</filename>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <class kind="class">IMP::pmi::CrossLinkRestraintSet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>CustomXYZR.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>CustomXYZR_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <class kind="class">IMP::misc::CustomXYZR</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a65ae63767baf9a8606e74158c6ef2ade</anchor>
      <arglist>(CustomXYZR a, CustomXYZR b)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Sphere3D</type>
      <name>get_sphere_d_geometry</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a4754647ec2a9fab5886f7c0ff31c27a0</anchor>
      <arglist>(CustomXYZR d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sphere_d_geometry</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a1cca898df2ee830b5c161c85f0a1dd81</anchor>
      <arglist>(CustomXYZR d, const algebra::Sphere3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cylinder3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Cylinder3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">Rotation3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="yes" imported="no">Segment3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <class kind="class">IMP::algebra::Cylinder3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Cylinder3D &gt;</type>
      <name>Cylinder3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a958423e1b621cf3799fd6334f8ceb755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CysteineCrossLinkData.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>CysteineCrossLinkData_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::CysteineCrossLinkData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>CysteineCrossLinkRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>CysteineCrossLinkRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="CrossLinkData_8h" name="CrossLinkData.h" local="no" imported="no">IMP/isd/CrossLinkData.h</includes>
    <includes id="CysteineCrossLinkData_8h" name="CysteineCrossLinkData.h" local="no" imported="no">IMP/isd/CysteineCrossLinkData.h</includes>
    <class kind="class">IMP::isd::CysteineCrossLinkRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>DataObject.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DataObject_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::core::DataObject</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DataPointsAssignment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>DataPointsAssignment_8h</filename>
    <includes id="pdb_8h" name="pdb.h" local="no" imported="no">IMP/atom/pdb.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Chain_8h" name="Chain.h" local="no" imported="no">IMP/atom/Chain.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="DensityDataPoints_8h" name="DensityDataPoints.h" local="no" imported="no">IMP/multifit/DensityDataPoints.h</includes>
    <class kind="class">IMP::multifit::DataPointsAssignment</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>void</type>
      <name>write_segments_as_mrc</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ac66c9128b0009595989bc520e3e6dcd3</anchor>
      <arglist>(em::DensityMap *dmap, const DataPointsAssignment &amp;dpa, Float resolution, Float apix, Float threshold, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecayPairContainerOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>DecayPairContainerOptimizerState_8h</filename>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="DynamicListPairContainer_8h" name="DynamicListPairContainer.h" local="no" imported="no">IMP/container/DynamicListPairContainer.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::misc::DecayPairContainerOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>declare_Geometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>declare__Geometry_8h</filename>
    <includes id="Color_8h" name="Color.h" local="yes" imported="no">Color.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <class kind="class">IMP::display::Geometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Geometry &gt; &gt;</type>
      <name>Geometries</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a6da2ba16b22efe0c6c676c1ece993355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Geometry &gt; &gt;</type>
      <name>GeometriesTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae68ea7eb0a76aac1dc2ff684739c64e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Decorator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Decorator_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="yes" imported="no">Constraint.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <class kind="class">IMP::Decorator</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>decorator_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>decorator__macros_8h</filename>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="yes" imported="no">Decorator.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CHECK_DECORATOR</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>af1dbd71742e245f97533c5a41c3d248f</anchor>
      <arglist>(Name, function)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONSTRAINT_DECORATOR_DECL</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a0a953c15e8a101fe6fb3d10eb6870612</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CONSTRAINT_DECORATOR_DEF</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a328c26b1369b5948da61c95a4f8f71e8</anchor>
      <arglist>(Name, can_skip)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_GET</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a5d40092ab5649f5243d10f5d435d45dc</anchor>
      <arglist>(AttributeKey, Type, has_action, not_has_action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_GET_SET</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a381f843dd23529f7df565c09fc863c79</anchor>
      <arglist>(name, AttributeKey, Type, ReturnType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_GET_SET_OPT</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a37e1b96cadf14608b5f3993945d5c906</anchor>
      <arglist>(name, AttributeKey, Type, ReturnType, default_value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_METHODS</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>ae6a3cf5891d8f5bbafbdfa5b774e964a</anchor>
      <arglist>(Name, Parent)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SET</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a85c68580926de22b46bc0a9f9ff9e8ac</anchor>
      <arglist>(AttributeKey, value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_0</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a59ecef803155962b7754958765cdd06c</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_1</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a21e8b87df70a5c2168f2f5e45416a30f</anchor>
      <arglist>(Name, FirstArgumentType, first_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_2</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a446b1a1a9d886481370399d872f2c149</anchor>
      <arglist>(Name, FirstArgumentType, first_argument_name,SecondArgumentType, second_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_3</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a730037f5a8e37e6fec29e17b1b34f679</anchor>
      <arglist>(Name, FirstArgumentType, first_argument_name,SecondArgumentType, second_argument_name,ThirdArgumentType, third_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_4</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>ad8a411d0b52558ffd6ff0490bb08d3e9</anchor>
      <arglist>(Name, FirstArgumentType, first_argument_name,SecondArgumentType, second_argument_name,ThirdArgumentType, third_argument_name,FourthArgumentType, fourth_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_SETUP_5</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a0e293021d282f5fbc1cd1a513024455d</anchor>
      <arglist>(Name,FirstArgumentType, first_argument_name,SecondArgumentType, second_argument_name,ThirdArgumentType, third_argument_name,FourthArgumentType, fourth_argument_name,FifthArgumentType, fifth_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_TRAITS_SETUP_0</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a511ae581b2a734ed48a916729fbd59cd</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_TRAITS_SETUP_1</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a17920f80858e332f5d1d020c595763a8</anchor>
      <arglist>(Name, FirstArgumentType,first_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_TRAITS_SETUP_2</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a8b18331161fa4b4587baadd51d92a8d6</anchor>
      <arglist>(Name, FirstArgumentType,first_argument_name, SecondArgumentType, second_argument_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATOR_WITH_TRAITS_METHODS</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>ad73a9a3822a721f73249d7d66c562cba</anchor>
      <arglist>(Name, Parent, TraitsType,traits_name, default_traits)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATORS</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a7c09c7fa512991ece9b0dd6e8a0541fd</anchor>
      <arglist>(Name, PluralName, Parent)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECORATORS_WITH_TRAITS</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>ad024fe834693e9da67ffc860c23f3c89</anchor>
      <arglist>(Name, PluralName, Parent)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SUMMARIZE_DECORATOR_DECL</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a533ff6e7201b1fff06a28c349d962eb1</anchor>
      <arglist>(Name, Parent, Members, SetupDoc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SUMMARIZE_DECORATOR_DEF</name>
      <anchorfile>decorator__macros_8h.html</anchorfile>
      <anchor>a23e531a4d7e0855eb039d7a135f5f9ca</anchor>
      <arglist>(Name, Parent, Members,create_pre_modifier,create_post_modifier, can_skip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>def.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>def_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>density_analysis.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>density__analysis_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>IntsList</type>
      <name>get_connected_components</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aebdba0d523d4730ee0031629b70b8ea1</anchor>
      <arglist>(em::DensityMap *dmap, float threshold, float edge_threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_segmentation</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aeb628c3804ee3d8aa7df59051b0ad1d2</anchor>
      <arglist>(em::DensityMap *dmap, double apix, double density_threshold, int num_means, const std::string pdb_filename, const std::string cmm_filename, const std::string seg_filename, const std::string txt_filename)</arglist>
    </member>
    <member kind="function">
      <type>em::DensityMap *</type>
      <name>remove_background</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a8528245410468cfc40ab674d0ef64d70</anchor>
      <arglist>(em::DensityMap *dmap, float threshold, float edge_threshold)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>density_map_volumetrics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>density__map__volumetrics_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="estimates_8h" name="estimates.h" local="no" imported="no">IMP/atom/estimates.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>Float</type>
      <name>get_molecular_mass_at_threshold</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a1a9e2f7c4a8e6a32405eca965626d554</anchor>
      <arglist>(DensityMap *m, Float threshold, atom::ProteinDensityReference ref=atom::HARPAZ)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_threshold_for_approximate_mass</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7be03879088ecc74f54b40e68ba7a99c</anchor>
      <arglist>(DensityMap *m, Float desired_mass, atom::ProteinDensityReference ref=atom::HARPAZ)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_threshold_for_approximate_volume</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac70c499fce515b0328e43e6084fe92dc</anchor>
      <arglist>(DensityMap *m, Float desired_volume)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_volume_at_threshold</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a402ab2b7809cc5ce708092b3c2c1a297</anchor>
      <arglist>(DensityMap *m, Float threshold)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>density_utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>density__utilities_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>DensityMap *</type>
      <name>mask_and_norm</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae6c068669daa6977fb4a6e9800d79b44</anchor>
      <arglist>(em::DensityMap *dmap, em::DensityMap *mask)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DensityDataPoints.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>DensityDataPoints_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <includes id="converters_8h" name="converters.h" local="no" imported="no">IMP/em/converters.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <class kind="class">IMP::multifit::DensityDataPoints</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DensityDataPoints &gt; &gt;</type>
      <name>DensityDataPointsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aa20b45f55e7c7fd96f41ce3856c22535</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DensityDataPoints &gt; &gt;</type>
      <name>DensityDataPointsListTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a63c963d09561d524caa83dddd89bccf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DensityFillingRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>DensityFillingRestraint_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::em::DensityFillingRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>DensityHeader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>DensityHeader_8h</filename>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::em::DensityHeader</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>DensityHeader</type>
      <name>create_density_header</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a11f40ffc07e7b3d9dde0711015f3e97e</anchor>
      <arglist>(const algebra::BoundingBoxD&lt; 3 &gt; &amp;bb, float spacing)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DensityMap.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>DensityMap_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="yes" imported="no">MapReaderWriter.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::em::DensityMap</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DensityMap &gt; &gt;</type>
      <name>DensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a9cef4bc039e283a57da273c9e60f8d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DensityMap &gt; &gt;</type>
      <name>DensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a50b1fd8a3a7875ca859203ad89cff17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>approximate_molecular_mass</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a6e4fd1709fe2bbb486a3e70d4dfe0f27</anchor>
      <arglist>(DensityMap *m, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>binarize</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a1c88424c8b24a5802ef048175e22787b</anchor>
      <arglist>(DensityMap *orig_map, float threshold, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>convolute</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8505c0c435a33d043c98f29ade4fc2ee</anchor>
      <arglist>(const DensityMap *m1, const DensityMap *m2)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa873c569e58e5c5d66dac1c0420f3e6c</anchor>
      <arglist>(const DensityMap *other)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ad6586b38abb58a2ebc6b64b10f60f734</anchor>
      <arglist>(const algebra::BoundingBox3D &amp;bb, double spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ace9a6d63b63146fcaac428d8995ade7b</anchor>
      <arglist>(int nx, int ny, int nz, double spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae63d1d8a3cfad97be2846c51d1a03203</anchor>
      <arglist>(const IMP::algebra::GridD&lt; 3, S, V, E &gt; &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a820db29914536321043260f19e89fca1</anchor>
      <arglist>(const DensityMap *m, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>algebra::GridD&lt; 3, algebra::DenseGridStorageD&lt; 3, float &gt;, float &gt;</type>
      <name>get_grid</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a9c72b01f6d6bbe0c84a0779fc08b809c</anchor>
      <arglist>(DensityMap *in_map)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_max_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae7eacf1de1781ba22d2169b635d87753</anchor>
      <arglist>(DensityMaps maps)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8dfa355f085d452c5636987d4f8ab956</anchor>
      <arglist>(DensityMap *map_to_segment, int nx_start, int nx_end, int ny_start, int ny_end, int nz_start, int nz_end)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa92d0be9d42aa9d9b7a20796baacbf3b</anchor>
      <arglist>(DensityMap *map_to_segment, algebra::Vector3Ds vecs, float dist)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment_by_masking</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a94fc09c5491718e3e0e61b2c4ff04f8f</anchor>
      <arglist>(DensityMap *map_to_segment, DensityMap *mask, float mas_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_sum</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0b1f187c3b53af89037d40912cc10aef</anchor>
      <arglist>(const DensityMap *m1)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_threshold_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3078e4c77b9e81fa61b8222934185d1e</anchor>
      <arglist>(const DensityMap *orig_map, float threshold)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>interpolate_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7ca59d2a3aa688060c280efa250d80a7</anchor>
      <arglist>(DensityMap *in_map, double new_spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>multiply</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0337abc873be82054e0b4061912cf0dc</anchor>
      <arglist>(const DensityMap *m1, const DensityMap *m2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dependency_graph.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>dependency__graph_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>DependencyGraph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>addc7bfaa427b0b5a86d1e2dce94c68ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph</type>
      <name>get_dependency_graph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af26dddbf636cb7a7f3570cbcd3387bcb</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph</type>
      <name>get_pruned_dependency_graph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad7a7ba8372d2c5b86b98588ddcc8e023</anchor>
      <arglist>(Model *m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DependencyScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>DependencyScoreState_8h</filename>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="no" imported="no">IMP/container_base.h</includes>
    <class kind="class">IMP::domino::DependencyScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
  </compound>
  <compound kind="file">
    <name>deprecation.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>deprecation_8h</filename>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>bool</type>
      <name>get_deprecation_exceptions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a01af18a6301d245e5e149fdeeb3e859b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_use_deprecated</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8a184b20254e6ba550d42ddd36f4e572</anchor>
      <arglist>(std::string message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_deprecation_exceptions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8728fa756dd30b529a0dfe520a2d720e</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_deprecation_warnings</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a43715c8fb5143d0bc4d67f6a40896ebe</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deprecation_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>deprecation__macros_8h</filename>
    <includes id="deprecation_8h" name="deprecation.h" local="yes" imported="no">deprecation.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEPRECATED_FUNCTION_RUNTIME_WARNING</name>
      <anchorfile>deprecation__macros_8h.html</anchorfile>
      <anchor>a6788edb6e6b518713eb0a80425b09865</anchor>
      <arglist>(version, help_message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEPRECATED_MACRO</name>
      <anchorfile>deprecation__macros_8h.html</anchorfile>
      <anchor>a632db269a38a6a377edd72f883870490</anchor>
      <arglist>(version, help_message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEPRECATED_METHOD_RUNTIME_WARNING</name>
      <anchorfile>deprecation__macros_8h.html</anchorfile>
      <anchor>ad84eeb48aefd463e1fe9285721e0b050</anchor>
      <arglist>(version, help_message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEPRECATED_OBJECT_RUNTIME_WARNING</name>
      <anchorfile>deprecation__macros_8h.html</anchorfile>
      <anchor>aa90763859884ae8419473555587f5e03</anchor>
      <arglist>(version, help_message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEPRECATED_VALUE_RUNTIME_WARNING</name>
      <anchorfile>deprecation__macros_8h.html</anchorfile>
      <anchor>ad267dac4966a84b78cb3827de0ddd67c</anchor>
      <arglist>(version, help_message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DerivativeAccumulator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>DerivativeAccumulator_8h</filename>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">IMP/math.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::DerivativeAccumulator</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativeAccumulator &gt;</type>
      <name>DerivativeAccumulators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3ac00af20ff6f7f2687685d06cf71f07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DerivativeCalculator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>DerivativeCalculator_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="saxs_2distribution_8h" name="saxs/distribution.h" local="yes" imported="no">Distribution.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::saxs::DerivativeCalculator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>DerivativesFromRefined.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DerivativesFromRefined_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <class kind="class">IMP::core::DerivativesFromRefined</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DerivativesToRefined.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DerivativesToRefined_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <class kind="class">IMP::core::DerivativesToRefined</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DiameterRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DiameterRestraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::DiameterRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DiameterRgyrRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>DiameterRgyrRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::spb::DiameterRgyrRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Diffusion.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Diffusion_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::atom::Diffusion</class>
    <class kind="class">IMP::atom::RigidBodyDiffusion</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>DihedralMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>DihedralMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="no" imported="no">IMP/kinematics/revolute_joints.h</includes>
    <class kind="class">IMP::kinematics::DihedralMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>DihedralRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DihedralRestraint_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::core::DihedralRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>dihedrals.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>dihedrals_8h</filename>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Vector&lt; AtomTypes &gt;</type>
      <name>get_chi_dihedral_atom_types</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad62901c76275a45e34aed68c76548508</anchor>
      <arglist>(ResidueType rt)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Atoms &gt;</type>
      <name>get_chi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a30ce58af4f3485274c3c59c7170d6698</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexQuads</type>
      <name>get_chi_dihedral_particle_indexes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a49d8d008661379b8938d7bfbd324b262</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_omega_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5ceb85645196ab77765e0ffad9866330</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_phi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6ef3ab3e84fd5ab0e83ce40fdc675455</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_psi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1c15e940e47a1a8f5872029fcb93c601</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DihedralSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>DihedralSingletonScore_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::atom::DihedralSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DihedralSingletonScore &gt; &gt;</type>
      <name>DihedralSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7019f9c6083f10036a030f4917bc5317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DihedralSingletonScore &gt; &gt;</type>
      <name>DihedralSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a53a8248ddb5a1dd4d709b89b49a61d53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>direction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>direction_8h</filename>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <class kind="class">IMP::core::Direction</class>
    <class kind="class">IMP::core::DirectionAngle</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>afd0ee355a8489289443d4de259d3b71e</anchor>
      <arglist>(Direction a, Direction b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>directional_DOFs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>directional__DOFs_8h</filename>
    <includes id="DOF_8h" name="DOF.h" local="yes" imported="no">DOF.h</includes>
    <class kind="class">IMP::kinematics::DirectionalDOF</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DirectionalDOF &gt; &gt;</type>
      <name>DirectionalDOFs</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a85d395bd4fac70175ae6a92b92e30f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DirectionalDOF &gt; &gt;</type>
      <name>DirectionalDOFsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>adfe8153bd3c894ae41bf695755709f06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DirectionMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DirectionMover_8h</filename>
    <includes id="direction_8h" name="direction.h" local="no" imported="no">IMP/core/direction.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::core::DirectionMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>DiscreteSampler_8h</filename>
    <includes id="assignment__tables_8h" name="assignment_tables.h" local="yes" imported="no">assignment_tables.h</includes>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="yes" imported="no">subset_filters.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::domino::DiscreteSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DiscreteSampler &gt; &gt;</type>
      <name>DiscreteSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ad92d5b7dfbc625af4436de8a9dc585a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DiscreteSampler &gt; &gt;</type>
      <name>DiscreteSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a35777189531c452f0780f11cfffcd4b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>display.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>display_8h</filename>
    <includes id="Color_8h" name="Color.h" local="no" imported="no">IMP/display/Color.h</includes>
    <includes id="Colored_8h" name="Colored.h" local="no" imported="no">IMP/display/Colored.h</includes>
    <includes id="FilterGeometry_8h" name="FilterGeometry.h" local="no" imported="no">IMP/display/FilterGeometry.h</includes>
    <includes id="GeometryProcessor_8h" name="GeometryProcessor.h" local="no" imported="no">IMP/display/GeometryProcessor.h</includes>
    <includes id="GeometrySet_8h" name="GeometrySet.h" local="no" imported="no">IMP/display/GeometrySet.h</includes>
    <includes id="LogOptimizerState_8h" name="LogOptimizerState.h" local="no" imported="no">IMP/display/LogOptimizerState.h</includes>
    <includes id="PymolWriter_8h" name="PymolWriter.h" local="no" imported="no">IMP/display/PymolWriter.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <includes id="display__macros_8h" name="display_macros.h" local="no" imported="no">IMP/display/display_macros.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">IMP/display/geometry.h</includes>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="no" imported="no">IMP/display/geometry_macros.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="no" imported="no">IMP/display/primitive_geometries.h</includes>
    <includes id="display_2python__only_8h" name="display/python_only.h" local="no" imported="no">IMP/display/python_only.h</includes>
    <includes id="restraint__geometry_8h" name="restraint_geometry.h" local="no" imported="no">IMP/display/restraint_geometry.h</includes>
    <includes id="writer__macros_8h" name="writer_macros.h" local="no" imported="no">IMP/display/writer_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>display_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>display__macros_8h</filename>
    <includes id="writer__macros_8h" name="writer_macros.h" local="yes" imported="no">writer_macros.h</includes>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="yes" imported="no">geometry_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>algebra/distance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2distance_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0ff1b8570222f9aabf2c1f78c85ed541</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4a5934ef70db58630906eaaf2ff5bae8</anchor>
      <arglist>(const Transformation3D &amp;tr, const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weighted_rmsd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad8088f5211eb076cc858dbd6d10de660</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, const Floats &amp;weights)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom/distance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2distance_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="yes" imported="no">Selection.h</includes>
    <includes id="algebra_2distance_8h" name="algebra/distance.h" local="no" imported="no">IMP/algebra/distance.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_component_placement_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>acf2a8c9e18db10d978cbdb97c654eaf4</anchor>
      <arglist>(const core::XYZs &amp;ref1, const core::XYZs &amp;ref2, const core::XYZs &amp;mdl1, const core::XYZs &amp;mdl2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a10cb65062ed7027cea07ce598cbbd175</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7200d7f08e640bd3f416811320bd2f92</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m0, const Vector3DsOrXYZs1 &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drmsd_Q</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac5a79a2737e93db96838fe761b55fdf2</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m0, const Vector3DsOrXYZs1 &amp;m1, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_native_overlap</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab21a3707f5810f3df642052aea0e7f73</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_pairwise_rmsd_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac1ac30470fc07d7436876b1e1f7accab</anchor>
      <arglist>(const core::XYZs &amp;ref1, const core::XYZs &amp;ref2, const core::XYZs &amp;mdl1, const core::XYZs &amp;mdl2)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_placement_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad664639ebfb7a53a52704685bbe1a803</anchor>
      <arglist>(const core::XYZs &amp;source, const core::XYZs &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4dca993f5bd4a70bb5c5cbd09176819f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, bool weighted=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rigid_bodies_drms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a58aebc295a42228173c884b97b9cb582</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, const IMP::IntRanges &amp;ranges)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa8c6ee981db76d88d7661bb4dd6fb63b</anchor>
      <arglist>(const core::XYZs &amp;s0, const core::XYZs &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9793120929ce62d48d46e06575e19721</anchor>
      <arglist>(const Selection &amp;s0, const Selection &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6548fc0fb1b2329ba9bb38511610953c</anchor>
      <arglist>(const IMP::algebra::Transformation3D &amp;tr, const core::XYZs &amp;s0, const core::XYZs &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a603f2b73d6e22b3a9128e0398bc6e082</anchor>
      <arglist>(const algebra::Transformation3D &amp;tr, const Selection &amp;s0, const Selection &amp;s1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance_pair_score_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>distance__pair__score__macros_8h</filename>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="yes" imported="no">DistancePairScore.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_FUNCTOR_DISTANCE_PAIR_SCORE</name>
      <anchorfile>distance__pair__score__macros_8h.html</anchorfile>
      <anchor>a75ad7f5d54b571679475afeeb8c49fdd</anchor>
      <arglist>(Name, Functor, Args, PassArgs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/DistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2DistancePairScore_8h</filename>
    <includes id="UnaryFunctionEvaluate_8h" name="UnaryFunctionEvaluate.h" local="no" imported="no">IMP/score_functor/UnaryFunctionEvaluate.h</includes>
    <includes id="score__functor_2Harmonic_8h" name="score_functor/Harmonic.h" local="no" imported="no">IMP/score_functor/Harmonic.h</includes>
    <includes id="Shift_8h" name="Shift.h" local="no" imported="no">IMP/score_functor/Shift.h</includes>
    <includes id="distance__pair__score__macros_8h" name="distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/distance_pair_score_macros.h</includes>
    <class kind="class">IMP::core::DistancePairScore</class>
    <class kind="class">IMP::core::HarmonicDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistancePairScore &gt; &gt;</type>
      <name>DistancePairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25eb7dab3c03dfcce8e9c781c1969970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistancePairScore &gt; &gt;</type>
      <name>DistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a30749bde34311071a92ad69f9619960f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicDistancePairScore &gt; &gt;</type>
      <name>HarmonicDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a96313b3a648ded3d50fac0cd436addfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicDistancePairScore &gt; &gt;</type>
      <name>HarmonicDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a7a842201f944771e71a9e74d9ab1ba42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>score_functor/DistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2DistancePairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::score_functor::DistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>DistancePairScoreWithCache.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>DistancePairScoreWithCache_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::score_functor::DistancePairScoreWithCache</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DistanceRestraint_8h</filename>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="yes" imported="no">DistancePairScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::core::DistanceRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceRMSDMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>DistanceRMSDMetric_8h</filename>
    <includes id="algebra_8h" name="algebra.h" local="no" imported="no">IMP/algebra.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Statistics_8h" name="Statistics.h" local="no" imported="no">IMP/statistics.h</includes>
    <class kind="class">IMP::spb::DistanceRMSDMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceTerminiRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>DistanceTerminiRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <class kind="class">IMP::spb::DistanceTerminiRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>DistanceToSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>DistanceToSingletonScore_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::GenericDistanceToSingletonScore</class>
    <class kind="class">IMP::core::SphereDistanceToSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>GenericDistanceToSingletonScore&lt; UnaryFunction &gt;</type>
      <name>DistanceToSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a79106744aa09cfd6bd7e70f98473afde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DistributePairsScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DistributePairsScoreState_8h</filename>
    <includes id="DynamicListPairContainer_8h" name="DynamicListPairContainer.h" local="yes" imported="no">DynamicListPairContainer.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::container::DistributePairsScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>DistributeQuadsScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DistributeQuadsScoreState_8h</filename>
    <includes id="DynamicListQuadContainer_8h" name="DynamicListQuadContainer.h" local="yes" imported="no">DynamicListQuadContainer.h</includes>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
    <class kind="class">IMP::container::DistributeQuadsScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>DistributeSingletonsScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DistributeSingletonsScoreState_8h</filename>
    <includes id="DynamicListSingletonContainer_8h" name="DynamicListSingletonContainer.h" local="yes" imported="no">DynamicListSingletonContainer.h</includes>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::container::DistributeSingletonsScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>DistributeTripletsScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DistributeTripletsScoreState_8h</filename>
    <includes id="DynamicListTripletContainer_8h" name="DynamicListTripletContainer.h" local="yes" imported="no">DynamicListTripletContainer.h</includes>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <class kind="class">IMP::container::DistributeTripletsScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>isd/distribution.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>isd_2distribution_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::isd::Distribution</class>
    <class kind="class">IMP::isd::OneDimensionalDistribution</class>
    <class kind="class">IMP::isd::OneDimensionalSufficientDistribution</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Distribution &gt; &gt;</type>
      <name>Distributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a2c68a9cd2112ab2b29d7fd1f083f15d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Distribution &gt; &gt;</type>
      <name>DistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>ad104f04595872f4669da384840428b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OneDimensionalDistribution &gt; &gt;</type>
      <name>OneDimensionalDistributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a932fbb5ef64d9b8c2db201b40cadb60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OneDimensionalDistribution &gt; &gt;</type>
      <name>OneDimensionalDistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a9ca4895edff0f2841d2e2940a3ac7d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OneDimensionalSufficientDistribution &gt; &gt;</type>
      <name>OneDimensionalSufficientDistributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a5cee41160f2094281badb85f2bf445d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OneDimensionalSufficientDistribution &gt; &gt;</type>
      <name>OneDimensionalSufficientDistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>abdc975998a2b162479f4de5cdb3b6147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saxs/distribution.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>saxs_2distribution_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::saxs::DeltaDistributionFunction</class>
    <class kind="class">IMP::saxs::Distribution</class>
    <class kind="class">IMP::saxs::RadialDistributionFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>DOF.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>DOF_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::kinematics::DOF</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DOF &gt; &gt;</type>
      <name>DOFs</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a48e5f4cdb124cefbf2609fb8e65c8f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DOF &gt; &gt;</type>
      <name>DOFsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a0f0c14a1da8816078943911952798854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DOFsSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>DOFsSampler_8h</filename>
    <includes id="DOFValues_8h" name="DOFValues.h" local="yes" imported="no">DOFValues.h</includes>
    <class kind="class">IMP::kinematics::DOFsSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DOFsSampler &gt; &gt;</type>
      <name>DOFsSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>afb1b7d4b7407cb51948ec6a33bd15ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DOFsSampler &gt; &gt;</type>
      <name>DOFsSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a8d43725ad49c9fafed75619d1b1ca8f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DOFValues.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>DOFValues_8h</filename>
    <includes id="DOF_8h" name="DOF.h" local="yes" imported="no">DOF.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="no" imported="no">IMP/algebra/constants.h</includes>
    <class kind="class">IMP::kinematics::DOFValues</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; DOFValues &gt;</type>
      <name>DOFValuesList</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a421eda62b12353faf0b03f5a342ebd70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Domain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Domain_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Domain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>domino.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>domino_8h</filename>
    <includes id="Assignment_8h" name="Assignment.h" local="no" imported="no">IMP/domino/Assignment.h</includes>
    <includes id="BranchAndBoundSampler_8h" name="BranchAndBoundSampler.h" local="no" imported="no">IMP/domino/BranchAndBoundSampler.h</includes>
    <includes id="DependencyScoreState_8h" name="DependencyScoreState.h" local="no" imported="no">IMP/domino/DependencyScoreState.h</includes>
    <includes id="DiscreteSampler_8h" name="DiscreteSampler.h" local="no" imported="no">IMP/domino/DiscreteSampler.h</includes>
    <includes id="DominoSampler_8h" name="DominoSampler.h" local="no" imported="no">IMP/domino/DominoSampler.h</includes>
    <includes id="Order_8h" name="Order.h" local="no" imported="no">IMP/domino/Order.h</includes>
    <includes id="Slice_8h" name="Slice.h" local="no" imported="no">IMP/domino/Slice.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="no" imported="no">IMP/domino/Subset.h</includes>
    <includes id="analysis_8h" name="analysis.h" local="no" imported="no">IMP/domino/analysis.h</includes>
    <includes id="assignment__containers_8h" name="assignment_containers.h" local="no" imported="no">IMP/domino/assignment_containers.h</includes>
    <includes id="assignment__tables_8h" name="assignment_tables.h" local="no" imported="no">IMP/domino/assignment_tables.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="no" imported="no">IMP/domino/domino_macros.h</includes>
    <includes id="interactive_8h" name="interactive.h" local="no" imported="no">IMP/domino/interactive.h</includes>
    <includes id="particle__states_8h" name="particle_states.h" local="no" imported="no">IMP/domino/particle_states.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="no" imported="no">IMP/domino/subset_filters.h</includes>
    <includes id="subset__graphs_8h" name="subset_graphs.h" local="no" imported="no">IMP/domino/subset_graphs.h</includes>
    <includes id="subset__scores_8h" name="subset_scores.h" local="no" imported="no">IMP/domino/subset_scores.h</includes>
    <includes id="domino_2utility_8h" name="domino/utility.h" local="no" imported="no">IMP/domino/utility.h</includes>
  </compound>
  <compound kind="file">
    <name>domino_filter_tables.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>domino__filter__tables_8h</filename>
    <includes id="domino__particle__states_8h" name="domino_particle_states.h" local="yes" imported="no">IMP/em2d/domino_particle_states.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">IMP/domino/Subset.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="yes" imported="no">IMP/domino/subset_filters.h</includes>
    <includes id="log_8h" name="log.h" local="yes" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em2d::DistanceFilterTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistanceFilterTable &gt; &gt;</type>
      <name>DistanceFilterTables</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a33c0e7350ac1d9e8284429624ef2d8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistanceFilterTable &gt; &gt;</type>
      <name>DistanceFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3dbb30a8a45b2b1d2c4dfbfdcf8ebaf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>domino_filters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>domino__filters_8h</filename>
    <includes id="image__processing_8h" name="image_processing.h" local="yes" imported="no">IMP/em2d/image_processing.h</includes>
    <includes id="domino__particle__states_8h" name="domino_particle_states.h" local="yes" imported="no">IMP/em2d/domino_particle_states.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="yes" imported="no">IMP/domino/subset_filters.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">IMP/domino/Assignment.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <includes id="log_8h" name="log.h" local="yes" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em2d::DistanceFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistanceFilter &gt; &gt;</type>
      <name>DistanceFilters</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4d8f7efd491cc0c3deb9f1d10c6f1956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistanceFilter &gt; &gt;</type>
      <name>DistanceFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af02bbb63b2f72b3bea73878a5210cbbd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>domino_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>domino__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_ASSIGNMENT_CONTAINER_METHODS</name>
      <anchorfile>domino__macros_8h.html</anchorfile>
      <anchor>add1dbc5dedf89823db714443cd55dfda</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DISJOINT_SUBSET_FILTER_TABLE_DECL</name>
      <anchorfile>domino__macros_8h.html</anchorfile>
      <anchor>a3c8c066268a662855b9f27254ad39c9b</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>domino_particle_states.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>domino__particle__states_8h</filename>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">IMP/domino/domino_macros.h</includes>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">IMP/domino/particle_states.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::em2d::GridStates</class>
    <class kind="class">IMP::em2d::ProjectionStates</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GridStates &gt; &gt;</type>
      <name>GridStatesList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a178e7bf66423537894510a17bd7d5b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GridStates &gt; &gt;</type>
      <name>GridStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae53a353f79b8a9ebcb099b7b2da166fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProjectionStates &gt; &gt;</type>
      <name>ProjectionStatesList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac13b2ab3f26942b41da53232df9c571f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProjectionStates &gt; &gt;</type>
      <name>ProjectionStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af41c8627bfea7b62094bc8898fc85afb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DominoSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>DominoSampler_8h</filename>
    <includes id="DiscreteSampler_8h" name="DiscreteSampler.h" local="yes" imported="no">DiscreteSampler.h</includes>
    <includes id="subset__graphs_8h" name="subset_graphs.h" local="yes" imported="no">subset_graphs.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::domino::DominoSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DominoSampler &gt; &gt;</type>
      <name>DominoSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a715ac162fc5158ca0895de2e06444933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DominoSampler &gt; &gt;</type>
      <name>DominoSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab561bd4281a3294ac523ac39925a8910</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dope.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>Dope_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="Statistical_8h" name="Statistical.h" local="yes" imported="no">Statistical.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::Dope</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
    <member kind="typedef">
      <type>Key&lt; 6453462 &gt;</type>
      <name>DopeType</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a97c0892c56f43f9c34aefe0f4f669a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DopeType &gt;</type>
      <name>DopeTypes</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a81c04fc0185c67c6f3d60fa4feb16537</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DopePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>DopePairScore_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Dope_8h" name="Dope.h" local="no" imported="no">IMP/score_functor/Dope.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="StatisticalPairScore_8h" name="StatisticalPairScore.h" local="no" imported="no">IMP/core/StatisticalPairScore.h</includes>
    <class kind="class">IMP::atom::DopePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_dope_score_data</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a830fbd488be01d4f14b53cb840ab7ce9</anchor>
      <arglist>(atom::Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doxygen_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>doxygen__macros_8h</filename>
    <includes id="swig__macros_8h" name="swig_macros.h" local="yes" imported="no">swig_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IMPLEMENT</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>acc5b2e9ca611b3dea5e995114c5a9bff</anchor>
      <arglist>(signature)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IMPLEMENT_INLINE</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>ae8c196cd60e2b6d6ad0cce033bb18625</anchor>
      <arglist>(signature, body)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IMPLEMENT_INLINE_NO_SWIG</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>adf612a8bd60f8c9dd33129762180eeda</anchor>
      <arglist>(signature, body)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IMPLEMENTATION_TEMPLATE_1</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>a2b56066c41f73ffccbe53839dda468d0</anchor>
      <arglist>(arg0, signature, body)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_NO_DOXYGEN</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>a5ed188ddb50fce45234313790d338752</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_ONLY_DOXYGEN</name>
      <anchorfile>doxygen__macros_8h.html</anchorfile>
      <anchor>a221f0067c0e561846f70d405cb241056</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DummyRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>DummyRestraint_8h</filename>
    <includes id="log_8h" name="log.h" local="yes" imported="no">IMP/log.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::em2d::DummyRestraint</class>
    <class kind="class">IMP::em2d::ParticlesDummyRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DummyRestraint &gt; &gt;</type>
      <name>DummyRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1e6e4fe7817944f1e56c85cbc09ef375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DummyRestraint &gt; &gt;</type>
      <name>DummyRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7e935d91d4527f442e7ca9c0783fb0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticlesDummyRestraint &gt; &gt;</type>
      <name>ParticlesDummyRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8320749d2f9d54b726adf4f768fffe0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticlesDummyRestraint &gt; &gt;</type>
      <name>ParticlesDummyRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>abc2a19df0e14dd541c52b2fc7d81fda3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicListPairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DynamicListPairContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::DynamicListPairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListPairContainer &gt; &gt;</type>
      <name>DynamicListPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aca17385402577cc3f2bd80911dd6622e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListPairContainer &gt; &gt;</type>
      <name>DynamicListPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a4fc19efa171d275fa4f4b4fcefe39eea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicListQuadContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DynamicListQuadContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::DynamicListQuadContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListQuadContainer &gt; &gt;</type>
      <name>DynamicListQuadContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>afdcb14ea535a35713eadd099878a9e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListQuadContainer &gt; &gt;</type>
      <name>DynamicListQuadContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>af710a11e6927a0c33b79722ca2c56b14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicListSingletonContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DynamicListSingletonContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::DynamicListSingletonContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListSingletonContainer &gt; &gt;</type>
      <name>DynamicListSingletonContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a2548467b9cac5b0dc4971494ef10b133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListSingletonContainer &gt; &gt;</type>
      <name>DynamicListSingletonContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a9fb7a07cbaf63f556bf9f6a14e8ddb12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DynamicListTripletContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>DynamicListTripletContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::DynamicListTripletContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListTripletContainer &gt; &gt;</type>
      <name>DynamicListTripletContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a46cdb098d0fe719380842b2278d25950</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListTripletContainer &gt; &gt;</type>
      <name>DynamicListTripletContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad8df1d1a51677248bd8afc6a25d24ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigen_analysis.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>eigen__analysis_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="yes" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <class kind="class">IMP::algebra::PrincipalComponentAnalysisD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>Transformation3Ds</type>
      <name>get_alignments_from_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aea2393b6f73c8eb830dfbe6996cafdc5</anchor>
      <arglist>(const PrincipalComponentAnalysisD&lt; 3 &gt; &amp;pca1, const PrincipalComponentAnalysisD&lt; 3 &gt; &amp;pca2)</arglist>
    </member>
    <member kind="function">
      <type>PrincipalComponentAnalysisD&lt; D &gt;</type>
      <name>get_principal_components</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a45f138d8d70f63b404c8ffc9e9b2896e</anchor>
      <arglist>(const Vector&lt; VectorD&lt; D &gt; &gt; &amp;ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>element.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>element_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::atom::ElementTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Element</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a611e6343bbcfccda53cc687bd1b23845</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ellipsoid3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Ellipsoid3D_8h</filename>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="yes" imported="no">ReferenceFrame3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Ellipsoid3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ellipsoid3D &gt;</type>
      <name>Ellipsoid3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af7d3072ebe08ae4ae83065ba0b682e46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>em.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>em_8h</filename>
    <includes id="BayesEM3D_8h" name="BayesEM3D.h" local="no" imported="no">IMP/em/BayesEM3D.h</includes>
    <includes id="CoarseCC_8h" name="CoarseCC.h" local="no" imported="no">IMP/em/CoarseCC.h</includes>
    <includes id="CoarseCCatIntervals_8h" name="CoarseCCatIntervals.h" local="no" imported="no">IMP/em/CoarseCCatIntervals.h</includes>
    <includes id="CoarseConvolution_8h" name="CoarseConvolution.h" local="no" imported="no">IMP/em/CoarseConvolution.h</includes>
    <includes id="DensityFillingRestraint_8h" name="DensityFillingRestraint.h" local="no" imported="no">IMP/em/DensityFillingRestraint.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="no" imported="no">IMP/em/DensityHeader.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="EMReaderWriter_8h" name="EMReaderWriter.h" local="no" imported="no">IMP/em/EMReaderWriter.h</includes>
    <includes id="EnvelopeFitRestraint_8h" name="EnvelopeFitRestraint.h" local="no" imported="no">IMP/em/EnvelopeFitRestraint.h</includes>
    <includes id="EnvelopePenetrationRestraint_8h" name="EnvelopePenetrationRestraint.h" local="no" imported="no">IMP/em/EnvelopePenetrationRestraint.h</includes>
    <includes id="EnvelopeScore_8h" name="EnvelopeScore.h" local="no" imported="no">IMP/em/EnvelopeScore.h</includes>
    <includes id="FitRestraint_8h" name="FitRestraint.h" local="no" imported="no">IMP/em/FitRestraint.h</includes>
    <includes id="FitRestraintBayesEM3D_8h" name="FitRestraintBayesEM3D.h" local="no" imported="no">IMP/em/FitRestraintBayesEM3D.h</includes>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="no" imported="no">IMP/em/ImageHeader.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="no" imported="no">IMP/em/KernelParameters.h</includes>
    <includes id="MRCReaderWriter_8h" name="MRCReaderWriter.h" local="no" imported="no">IMP/em/MRCReaderWriter.h</includes>
    <includes id="MapDistanceTransform_8h" name="MapDistanceTransform.h" local="no" imported="no">IMP/em/MapDistanceTransform.h</includes>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="no" imported="no">IMP/em/MapReaderWriter.h</includes>
    <includes id="PCAAligner_8h" name="PCAAligner.h" local="no" imported="no">IMP/em/PCAAligner.h</includes>
    <includes id="PCAFitRestraint_8h" name="PCAFitRestraint.h" local="no" imported="no">IMP/em/PCAFitRestraint.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="no" imported="no">IMP/em/SampledDensityMap.h</includes>
    <includes id="SpiderHeader_8h" name="SpiderHeader.h" local="no" imported="no">IMP/em/SpiderHeader.h</includes>
    <includes id="SpiderReaderWriter_8h" name="SpiderReaderWriter.h" local="no" imported="no">IMP/em/SpiderReaderWriter.h</includes>
    <includes id="SurfaceShellDensityMap_8h" name="SurfaceShellDensityMap.h" local="no" imported="no">IMP/em/SurfaceShellDensityMap.h</includes>
    <includes id="Voxel_8h" name="Voxel.h" local="no" imported="no">IMP/em/Voxel.h</includes>
    <includes id="XplorReaderWriter_8h" name="XplorReaderWriter.h" local="no" imported="no">IMP/em/XplorReaderWriter.h</includes>
    <includes id="converters_8h" name="converters.h" local="no" imported="no">IMP/em/converters.h</includes>
    <includes id="def_8h" name="def.h" local="no" imported="no">IMP/em/def.h</includes>
    <includes id="density__map__volumetrics_8h" name="density_map_volumetrics.h" local="no" imported="no">IMP/em/density_map_volumetrics.h</includes>
    <includes id="density__utilities_8h" name="density_utilities.h" local="no" imported="no">IMP/em/density_utilities.h</includes>
    <includes id="em_2embedding_8h" name="em/embedding.h" local="no" imported="no">IMP/em/embedding.h</includes>
    <includes id="envelope__penetration_8h" name="envelope_penetration.h" local="no" imported="no">IMP/em/envelope_penetration.h</includes>
    <includes id="exp_8h" name="exp.h" local="no" imported="no">IMP/em/exp.h</includes>
    <includes id="header__converters_8h" name="header_converters.h" local="no" imported="no">IMP/em/header_converters.h</includes>
    <includes id="masking_8h" name="masking.h" local="no" imported="no">IMP/em/masking.h</includes>
    <includes id="rigid__fitting_8h" name="rigid_fitting.h" local="no" imported="no">IMP/em/rigid_fitting.h</includes>
  </compound>
  <compound kind="file">
    <name>em2d.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>em2d_8h</filename>
    <includes id="CollisionCrossSection_8h" name="CollisionCrossSection.h" local="no" imported="no">IMP/em2d/CollisionCrossSection.h</includes>
    <includes id="DummyRestraint_8h" name="DummyRestraint.h" local="no" imported="no">IMP/em2d/DummyRestraint.h</includes>
    <includes id="em2d_2Em2DRestraint_8h" name="em2d/Em2DRestraint.h" local="no" imported="no">IMP/em2d/Em2DRestraint.h</includes>
    <includes id="FFToperations_8h" name="FFToperations.h" local="no" imported="no">IMP/em2d/FFToperations.h</includes>
    <includes id="Image_8h" name="Image.h" local="no" imported="no">IMP/em2d/Image.h</includes>
    <includes id="ImageReaderWriter_8h" name="ImageReaderWriter.h" local="no" imported="no">IMP/em2d/ImageReaderWriter.h</includes>
    <includes id="JPGImageReaderWriter_8h" name="JPGImageReaderWriter.h" local="no" imported="no">IMP/em2d/JPGImageReaderWriter.h</includes>
    <includes id="d_2PCAFitRestraint_8h" name="d/PCAFitRestraint.h" local="no" imported="no">IMP/em2d/PCAFitRestraint.h</includes>
    <includes id="PolarResamplingParameters_8h" name="PolarResamplingParameters.h" local="no" imported="no">IMP/em2d/PolarResamplingParameters.h</includes>
    <includes id="ProjectionFinder_8h" name="ProjectionFinder.h" local="no" imported="no">IMP/em2d/ProjectionFinder.h</includes>
    <includes id="ProjectionMask_8h" name="ProjectionMask.h" local="no" imported="no">IMP/em2d/ProjectionMask.h</includes>
    <includes id="ProjectionParameters_8h" name="ProjectionParameters.h" local="no" imported="no">IMP/em2d/ProjectionParameters.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="no" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="RelativePositionMover_8h" name="RelativePositionMover.h" local="no" imported="no">IMP/em2d/RelativePositionMover.h</includes>
    <includes id="RigidBodiesImageFitRestraint_8h" name="RigidBodiesImageFitRestraint.h" local="no" imported="no">IMP/em2d/RigidBodiesImageFitRestraint.h</includes>
    <includes id="SpiderImageReaderWriter_8h" name="SpiderImageReaderWriter.h" local="no" imported="no">IMP/em2d/SpiderImageReaderWriter.h</includes>
    <includes id="TIFFImageReaderWriter_8h" name="TIFFImageReaderWriter.h" local="no" imported="no">IMP/em2d/TIFFImageReaderWriter.h</includes>
    <includes id="align2D_8h" name="align2D.h" local="no" imported="no">IMP/em2d/align2D.h</includes>
    <includes id="domino__filter__tables_8h" name="domino_filter_tables.h" local="no" imported="no">IMP/em2d/domino_filter_tables.h</includes>
    <includes id="domino__filters_8h" name="domino_filters.h" local="no" imported="no">IMP/em2d/domino_filters.h</includes>
    <includes id="domino__particle__states_8h" name="domino_particle_states.h" local="no" imported="no">IMP/em2d/domino_particle_states.h</includes>
    <includes id="filenames__manipulation_8h" name="filenames_manipulation.h" local="no" imported="no">IMP/em2d/filenames_manipulation.h</includes>
    <includes id="hierarchical__clustering_8h" name="hierarchical_clustering.h" local="no" imported="no">IMP/em2d/hierarchical_clustering.h</includes>
    <includes id="image__processing_8h" name="image_processing.h" local="no" imported="no">IMP/em2d/image_processing.h</includes>
    <includes id="model__interaction_8h" name="model_interaction.h" local="no" imported="no">IMP/em2d/model_interaction.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="no" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="project_8h" name="project.h" local="no" imported="no">IMP/em2d/project.h</includes>
    <includes id="scores2D_8h" name="scores2D.h" local="no" imported="no">IMP/em2d/scores2D.h</includes>
  </compound>
  <compound kind="file">
    <name>em2d/Em2DRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>em2d_2Em2DRestraint_8h</filename>
    <includes id="project_8h" name="project.h" local="yes" imported="no">IMP/em2d/project.h</includes>
    <includes id="ProjectionFinder_8h" name="ProjectionFinder.h" local="yes" imported="no">IMP/em2d/ProjectionFinder.h</includes>
    <includes id="ProjectionMask_8h" name="ProjectionMask.h" local="yes" imported="no">IMP/em2d/ProjectionMask.h</includes>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="scores2D_8h" name="scores2D.h" local="yes" imported="no">IMP/em2d/scores2D.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="yes" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::em2d::Em2DRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Em2DRestraint &gt; &gt;</type>
      <name>Em2DRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af38a60661acb131fd60ddf1f30ba9ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Em2DRestraint &gt; &gt;</type>
      <name>Em2DRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8a13a699102b9ef7af47a0fdd34d9f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spb/Em2DRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb_2Em2DRestraint_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Image_8h" name="Image.h" local="no" imported="no">IMP/em2d/Image.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="no" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="project_8h" name="project.h" local="no" imported="no">IMP/em2d/project.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="spb_2ISDRestraint_8h" name="spb/ISDRestraint.h" local="no" imported="no">IMP/spb/ISDRestraint.h</includes>
    <class kind="class">IMP::spb::EM2DRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>em_utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>em__utilities_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="no" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="vector__generators_8h" name="vector_generators.h" local="no" imported="no">IMP/algebra/vector_generators.h</includes>
    <includes id="core_2Gaussian_8h" name="core/Gaussian.h" local="no" imported="no">IMP/core/Gaussian.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="no" imported="no">IMP/em/DensityHeader.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
  </compound>
  <compound kind="file">
    <name>em/embedding.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>em_2embedding_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="no" imported="no">IMP/statistics/Embedding.h</includes>
    <class kind="class">IMP::em::HighDensityEmbedding</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>statistics/embedding.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>statistics_2embedding_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::statistics::Embedding</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Embedding &gt; &gt;</type>
      <name>Embeddings</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a2e77da82dce88ee51ea0a461212c82f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Embedding &gt; &gt;</type>
      <name>EmbeddingsTemp</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aa1b9c40712d53ed04bc5ab0bf0daae8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>embeddings.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>embeddings_8h</filename>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="yes" imported="no">Embedding.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="no" imported="no">IMP/ConfigurationSet.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <class kind="class">IMP::statistics::ConfigurationSetXYZEmbedding</class>
    <class kind="class">IMP::statistics::ParticleEmbedding</class>
    <class kind="class">IMP::statistics::VectorDEmbedding</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>EMReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>EMReaderWriter_8h</filename>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="yes" imported="no">MapReaderWriter.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <class kind="class">IMP::em::EMReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>endian.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>endian_8h</filename>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>void</type>
      <name>reversed_read</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5f5bf387966db8c6d9a47af8846a66c2</anchor>
      <arglist>(void *dest, size_t size, size_t nitems, std::ifstream &amp;f, bool reverse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reversed_write</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7513224a8221f4a655ffe6777938dfd1</anchor>
      <arglist>(const void *src, size_t size, size_t nitems, std::ofstream &amp;f, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_big_endian</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac033cb67271f38d0b002e90ac55043bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_little_endian</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac6e2c05af40067eae38dc93ad0cc0e1d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ensemble_analysis.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>ensemble__analysis_8h</filename>
    <includes id="SettingsData_8h" name="SettingsData.h" local="no" imported="no">IMP/multifit/SettingsData.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="no" imported="no">IMP/multifit/FittingSolutionRecord.h</includes>
    <includes id="fitting__solutions__reader__writer_8h" name="fitting_solutions_reader_writer.h" local="no" imported="no">IMP/multifit/fitting_solutions_reader_writer.h</includes>
    <includes id="atom_2distance_8h" name="atom/distance.h" local="no" imported="no">IMP/atom/distance.h</includes>
    <includes id="DiscreteSampler_8h" name="DiscreteSampler.h" local="no" imported="no">IMP/domino/DiscreteSampler.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="protein__anchors__mapping__reader_8h" name="protein_anchors_mapping_reader.h" local="no" imported="no">IMP/multifit/protein_anchors_mapping_reader.h</includes>
    <class kind="class">IMP::multifit::Ensemble</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Ensemble &gt; &gt;</type>
      <name>Ensembles</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a95a979e03be1bace34327d2afb11aab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Ensemble &gt; &gt;</type>
      <name>EnsemblesTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a9db22354fb89bfa907bb35581f459e01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnsembleGenerator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>EnsembleGenerator_8h</filename>
    <includes id="MultiStateModel_8h" name="MultiStateModel.h" local="yes" imported="no">MultiStateModel.h</includes>
    <includes id="MultiStateModelScore_8h" name="MultiStateModelScore.h" local="yes" imported="no">MultiStateModelScore.h</includes>
    <class kind="class">IMP::multi_state::EnsembleGenerator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>enums.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>enums_8h</filename>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="yes" imported="no">compiler_macros.h</includes>
    <namespace>IMP</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CheckLevel</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT_CHECK</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7acaaf92e1c86ce15d65c3e411d583c76aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7aca7e4fc874347d08361f27c0d0e0fb193d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USAGE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7aca2ee9bf03f28b95093805af0848a742ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USAGE_AND_INTERNAL</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7acaae5cfdef31e7a48532eb8b55cb8d5a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a16d1612b87a38b835057c8c1fd3b94dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SILENT</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a8dcdfe6b39776037fc051b5f329cdc67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WARNING</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a29a8324a4b97866dcb03c690ee3a5182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROGRESS</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182af1e29caec01f661ebf53f5064505e1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TERSE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a863886e8e4fac571b4ea1ca817b4f20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VERBOSE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a90d193f5f24a5bf6ff010579e6505a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MEMORY</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a7a2dc8adf999dbeb92cc26018ca759d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>npctransport/enums.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>npctransport_2enums_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>envelope_penetration.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>envelope__penetration_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>long</type>
      <name>get_number_of_particles_outside_of_the_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a5a49f58c2b493fe460df2a1f42aed80d</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, const IMP::algebra::Transformation3D &amp;t=IMP::algebra::get_identity_transformation_3d(), float thr=0.0)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_numbers_of_particles_outside_of_the_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a55a883a182ff619b805f5bbcb5297c2e</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, const IMP::algebra::Transformation3Ds &amp;transformations, float thr=0.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_percentage_of_voxels_covered_by_particles</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a6ac62bc20e89bf2c6e8f8f6bb5cbca5a</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, float smoothing_radius=3., const IMP::algebra::Transformation3D &amp;t=IMP::algebra::get_identity_transformation_3d(), float thr=0.0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EnvelopeFitRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>EnvelopeFitRestraint_8h</filename>
    <includes id="PCAAligner_8h" name="PCAAligner.h" local="no" imported="no">IMP/em/PCAAligner.h</includes>
    <includes id="MapDistanceTransform_8h" name="MapDistanceTransform.h" local="no" imported="no">IMP/em/MapDistanceTransform.h</includes>
    <includes id="EnvelopeScore_8h" name="EnvelopeScore.h" local="no" imported="no">IMP/em/EnvelopeScore.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::em::EnvelopeFitRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>EnvelopePenetrationRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>EnvelopePenetrationRestraint_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::em::EnvelopePenetrationRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>EnvelopeScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>EnvelopeScore_8h</filename>
    <includes id="MapDistanceTransform_8h" name="MapDistanceTransform.h" local="no" imported="no">IMP/em/MapDistanceTransform.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::em::EnvelopeScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>estimates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>estimates_8h</filename>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_angle</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac7f0983a123dcfd53bab15db3adf8ab6</anchor>
      <arglist>(double D, double dtfs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5985e0551db622b63f81cc9281dd3cf8</anchor>
      <arglist>(const algebra::Vector3Ds &amp;displacements, double dt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0b49ba26ea4fafcad1571f4d1db470c8</anchor>
      <arglist>(const algebra::Vector3Ds &amp;displacements, const Floats &amp;dts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_length</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adb8bfb501a65ca39fcc92e4bab41e27c</anchor>
      <arglist>(double D, double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_length</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a54369282f293a823d4ebba467d133625</anchor>
      <arglist>(double D, double force, double t, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_einstein_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afc84132665014b5c1d83874d94e65135</anchor>
      <arglist>(double r, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_einstein_rotational_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8a2038514bb5ec1cf54e5ee890e6f853</anchor>
      <arglist>(double r, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_kd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab1a4ec2a67584faf97431ee40db0c9bf</anchor>
      <arglist>(double na, double nb, double nab, double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_molarity</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a310e584e334797dece24865da5311a67</anchor>
      <arglist>(double n, double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rotational_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a50abb962d1335771930636f7ba21eec9</anchor>
      <arglist>(const algebra::Rotation3Ds &amp;orientations, double dt)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProteinDensityReference</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a83dcb2842785e4a1765fa49ff31d08ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_protein_density_from_reference</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6d6f100b19ab101e8bed8859366a64a2</anchor>
      <arglist>(ProteinDensityReference densityReference)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume_from_mass</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5dd4553eb612578c64d8d5f7647eb8bc</anchor>
      <arglist>(double m, ProteinDensityReference ref=ALBER)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass_from_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6709058099fa170d8fd257efa7fb2370</anchor>
      <arglist>(double v, ProteinDensityReference ref=ALBER)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass_from_number_of_residues</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac0c5da69febc887ac1ce7bc355f54629</anchor>
      <arglist>(unsigned int num_aa)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume_from_residue_type</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3982cc0d820dfdeb89abf056f3338754</anchor>
      <arglist>(ResidueType rt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_force_in_femto_newtons</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a222828b045fb8a1dd4922e5a7feae248</anchor>
      <arglist>(double force_in_kcal_per_mol_per_angstrom)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_spring_constant_in_femto_newtons_per_angstrom</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a693776eb95528c00cc89bbd84defd8a1</anchor>
      <arglist>(double k_in_kcal_per_mol_per_angstrom_square)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EventPairsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>EventPairsOptimizerState_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::container::EventPairsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>EventQuadsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>EventQuadsOptimizerState_8h</filename>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <class kind="class">IMP::container::EventQuadsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>EventSingletonsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>EventSingletonsOptimizerState_8h</filename>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::container::EventSingletonsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>EventTripletsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>EventTripletsOptimizerState_8h</filename>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <class kind="class">IMP::container::EventTripletsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>example.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>example_8h</filename>
    <includes id="ExampleComplexRestraint_8h" name="ExampleComplexRestraint.h" local="no" imported="no">IMP/example/ExampleComplexRestraint.h</includes>
    <includes id="ExampleConstraint_8h" name="ExampleConstraint.h" local="no" imported="no">IMP/example/ExampleConstraint.h</includes>
    <includes id="ExampleDecorator_8h" name="ExampleDecorator.h" local="no" imported="no">IMP/example/ExampleDecorator.h</includes>
    <includes id="ExampleObject_8h" name="ExampleObject.h" local="no" imported="no">IMP/example/ExampleObject.h</includes>
    <includes id="ExamplePairScore_8h" name="ExamplePairScore.h" local="no" imported="no">IMP/example/ExamplePairScore.h</includes>
    <includes id="ExampleRestraint_8h" name="ExampleRestraint.h" local="no" imported="no">IMP/example/ExampleRestraint.h</includes>
    <includes id="ExampleSingletonModifier_8h" name="ExampleSingletonModifier.h" local="no" imported="no">IMP/example/ExampleSingletonModifier.h</includes>
    <includes id="ExampleSubsetFilterTable_8h" name="ExampleSubsetFilterTable.h" local="no" imported="no">IMP/example/ExampleSubsetFilterTable.h</includes>
    <includes id="ExampleTemplateClass_8h" name="ExampleTemplateClass.h" local="no" imported="no">IMP/example/ExampleTemplateClass.h</includes>
    <includes id="ExampleUnaryFunction_8h" name="ExampleUnaryFunction.h" local="no" imported="no">IMP/example/ExampleUnaryFunction.h</includes>
    <includes id="counting_8h" name="counting.h" local="no" imported="no">IMP/example/counting.h</includes>
    <includes id="creating__restraints_8h" name="creating_restraints.h" local="no" imported="no">IMP/example/creating_restraints.h</includes>
    <includes id="randomizing_8h" name="randomizing.h" local="no" imported="no">IMP/example/randomizing.h</includes>
  </compound>
  <compound kind="file">
    <name>ExampleComplexRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleComplexRestraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::example::ExampleComplexRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleConstraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::example::ExampleConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleDecorator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleDecorator_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::example::ExampleDecorator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleObject.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleObject_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::example::ExampleObject</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExamplePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExamplePairScore_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::example::ExamplePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ExamplePairScore &gt; &gt;</type>
      <name>ExamplePairScores</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a686e92f35902479cf1a55cac9238bbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ExamplePairScore &gt; &gt;</type>
      <name>ExamplePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>af337e634e5bd61458f9c0621280d84e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExampleRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::example::ExampleRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleSingletonModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleSingletonModifier_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::example::ExampleSingletonModifier</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleSubsetFilterTable.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleSubsetFilterTable_8h</filename>
    <includes id="subset__filters_8h" name="subset_filters.h" local="no" imported="no">IMP/domino/subset_filters.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="no" imported="no">IMP/domino/domino_macros.h</includes>
    <class kind="class">IMP::example::ExampleSubsetFilterTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleTemplateClass.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleTemplateClass_8h</filename>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <class kind="class">IMP::example::ExampleTemplateClassD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>ExampleUnaryFunction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>ExampleUnaryFunction_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::example::ExampleUnaryFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
  </compound>
  <compound kind="file">
    <name>exception.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>exception_8h</filename>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="yes" imported="no">compiler_macros.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <class kind="class">IMP::EventException</class>
    <class kind="class">IMP::Exception</class>
    <class kind="class">IMP::IndexException</class>
    <class kind="struct">IMP::InternalException</class>
    <class kind="class">IMP::IOException</class>
    <class kind="class">IMP::ModelException</class>
    <class kind="class">IMP::TypeException</class>
    <class kind="class">IMP::UsageException</class>
    <class kind="class">IMP::ValueException</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>void</type>
      <name>set_check_level</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a77813d3c5bd7a8426d59d4790d6e69ee</anchor>
      <arglist>(CheckLevel tf)</arglist>
    </member>
    <member kind="function">
      <type>CheckLevel</type>
      <name>get_check_level</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad002a140af44d7962bbf5b9fdc61e33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_error</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2af9df29e845928c96d779c00a6ab1a5</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExcludedVolumeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>ExcludedVolumeRestraint_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">rigid_bodies.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="RigidClosePairsFinder_8h" name="RigidClosePairsFinder.h" local="yes" imported="no">RigidClosePairsFinder.h</includes>
    <includes id="SphereDistancePairScore_8h" name="SphereDistancePairScore.h" local="no" imported="no">IMP/core/SphereDistancePairScore.h</includes>
    <class kind="class">IMP::core::ExcludedVolumeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ExcludeZRangeSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ExcludeZRangeSingletonScore_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::npctransport::ExcludeZRangeSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>exp.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>exp_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>EzRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>EzRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::atom::EzRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>fft_based_rigid_fitting.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>fft__based__rigid__fitting_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="no" imported="no">IMP/multifit/FittingSolutionRecord.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="no" imported="no">IMP/em/SampledDensityMap.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="no" imported="no">IMP/em/KernelParameters.h</includes>
    <class kind="class">IMP::multifit::FFTFitting</class>
    <class kind="class">IMP::multifit::FFTFittingOutput</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>multifit::FittingSolutionRecords</type>
      <name>fft_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af83b1866a4b7bb6747eea98bd9bb28e1</anchor>
      <arglist>(atom::Hierarchy mol2fit, em::DensityMap *dmap, double density_threshold, double angle_sampling_interval_rad)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FFToperations.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>FFToperations_8h</filename>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="function">
      <type>void</type>
      <name>do_matrix_to_image_flip</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae6185037f9174693f64c885d39c8d19e</anchor>
      <arglist>(cv::Mat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a715222bf68d4c8f207daa87b917485d9</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ade457bcb204e0cdbc3f37c62735a95c3</anchor>
      <arglist>(const cv::Mat &amp;M, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a95559755452453024f32344cee0ec43f</anchor>
      <arglist>(const cv::Mat &amp;A, const cv::Mat &amp;B, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8c8e930b89742e1e8793afaee0c828fd</anchor>
      <arglist>(const cv::Mat &amp;M1, const cv::Mat &amp;M2, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_fft_using_optimal_size</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a62859c43c4b08d07c865cde8bf10783d</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_spectrum</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a018f7a244a4463cd0da0111aeaedf796</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;real, cv::Mat &amp;imag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FGChain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>FGChain_8h</filename>
    <includes id="linear__distance__pair__scores_8h" name="linear_distance_pair_scores.h" local="yes" imported="no">linear_distance_pair_scores.h</includes>
    <includes id="npctransport__proto_8fwd_8h" name="npctransport_proto.fwd.h" local="yes" imported="no">npctransport_proto.fwd.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="ConsecutivePairContainer_8h" name="ConsecutivePairContainer.h" local="no" imported="no">IMP/container/ConsecutivePairContainer.h</includes>
    <includes id="Color_8h" name="Color.h" local="no" imported="no">IMP/display/Color.h</includes>
    <class kind="class">IMP::npctransport::FGChain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FGChain &gt; &gt;</type>
      <name>FGChains</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a95d9b325a38781ba1119c35a6bd09fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FGChain &gt; &gt;</type>
      <name>FGChainsTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac89b6c4a987f4ebc6e207c70e2b41134</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>create_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac5025684e81bdc014b287d20e18373d9</anchor>
      <arglist>(IMP::npctransport::SimulationData *sd, atom::Hierarchy parent, const ::npctransport_proto::Assignment_FGAssignment &amp;fg_data, display::Color c)</arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>get_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ab096cc50c7e35bf530e712d1bd321809</anchor>
      <arglist>(atom::Hierarchy root)</arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>get_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae7a91516eb510beba957bd253626e22b</anchor>
      <arglist>(Particle *p_root)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FibrilSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>FibrilSampler_8h</filename>
    <includes id="DOFsSampler_8h" name="DOFsSampler.h" local="yes" imported="no">DOFsSampler.h</includes>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="yes" imported="no">revolute_joints.h</includes>
    <includes id="TransformationJoint_8h" name="TransformationJoint.h" local="yes" imported="no">TransformationJoint.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="no" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::kinematics::FibrilSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FibrilSampler &gt; &gt;</type>
      <name>FibrilSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3a8cba1b48791deba0917f81289124f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FibrilSampler &gt; &gt;</type>
      <name>FibrilSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a9763e160af13d5c33a14bffb1167eb63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>file.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>file_8h</filename>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">exception.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">Pointer.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="RAII_8h" name="RAII.h" local="yes" imported="no">RAII.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="yes" imported="no">InputAdaptor.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="yes" imported="no">check_macros.h</includes>
    <class kind="class">IMP::SetLogTarget</class>
    <class kind="class">IMP::TextInput</class>
    <class kind="class">IMP::TextOutput</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; TextInput &gt;</type>
      <name>TextInputs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae6002d73f61d27ae4e2fd043c2948a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; TextOutput &gt;</type>
      <name>TextOutputs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa96e1a2a30476bd720cf97b42ce46e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TextOutput</type>
      <name>create_temporary_file</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab80a40f6e42e620a158a956ec33acb68</anchor>
      <arglist>(std::string prefix=&quot;imp_temp&quot;, std::string suffix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>create_temporary_file_name</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3242b867f308d26108a257087714c3da</anchor>
      <arglist>(std::string prefix=&quot;imp_temp&quot;, std::string suffix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_absolute_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a405450b8b6fb9eb4c790bc6770de9f51</anchor>
      <arglist>(std::string file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_relative_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a88408d94584a6307954d029aee9a8c8c</anchor>
      <arglist>(std::string base, std::string relative)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_target</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a53851bd4b9e93a219fc7a2b8da3811f7</anchor>
      <arglist>(TextOutput l)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filenames_manipulation.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>filenames__manipulation_8h</filename>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">IMP/exception.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <member kind="function">
      <type>Strings</type>
      <name>create_filenames</name>
      <anchorfile>filenames__manipulation_8h.html</anchorfile>
      <anchor>af8990d1a066085d309dc3bfbd6d24a0c</anchor>
      <arglist>(unsigned long number, String basic_name, String extension)</arglist>
    </member>
    <member kind="function">
      <type>IMPEM2D_BEGIN_NAMESPACE Strings</type>
      <name>read_selection_file</name>
      <anchorfile>filenames__manipulation_8h.html</anchorfile>
      <anchor>aaa5a6a2c521a7f183922b558334e9a8c</anchor>
      <arglist>(String fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FilterGeometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>FilterGeometry_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="GeometryProcessor_8h" name="GeometryProcessor.h" local="yes" imported="no">GeometryProcessor.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="no" imported="no">IMP/algebra/Plane3D.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <class kind="class">IMP::display::FilterGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>FitParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>FitParameters_8h</filename>
    <class kind="class">IMP::saxs::FitParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>FitRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>FitRestraint_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="CoarseCC_8h" name="CoarseCC.h" local="yes" imported="no">CoarseCC.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::em::FitRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>FitRestraintBayesEM3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>FitRestraintBayesEM3D_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="BayesEM3D_8h" name="BayesEM3D.h" local="yes" imported="no">BayesEM3D.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <class kind="class">IMP::em::FitRestraintBayesEM3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>fitting_solutions_reader_writer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>fitting__solutions__reader__writer_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="rigid__fitting_8h" name="rigid_fitting.h" local="no" imported="no">IMP/em/rigid_fitting.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="yes" imported="no">FittingSolutionRecord.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>FittingSolutionRecords</type>
      <name>read_fitting_solutions</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae07f089c01764aa197297e2da4aa743a</anchor>
      <arglist>(const char *fitting_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_fitting_solutions</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a353be2a32c95fe02505606f5fc25465f</anchor>
      <arglist>(const char *fitting_fn, const FittingSolutionRecords &amp;fit_sols, int num_sols=-1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fitting_states.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>fitting__states_8h</filename>
    <includes id="particle__states_8h" name="particle_states.h" local="no" imported="no">IMP/domino/particle_states.h</includes>
    <class kind="class">IMP::multifit::FittingStates</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>fitting_tools.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>fitting__tools_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="yes" imported="no">FittingSolutionRecord.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>FittingSolutionRecords</type>
      <name>get_close_to_point</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a72317593e3aff9f9e43e2e4f92481f47</anchor>
      <arglist>(const FittingSolutionRecords &amp;fit_sols, atom::Hierarchy mh, IMP::Particle *ap, Float dist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fitting_utils.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>fitting__utils_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="rigid__fitting_8h" name="rigid_fitting.h" local="no" imported="no">IMP/em/rigid_fitting.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="yes" imported="no">FittingSolutionRecord.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>algebra::Vector3Ds</type>
      <name>get_points_close_to_molecule</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad9a90449965866bc3f547eb9e2193399</anchor>
      <arglist>(const atom::Hierarchy &amp;mh, const algebra::Vector3Ds points, Float max_dist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FittingSolutionRecord.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>FittingSolutionRecord_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <class kind="class">IMP::multifit::FittingSolutionRecord</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingSolutionRecord &gt;</type>
      <name>FittingSolutionRecords</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a6a146f6a8796d388d0d33755d430840e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>FixedRefiner_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::FixedRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Flag.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Flag_8h</filename>
    <class kind="class">IMP::AdvancedFlag</class>
    <class kind="class">IMP::Flag</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>flags.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>flags_8h</filename>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <class kind="struct">IMP::AddBoolFlag</class>
    <class kind="struct">IMP::AddFloatFlag</class>
    <class kind="struct">IMP::AddIntFlag</class>
    <class kind="struct">IMP::AddStringFlag</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>bool</type>
      <name>get_is_quick_test</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4dc39629503b0dc2821ee8110b84b2df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_help</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4306531ff1cc0c532973cc461cb3b5c6</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_executable_name</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a57c73e41125d47b1d11a1bb65d5a81fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_from_argv</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9133b7c34c4c22a08a659a21444a6c3e</anchor>
      <arglist>(int argc, char **argv, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>setup_from_argv_allowing_unknown</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3f5aaa178036a28ddf0ef8bf40d6836a</anchor>
      <arglist>(int argc, char **argv, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>setup_from_argv</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a31408f1e93c9f480a4d715352fbc7ed9</anchor>
      <arglist>(int argc, char **argv, std::string description, std::string positional_description, int num_positional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_from_argv</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6f63d451dc8f1fbab96b0c1207fa03ae</anchor>
      <arglist>(const Strings &amp;argv, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>setup_from_argv</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7c7586ce26e86a3a99359b738d0f3381</anchor>
      <arglist>(const Strings &amp;argv, std::string description, std::string positional_description, int num_positional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_string_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af29797659d2b939f407b2da9910dc691</anchor>
      <arglist>(std::string name, std::string default_value, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab002f975490bec1c82268332b975b086</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_int_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a247a8bd82f615542dcf1221bb459a995</anchor>
      <arglist>(std::string name, size_t default_value, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_int_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2bad7bd0ddb510e7470a32f1383edd8f</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_bool_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a56dde003231c4d4934ad9452cba3f929</anchor>
      <arglist>(std::string name, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bool_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a16cf9525f1f9d92a79d8ccde3733759c</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_float_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9fb2470017f57e2425bc47f10cc291d1</anchor>
      <arglist>(std::string name, double default_value, std::string description)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_float_flag</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae9085368691f40450056021c536ea47d</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FloatIndex.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>FloatIndex_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="struct">IMP::FloatIndex</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatIndex &gt;</type>
      <name>FloatIndexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a25694e02f7357c9e36cecaa1bae08801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FNormal.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>FNormal_8h</filename>
    <includes id="isd_2distribution_8h" name="isd/distribution.h" local="no" imported="no">IMP/isd/distribution.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::FNormal</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>force_fields.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>force__fields_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="ForceFieldParameters_8h" name="ForceFieldParameters.h" local="yes" imported="no">ForceFieldParameters.h</includes>
    <includes id="CHARMMParameters_8h" name="CHARMMParameters.h" local="yes" imported="no">CHARMMParameters.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_bonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0b3af7559bf1bed6ecdfe98701fab423</anchor>
      <arglist>(Hierarchy d, const ForceFieldParameters *ffp=get_all_atom_CHARMM_parameters())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_radii</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad6e74dd86fdc8480090199a6cdc8bf55</anchor>
      <arglist>(Hierarchy d, const ForceFieldParameters *ffp=get_all_atom_CHARMM_parameters(), FloatKey radius_key=FloatKey(&quot;radius&quot;))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForceFieldParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>ForceFieldParameters_8h</filename>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::atom::ForceFieldParameters::Bond</class>
    <class kind="class">IMP::atom::ForceFieldParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>FormFactorTable.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>FormFactorTable_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="no" imported="no">IMP/atom/Residue.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="element_8h" name="element.h" local="no" imported="no">IMP/atom/element.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::saxs::FormFactorTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
    <member kind="enumeration">
      <type></type>
      <name>FormFactorType</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>af6bcf28f95539cc1cfa91071938ee111</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FormFactorTable *</type>
      <name>get_default_form_factor_table</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a4376a2c676c4c92975cbb4df0cb6d294</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>foxs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>foxs_8h</filename>
  </compound>
  <compound kind="file">
    <name>Fragment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Fragment_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Fragment</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>frames.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>frames_8h</filename>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="function">
      <type>void</type>
      <name>load_frame</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>abc15209a0aef0e859c99ce00659ebdfb</anchor>
      <arglist>(RMF::FileConstHandle file, RMF::FrameID frame)</arglist>
    </member>
    <member kind="function">
      <type>RMF::FrameID</type>
      <name>save_frame</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ad6d2441fb928c5ed04c1231864cae1c8</anchor>
      <arglist>(RMF::FileHandle file, std::string name=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FreelyJointedChain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>FreelyJointedChain_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::misc::FreelyJointedChain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>FretData.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>FretData_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::FretData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>FretRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>FretRestraint_8h</filename>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="FretData_8h" name="FretData.h" local="no" imported="no">IMP/isd/FretData.h</includes>
    <class kind="class">IMP::isd::FretRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>FStudentT.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>FStudentT_8h</filename>
    <includes id="isd_2distribution_8h" name="isd/distribution.h" local="no" imported="no">IMP/isd/distribution.h</includes>
    <class kind="class">IMP::isd::FStudentT</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FStudentT &gt; &gt;</type>
      <name>FStudentTs</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>ac2c53d71f0a46eb1b31d7bcad39bf8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FStudentT &gt; &gt;</type>
      <name>FStudentTsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a483e031afec4e36375cb95fc3742561e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functor.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>functor_8h</filename>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>internal::PredicateEquals&lt; Pred, true &gt;</type>
      <name>make_predicate_equal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac41efde5dbdaa13e7166be7a63819d09</anchor>
      <arglist>(const Pred *p, Model *m, int value)</arglist>
    </member>
    <member kind="function">
      <type>internal::PredicateEquals&lt; Pred, false &gt;</type>
      <name>make_predicate_not_equal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae566fd45264b1979dd14b55d2fa6d288</anchor>
      <arglist>(const Pred *p, Model *m, int value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functor_linear_distance_pair_scores.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>functor__linear__distance__pair__scores_8h</filename>
    <includes id="functor__linear__distance__pair__scores__typedefs_8h" name="functor_linear_distance_pair_scores_typedefs.h" local="no" imported="no">IMP/npctransport/functor_linear_distance_pair_scores_typedefs.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="LinearLowerBound_8h" name="LinearLowerBound.h" local="no" imported="no">IMP/score_functor/LinearLowerBound.h</includes>
    <includes id="SphereDistance_8h" name="SphereDistance.h" local="no" imported="no">IMP/score_functor/SphereDistance.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="distance__pair__score__macros_8h" name="distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/distance_pair_score_macros.h</includes>
    <class kind="class">IMP::npctransport::FunctorLinearInteractionPairScore</class>
    <class kind="class">IMP::npctransport::FunctorLinearSoftSpherePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>functor_linear_distance_pair_scores_typedefs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>functor__linear__distance__pair__scores__typedefs_8h</filename>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="LinearLowerBound_8h" name="LinearLowerBound.h" local="no" imported="no">IMP/score_functor/LinearLowerBound.h</includes>
    <includes id="SphereDistance_8h" name="SphereDistance.h" local="no" imported="no">IMP/score_functor/SphereDistance.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="distance__pair__score__macros_8h" name="distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/distance_pair_score_macros.h</includes>
    <class kind="class">IMP::npctransport::LinearInteraction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LinearInteraction &gt; &gt;</type>
      <name>LinearInteractions</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ace066d1589beba0be2940d7ea8fb486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LinearInteraction &gt; &gt;</type>
      <name>LinearInteractionsTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a253f3034681a61da6e4bb49bda86650d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GammaPrior.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>GammaPrior_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::GammaPrior</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>core/Gaussian.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2Gaussian_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="no" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::core::Gaussian</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>spb/Gaussian.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb_2Gaussian_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <class kind="class">IMP::spb::Gaussian</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Gaussian3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Gaussian3D_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="yes" imported="no">ReferenceFrame3D.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <class kind="class">IMP::algebra::Gaussian3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Gaussian3D &gt;</type>
      <name>Gaussian3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad372e62d98d7c08c91e4c53b2e09e200</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>get_covariance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4883e8de2c04d91ad0b0d336564dc4a4</anchor>
      <arglist>(const Gaussian3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Gaussian3D</type>
      <name>get_gaussian_from_covariance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a059a34d24381984fa86ea77b026daa7e</anchor>
      <arglist>(const Eigen::Matrix3d &amp;covariance, const Vector3D &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>DenseGrid3D&lt; double &gt;</type>
      <name>get_rasterized</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a12a52b82cf3482107fa5557bb03406ba</anchor>
      <arglist>(const Gaussian3Ds &amp;gmm, const Floats &amp;weights, double cell_width, const BoundingBox3D &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>DenseGrid3D&lt; double &gt;</type>
      <name>get_rasterized_fast</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a06a6c8eb266cb9aa4e9a6bdac5b12752</anchor>
      <arglist>(const Gaussian3Ds &amp;gmm, const Floats &amp;weights, double cell_width, const BoundingBox3D &amp;bb, double factor=2.5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianAnchorEMRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>GaussianAnchorEMRestraint_8h</filename>
    <includes id="isd_2ISDRestraint_8h" name="isd/ISDRestraint.h" local="no" imported="no">IMP/isd/ISDRestraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <class kind="class">IMP::isd::GaussianAnchorEMRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>bayesianem/GaussianEMRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/bayesianem/</path>
    <filename>bayesianem_2GaussianEMRestraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="core_2Gaussian_8h" name="core/Gaussian.h" local="no" imported="no">IMP/core/Gaussian.h</includes>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="no" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="ClosePairContainer_8h" name="ClosePairContainer.h" local="no" imported="no">IMP/container/ClosePairContainer.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">math.h</includes>
    <class kind="class">IMP::bayesianem::GaussianEMRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::bayesianem</namespace>
  </compound>
  <compound kind="file">
    <name>isd/GaussianEMRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>isd_2GaussianEMRestraint_8h</filename>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="core_2Gaussian_8h" name="core/Gaussian.h" local="no" imported="no">IMP/core/Gaussian.h</includes>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="no" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="ClosePairContainer_8h" name="ClosePairContainer.h" local="no" imported="no">IMP/container/ClosePairContainer.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <class kind="class">IMP::isd::GaussianEMRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianProcessInterpolation.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>GaussianProcessInterpolation_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="univariate__functions_8h" name="univariate_functions.h" local="no" imported="no">IMP/isd/univariate_functions.h</includes>
    <includes id="bivariate__functions_8h" name="bivariate_functions.h" local="no" imported="no">IMP/isd/bivariate_functions.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <class kind="class">IMP::isd::GaussianProcessInterpolation</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianProcessInterpolationRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>GaussianProcessInterpolationRestraint_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="GaussianProcessInterpolation_8h" name="GaussianProcessInterpolation.h" local="no" imported="no">IMP/isd/GaussianProcessInterpolation.h</includes>
    <includes id="MultivariateFNormalSufficient_8h" name="MultivariateFNormalSufficient.h" local="no" imported="no">IMP/isd/MultivariateFNormalSufficient.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::isd::GaussianProcessInterpolationRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>GaussianRestraint_8h</filename>
    <includes id="FNormal_8h" name="FNormal.h" local="no" imported="no">IMP/isd/FNormal.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::GaussianRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>container/generic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>container_2generic_8h</filename>
    <includes id="InContainerPairFilter_8h" name="InContainerPairFilter.h" local="no" imported="no">IMP/container/InContainerPairFilter.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="function">
      <type>Constraint *</type>
      <name>create_constraint</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0e72bed2aebfee3bc2cf60a2a23cfa45</anchor>
      <arglist>(Before *b, After *a, Container *c, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>PairPredicate *</type>
      <name>create_in_container_filter</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a38623c7bf5f1b07e8f093aedce4f44ef</anchor>
      <arglist>(Container *c, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_restraint</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad05b9be19e11c1364862cf8e032768e9</anchor>
      <arglist>(Score *s, Container *c, std::string name=std::string())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/generic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2generic_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>generic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>generic_8h</filename>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>Constraint *</type>
      <name>create_constraint</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7c1e58ca2b8292e0c29445ac12129f41</anchor>
      <arglist>(Before *b, After *a, const typename Before::Argument &amp;t, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_restraint</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a48dcab9692f457d67f21de48014deedb</anchor>
      <arglist>(Score *s, const typename Score::Argument &amp;t, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>ScoringFunction *</type>
      <name>create_scoring_function</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af14ee21fcb9e4de052f33454e3bdf5e1</anchor>
      <arglist>(RestraintType *rs, double weight=1.0, double max=NO_MAX, std::string name=std::string())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GenericAttributeSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>GenericAttributeSingletonScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::core::GenericAttributeSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>GenericAttributeSingletonScore&lt; UnaryFunction &gt;</type>
      <name>AttributeSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa8670e511c13b327e0053d6c1e4d41e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GenericAttributeSingletonScore&lt; UF &gt; *</type>
      <name>create_generic_attribute_singleton_score</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab12d7d89b93b817c10a3e90be70ea1b4</anchor>
      <arglist>(UF *uf, FloatKey k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_alignment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>geometric__alignment_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="SphereD_8h" name="SphereD.h" local="yes" imported="no">SphereD.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">Rotation3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="Transformation2D_8h" name="Transformation2D.h" local="yes" imported="no">Transformation2D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>IMP::algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a119b22ccf68628a2cba2885904d7d314</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;source, const Vector3DsOrXYZs1 &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_transformation_aligning_pair</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a86f1249e8339878f8b0be5b73b031ad8</anchor>
      <arglist>(const Vector2Ds &amp;set_from, const Vector2Ds &amp;set_to)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_primitive_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>geometric__primitive__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_AREA_GEOMETRY_METHODS</name>
      <anchorfile>geometric__primitive__macros_8h.html</anchorfile>
      <anchor>ab8eed36ad7c813d9439330caa800a04b</anchor>
      <arglist>(Name, name, area, bounding_box)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_AREA_GEOMETRY_METHODS_D</name>
      <anchorfile>geometric__primitive__macros_8h.html</anchorfile>
      <anchor>ac41eca7d313b24201dd7055f1537b0a7</anchor>
      <arglist>(Name, name, area, bounding_box)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LINEAR_GEOMETRY_METHODS</name>
      <anchorfile>geometric__primitive__macros_8h.html</anchorfile>
      <anchor>a2b4dc048691b68a9e0840dc777e7eee4</anchor>
      <arglist>(Name, name, bounding_box)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_VOLUME_GEOMETRY_METHODS</name>
      <anchorfile>geometric__primitive__macros_8h.html</anchorfile>
      <anchor>a7e521ee6da5ca891ae861c28a278e094</anchor>
      <arglist>(Name, name, area, volume, bounding_box)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_VOLUME_GEOMETRY_METHODS_D</name>
      <anchorfile>geometric__primitive__macros_8h.html</anchorfile>
      <anchor>a323f5578d822d31496de69ab9f2e0a71</anchor>
      <arglist>(Name, name, area, volume, bounding_box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeometricHash.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>GeometricHash_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">IMP/algebra/VectorD.h</includes>
    <class kind="class">IMP::multifit::GeometricHash</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>GeometricPrimitiveD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>GeometricPrimitiveD_8h</filename>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <class kind="class">IMP::algebra::GeometricPrimitiveD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>geometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>geometry_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="yes" imported="no">primitive_geometries.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>geometry_io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>geometry__io_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_geometries</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a1e82ba0d49253886a57e4a40ab94921b</anchor>
      <arglist>(RMF::FileHandle file, const display::GeometriesTemp &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_geometries</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a668d6ac6858b6abf9b1f559bd6dec3a9</anchor>
      <arglist>(RMF::NodeHandle parent, const display::GeometriesTemp &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_static_geometries</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a0ac7c6f0adcb9b11b23b43c55a970998</anchor>
      <arglist>(RMF::FileHandle parent, const display::GeometriesTemp &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_geometry</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ac527cf5f24b42ec60119b3ff253781ba</anchor>
      <arglist>(RMF::FileHandle file, display::Geometry *r)</arglist>
    </member>
    <member kind="function">
      <type>display::Geometries</type>
      <name>create_geometries</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ae6466f86dceab595e9eb6c5a522a7508</anchor>
      <arglist>(RMF::FileConstHandle parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_geometries</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a6d17be350f7a9ee7f5ca0859ca9718e5</anchor>
      <arglist>(RMF::FileConstHandle parent, const display::GeometriesTemp &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometry_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>geometry__macros_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DISPLAY_GEOMETRY_DECL</name>
      <anchorfile>geometry__macros_8h.html</anchorfile>
      <anchor>ab9986fbd4032e42cbdbeab60a1e368ec</anchor>
      <arglist>(Name, Names, Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DISPLAY_GEOMETRY_DEF</name>
      <anchorfile>geometry__macros_8h.html</anchorfile>
      <anchor>a1e8f6df4c44172b20c7090f3a2743988</anchor>
      <arglist>(Name, Type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeometryProcessor.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>GeometryProcessor_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="yes" imported="no">primitive_geometries.h</includes>
    <class kind="class">IMP::display::GeometryProcessor</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>GeometrySet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>GeometrySet_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="yes" imported="no">geometry_macros.h</includes>
    <class kind="class">IMP::display::GeometrySet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalStatisticsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>GlobalStatisticsOptimizerState_8h</filename>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <class kind="class">IMP::npctransport::GlobalStatisticsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GlobalStatisticsOptimizerState &gt; &gt;</type>
      <name>GlobalStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7758ad9331852c7aa0c3ad1612ae98d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GlobalStatisticsOptimizerState &gt; &gt;</type>
      <name>GlobalStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>abf3ede2368b0d48a9fdd3ba3afddc224</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graph_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>graph__macros_8h</filename>
    <includes id="file_8h" name="file.h" local="yes" imported="no">file.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_GRAPH</name>
      <anchorfile>graph__macros_8h.html</anchorfile>
      <anchor>a80f5fd8fc1193bb2a0333aecc14ab5a2</anchor>
      <arglist>(Name, directionality, VertexData, EdgeData, ShowVertex)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_WEIGHTED_GRAPH</name>
      <anchorfile>graph__macros_8h.html</anchorfile>
      <anchor>a563bc5d60667fd5a6f5cede67088369e</anchor>
      <arglist>(Name, directionality, VertexData, ShowVertex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>grid_embeddings.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>grid__embeddings_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="yes" imported="no">grid_indexes.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::algebra::DefaultEmbeddingD</class>
    <class kind="class">IMP::algebra::LogEmbeddingD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>grid_indexes.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>grid__indexes_8h</filename>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="no" imported="no">IMP/bracket_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::algebra::ExtendedGridIndexD</class>
    <class kind="class">IMP::algebra::GridIndexD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>grid_ranges.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>grid__ranges_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="no" imported="no">IMP/bracket_macros.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="yes" imported="no">grid_indexes.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::algebra::BoundedGridRangeD</class>
    <class kind="class">IMP::algebra::UnboundedGridRangeD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>grid_storages.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>grid__storages_8h</filename>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="no" imported="no">IMP/bracket_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="yes" imported="no">grid_indexes.h</includes>
    <includes id="grid__ranges_8h" name="grid_ranges.h" local="yes" imported="no">grid_ranges.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::algebra::DenseGridStorageD</class>
    <class kind="class">IMP::algebra::SparseGridStorageD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>grid_utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>grid__utility_8h</filename>
    <includes id="GridD_8h" name="GridD.h" local="yes" imported="no">GridD.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="yes" imported="no">grid_indexes.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IMP_GRID3D_FOREACH_SMALLER_EXTENDED_INDEX_RANGE</name>
      <anchorfile>grid__utility_8h.html</anchorfile>
      <anchor>ae75ddc1c8398b3cda69497a6474196e9</anchor>
      <arglist>(grid, center, lower_corner, upper_corner, action)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_GRID3D_FOREACH_VOXEL</name>
      <anchorfile>grid__utility_8h.html</anchorfile>
      <anchor>a191cae893f0aa19a443f20706435eaa8</anchor>
      <arglist>(g, action)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_linearly_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>adb4e0a724bc2f1f9c54e3ebc9437c260</anchor>
      <arglist>(const GridD&lt; D, Storage, Value, Embedding &gt; &amp;g, const VectorD&lt; D &gt; &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>const Storage::Value</type>
      <name>get_trilinearly_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a32242a25f36a56f9acc877f4841b3c24</anchor>
      <arglist>(const GridD&lt; 3, Storage, typename Storage::Value, Embedding &gt; &amp;g, const Vector3D &amp;v, const typename Storage::Value &amp;outside=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GridClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>GridClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="yes" imported="no">ClosePairsFinder.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::core::GridClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>GridD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>GridD_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="grid__embeddings_8h" name="grid_embeddings.h" local="yes" imported="no">grid_embeddings.h</includes>
    <includes id="grid__indexes_8h" name="grid_indexes.h" local="yes" imported="no">grid_indexes.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <class kind="class">IMP::algebra::GridD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>gsl.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>gsl_8h</filename>
    <includes id="gsl_2ConjugateGradients_8h" name="gsl/ConjugateGradients.h" local="no" imported="no">IMP/gsl/ConjugateGradients.h</includes>
    <includes id="GSLOptimizer_8h" name="GSLOptimizer.h" local="no" imported="no">IMP/gsl/GSLOptimizer.h</includes>
    <includes id="QuasiNewton_8h" name="QuasiNewton.h" local="no" imported="no">IMP/gsl/QuasiNewton.h</includes>
    <includes id="Simplex_8h" name="Simplex.h" local="no" imported="no">IMP/gsl/Simplex.h</includes>
  </compound>
  <compound kind="file">
    <name>GSLOptimizer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/gsl/</path>
    <filename>GSLOptimizer_8h</filename>
    <includes id="AttributeOptimizer_8h" name="AttributeOptimizer.h" local="no" imported="no">IMP/AttributeOptimizer.h</includes>
    <class kind="class">IMP::gsl::GSLOptimizer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::gsl</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GSLOptimizer &gt; &gt;</type>
      <name>GSLOptimizers</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>a3f00f301d6a93e80ba642a5ba24a4c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GSLOptimizer &gt; &gt;</type>
      <name>GSLOptimizersTemp</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>ab773ba69811c05f09e996e9d94490382</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/Harmonic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2Harmonic_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <class kind="class">IMP::core::Harmonic</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor/Harmonic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2Harmonic_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::Harmonic</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>harmonic_distance_pair_scores.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>harmonic__distance__pair__scores_8h</filename>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="no" imported="no">IMP/compiler_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::npctransport::HarmonicWellPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicWellPairScore &gt; &gt;</type>
      <name>HarmonicWellPairScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0de5c5afed93a71a4509b5445a3766e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicWellPairScore &gt; &gt;</type>
      <name>HarmonicWellPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aabe35ad62a55273898599fe4d4d10843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_evaluate_index_harmonic</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a656ab4ca89e8d22e30f474a6a15fe34d</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pp, DerivativeAccumulator *da, const algebra::Vector3D &amp;delta, double delta_length, double x0, double k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/HarmonicLowerBound.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2HarmonicLowerBound_8h</filename>
    <includes id="core_2Harmonic_8h" name="core/Harmonic.h" local="yes" imported="no">Harmonic.h</includes>
    <class kind="class">IMP::core::HarmonicLowerBound</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor/HarmonicLowerBound.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2HarmonicLowerBound_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::HarmonicLowerBound</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>HarmonicSpringSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>HarmonicSpringSingletonScore_8h</filename>
    <includes id="RelaxingSpring_8h" name="RelaxingSpring.h" local="yes" imported="no">RelaxingSpring.h</includes>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="no" imported="no">IMP/compiler_macros.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::npctransport::HarmonicSpringSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicSpringSingletonScore &gt; &gt;</type>
      <name>HarmonicSpringSingletonScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9766575c5b78cf187c5207a1cc4bd860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicSpringSingletonScore &gt; &gt;</type>
      <name>HarmonicSpringSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7d1f817c27f950cd5af6d2a5d6e4737b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/HarmonicUpperBound.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2HarmonicUpperBound_8h</filename>
    <includes id="core_2Harmonic_8h" name="core/Harmonic.h" local="yes" imported="no">Harmonic.h</includes>
    <class kind="class">IMP::core::HarmonicUpperBound</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor/HarmonicUpperBound.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2HarmonicUpperBound_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::HarmonicUpperBound</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>HarmonicWell.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>HarmonicWell_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <class kind="class">IMP::core::HarmonicWell</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicWell &gt; &gt;</type>
      <name>HarmonicWells</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>abe93229ba2224e3c1ce903926d35d3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicWell &gt; &gt;</type>
      <name>HarmonicWellsTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad665c5936999cc49c91b91685dfb6d01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>hash_8h</filename>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>hash_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>hash__macros_8h</filename>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_HASHABLE_INLINE</name>
      <anchorfile>hash__macros_8h.html</anchorfile>
      <anchor>a41326a9a266a9a17caba22952b15efc1</anchor>
      <arglist>(name, hashret)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>header_converters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>header__converters_8h</filename>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">ImageHeader.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="function">
      <type>void</type>
      <name>DensityHeader_to_ImageHeader</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a59459b7c51d60c2f2a3c9b6491cb1455</anchor>
      <arglist>(const DensityHeader &amp;header, ImageHeader &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageHeader_to_DensityHeader</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ab7f8287dfcc5d61b20445c3c683c3e12</anchor>
      <arglist>(const ImageHeader &amp;h, DensityHeader &amp;header)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HelixDecorator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>HelixDecorator_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::spb::HelixDecorator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; HelixDecorator &gt;</type>
      <name>HelixDecorators</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a1747197c4d19e2d1ab012525936934cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HelixRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>HelixRestraint_8h</filename>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="no" imported="no">IMP/core/DistancePairScore.h</includes>
    <includes id="MultipleBinormalRestraint_8h" name="MultipleBinormalRestraint.h" local="no" imported="no">IMP/core/MultipleBinormalRestraint.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="angle__decorators_8h" name="angle_decorators.h" local="yes" imported="no">angle_decorators.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <class kind="class">IMP::atom::HelixRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>helpers.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>helpers_8h</filename>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="no" imported="no">IMP/atom/Residue.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchical_clustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>hierarchical__clustering_8h</filename>
    <includes id="scores2D_8h" name="scores2D.h" local="yes" imported="no">IMP/em2d/scores2D.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em2d::AverageDistanceLinkage</class>
    <class kind="class">IMP::em2d::ClusterSet</class>
    <class kind="class">IMP::em2d::CompleteLinkage</class>
    <class kind="class">IMP::em2d::SingleLinkage</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; AverageDistanceLinkage &gt;</type>
      <name>AverageDistanceLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac5710f6f75450826bf93e4cd60dc02d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ClusterSet &gt;</type>
      <name>ClusterSets</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2178905ea082e5b278f6b60300aa7981</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CompleteLinkage &gt;</type>
      <name>CompleteLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a557202cb9c59f4f51371dc46b645decf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SingleLinkage &gt;</type>
      <name>SingleLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a54a090bdf8d4364c0af936732910f5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ClusterSet</type>
      <name>do_hierarchical_agglomerative_clustering</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a43f1323541959d81f9baccbf61818448</anchor>
      <arglist>(const FloatsList &amp;distances)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom/Hierarchy.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2Hierarchy_8h</filename>
    <includes id="core_2utility_8h" name="core/utility.h" local="no" imported="no">IMP/core/utility.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="core_2Gaussian_8h" name="core/Gaussian.h" local="no" imported="no">IMP/core/Gaussian.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::atom::Hierarchy</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="enumeration">
      <type></type>
      <name>GetByType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abbe974bcb01d2f1dc86b33fd48a76fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_compatible_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a70ac55d293e6851c67b45d7fd55a3163</anchor>
      <arglist>(Hierarchy h, Hierarchy reference)</arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b72819ad85249bfe290fe31b4084e9e</anchor>
      <arglist>(const Hierarchies &amp;h, std::string name=std::string(&quot;created rigid body&quot;))</arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a40da5b3553d98acf020078b4e435b12a</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/Hierarchy.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2Hierarchy_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::core::Hierarchy</class>
    <class kind="struct">IMP::core::HierarchyCounter</class>
    <class kind="class">IMP::core::HierarchyTraits</class>
    <class kind="class">IMP::core::HierarchyVisitor</class>
    <class kind="class">IMP::core::ModifierVisitor</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; HierarchyCounter &gt;</type>
      <name>HierarchyCounters</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a2b8b593cee74e44565c406416435408d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; HierarchyTraits &gt;</type>
      <name>HierarchyTraitsList</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a64a0cdfa7381f0524af76f3d0f9bec51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HD</type>
      <name>find_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga48885d7285d63571bbdc7035bf25d162</anchor>
      <arglist>(HD h, F f)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gadc7639d87f38fa58e15d16da9ee6b6fe</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attribute</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gae624839ef9e8df72cd594696969b804e</anchor>
      <arglist>(H h, K k, V v, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attributes</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gab703f5be2ab05b43dd31df7f62698309</anchor>
      <arglist>(H h, K0 k0, V0 v0, K1 k1, V1 v1, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_slice</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga2f922d6675216bea33de2292c161faef</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_all_descendants</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a24d4c4b06793bcadc5962885098ed400</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_internal</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a65ebb1067e86f517214ff78f111ad622</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_leaves</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a8743287de001c73866a23377c8bd466f</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_root</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4c078026c66398b7ae77eeb6f13ddcd0</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>show</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga346251f63e1305b2bd2b0599f1d8d761</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gaf1c5c6abcc4e68e8966a2be6793020fe</anchor>
      <arglist>(HD d, F f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gabbac0bce3555909b3b9e5978cb576eff</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga52cb6fb554a44d6ce8d8c997d20f2850</anchor>
      <arglist>(HD d, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga669953449da1f01f7ca196d9a06a0fbb</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hierarchy_tools.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>hierarchy__tools_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="yes" imported="no">Selection.h</includes>
    <class kind="class">IMP::atom::HierarchiesGeometry</class>
    <class kind="class">IMP::atom::HierarchyGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>HierarchyTree</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa3cf11b922ce77ffe681ea6f911f369c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a64f18ad8ce0534736253b21f84c7c308</anchor>
      <arglist>(const Hierarchies &amp;hs, double resolution=-1)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aaa55b95e08377207f065cbab8bec4399</anchor>
      <arglist>(Model *m, std::string name, double target_radius, int number_of_residues, int first_residue_index=0, double volume=-1)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0d69cdcf058b017505e1b490054d48ff</anchor>
      <arglist>(Model *m, std::string name, double target_radius, const Ints domain_boundaries)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_assembly_from_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1ec0bdeff49fc6221a7c4e370ba68279</anchor>
      <arglist>(Hierarchy h, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_from_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad36632c4fe1304975ff1afce38816295</anchor>
      <arglist>(Hierarchy h, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>HierarchyTree</type>
      <name>get_hierarchy_tree</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3ad3ffc63b7488509170066bcd021c4c</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_approximation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6eb0ed1c738a5d6b223b3628b09533f6</anchor>
      <arglist>(Particle *h, const ParticlesTemp &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_approximation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a86c2aff722129fb074c5e32484dd31aa</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adf218eed76f556ada452b525acd835ee</anchor>
      <arglist>(Hierarchy h, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_along_backbone</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b4c863b0fefde1c1d95cdf6fed794a8</anchor>
      <arglist>(Hierarchy input, int num_res, bool keep_detailed=false)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_along_backbone</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af12315103e56599289223816dc3b3aeb</anchor>
      <arglist>(Chain input, const IntRanges &amp;residue_segments, bool keep_detailed=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HierarchyLoadLink.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>HierarchyLoadLink_8h</filename>
    <includes id="simple__links_8h" name="simple_links.h" local="yes" imported="no">simple_links.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="provenance_8h" name="provenance.h" local="no" imported="no">IMP/core/provenance.h</includes>
    <includes id="links_8h" name="links.h" local="no" imported="no">IMP/rmf/links.h</includes>
    <includes id="link__macros_8h" name="link_macros.h" local="no" imported="no">IMP/rmf/link_macros.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="class">IMP::rmf::HierarchyLoadLink</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySaveLink.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>HierarchySaveLink_8h</filename>
    <includes id="simple__links_8h" name="simple_links.h" local="yes" imported="no">simple_links.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="provenance_8h" name="provenance.h" local="no" imported="no">IMP/core/provenance.h</includes>
    <includes id="links_8h" name="links.h" local="no" imported="no">IMP/rmf/links.h</includes>
    <includes id="link__macros_8h" name="link_macros.h" local="no" imported="no">IMP/rmf/link_macros.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="class">IMP::rmf::HierarchySaveLink</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>HistogramD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>HistogramD_8h</filename>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="no" imported="no">IMP/algebra/GeometricPrimitiveD.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="GridD_8h" name="GridD.h" local="no" imported="no">IMP/algebra/GridD.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::statistics::HistogramD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_quantile</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aeda69487ba39957469c1c8985bb58196</anchor>
      <arglist>(const Histogram1D &amp;h, double fraction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HybridMonteCarlo.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>HybridMonteCarlo_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="isd_2MolecularDynamics_8h" name="isd/MolecularDynamics.h" local="no" imported="no">IMP/isd/MolecularDynamics.h</includes>
    <includes id="MolecularDynamicsMover_8h" name="MolecularDynamicsMover.h" local="no" imported="no">IMP/isd/MolecularDynamicsMover.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <class kind="class">IMP::isd::HybridMonteCarlo</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Image.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>Image_8h</filename>
    <includes id="PolarResamplingParameters_8h" name="PolarResamplingParameters.h" local="yes" imported="no">IMP/em2d/PolarResamplingParameters.h</includes>
    <includes id="ImageReaderWriter_8h" name="ImageReaderWriter.h" local="yes" imported="no">IMP/em2d/ImageReaderWriter.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="image__processing_8h" name="image_processing.h" local="yes" imported="no">IMP/em2d/image_processing.h</includes>
    <includes id="FFToperations_8h" name="FFToperations.h" local="yes" imported="no">IMP/em2d/FFToperations.h</includes>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">IMP/em/ImageHeader.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::em2d::Image</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Image &gt; &gt;</type>
      <name>Images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3b1659043d063900773f532dc6efe2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Image &gt; &gt;</type>
      <name>ImagesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a17698562eb392a282c8a38715ca28cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diffusion_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6fbd3f388210a4942c4ac54c95b88fd8</anchor>
      <arglist>(Image *input, Image *filtered, double beta, double pixelsize, int time_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mean_outside_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a90402327da81d37eb865301ff37fbb19</anchor>
      <arglist>(Image *img, double radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_variance_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a258020f16ff0205998ee972aa2656499</anchor>
      <arglist>(Image *input, Image *filtered, int kernelsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crop</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af9e50eaa31332e8e42eb3ee0d2b8872e</anchor>
      <arglist>(Image *img, const IntPair &amp;center, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_normalize</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8ca0f5601724287c85b00fb71ddecc44</anchor>
      <arglist>(Image *im, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_resample_polar</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1d4044443138ae1ad3c60ba33afd6e5e</anchor>
      <arglist>(Image *im1, Image *im2, const PolarResamplingParameters &amp;polar_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_subtract_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a5fa6302882e4cc2ddc39262f434058e6</anchor>
      <arglist>(Image *first, Image *second, Image *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a185b28584381f8d779db94c0f91f9db0</anchor>
      <arglist>(Image *im1, Image *im2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a47326ad3deacabc6aa0fc68818c453ea</anchor>
      <arglist>(Image *im1, Image *im2, Image *corr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af22f5cc59992f1a392b914e6b57a0ecc</anchor>
      <arglist>(Image *im1, Image *im2)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_histogram</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4f87a85f1ee35aa0a6dc6f0c859df0b0</anchor>
      <arglist>(Image *img, int bins)</arglist>
    </member>
    <member kind="function">
      <type>Images</type>
      <name>read_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a9b93ce77266955bd99874dbb269fc87c</anchor>
      <arglist>(const Strings &amp;names, const ImageReaderWriter *rw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3c4762ec4e3272cd645d012e24b464b3</anchor>
      <arglist>(Images images, const Strings &amp;names, const ImageReaderWriter *rw)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>image_processing.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>image__processing_8h</filename>
    <includes id="PolarResamplingParameters_8h" name="PolarResamplingParameters.h" local="yes" imported="no">IMP/em2d/PolarResamplingParameters.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::em2d::MatchTemplateResult</class>
    <class kind="class">IMP::em2d::SegmentationParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; MatchTemplateResult &gt;</type>
      <name>MatchTemplateResults</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aaf555178d08544703ff120f259a7a7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SegmentationParameters &gt;</type>
      <name>SegmentationParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa1373104909ba866f74a5ccaf3a03e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_noise</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a643bced0cc35024d64d1eddbe03e7145</anchor>
      <arglist>(cv::Mat &amp;v, double op1, double op2, const String &amp;mode=&quot;uniform&quot;, double df=3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_circular_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a913f22c4be47b182dfa1dfb33a6479cc</anchor>
      <arglist>(const cv::Mat &amp;mat, cv::Mat &amp;result, int radius, double value=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diffusion_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a35871baa292b8eba834953d29b964444</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, double beta, double pixelsize, unsigned int time_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7ea5c49d021043c2778ba7d492350939</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cvIntMat &amp;mask, double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_threshold</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1bcbe7aef167fec46e11f467dac93b88</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double threshold=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_variance_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aeaac875427115b4936fc0fa82847e7df</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;filtered, int kernelsize)</arglist>
    </member>
    <member kind="function">
      <type>cvIntMat</type>
      <name>create_circular_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a689dc2adae481a59415efacf4248885e</anchor>
      <arglist>(int rows, int cols, int radius)</arglist>
    </member>
    <member kind="function">
      <type>cv::Mat</type>
      <name>crop</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>add20c139c513a8574b98613b0e066b1f</anchor>
      <arglist>(const cv::Mat &amp;m, const IntPair &amp;center, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_combined_fill_holes_and_threshold</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8a8f56ed52d45a9c3ff177d250d60773</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double n_stddevs, double threshold=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_dilate_and_shrink_warp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6fbd079bf847c552512c4f5a565d7924</anchor>
      <arglist>(cv::Mat &amp;m, const cv::Mat &amp;grayscale, cv::Mat &amp;kernel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_extend_borders</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2a8f8c860463a5845e9a9330fc4f4838</anchor>
      <arglist>(cv::Mat &amp;orig, cv::Mat &amp;dst, unsigned int pix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_fill_holes</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad9ee7a864812d20106c6c10a3db39e8f</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, double h)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>do_labeling</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7fe9e6326cab26d23e66f1c6ee0c2053</anchor>
      <arglist>(const cvIntMat &amp;m, cvIntMat &amp;mat_to_label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_morphologic_contrast_enhancement</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa03b85b529a06d5f41855434a37620e6</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cv::Mat &amp;kernel, unsigned int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_morphologic_reconstruction</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a14c1f942df62991be91a3c02a81448c4</anchor>
      <arglist>(const cv::Mat &amp;mask, cv::Mat &amp;marker, int neighbors_mode=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_normalize</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a006185fb87d9ea8b0cded91418a529ed</anchor>
      <arglist>(cv::Mat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_remove_small_objects</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3e269cb1521c292aa1ad0bd3494b3ca4</anchor>
      <arglist>(cvIntMat &amp;m, double percentage, int background=0, int foreground=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_resample_polar</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aad3c7e6514aadaa236e5e354ceff8856</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;resampled, const PolarResamplingParameters &amp;polar_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_segmentation</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a90292cd68858d8e90c4e99c2826739bb</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const SegmentationParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>MatchTemplateResults</type>
      <name>get_best_template_matches</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a08c0ef4b9d87a8838e3c2ebd0cfb3b96</anchor>
      <arglist>(const cv::Mat &amp;m, const cv::Mat &amp;templ, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_diffusion_filtering_partial_derivative</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a88b1ad65226409f6cb5dab864141651b</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;der, double dx, double dy, double ang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_domes</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7d998f2562e8bd4d005cb8a8b892b8cf</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double h)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_histogram</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3f03d61419c7b1c2f518f32f8c0bfa9f</anchor>
      <arglist>(const cv::Mat &amp;m, int bins)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad970af0573f2bacda47fba538d3267b2</anchor>
      <arglist>(const cv::Mat &amp;mat, const cvIntMat &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_morphologic_gradient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acd68116f35c5648649d8f26d68334b9e</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cv::Mat &amp;kernel)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_overlap_percentage</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af0d042657181a579a65c4bb209405a7c</anchor>
      <arglist>(cv::Mat &amp;m1, cv::Mat &amp;m2, const IntPair &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_transformed</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a0701b9da59d031b6bb82fbb493d824b1</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;transformed, const algebra::Transformation2D &amp;T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageHeader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>ImageHeader_8h</filename>
    <includes id="SpiderHeader_8h" name="SpiderHeader.h" local="no" imported="no">IMP/em/SpiderHeader.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="no" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="endian_8h" name="endian.h" local="no" imported="no">IMP/algebra/endian.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <class kind="class">IMP::em::ImageHeader</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>ImageReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>ImageReaderWriter_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">IMP/Object.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">IMP/em/ImageHeader.h</includes>
    <class kind="class">IMP::em2d::ImageReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>IMP.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/</path>
    <filename>IMP_8h</filename>
    <includes id="Array_8h" name="Array.h" local="no" imported="no">IMP/Array.h</includes>
    <includes id="AttributeOptimizer_8h" name="AttributeOptimizer.h" local="no" imported="no">IMP/AttributeOptimizer.h</includes>
    <includes id="Configuration_8h" name="Configuration.h" local="no" imported="no">IMP/Configuration.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="no" imported="no">IMP/ConfigurationSet.h</includes>
    <includes id="ConstVector_8h" name="ConstVector.h" local="no" imported="no">IMP/ConstVector.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="CreateLogContext_8h" name="CreateLogContext.h" local="no" imported="no">IMP/CreateLogContext.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="no" imported="no">IMP/DerivativeAccumulator.h</includes>
    <includes id="Flag_8h" name="Flag.h" local="no" imported="no">IMP/Flag.h</includes>
    <includes id="FloatIndex_8h" name="FloatIndex.h" local="no" imported="no">IMP/FloatIndex.h</includes>
    <includes id="Index_8h" name="Index.h" local="no" imported="no">IMP/Index.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="Key_8h" name="Key.h" local="no" imported="no">IMP/Key.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="no" imported="no">IMP/ModelObject.h</includes>
    <includes id="NonCopyable_8h" name="NonCopyable.h" local="no" imported="no">IMP/NonCopyable.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="RAII_8h" name="RAII.h" local="no" imported="no">IMP/RAII.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="RestraintInfo_8h" name="RestraintInfo.h" local="no" imported="no">IMP/RestraintInfo.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="ScoreAccumulator_8h" name="ScoreAccumulator.h" local="no" imported="no">IMP/ScoreAccumulator.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="no" imported="no">IMP/ScoringFunction.h</includes>
    <includes id="SetCheckState_8h" name="SetCheckState.h" local="no" imported="no">IMP/SetCheckState.h</includes>
    <includes id="SetLogState_8h" name="SetLogState.h" local="no" imported="no">IMP/SetLogState.h</includes>
    <includes id="Showable_8h" name="Showable.h" local="no" imported="no">IMP/Showable.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Undecorator_8h" name="Undecorator.h" local="no" imported="no">IMP/Undecorator.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="VersionInfo_8h" name="VersionInfo.h" local="no" imported="no">IMP/VersionInfo.h</includes>
    <includes id="WarningContext_8h" name="WarningContext.h" local="no" imported="no">IMP/WarningContext.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="no" imported="no">IMP/bracket_macros.h</includes>
    <includes id="cache_8h" name="cache.h" local="no" imported="no">IMP/cache.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="no" imported="no">IMP/comparison_macros.h</includes>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="no" imported="no">IMP/compiler_macros.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="no" imported="no">IMP/container_base.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="dependency__graph_8h" name="dependency_graph.h" local="no" imported="no">IMP/dependency_graph.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">IMP/deprecation.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="doxygen__macros_8h" name="doxygen_macros.h" local="no" imported="no">IMP/doxygen_macros.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">IMP/enums.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="flags_8h" name="flags.h" local="no" imported="no">IMP/flags.h</includes>
    <includes id="functor_8h" name="functor.h" local="no" imported="no">IMP/functor.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="graph__macros_8h" name="graph_macros.h" local="no" imported="no">IMP/graph_macros.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="no" imported="no">IMP/hash_macros.h</includes>
    <includes id="input__output_8h" name="input_output.h" local="no" imported="no">IMP/input_output.h</includes>
    <includes id="io_8h" name="io.h" local="no" imported="no">IMP/io.h</includes>
    <includes id="live__objects_8h" name="live_objects.h" local="no" imported="no">IMP/live_objects.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">IMP/math.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="no" imported="no">IMP/model_object_helpers.h</includes>
    <includes id="object__cast_8h" name="object_cast.h" local="no" imported="no">IMP/object_cast.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <includes id="python__only_8h" name="python_only.h" local="no" imported="no">IMP/python_only.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="no" imported="no">IMP/raii_macros.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <includes id="random__utils_8h" name="random_utils.h" local="no" imported="no">IMP/random_utils.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="swap__macros_8h" name="swap_macros.h" local="no" imported="no">IMP/swap_macros.h</includes>
    <includes id="swig__macros_8h" name="swig_macros.h" local="no" imported="no">IMP/swig_macros.h</includes>
    <includes id="thread__macros_8h" name="thread_macros.h" local="no" imported="no">IMP/thread_macros.h</includes>
    <includes id="threads_8h" name="threads.h" local="no" imported="no">IMP/threads.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairDerivativeModifier_8h" name="PairDerivativeModifier.h" local="no" imported="no">IMP/PairDerivativeModifier.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="TripletDerivativeModifier_8h" name="TripletDerivativeModifier.h" local="no" imported="no">IMP/TripletDerivativeModifier.h</includes>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="no" imported="no">IMP/TripletModifier.h</includes>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="QuadDerivativeModifier_8h" name="QuadDerivativeModifier.h" local="no" imported="no">IMP/QuadDerivativeModifier.h</includes>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="no" imported="no">IMP/QuadModifier.h</includes>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="QuadScore_8h" name="QuadScore.h" local="no" imported="no">IMP/QuadScore.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>ImproperSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>ImproperSingletonScore_8h</filename>
    <includes id="bond__decorators_8h" name="bond_decorators.h" local="yes" imported="no">bond_decorators.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::atom::ImproperSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ImproperSingletonScore &gt; &gt;</type>
      <name>ImproperSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa667ae470e0ee0765d67e539f85c1941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ImproperSingletonScore &gt; &gt;</type>
      <name>ImproperSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3d23d0d37e9b80fc6b2c5c3b6380f03b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InContainerPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>InContainerPairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::container::InContainerPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerPairFilter &gt; &gt;</type>
      <name>InContainerPairFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aefaf9d3fbf6f7601312045ec092821fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerPairFilter &gt; &gt;</type>
      <name>InContainerPairFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a982609bff1f4dcfcd1632afc01e19b8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InContainerQuadFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>InContainerQuadFilter_8h</filename>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::container::InContainerQuadFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerQuadFilter &gt; &gt;</type>
      <name>InContainerQuadFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a5c0ecbd253fb6d4fe34741d4dd56233c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerQuadFilter &gt; &gt;</type>
      <name>InContainerQuadFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a1502800049f9782f6cbd08e963c9b2b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InContainerSingletonFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>InContainerSingletonFilter_8h</filename>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::container::InContainerSingletonFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerSingletonFilter &gt; &gt;</type>
      <name>InContainerSingletonFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a1af135b084ba2a1a27429d750e14e289</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerSingletonFilter &gt; &gt;</type>
      <name>InContainerSingletonFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a536ea093c66fc356c54c2d710a9aff83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InContainerTripletFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>InContainerTripletFilter_8h</filename>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::container::InContainerTripletFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerTripletFilter &gt; &gt;</type>
      <name>InContainerTripletFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a6b4b5d8d02702ec1bd27bbcd27034b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerTripletFilter &gt; &gt;</type>
      <name>InContainerTripletFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a2f2055344a31fad01166e301260973cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Index.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Index_8h</filename>
    <includes id="bracket__macros_8h" name="bracket_macros.h" local="yes" imported="no">bracket_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::Index</class>
    <class kind="class">IMP::IndexVector</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>initialize_positions.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>initialize__positions_8h</filename>
    <includes id="SimulationData_8h" name="SimulationData.h" local="yes" imported="no">SimulationData.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>void</type>
      <name>initialize_positions</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a2e1017a2f94fda8e6e05bda62dc2b6c4</anchor>
      <arglist>(SimulationData *sd, const RestraintsTemp &amp;extra_restraints=RestraintsTemp(), bool debug=false, double short_init_factor=1.0, bool is_disable_randomize=false, bool are_fgs_pre_initialized=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>input_output.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>input__output_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="yes" imported="no">container_base.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_input_particles</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af488ed0d8a9b736cc3be4fce11d19829</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos)</arglist>
    </member>
    <member kind="function">
      <type>ContainersTemp</type>
      <name>get_input_containers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a56086e399d6fe4abbfa748c506dadb5f</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_output_particles</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afe628c07ef885af644a24a23643ae5b2</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos)</arglist>
    </member>
    <member kind="function">
      <type>ContainersTemp</type>
      <name>get_output_containers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a63e8478659a34468e4d9bd1e4579caf4</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputAdaptor.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>InputAdaptor_8h</filename>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <class kind="class">IMP::InputAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>integrative_docking.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>integrative__docking_8h</filename>
  </compound>
  <compound kind="file">
    <name>interactive.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>interactive_8h</filename>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="subset__filters_8h" name="subset_filters.h" local="yes" imported="no">subset_filters.h</includes>
    <includes id="assignment__containers_8h" name="assignment_containers.h" local="yes" imported="no">assignment_containers.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <includes id="dependency__graph_8h" name="dependency_graph.h" local="no" imported="no">IMP/dependency_graph.h</includes>
    <includes id="metric__clustering_8h" name="metric_clustering.h" local="no" imported="no">IMP/statistics/metric_clustering.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="function">
      <type>void</type>
      <name>load_leaf_assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a4570cce69f194985e23b710c3b5e18b4</anchor>
      <arglist>(const Subset &amp;subset, AssignmentsTable *at, AssignmentContainer *ac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_merged_assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a200c71a273844cc32fd32f6a5eafa0aa</anchor>
      <arglist>(const Subset &amp;first_subset, AssignmentContainer *first, const Subset &amp;second_subset, AssignmentContainer *second, const SubsetFilterTablesTemp &amp;filters, AssignmentContainer *ret)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_merged_assignments_random_order</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3305fe8f61d81cba57e9f6896024b263</anchor>
      <arglist>(const Subset &amp;first_subset, AssignmentContainer *first, const Subset &amp;second_subset, AssignmentContainer *second, const SubsetFilterTablesTemp &amp;filters, unsigned int maximum_tries, AssignmentContainer *ret)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InternalCoordinatesConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>InternalCoordinatesConstraint_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::pmi1::InternalCoordinatesConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>algebra/io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2io_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="yes" imported="no">Sphere3D.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>void</type>
      <name>write_pts</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9a6b26aefeb9ea250ade1e86dff7ea64</anchor>
      <arglist>(const Vector3Ds &amp;vs, TextOutput out)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>read_pts</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aacb10c1707e3fa5a66481d9332c5b162</anchor>
      <arglist>(TextInput input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_spheres</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6ea7d6d317811b817f9a13410783668a</anchor>
      <arglist>(const Sphere3Ds &amp;vs, TextOutput out)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3Ds</type>
      <name>read_spheres</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9bf0a264f35a8de115575dedbfd136f5</anchor>
      <arglist>(TextInput input)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>io_8h</filename>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="yes" imported="no">OptimizerState.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>Vector&lt; char &gt;</type>
      <name>write_particles_to_buffer</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac49fedd9ea52d5339c003cc00c1b906e</anchor>
      <arglist>(const ParticlesTemp &amp;particles, const FloatKeys &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_particles_from_buffer</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a45908f291844b3e8a7749269e9199b74</anchor>
      <arglist>(const Vector&lt; char &gt; &amp;buffer, const ParticlesTemp &amp;particles, const FloatKeys &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>npctransport/io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>npctransport_2io_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>isd.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>isd_8h</filename>
    <includes id="AmbiguousNOERestraint_8h" name="AmbiguousNOERestraint.h" local="no" imported="no">IMP/isd/AmbiguousNOERestraint.h</includes>
    <includes id="AmbiguousRestraint_8h" name="AmbiguousRestraint.h" local="no" imported="no">IMP/isd/AmbiguousRestraint.h</includes>
    <includes id="AtomicCrossLinkMSRestraint_8h" name="AtomicCrossLinkMSRestraint.h" local="no" imported="no">IMP/isd/AtomicCrossLinkMSRestraint.h</includes>
    <includes id="CrossLinkData_8h" name="CrossLinkData.h" local="no" imported="no">IMP/isd/CrossLinkData.h</includes>
    <includes id="CrossLinkMSRestraint_8h" name="CrossLinkMSRestraint.h" local="no" imported="no">IMP/isd/CrossLinkMSRestraint.h</includes>
    <includes id="CysteineCrossLinkData_8h" name="CysteineCrossLinkData.h" local="no" imported="no">IMP/isd/CysteineCrossLinkData.h</includes>
    <includes id="CysteineCrossLinkRestraint_8h" name="CysteineCrossLinkRestraint.h" local="no" imported="no">IMP/isd/CysteineCrossLinkRestraint.h</includes>
    <includes id="FNormal_8h" name="FNormal.h" local="no" imported="no">IMP/isd/FNormal.h</includes>
    <includes id="FStudentT_8h" name="FStudentT.h" local="no" imported="no">IMP/isd/FStudentT.h</includes>
    <includes id="FretData_8h" name="FretData.h" local="no" imported="no">IMP/isd/FretData.h</includes>
    <includes id="FretRestraint_8h" name="FretRestraint.h" local="no" imported="no">IMP/isd/FretRestraint.h</includes>
    <includes id="GammaPrior_8h" name="GammaPrior.h" local="no" imported="no">IMP/isd/GammaPrior.h</includes>
    <includes id="GaussianAnchorEMRestraint_8h" name="GaussianAnchorEMRestraint.h" local="no" imported="no">IMP/isd/GaussianAnchorEMRestraint.h</includes>
    <includes id="isd_2GaussianEMRestraint_8h" name="isd/GaussianEMRestraint.h" local="no" imported="no">IMP/isd/GaussianEMRestraint.h</includes>
    <includes id="GaussianProcessInterpolation_8h" name="GaussianProcessInterpolation.h" local="no" imported="no">IMP/isd/GaussianProcessInterpolation.h</includes>
    <includes id="GaussianProcessInterpolationRestraint_8h" name="GaussianProcessInterpolationRestraint.h" local="no" imported="no">IMP/isd/GaussianProcessInterpolationRestraint.h</includes>
    <includes id="GaussianRestraint_8h" name="GaussianRestraint.h" local="no" imported="no">IMP/isd/GaussianRestraint.h</includes>
    <includes id="HybridMonteCarlo_8h" name="HybridMonteCarlo.h" local="no" imported="no">IMP/isd/HybridMonteCarlo.h</includes>
    <includes id="isd_2ISDRestraint_8h" name="isd/ISDRestraint.h" local="no" imported="no">IMP/isd/ISDRestraint.h</includes>
    <includes id="JeffreysRestraint_8h" name="JeffreysRestraint.h" local="no" imported="no">IMP/isd/JeffreysRestraint.h</includes>
    <includes id="LogWrapper_8h" name="LogWrapper.h" local="no" imported="no">IMP/isd/LogWrapper.h</includes>
    <includes id="LognormalAmbiguousRestraint_8h" name="LognormalAmbiguousRestraint.h" local="no" imported="no">IMP/isd/LognormalAmbiguousRestraint.h</includes>
    <includes id="LognormalRestraint_8h" name="LognormalRestraint.h" local="no" imported="no">IMP/isd/LognormalRestraint.h</includes>
    <includes id="MarginalHBondRestraint_8h" name="MarginalHBondRestraint.h" local="no" imported="no">IMP/isd/MarginalHBondRestraint.h</includes>
    <includes id="MarginalNOERestraint_8h" name="MarginalNOERestraint.h" local="no" imported="no">IMP/isd/MarginalNOERestraint.h</includes>
    <includes id="isd_2MolecularDynamics_8h" name="isd/MolecularDynamics.h" local="no" imported="no">IMP/isd/MolecularDynamics.h</includes>
    <includes id="MolecularDynamicsMover_8h" name="MolecularDynamicsMover.h" local="no" imported="no">IMP/isd/MolecularDynamicsMover.h</includes>
    <includes id="MultivariateFNormalSufficient_8h" name="MultivariateFNormalSufficient.h" local="no" imported="no">IMP/isd/MultivariateFNormalSufficient.h</includes>
    <includes id="NOERestraint_8h" name="NOERestraint.h" local="no" imported="no">IMP/isd/NOERestraint.h</includes>
    <includes id="NormalSigmaPCRestraint_8h" name="NormalSigmaPCRestraint.h" local="no" imported="no">IMP/isd/NormalSigmaPCRestraint.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <includes id="PenalizedComplexityPrior_8h" name="PenalizedComplexityPrior.h" local="no" imported="no">IMP/isd/PenalizedComplexityPrior.h</includes>
    <includes id="RepulsiveDistancePairScore_8h" name="RepulsiveDistancePairScore.h" local="no" imported="no">IMP/isd/RepulsiveDistancePairScore.h</includes>
    <includes id="ResidueProteinProximityRestraint_8h" name="ResidueProteinProximityRestraint.h" local="no" imported="no">IMP/isd/ResidueProteinProximityRestraint.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="StudentTRestraint_8h" name="StudentTRestraint.h" local="no" imported="no">IMP/isd/StudentTRestraint.h</includes>
    <includes id="Switching_8h" name="Switching.h" local="no" imported="no">IMP/isd/Switching.h</includes>
    <includes id="TALOSRestraint_8h" name="TALOSRestraint.h" local="no" imported="no">IMP/isd/TALOSRestraint.h</includes>
    <includes id="UniformPrior_8h" name="UniformPrior.h" local="no" imported="no">IMP/isd/UniformPrior.h</includes>
    <includes id="Weight_8h" name="Weight.h" local="no" imported="no">IMP/isd/Weight.h</includes>
    <includes id="WeightMover_8h" name="WeightMover.h" local="no" imported="no">IMP/isd/WeightMover.h</includes>
    <includes id="WeightRestraint_8h" name="WeightRestraint.h" local="no" imported="no">IMP/isd/WeightRestraint.h</includes>
    <includes id="bivariate__functions_8h" name="bivariate_functions.h" local="no" imported="no">IMP/isd/bivariate_functions.h</includes>
    <includes id="isd_2distribution_8h" name="isd/distribution.h" local="no" imported="no">IMP/isd/distribution.h</includes>
    <includes id="em__utilities_8h" name="em_utilities.h" local="no" imported="no">IMP/isd/em_utilities.h</includes>
    <includes id="univariate__functions_8h" name="univariate_functions.h" local="no" imported="no">IMP/isd/univariate_functions.h</includes>
    <includes id="vonMises_8h" name="vonMises.h" local="no" imported="no">IMP/isd/vonMises.h</includes>
    <includes id="vonMisesKappaConjugateRestraint_8h" name="vonMisesKappaConjugateRestraint.h" local="no" imported="no">IMP/isd/vonMisesKappaConjugateRestraint.h</includes>
    <includes id="vonMisesKappaJeffreysRestraint_8h" name="vonMisesKappaJeffreysRestraint.h" local="no" imported="no">IMP/isd/vonMisesKappaJeffreysRestraint.h</includes>
    <includes id="vonMisesSufficient_8h" name="vonMisesSufficient.h" local="no" imported="no">IMP/isd/vonMisesSufficient.h</includes>
  </compound>
  <compound kind="file">
    <name>isd/ISDRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>isd_2ISDRestraint_8h</filename>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="no" imported="no">IMP/ScoringFunction.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::ISDRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ISDRestraint &gt; &gt;</type>
      <name>ISDRestraints</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a8848cf4e97ee41e036f284c2fe4d2cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ISDRestraint &gt; &gt;</type>
      <name>ISDRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a4b3fc77dc074b486d44ded59b348adef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>spb/ISDRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb_2ISDRestraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <class kind="class">IMP::spb::ISDRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>JeffreysRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>JeffreysRestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::JeffreysRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Joint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>Joint_8h</filename>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="swig__macros_8h" name="swig_macros.h" local="no" imported="no">IMP/swig_macros.h</includes>
    <class kind="class">IMP::kinematics::Joint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Joint &gt; &gt;</type>
      <name>Joints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad754a735ae4dc25b334c6b9731cf5e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Joint &gt; &gt;</type>
      <name>JointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a4d7f0fd2a68a4692c5cc4c594bc4c975</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JPGImageReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>JPGImageReaderWriter_8h</filename>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">IMP/em/ImageHeader.h</includes>
    <class kind="class">IMP::em2d::JPGImageReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>KernelParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>KernelParameters_8h</filename>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em::KernelParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; KernelParameters &gt;</type>
      <name>KernelParametersList</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7049cc560c7916e5ac5e9f6b597b4e3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Key.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Key_8h</filename>
    <includes id="utility_8h" name="utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="no" imported="no">IMP/comparison_macros.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="no" imported="no">IMP/hash_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="thread__macros_8h" name="thread_macros.h" local="no" imported="no">IMP/thread_macros.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <class kind="class">IMP::Key</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicForest.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>KinematicForest_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="TransformationJoint_8h" name="TransformationJoint.h" local="no" imported="no">IMP/kinematics/TransformationJoint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <class kind="class">IMP::kinematics::KinematicForest</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; KinematicForest &gt; &gt;</type>
      <name>KinematicForests</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aabe345a812a4367d2137ab85fdbff490</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; KinematicForest &gt; &gt;</type>
      <name>KinematicForestsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a21dc3425fb63dc7b6791310a5e00a8e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KinematicForestScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>KinematicForestScoreState_8h</filename>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="KinematicForest_8h" name="KinematicForest.h" local="no" imported="no">IMP/kinematics/KinematicForest.h</includes>
    <class kind="class">IMP::kinematics::KinematicForestScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>KinematicNode.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>KinematicNode_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::kinematics::KinematicNode</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>kinematics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>kinematics_8h</filename>
    <includes id="CCDLoopClosure_8h" name="CCDLoopClosure.h" local="no" imported="no">IMP/kinematics/CCDLoopClosure.h</includes>
    <includes id="CompositeJoint_8h" name="CompositeJoint.h" local="no" imported="no">IMP/kinematics/CompositeJoint.h</includes>
    <includes id="DOF_8h" name="DOF.h" local="no" imported="no">IMP/kinematics/DOF.h</includes>
    <includes id="DOFValues_8h" name="DOFValues.h" local="no" imported="no">IMP/kinematics/DOFValues.h</includes>
    <includes id="DOFsSampler_8h" name="DOFsSampler.h" local="no" imported="no">IMP/kinematics/DOFsSampler.h</includes>
    <includes id="DihedralMover_8h" name="DihedralMover.h" local="no" imported="no">IMP/kinematics/DihedralMover.h</includes>
    <includes id="FibrilSampler_8h" name="FibrilSampler.h" local="no" imported="no">IMP/kinematics/FibrilSampler.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="KinematicForest_8h" name="KinematicForest.h" local="no" imported="no">IMP/kinematics/KinematicForest.h</includes>
    <includes id="KinematicForestScoreState_8h" name="KinematicForestScoreState.h" local="no" imported="no">IMP/kinematics/KinematicForestScoreState.h</includes>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="PrismaticJoint_8h" name="PrismaticJoint.h" local="no" imported="no">IMP/kinematics/PrismaticJoint.h</includes>
    <includes id="ProteinKinematics_8h" name="ProteinKinematics.h" local="no" imported="no">IMP/kinematics/ProteinKinematics.h</includes>
    <includes id="RMSDClustering_8h" name="RMSDClustering.h" local="no" imported="no">IMP/kinematics/RMSDClustering.h</includes>
    <includes id="RRT_8h" name="RRT.h" local="no" imported="no">IMP/kinematics/RRT.h</includes>
    <includes id="RevoluteJointMover_8h" name="RevoluteJointMover.h" local="no" imported="no">IMP/kinematics/RevoluteJointMover.h</includes>
    <includes id="TransformationJoint_8h" name="TransformationJoint.h" local="no" imported="no">IMP/kinematics/TransformationJoint.h</includes>
    <includes id="UniformBackboneSampler_8h" name="UniformBackboneSampler.h" local="no" imported="no">IMP/kinematics/UniformBackboneSampler.h</includes>
    <includes id="directional__DOFs_8h" name="directional_DOFs.h" local="no" imported="no">IMP/kinematics/directional_DOFs.h</includes>
    <includes id="helpers_8h" name="helpers.h" local="no" imported="no">IMP/kinematics/helpers.h</includes>
    <includes id="local__planners_8h" name="local_planners.h" local="no" imported="no">IMP/kinematics/local_planners.h</includes>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="no" imported="no">IMP/kinematics/revolute_joints.h</includes>
  </compound>
  <compound kind="file">
    <name>KinkPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>KinkPairScore_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::spb::KinkPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; KinkPairScore &gt; &gt;</type>
      <name>KinkPairScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>afbc79bd68a9b5971661341ca4d6c6146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; KinkPairScore &gt; &gt;</type>
      <name>KinkPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a76597356209f4eade3ff1adec77ab0c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kmeans/KMeans.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kmeans/</path>
    <filename>kmeans_2KMeans_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="doxygen__macros_8h" name="doxygen_macros.h" local="no" imported="no">IMP/doxygen_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="enums_8h" name="enums.h" local="no" imported="no">IMP/enums.h</includes>
    <class kind="class">IMP::kmeans::KMeans</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kmeans</namespace>
    <member kind="enumeration">
      <type></type>
      <name>KM_ALG_TYPE</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LLOYDS</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a1e3b4c7fb2b2a03ed9925f2e2fa3f022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LOCAL_SWAP</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a92f6b7e3826fef9ac5f6a536fb31e1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LOCAL_EZ_HYBRID</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a35ab4ba2898fc9b41066e60b8caa83e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_HYBRID</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a29a08c042861f77cdc777ad8b3d2262c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KMeans.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>KMeans_8h</filename>
    <includes id="kmeans_2KMeans_8h" name="kmeans/KMeans.h" local="no" imported="no">IMP/kmeans/KMeans.h</includes>
  </compound>
  <compound kind="file">
    <name>LangevinThermostatOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>LangevinThermostatOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::LangevinThermostatOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LangevinThermostatOptimizerState &gt; &gt;</type>
      <name>LangevinThermostatOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a39e0cfc822c496c7b1bfed4935f2c1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LangevinThermostatOptimizerState &gt; &gt;</type>
      <name>LangevinThermostatOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad1da6fe55c3bad2afc051793515ac151</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LeavesRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>LeavesRefiner_8h</filename>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::LeavesRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>LennardJones.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>LennardJones_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::atom::LennardJones</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>LennardJonesPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>LennardJonesPairScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="LennardJones_8h" name="LennardJones.h" local="no" imported="no">IMP/atom/LennardJones.h</includes>
    <includes id="smoothing__functions_8h" name="smoothing_functions.h" local="no" imported="no">IMP/atom/smoothing_functions.h</includes>
    <class kind="class">IMP::atom::LennardJonesPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LennardJonesPairScore &gt; &gt;</type>
      <name>LennardJonesPairScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a50a1d1995905bb6ed18f93f5ed169164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LennardJonesPairScore &gt; &gt;</type>
      <name>LennardJonesPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac2f62db05f4ed27693403c0b54e94879</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Line3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Line3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="yes" imported="no">Segment3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Line3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Line3D &gt;</type>
      <name>Line3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aec97b3cca72d195cf990b1e77c21680b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3b3d323c48102eb90b501b0bab217bbe</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>acf82e7318469cc77db87a30cc98ef67f</anchor>
      <arglist>(const Line3D &amp;s, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac02176c89a2b318dac48b35e11b90343</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a77d0b01755739146b53216fecabcb899</anchor>
      <arglist>(const Line3D &amp;l, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Segment3D</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae4a0378baab9f9cb01c824f2ec6abc51</anchor>
      <arglist>(const Line3D &amp;l, const algebra::Segment3D &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Segment3D</type>
      <name>get_segment_connecting_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aba7bf2d5c4d78a8bcd21d63ced9c30ad</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Linear.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>Linear_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::Linear</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>linear_distance_pair_scores.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>linear__distance__pair__scores_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="struct">IMP::npctransport::LinearInteractionPairScore::EvaluationCache</class>
    <class kind="class">IMP::npctransport::LinearInteractionPairScore</class>
    <class kind="class">IMP::npctransport::LinearSoftSpherePairScore</class>
    <class kind="class">IMP::npctransport::LinearWellPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LinearWellPairScore &gt; &gt;</type>
      <name>LinearWellPairScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a164103352c6d88add3a802845e12d691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LinearWellPairScore &gt; &gt;</type>
      <name>LinearWellPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9d96ef15c5337091a5c0e9be4523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_evaluate_index</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aeeafcd1dbc23081c85d3b450cf9d3474</anchor>
      <arglist>(algebra::Sphere3D &amp;d_xyzr0, algebra::Sphere3D &amp;d_xyzr1, DerivativeAccumulator *da, const algebra::Vector3D &amp;delta, double delta_length, double x0, double k)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearFit.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>LinearFit_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">Vector2D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::LinearFit2D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; LinearFit2D &gt;</type>
      <name>LinearFit2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae143affa8cfbbec298a52b20e1a17487</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LinearLowerBound.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>LinearLowerBound_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::LinearLowerBound</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>link_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>link__macros_8h</filename>
    <includes id="links_8h" name="links.h" local="yes" imported="no">links.h</includes>
    <includes id="associations_8h" name="associations.h" local="yes" imported="no">associations.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DECLARE_LINKERS</name>
      <anchorfile>link__macros_8h.html</anchorfile>
      <anchor>a03a69fce128d32225fa8960564c25b23</anchor>
      <arglist>(Name, name, names, Type, Types, cargs,link_custom_documentation)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_DEFINE_LINKERS</name>
      <anchorfile>link__macros_8h.html</anchorfile>
      <anchor>a5a12404594ab737ce803e6f3ac5309d0</anchor>
      <arglist>(Name, name, names, Type, Types, create_args, create_args_pass)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>links.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>links_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <class kind="class">IMP::rmf::LoadLink</class>
    <class kind="class">IMP::rmf::SaveLink</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LoadLink &gt; &gt;</type>
      <name>LoadLinks</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a4a4aa5fb4802a5dcef9e0be4bea0b8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LoadLink &gt; &gt;</type>
      <name>LoadLinksTemp</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a1f9c45d2b0771f8414023c5c083a1c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SaveLink &gt; &gt;</type>
      <name>SaveLinks</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ac3ecdfab578f53c6116c153071f2fb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SaveLink &gt; &gt;</type>
      <name>SaveLinksTemp</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a28cec2dd8e3983372f4d963b9801434b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ListPairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ListPairContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::container::ListPairContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListPairContainer &gt; &gt;</type>
      <name>ListPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0bfc33c66df65fb3fb2a95f2732e0eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListPairContainer &gt; &gt;</type>
      <name>ListPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a315e0202a6ea9ca6d918434802b61780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ListQuadContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ListQuadContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="no" imported="no">IMP/QuadModifier.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::container::ListQuadContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListQuadContainer &gt; &gt;</type>
      <name>ListQuadContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ace3d4ddd1edc022d7635626856fdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListQuadContainer &gt; &gt;</type>
      <name>ListQuadContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aa4cc42f995b38ccd05ed8d6f2bc405a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ListSingletonContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ListSingletonContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::container::ListSingletonContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListSingletonContainer &gt; &gt;</type>
      <name>ListSingletonContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0c960d6625149ebd5485e75a2c8fa864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListSingletonContainer &gt; &gt;</type>
      <name>ListSingletonContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aa020c60ae56aaa6d9afd3ac99821c4d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ListTripletContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>ListTripletContainer_8h</filename>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="no" imported="no">IMP/TripletModifier.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::container::ListTripletContainer</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListTripletContainer &gt; &gt;</type>
      <name>ListTripletContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab44dfacb41c080d6bc341abd0a1dbd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListTripletContainer &gt; &gt;</type>
      <name>ListTripletContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a38713b691ed1153f284f644fc5cd003a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>live_objects.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>live__objects_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="types_8h" name="types.h" local="yes" imported="no">types.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>Strings</type>
      <name>get_live_object_names</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2a1e5a70392770f13aa7d671aac1238a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Objects</type>
      <name>get_live_objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6a0f515e473b6d1fc8aa5bf919bc6ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_show_leaked_objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad1be728e53585811d673eaadf261b761</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>local_planners.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>local__planners_8h</filename>
    <includes id="DOFValues_8h" name="DOFValues.h" local="yes" imported="no">DOFValues.h</includes>
    <includes id="directional__DOFs_8h" name="directional_DOFs.h" local="yes" imported="no">directional_DOFs.h</includes>
    <includes id="DOFsSampler_8h" name="DOFsSampler.h" local="yes" imported="no">DOFsSampler.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::kinematics::LocalPlanner</class>
    <class kind="class">IMP::kinematics::PathLocalPlanner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LocalPlanner &gt; &gt;</type>
      <name>LocalPlanners</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aa1f95a2d7dbbbf3150b60fa91ccc74fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LocalPlanner &gt; &gt;</type>
      <name>LocalPlannersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a605d5240e6e4a5d0e0deb5b889d82676</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PathLocalPlanner &gt; &gt;</type>
      <name>PathLocalPlanners</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a791bc95ccd185f0e6ba105200b5b2f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PathLocalPlanner &gt; &gt;</type>
      <name>PathLocalPlannersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ac6dfddfb00e36b5ee2dd15da8a0224ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>log.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>log_8h</filename>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="WarningContext_8h" name="WarningContext.h" local="yes" imported="no">WarningContext.h</includes>
    <includes id="Flag_8h" name="Flag.h" local="yes" imported="no">Flag.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_to_log</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af169ccf5496a22dd8e62cdaee0b89c39</anchor>
      <arglist>(LogLevel level, std::string to_write)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_level</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a038e88ee10717a2b570b298d75dbe0a2</anchor>
      <arglist>(LogLevel l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_timer</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5c31e3300fd519bb74a7dea10fec1bb3</anchor>
      <arglist>(bool tb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_log_timer</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aabdbfe5636de1ab920117bc2a1a01e39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LogLevel</type>
      <name>get_log_level</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abee1d9e0be6131570e147e75d0aeefb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_progress_display</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7b0c01bb3bbc04ec6262deda1b4f438f</anchor>
      <arglist>(std::string description, unsigned int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_progress_display</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6b5b66a32877de30281856d50b5616c9</anchor>
      <arglist>(unsigned int step=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>log_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>log__macros_8h</filename>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="log_8h" name="log.h" local="yes" imported="no">log.h</includes>
    <includes id="CreateLogContext_8h" name="CreateLogContext.h" local="yes" imported="no">CreateLogContext.h</includes>
    <includes id="compiler__macros_8h" name="compiler_macros.h" local="yes" imported="no">compiler_macros.h</includes>
    <includes id="SetCheckState_8h" name="SetCheckState.h" local="yes" imported="no">SetCheckState.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_ERROR</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a60f4f283d30de21b894dd82833ca7738</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_FUNCTION_LOG</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a9b26fbe32794b0523f9d25cc3c626634</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_IF_LOG</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a305546a2fd64d92bafbe54b0374956d9</anchor>
      <arglist>(level)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LOG_CONTEXT</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>ae077f01fa25b68102e00084c42f38aab</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LOG_PROGRESS</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a2800747909748f16da5be36999c81376</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LOG_TERSE</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>aba5409a16b07590f03abf0cb93af36ec</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LOG_VARIABLE</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>aad62abc6d20636cb17840e908dff8175</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_LOG_VERBOSE</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a6ee86c19cca6176fbf2b4140c8ae607e</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OBJECT_LOG</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>ac7412676cbab03dd1ec9f77498ccf0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PROGRESS_DISPLAY</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>aa66e2b25ef234a0cb1b5d2017a6863e9</anchor>
      <arglist>(name, steps)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_WARN</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a742e2a26e23a5890d567a17e84a3228b</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_WARN_ONCE</name>
      <anchorfile>log__macros_8h.html</anchorfile>
      <anchor>a192e7eb8e016de2b79c0156c7fe97438</anchor>
      <arglist>(key, expr, context)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LognormalAmbiguousRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>LognormalAmbiguousRestraint_8h</filename>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::isd::LognormalAmbiguousRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>LogNormalMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>LogNormalMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::LogNormalMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>LognormalRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>LognormalRestraint_8h</filename>
    <includes id="FNormal_8h" name="FNormal.h" local="no" imported="no">IMP/isd/FNormal.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::LognormalRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>LogOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>LogOptimizerState_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="yes" imported="no">Writer.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">IMP/display/geometry.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::display::WriteOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>LogPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>LogPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::misc::LogPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>LogWrapper.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>LogWrapper_8h</filename>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <class kind="class">IMP::isd::LogWrapper</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>LoopStatistical.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>LoopStatistical_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="Statistical_8h" name="Statistical.h" local="yes" imported="no">Statistical.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::LoopStatistical</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
    <member kind="typedef">
      <type>Key&lt; 6453472 &gt;</type>
      <name>LoopStatisticalType</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a880c730221bbe309c5b9472ba99d5f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; LoopStatisticalType &gt;</type>
      <name>LoopStatisticalTypes</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>abea3f0d6b2a824b19a9e83984b502d5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LoopStatisticalPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>LoopStatisticalPairScore_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="LoopStatistical_8h" name="LoopStatistical.h" local="no" imported="no">IMP/score_functor/LoopStatistical.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="StatisticalPairScore_8h" name="StatisticalPairScore.h" local="no" imported="no">IMP/core/StatisticalPairScore.h</includes>
    <class kind="class">IMP::atom::LoopStatisticalPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_loop_statistical_score_data</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae740b8ef38083ec8033617ac85e91477</anchor>
      <arglist>(atom::Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LowestRefinedPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>LowestRefinedPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::misc::LowestRefinedPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>macros_8h</filename>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>main.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>main_8h</filename>
    <includes id="SimulationData_8h" name="SimulationData.h" local="yes" imported="no">SimulationData.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>void</type>
      <name>do_main_loop</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>acf2b03b3939c022ec65e8402c3016dbf</anchor>
      <arglist>(SimulationData *sd, const RestraintsTemp &amp;init_restraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inflate_floater</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac3ab0c2e603459987e3d2b830f9542a2</anchor>
      <arglist>(SimulationData *sd, const std::string floater_name, const float new_radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_Nup42</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6208eea9bbe3ff93c959efd27ad0e27b</anchor>
      <arglist>(SimulationData *sd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_box_size</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a22d9fcba42fae7e2c499b42c0682d420</anchor>
      <arglist>(SimulationData *sd, double box_size)</arglist>
    </member>
    <member kind="function">
      <type>IMP::npctransport::SimulationData *</type>
      <name>startup</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a2af95d49ecd90f72d94b6122fec8d405</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MapDistanceTransform.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>MapDistanceTransform_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <class kind="class">IMP::em::MapDistanceTransform</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>MapReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>MapReaderWriter_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::em::MapReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>MarginalHBondRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>MarginalHBondRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::isd::MarginalHBondRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>MarginalNOERestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>MarginalNOERestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::isd::MarginalNOERestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>masking.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>masking_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="yes" imported="no">KernelParameters.h</includes>
    <class kind="class">IMP::em::DistanceMask</class>
    <class kind="class">IMP::em::RadiusDependentDistanceMask</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>Mass.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Mass_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::atom::Mass</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>math.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>math_8h</filename>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isinf</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a04bfc395de74386ea03d2c3f8c8f2308</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnan</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac5636d6160e3a0253b7ba90be892a6c8</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MCCGSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MCCGSampler_8h</filename>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <class kind="class">IMP::core::MCCGSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>MembraneRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>MembraneRestraint_8h</filename>
    <includes id="isd_2ISDRestraint_8h" name="isd/ISDRestraint.h" local="no" imported="no">IMP/isd/ISDRestraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::pmi::MembraneRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>/MembraneRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>_2MembraneRestraint_8h</filename>
    <includes id="isd_2ISDRestraint_8h" name="isd/ISDRestraint.h" local="no" imported="no">IMP/isd/ISDRestraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::pmi1::MembraneRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>merge_tree_utils.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>merge__tree__utils_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <class kind="class">IMP::multifit::DummyRestraint</class>
    <class kind="class">IMP::multifit::MergeTreeBuilder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>Metric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>Metric_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <class kind="class">IMP::statistics::Metric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Metric &gt; &gt;</type>
      <name>Metrics</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a3054bf7e087ffb8226c43c353f1f0612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Metric &gt; &gt;</type>
      <name>MetricsTemp</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aef5f11d78d5f7418a0190a33cd4a8414</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metric_clustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>metric__clustering_8h</filename>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="yes" imported="no">PartitionalClustering.h</includes>
    <includes id="Metric_8h" name="Metric.h" local="yes" imported="no">Metric.h</includes>
    <includes id="point__clustering_8h" name="point_clustering.h" local="yes" imported="no">point_clustering.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="no" imported="no">IMP/ConfigurationSet.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_centrality_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a033ac0d9e680dc724a782c219391dc5c</anchor>
      <arglist>(Metric *d, double far, int k)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_connectivity_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a7fa3185254b0cf61b8baa2b04e3461c6</anchor>
      <arglist>(Metric *metric, double dist)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_diameter_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ae34d7252a499c1f7a6948fa5283f88a6</anchor>
      <arglist>(Metric *d, double maximum_diameter)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_gromos_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a739c887af40a30b27d360f052f3d001b</anchor>
      <arglist>(Metric *d, double cutoff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetricClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>MetricClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="no" imported="no">IMP/core/ClosePairsFinder.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <class kind="class">IMP::misc::MetricClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
    <member kind="function">
      <type>core::ClosePairsFinder *</type>
      <name>create_metric_close_pairs_finder</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a64da6e9b5d30fb279b61c5e7100788c0</anchor>
      <arglist>(LowerBound lb, UpperBound ub)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>metrics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>metrics_8h</filename>
    <includes id="Metric_8h" name="Metric.h" local="yes" imported="no">Metric.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="yes" imported="no">Embedding.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="no" imported="no">IMP/ConfigurationSet.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::statistics::ConfigurationSetRMSDMetric</class>
    <class kind="class">IMP::statistics::EuclideanMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumPairRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumPairRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::container::MinimumPairRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::container::MinimumPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumPairScore &gt; &gt;</type>
      <name>MinimumPairScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>adf6f030c4f9b738ad6ce681dc67b39a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumPairScore &gt; &gt;</type>
      <name>MinimumPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad5e7afb27da4bc6bf8487ca945b24f53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MinimumQuadRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumQuadRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="QuadScore_8h" name="QuadScore.h" local="no" imported="no">IMP/QuadScore.h</includes>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <class kind="class">IMP::container::MinimumQuadRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumQuadScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumQuadScore_8h</filename>
    <includes id="QuadScore_8h" name="QuadScore.h" local="no" imported="no">IMP/QuadScore.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
    <class kind="class">IMP::container::MinimumQuadScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumQuadScore &gt; &gt;</type>
      <name>MinimumQuadScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a05c08253cdc39e2ae53a9bded3136992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumQuadScore &gt; &gt;</type>
      <name>MinimumQuadScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab7a49850be02fcb015cfdef3545ff68d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MinimumRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MinimumRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::core::MinimumRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumSingletonRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumSingletonRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::container::MinimumSingletonRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumSingletonScore_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::container::MinimumSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumSingletonScore &gt; &gt;</type>
      <name>MinimumSingletonScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a67d411ba2f1bdee42a3a747824200f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumSingletonScore &gt; &gt;</type>
      <name>MinimumSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac1741328096dd0c9db98e2fddbd417fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MinimumSphereDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>MinimumSphereDistancePairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::npc::MinimumSphereDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumTripletRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumTripletRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <class kind="class">IMP::container::MinimumTripletRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>MinimumTripletScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>MinimumTripletScore_8h</filename>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <class kind="class">IMP::container::MinimumTripletScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumTripletScore &gt; &gt;</type>
      <name>MinimumTripletScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a23598555ef98c7182bfc7055a1341bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumTripletScore &gt; &gt;</type>
      <name>MinimumTripletScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a02aa4ff791824c1faf60363594a8ce1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>misc.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>misc_8h</filename>
    <includes id="CommonEndpointPairFilter_8h" name="CommonEndpointPairFilter.h" local="no" imported="no">IMP/misc/CommonEndpointPairFilter.h</includes>
    <includes id="CustomXYZR_8h" name="CustomXYZR.h" local="no" imported="no">IMP/misc/CustomXYZR.h</includes>
    <includes id="DecayPairContainerOptimizerState_8h" name="DecayPairContainerOptimizerState.h" local="no" imported="no">IMP/misc/DecayPairContainerOptimizerState.h</includes>
    <includes id="FreelyJointedChain_8h" name="FreelyJointedChain.h" local="no" imported="no">IMP/misc/FreelyJointedChain.h</includes>
    <includes id="LogPairScore_8h" name="LogPairScore.h" local="no" imported="no">IMP/misc/LogPairScore.h</includes>
    <includes id="LowestRefinedPairScore_8h" name="LowestRefinedPairScore.h" local="no" imported="no">IMP/misc/LowestRefinedPairScore.h</includes>
    <includes id="MetricClosePairsFinder_8h" name="MetricClosePairsFinder.h" local="no" imported="no">IMP/misc/MetricClosePairsFinder.h</includes>
    <includes id="SoftCylinderPairScore_8h" name="SoftCylinderPairScore.h" local="no" imported="no">IMP/misc/SoftCylinderPairScore.h</includes>
    <includes id="StateAdaptor_8h" name="StateAdaptor.h" local="no" imported="no">IMP/misc/StateAdaptor.h</includes>
    <includes id="WormLikeChain_8h" name="WormLikeChain.h" local="no" imported="no">IMP/misc/WormLikeChain.h</includes>
  </compound>
  <compound kind="file">
    <name>mmcif.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>mmcif_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="pdb_8h" name="pdb.h" local="no" imported="no">IMP/atom/pdb.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2efb72426efcdea0d7566faa78d793ae</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector(), bool select_first_model=true)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>read_multimodel_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8dd513ff4e39c4c40c56e11f2d23da94</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector())</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>read_multimodel_pdb_or_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2befbe269f1b12d6ccfd31fff5d4673</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector())</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_pdb_or_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afa75d21223f20565d1cc585ec7ebc9af</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector(), bool select_first_model=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Model.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Model_8h</filename>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="yes" imported="no">ScoringFunction.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">Restraint.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="yes" imported="no">RestraintSet.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="yes" imported="no">ScoreState.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Undecorator_8h" name="Undecorator.h" local="yes" imported="no">Undecorator.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::Model</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>model_interaction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>model__interaction_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">IMP/em/SampledDensityMap.h</includes>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="yes" imported="no">IMP/em/MapReaderWriter.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="pdb_8h" name="pdb.h" local="yes" imported="no">IMP/atom/pdb.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="Chain_8h" name="Chain.h" local="yes" imported="no">IMP/atom/Chain.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">IMP/atom/Residue.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">IMP/atom/Atom.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">IMP/core/XYZ.h</includes>
    <includes id="core_8h" name="core.h" local="yes" imported="no">IMP/core.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="IMP_8h" name="IMP.h" local="yes" imported="no">IMP.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="function">
      <type>void</type>
      <name>write_vectors_as_pdb</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>abfff1fcbd0e36d96ec44c0e5154945aa</anchor>
      <arglist>(const algebra::Vector2Ds vs, const String filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model_object_helpers.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>model__object__helpers_8h</filename>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="yes" imported="no">ScoreState.h</includes>
    <class kind="class">IMP::ParticleInputs</class>
    <class kind="class">IMP::ParticleOutputs</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_required_score_states</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a87c780c587a232b7b167d2a9efd13e4d</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos, ScoreStatesTemp exclude=ScoreStatesTemp())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model_statistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>model__statistics_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="io_8h" name="io.h" local="no" imported="no">IMP/io.h</includes>
    <class kind="class">IMP::core::WriteRestraintScoresOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>ModelObject.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ModelObject_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <class kind="class">IMP::ModelObject</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>mol2.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>mol2_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="class">IMP::atom::AllMol2Selector</class>
    <class kind="class">IMP::atom::Mol2Selector</class>
    <class kind="class">IMP::atom::NonHydrogenMol2Selector</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_mol2</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a63d0f55dbe0f5805915a028a15bf1b1f</anchor>
      <arglist>(TextInput mol2_file, Model *model, Mol2Selector *mol2sel=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_mol2</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abfcacb973482471e99c5fb1ca306f20b</anchor>
      <arglist>(Hierarchy rhd, TextOutput file_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MolCnSymmAxisDetector.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>MolCnSymmAxisDetector_8h</filename>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::cnmultifit::MolCnSymmAxisDetector</class>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; MolCnSymmAxisDetector &gt;</type>
      <name>MolCnSymmAxisDetectors</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a89bcaef432859cebafcdee8bdbdcf654</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom/MolecularDynamics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2MolecularDynamics_8h</filename>
    <includes id="Simulator_8h" name="Simulator.h" local="yes" imported="no">Simulator.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <class kind="class">IMP::atom::AngularVelocity</class>
    <class kind="class">IMP::atom::LinearVelocity</class>
    <class kind="class">IMP::atom::MolecularDynamics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>isd/MolecularDynamics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>isd_2MolecularDynamics_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="atom_2MolecularDynamics_8h" name="atom/MolecularDynamics.h" local="no" imported="no">IMP/atom/MolecularDynamics.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <class kind="class">IMP::isd::MolecularDynamics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularDynamicsMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>MolecularDynamicsMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="isd_2MolecularDynamics_8h" name="isd/MolecularDynamics.h" local="no" imported="no">IMP/isd/MolecularDynamics.h</includes>
    <class kind="class">IMP::isd::MolecularDynamicsMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>MolecularDynamicsWithWte.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>MolecularDynamicsWithWte_8h</filename>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Simulator_8h" name="Simulator.h" local="yes" imported="no">IMP/atom/Simulator.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">IMP/atom/atom_macros.h</includes>
    <class kind="class">IMP::spb::MolecularDynamicsWithWte</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Molecule.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Molecule_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Molecule</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>get_molecule_name</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3e2c48e16f6245ccf46936fe4ed5837b</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MonteCarlo.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MonteCarlo_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
    <includes id="Configuration_8h" name="Configuration.h" local="no" imported="no">IMP/Configuration.h</includes>
    <class kind="class">IMP::core::MonteCarlo</class>
    <class kind="class">IMP::core::MonteCarloWithBasinHopping</class>
    <class kind="class">IMP::core::MonteCarloWithLocalOptimization</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="define">
      <type>#define</type>
      <name>IMP_CORE_HAS_MONTE_CARLO_MOVER</name>
      <anchorfile>MonteCarlo_8h.html</anchorfile>
      <anchor>ad3ed233a3ca79928d31f60cda4be8597</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MonteCarloMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MonteCarloMover_8h</filename>
    <includes id="ModelObject_8h" name="ModelObject.h" local="no" imported="no">IMP/ModelObject.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <class kind="class">IMP::core::MonteCarloMover</class>
    <class kind="struct">IMP::core::MonteCarloMoverResult</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; MonteCarloMoverResult &gt;</type>
      <name>MonteCarloMoverResults</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a851e038eb66e1dc2b1c417d6c1b2fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MonteCarloMover &gt; &gt;</type>
      <name>MonteCarloMovers</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a61d4e7b3c693c1fb8101daf451599cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MonteCarloMover &gt; &gt;</type>
      <name>MonteCarloMoversTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a04412ad91d8f0be8e06930850d247c92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MonteCarloWithWte.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>MonteCarloWithWte_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <class kind="class">IMP::spb::MonteCarloWithWte</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>MoveStatisticsScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MoveStatisticsScoreState_8h</filename>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="io_8h" name="io.h" local="no" imported="no">IMP/io.h</includes>
    <class kind="class">IMP::core::MoveStatisticsScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>mpi.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>mpi_8h</filename>
    <includes id="ReplicaExchange_8h" name="ReplicaExchange.h" local="no" imported="no">IMP/mpi/ReplicaExchange.h</includes>
  </compound>
  <compound kind="file">
    <name>MRCReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>MRCReaderWriter_8h</filename>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="yes" imported="no">MapReaderWriter.h</includes>
    <class kind="class">IMP::em::MRCReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>MSConnectivityRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MSConnectivityRestraint_8h</filename>
    <includes id="DistanceRestraint_8h" name="DistanceRestraint.h" local="yes" imported="no">DistanceRestraint.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::core::MSConnectivityRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>multi_state.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>multi__state_8h</filename>
    <includes id="EnsembleGenerator_8h" name="EnsembleGenerator.h" local="no" imported="no">IMP/multi_state/EnsembleGenerator.h</includes>
    <includes id="MultiStateModel_8h" name="MultiStateModel.h" local="no" imported="no">IMP/multi_state/MultiStateModel.h</includes>
    <includes id="MultiStateModelScore_8h" name="MultiStateModelScore.h" local="no" imported="no">IMP/multi_state/MultiStateModelScore.h</includes>
    <includes id="SAXSMultiCombinationScore_8h" name="SAXSMultiCombinationScore.h" local="no" imported="no">IMP/multi_state/SAXSMultiCombinationScore.h</includes>
    <includes id="SAXSMultiStateModelScore_8h" name="SAXSMultiStateModelScore.h" local="no" imported="no">IMP/multi_state/SAXSMultiStateModelScore.h</includes>
    <includes id="stat__helpers_8h" name="stat_helpers.h" local="no" imported="no">IMP/multi_state/stat_helpers.h</includes>
  </compound>
  <compound kind="file">
    <name>multifit.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>multifit_8h</filename>
    <includes id="AlignmentParams_8h" name="AlignmentParams.h" local="no" imported="no">IMP/multifit/AlignmentParams.h</includes>
    <includes id="ComplementarityRestraint_8h" name="ComplementarityRestraint.h" local="no" imported="no">IMP/multifit/ComplementarityRestraint.h</includes>
    <includes id="DataPointsAssignment_8h" name="DataPointsAssignment.h" local="no" imported="no">IMP/multifit/DataPointsAssignment.h</includes>
    <includes id="DensityDataPoints_8h" name="DensityDataPoints.h" local="no" imported="no">IMP/multifit/DensityDataPoints.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="no" imported="no">IMP/multifit/FittingSolutionRecord.h</includes>
    <includes id="GeometricHash_8h" name="GeometricHash.h" local="no" imported="no">IMP/multifit/GeometricHash.h</includes>
    <includes id="multifit_2RadiusOfGyrationRestraint_8h" name="multifit/RadiusOfGyrationRestraint.h" local="no" imported="no">IMP/multifit/RadiusOfGyrationRestraint.h</includes>
    <includes id="RigidLeavesRefiner_8h" name="RigidLeavesRefiner.h" local="no" imported="no">IMP/multifit/RigidLeavesRefiner.h</includes>
    <includes id="SettingsData_8h" name="SettingsData.h" local="no" imported="no">IMP/multifit/SettingsData.h</includes>
    <includes id="WeightedExcludedVolumeRestraint_8h" name="WeightedExcludedVolumeRestraint.h" local="no" imported="no">IMP/multifit/WeightedExcludedVolumeRestraint.h</includes>
    <includes id="anchor__graph_8h" name="anchor_graph.h" local="no" imported="no">IMP/multifit/anchor_graph.h</includes>
    <includes id="anchor__utilities_8h" name="anchor_utilities.h" local="no" imported="no">IMP/multifit/anchor_utilities.h</includes>
    <includes id="anchors__reader_8h" name="anchors_reader.h" local="no" imported="no">IMP/multifit/anchors_reader.h</includes>
    <includes id="coarse__molecule_8h" name="coarse_molecule.h" local="no" imported="no">IMP/multifit/coarse_molecule.h</includes>
    <includes id="multifit_2connolly__surface_8h" name="multifit/connolly_surface.h" local="no" imported="no">IMP/multifit/connolly_surface.h</includes>
    <includes id="density__analysis_8h" name="density_analysis.h" local="no" imported="no">IMP/multifit/density_analysis.h</includes>
    <includes id="ensemble__analysis_8h" name="ensemble_analysis.h" local="no" imported="no">IMP/multifit/ensemble_analysis.h</includes>
    <includes id="fft__based__rigid__fitting_8h" name="fft_based_rigid_fitting.h" local="no" imported="no">IMP/multifit/fft_based_rigid_fitting.h</includes>
    <includes id="fitting__solutions__reader__writer_8h" name="fitting_solutions_reader_writer.h" local="no" imported="no">IMP/multifit/fitting_solutions_reader_writer.h</includes>
    <includes id="fitting__states_8h" name="fitting_states.h" local="no" imported="no">IMP/multifit/fitting_states.h</includes>
    <includes id="fitting__tools_8h" name="fitting_tools.h" local="no" imported="no">IMP/multifit/fitting_tools.h</includes>
    <includes id="fitting__utils_8h" name="fitting_utils.h" local="no" imported="no">IMP/multifit/fitting_utils.h</includes>
    <includes id="merge__tree__utils_8h" name="merge_tree_utils.h" local="no" imported="no">IMP/multifit/merge_tree_utils.h</includes>
    <includes id="path__reader__writer_8h" name="path_reader_writer.h" local="no" imported="no">IMP/multifit/path_reader_writer.h</includes>
    <includes id="pca__based__rigid__fitting_8h" name="pca_based_rigid_fitting.h" local="no" imported="no">IMP/multifit/pca_based_rigid_fitting.h</includes>
    <includes id="protein__anchors__mapping__reader_8h" name="protein_anchors_mapping_reader.h" local="no" imported="no">IMP/multifit/protein_anchors_mapping_reader.h</includes>
    <includes id="proteomics__em__alignment__atomic_8h" name="proteomics_em_alignment_atomic.h" local="no" imported="no">IMP/multifit/proteomics_em_alignment_atomic.h</includes>
    <includes id="proteomics__reader_8h" name="proteomics_reader.h" local="no" imported="no">IMP/multifit/proteomics_reader.h</includes>
    <includes id="weighted__excluded__volume_8h" name="weighted_excluded_volume.h" local="no" imported="no">IMP/multifit/weighted_excluded_volume.h</includes>
  </compound>
  <compound kind="file">
    <name>MultipleBinormalRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>MultipleBinormalRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::core::BinormalTerm</class>
    <class kind="class">IMP::core::MultipleBinormalRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; BinormalTerm &gt;</type>
      <name>BinormalTermList</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab4c9d84b358bb59f33034127589eaac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiStateModel.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>MultiStateModel_8h</filename>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::multi_state::CompareMultiStateModels</class>
    <class kind="class">IMP::multi_state::MultiStateModel</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>MultiStateModelScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>MultiStateModelScore_8h</filename>
    <includes id="MultiStateModel_8h" name="MultiStateModel.h" local="no" imported="no">IMP/multi_state/MultiStateModel.h</includes>
    <includes id="WeightedFitParameters_8h" name="WeightedFitParameters.h" local="no" imported="no">IMP/saxs/WeightedFitParameters.h</includes>
    <class kind="class">IMP::multi_state::MultiStateModelScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>MultivariateFNormalSufficient.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>MultivariateFNormalSufficient_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::isd::MultivariateFNormalSufficient</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>NearestNeighborsClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>NearestNeighborsClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="yes" imported="no">ClosePairsFinder.h</includes>
    <class kind="class">IMP::core::NearestNeighborsClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>NeighborsTable.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>NeighborsTable_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::core::NeighborsTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>nnls.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>nnls_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
    <member kind="function">
      <type>Eigen::VectorXf</type>
      <name>NNLS</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a4f88e301b11c223351766922b377efd5</anchor>
      <arglist>(const Eigen::MatrixXf &amp;A, const Eigen::VectorXf &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NOERestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>NOERestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::isd::NOERestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>NonCopyable.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>NonCopyable_8h</filename>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <class kind="class">IMP::NonCopyable</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>NormalMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>NormalMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::NormalMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>NormalSigmaPCRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>NormalSigmaPCRestraint_8h</filename>
    <includes id="PenalizedComplexityPrior_8h" name="PenalizedComplexityPrior.h" local="no" imported="no">IMP/isd/PenalizedComplexityPrior.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::NormalSigmaPCRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>npc.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>npc_8h</filename>
    <includes id="npc_2CompositeRestraint_8h" name="npc/CompositeRestraint.h" local="no" imported="no">IMP/npc/CompositeRestraint.h</includes>
    <includes id="MinimumSphereDistancePairScore_8h" name="MinimumSphereDistancePairScore.h" local="no" imported="no">IMP/npc/MinimumSphereDistancePairScore.h</includes>
    <includes id="ProteinLocalizationRestraint_8h" name="ProteinLocalizationRestraint.h" local="no" imported="no">IMP/npc/ProteinLocalizationRestraint.h</includes>
    <includes id="SlabWithPore_8h" name="SlabWithPore.h" local="no" imported="no">IMP/npc/SlabWithPore.h</includes>
    <includes id="SlabWithSphericalIndent_8h" name="SlabWithSphericalIndent.h" local="no" imported="no">IMP/npc/SlabWithSphericalIndent.h</includes>
    <includes id="SlabWithSphericalIndentGeometry_8h" name="SlabWithSphericalIndentGeometry.h" local="no" imported="no">IMP/npc/SlabWithSphericalIndentGeometry.h</includes>
    <includes id="SlabWithSphericalIndentMBMScore_8h" name="SlabWithSphericalIndentMBMScore.h" local="no" imported="no">IMP/npc/SlabWithSphericalIndentMBMScore.h</includes>
    <includes id="SlabWithToroidalPore_8h" name="SlabWithToroidalPore.h" local="no" imported="no">IMP/npc/SlabWithToroidalPore.h</includes>
    <includes id="SlabWithToroidalPoreGoPairScore_8h" name="SlabWithToroidalPoreGoPairScore.h" local="no" imported="no">IMP/npc/SlabWithToroidalPoreGoPairScore.h</includes>
    <includes id="SlabWithToroidalPoreMBMScore_8h" name="SlabWithToroidalPoreMBMScore.h" local="no" imported="no">IMP/npc/SlabWithToroidalPoreMBMScore.h</includes>
    <includes id="SphericalIndentSurfaceDepthPairScore_8h" name="SphericalIndentSurfaceDepthPairScore.h" local="no" imported="no">IMP/npc/SphericalIndentSurfaceDepthPairScore.h</includes>
    <includes id="ToroidalPoreSurfaceDepthPairScore_8h" name="ToroidalPoreSurfaceDepthPairScore.h" local="no" imported="no">IMP/npc/ToroidalPoreSurfaceDepthPairScore.h</includes>
  </compound>
  <compound kind="file">
    <name>npctransport.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>npctransport_8h</filename>
    <includes id="AnchorToCylindricalPorePairScore_8h" name="AnchorToCylindricalPorePairScore.h" local="no" imported="no">IMP/npctransport/AnchorToCylindricalPorePairScore.h</includes>
    <includes id="Avro2PBReader_8h" name="Avro2PBReader.h" local="no" imported="no">IMP/npctransport/Avro2PBReader.h</includes>
    <includes id="BipartitePairsStatisticsOptimizerState_8h" name="BipartitePairsStatisticsOptimizerState.h" local="no" imported="no">IMP/npctransport/BipartitePairsStatisticsOptimizerState.h</includes>
    <includes id="BodyStatisticsOptimizerState_8h" name="BodyStatisticsOptimizerState.h" local="no" imported="no">IMP/npctransport/BodyStatisticsOptimizerState.h</includes>
    <includes id="BrownianDynamicsTAMDWithSlabSupport_8h" name="BrownianDynamicsTAMDWithSlabSupport.h" local="no" imported="no">IMP/npctransport/BrownianDynamicsTAMDWithSlabSupport.h</includes>
    <includes id="ChainStatisticsOptimizerState_8h" name="ChainStatisticsOptimizerState.h" local="no" imported="no">IMP/npctransport/ChainStatisticsOptimizerState.h</includes>
    <includes id="ExcludeZRangeSingletonScore_8h" name="ExcludeZRangeSingletonScore.h" local="no" imported="no">IMP/npctransport/ExcludeZRangeSingletonScore.h</includes>
    <includes id="FGChain_8h" name="FGChain.h" local="no" imported="no">IMP/npctransport/FGChain.h</includes>
    <includes id="GlobalStatisticsOptimizerState_8h" name="GlobalStatisticsOptimizerState.h" local="no" imported="no">IMP/npctransport/GlobalStatisticsOptimizerState.h</includes>
    <includes id="HarmonicSpringSingletonScore_8h" name="HarmonicSpringSingletonScore.h" local="no" imported="no">IMP/npctransport/HarmonicSpringSingletonScore.h</includes>
    <includes id="Parameter_8h" name="Parameter.h" local="no" imported="no">IMP/npctransport/Parameter.h</includes>
    <includes id="ParticleFactory_8h" name="ParticleFactory.h" local="no" imported="no">IMP/npctransport/ParticleFactory.h</includes>
    <includes id="ParticleTransportStatisticsOptimizerState_8h" name="ParticleTransportStatisticsOptimizerState.h" local="no" imported="no">IMP/npctransport/ParticleTransportStatisticsOptimizerState.h</includes>
    <includes id="PoreRadiusSingletonScore_8h" name="PoreRadiusSingletonScore.h" local="no" imported="no">IMP/npctransport/PoreRadiusSingletonScore.h</includes>
    <includes id="RelaxingSpring_8h" name="RelaxingSpring.h" local="no" imported="no">IMP/npctransport/RelaxingSpring.h</includes>
    <includes id="Scoring_8h" name="Scoring.h" local="no" imported="no">IMP/npctransport/Scoring.h</includes>
    <includes id="SimulationData_8h" name="SimulationData.h" local="no" imported="no">IMP/npctransport/SimulationData.h</includes>
    <includes id="SitesGeometry_8h" name="SitesGeometry.h" local="no" imported="no">IMP/npctransport/SitesGeometry.h</includes>
    <includes id="SitesPairScore_8h" name="SitesPairScore.h" local="no" imported="no">IMP/npctransport/SitesPairScore.h</includes>
    <includes id="SitesPairScoreParameters_8h" name="SitesPairScoreParameters.h" local="no" imported="no">IMP/npctransport/SitesPairScoreParameters.h</includes>
    <includes id="SlabWithCylindricalPore_8h" name="SlabWithCylindricalPore.h" local="no" imported="no">IMP/npctransport/SlabWithCylindricalPore.h</includes>
    <includes id="SlabWithCylindricalPoreGeometry_8h" name="SlabWithCylindricalPoreGeometry.h" local="no" imported="no">IMP/npctransport/SlabWithCylindricalPoreGeometry.h</includes>
    <includes id="SlabWithCylindricalPorePairScore_8h" name="SlabWithCylindricalPorePairScore.h" local="no" imported="no">IMP/npctransport/SlabWithCylindricalPorePairScore.h</includes>
    <includes id="ransport_2SlabWithPore_8h" name="ransport/SlabWithPore.h" local="no" imported="no">IMP/npctransport/SlabWithPore.h</includes>
    <includes id="ransport_2SlabWithToroidalPore_8h" name="ransport/SlabWithToroidalPore.h" local="no" imported="no">IMP/npctransport/SlabWithToroidalPore.h</includes>
    <includes id="SlabWithToroidalPorePairScore_8h" name="SlabWithToroidalPorePairScore.h" local="no" imported="no">IMP/npctransport/SlabWithToroidalPorePairScore.h</includes>
    <includes id="npctransport_2Statistics_8h" name="npctransport/Statistics.h" local="no" imported="no">IMP/npctransport/Statistics.h</includes>
    <includes id="Transporting_8h" name="Transporting.h" local="no" imported="no">IMP/npctransport/Transporting.h</includes>
    <includes id="ZBiasSingletonScore_8h" name="ZBiasSingletonScore.h" local="no" imported="no">IMP/npctransport/ZBiasSingletonScore.h</includes>
    <includes id="automatic__parameters_8h" name="automatic_parameters.h" local="no" imported="no">IMP/npctransport/automatic_parameters.h</includes>
    <includes id="npctransport_2enums_8h" name="npctransport/enums.h" local="no" imported="no">IMP/npctransport/enums.h</includes>
    <includes id="functor__linear__distance__pair__scores_8h" name="functor_linear_distance_pair_scores.h" local="no" imported="no">IMP/npctransport/functor_linear_distance_pair_scores.h</includes>
    <includes id="functor__linear__distance__pair__scores__typedefs_8h" name="functor_linear_distance_pair_scores_typedefs.h" local="no" imported="no">IMP/npctransport/functor_linear_distance_pair_scores_typedefs.h</includes>
    <includes id="harmonic__distance__pair__scores_8h" name="harmonic_distance_pair_scores.h" local="no" imported="no">IMP/npctransport/harmonic_distance_pair_scores.h</includes>
    <includes id="initialize__positions_8h" name="initialize_positions.h" local="no" imported="no">IMP/npctransport/initialize_positions.h</includes>
    <includes id="npctransport_2io_8h" name="npctransport/io.h" local="no" imported="no">IMP/npctransport/io.h</includes>
    <includes id="linear__distance__pair__scores_8h" name="linear_distance_pair_scores.h" local="no" imported="no">IMP/npctransport/linear_distance_pair_scores.h</includes>
    <includes id="main_8h" name="main.h" local="no" imported="no">IMP/npctransport/main.h</includes>
    <includes id="npctransport__proto_8fwd_8h" name="npctransport_proto.fwd.h" local="no" imported="no">IMP/npctransport/npctransport_proto.fwd.h</includes>
    <includes id="protobuf_8h" name="protobuf.h" local="no" imported="no">IMP/npctransport/protobuf.h</includes>
    <includes id="randomize__particles_8h" name="randomize_particles.h" local="no" imported="no">IMP/npctransport/randomize_particles.h</includes>
    <includes id="rmf__links_8h" name="rmf_links.h" local="no" imported="no">IMP/npctransport/rmf_links.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <includes id="util_8h" name="util.h" local="no" imported="no">IMP/npctransport/util.h</includes>
  </compound>
  <compound kind="file">
    <name>npctransport_proto.fwd.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>npctransport__proto_8fwd_8h</filename>
  </compound>
  <compound kind="file">
    <name>Nuisance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>Nuisance_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::isd::Nuisance</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>NuisanceRangeModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>NuisanceRangeModifier_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::spb::NuisanceRangeModifier</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Object.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Object_8h</filename>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">exception.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <includes id="NonCopyable_8h" name="NonCopyable.h" local="yes" imported="no">NonCopyable.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="yes" imported="no">ref_counted_macros.h</includes>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="yes" imported="no">hash_macros.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="yes" imported="no">warning_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="VersionInfo_8h" name="VersionInfo.h" local="yes" imported="no">VersionInfo.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <class kind="class">IMP::Object</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>object_cast.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>object__cast_8h</filename>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">Object.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="yes" imported="no">check_macros.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>O *</type>
      <name>object_cast</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e5cb87b915025d9948ecc762db49136</anchor>
      <arglist>(Object *o)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>object_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>object__macros_8h</filename>
    <includes id="doxygen__macros_8h" name="doxygen_macros.h" local="yes" imported="no">doxygen_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="yes" imported="no">ref_counted_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="yes" imported="no">Vector.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">Pointer.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="yes" imported="no">WeakPointer.h</includes>
    <includes id="SetLogState_8h" name="SetLogState.h" local="yes" imported="no">SetLogState.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_GENERIC_OBJECT</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>a5cf901338b87b309ff320a5f84d57fca</anchor>
      <arglist>(Name, lcname, targument, carguments, cparguments)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_NEW</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>ab148ba5f570e72971b3053e37ab3b412</anchor>
      <arglist>(Typename, varname, args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OBJECT_METHODS</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>abae59f482ba9e87af96a36c47b276aa5</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OBJECT_SERIALIZE_DECL</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>a89b5567e1182a03fbb06a882ad1217b6</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OBJECT_SERIALIZE_IMPL</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>adc649f4e1b182f439e912516bcc8af1f</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OBJECTS</name>
      <anchorfile>object__macros_8h.html</anchorfile>
      <anchor>a8ca3f8c401b6cb40e6fef25ed09e3c40</anchor>
      <arglist>(Name, PluralName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/OpenCubicSpline.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2OpenCubicSpline_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="score__functor_2OpenCubicSpline_8h" name="score_functor/OpenCubicSpline.h" local="no" imported="no">IMP/score_functor/OpenCubicSpline.h</includes>
    <includes id="ScoreUnaryFunction_8h" name="ScoreUnaryFunction.h" local="no" imported="no">IMP/score_functor/ScoreUnaryFunction.h</includes>
    <class kind="class">IMP::core::OpenCubicSpline</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor/OpenCubicSpline.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2OpenCubicSpline_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <class kind="class">IMP::score_functor::OpenCubicSpline</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>opencv_interface.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>opencv__interface_8h</filename>
    <includes id="Transformation2D_8h" name="Transformation2D.h" local="yes" imported="no">IMP/algebra/Transformation2D.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4d756420dcf4bb39e60b49ecf19723f4</anchor>
      <arglist>(const cv::Mat &amp;m, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af5f65e8bea81bf71f7ffb2dae041e897</anchor>
      <arglist>(const cv::Mat_&lt; T &gt; &amp;m, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_matrix</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad5073e1f6445687bd53f91f3bd8365f0</anchor>
      <arglist>(cv::Mat &amp;m, std::string name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Optimizer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Optimizer_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="yes" imported="no">OptimizerState.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::Optimizer</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Optimizer &gt; &gt;</type>
      <name>Optimizers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab55b1b9a87645be934591671abdcd03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Optimizer &gt; &gt;</type>
      <name>OptimizersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6fbdee798fda00b0f9e7d04515bff9eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>OptimizerState_8h</filename>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::OptimizerState</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>Order.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>Order_8h</filename>
    <includes id="macros_8h" name="macros.h" local="yes" imported="no">IMP/macros.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="ConstVector_8h" name="ConstVector.h" local="no" imported="no">IMP/ConstVector.h</includes>
    <class kind="class">IMP::domino::Order</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Order &gt;</type>
      <name>Orders</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aebede1f90b715917e8a7cdef41bacb84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrientedSoap.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>OrientedSoap_8h</filename>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="no" imported="no">IMP/algebra/constants.h</includes>
    <includes id="ScoreWithCache_8h" name="ScoreWithCache.h" local="yes" imported="no">ScoreWithCache.h</includes>
    <class kind="class">IMP::score_functor::OrientedSoap</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>OrientedSoapPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>OrientedSoapPairScore_8h</filename>
    <includes id="OrientedSoap_8h" name="OrientedSoap.h" local="no" imported="no">IMP/score_functor/OrientedSoap.h</includes>
    <includes id="DistancePairScoreWithCache_8h" name="DistancePairScoreWithCache.h" local="no" imported="no">IMP/score_functor/DistancePairScoreWithCache.h</includes>
    <includes id="SoapPairFilter_8h" name="SoapPairFilter.h" local="no" imported="no">IMP/atom/SoapPairFilter.h</includes>
    <class kind="class">IMP::atom::OrientedSoapPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>pair_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>pair__macros_8h</filename>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INDEX_PAIR_DERIVATIVE_MODIFIER</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>a121d151726c2cabed29fc2413332a8be</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PAIR_CONTAINER_METHODS</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>a4d1f61c638e5feb24eb4bb72865b4b40</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PAIR_DERIVATIVE_MODIFIER</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>ace04221f0606944532ea8c53f955809e</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PAIR_MODIFIER_METHODS</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>a97fb661718a94a8551058baa11dea0b6</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PAIR_PREDICATE_METHODS</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>abe27d82438b43886def18a1630c80ce2</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_PAIR_SCORE_METHODS</name>
      <anchorfile>pair__macros_8h.html</anchorfile>
      <anchor>a9a4b3fc82209c3a7bab7364c3ed5e921</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pair_predicates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>pair__predicates_8h</filename>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::core::AllSamePairPredicate</class>
    <class kind="class">IMP::core::CoinFlipPairPredicate</class>
    <class kind="class">IMP::core::ConstantPairPredicate</class>
    <class kind="class">IMP::core::OrderedTypePairPredicate</class>
    <class kind="class">IMP::core::UnorderedTypePairPredicate</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>PairConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>PairConstraint_8h</filename>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="PairDerivativeModifier_8h" name="PairDerivativeModifier.h" local="no" imported="no">IMP/PairDerivativeModifier.h</includes>
    <class kind="class">IMP::core::PairConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>PairContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>PairContainer_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="yes" imported="no">container_base.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <class kind="class">IMP::PairContainer</class>
    <class kind="class">IMP::PairContainerAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PairContainerSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PairContainerSet_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <class kind="class">IMP::container::PairContainerSet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>PairContainerStatistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PairContainerStatistics_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::container::PairContainerStatistics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>PairDerivativeModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>PairDerivativeModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="yes" imported="no">PairModifier.h</includes>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PairModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>PairModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::PairModifier</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PairPredicate.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>PairPredicate_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::PairPredicate</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PairRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>PairRestraint_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::core::PairRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>PairsConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PairsConstraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::PairsConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsConstraint &gt; &gt;</type>
      <name>PairsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ad9a3218e50c6822678826da336c988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsConstraint &gt; &gt;</type>
      <name>PairsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a80d0f23edb63bf732e65faad9a6dfce5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>PairScore_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::PairScore</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PairsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PairsOptimizerState_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairModifier_8h" name="PairModifier.h" local="no" imported="no">IMP/PairModifier.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::container::PairsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsOptimizerState &gt; &gt;</type>
      <name>PairsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac631f2dc21f829aee9b0b7243628cae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsOptimizerState &gt; &gt;</type>
      <name>PairsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a55baab82bcba09e5c54d7b44289fdfa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PairsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PairsRestraint_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <class kind="class">IMP::container::PairsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsRestraint &gt; &gt;</type>
      <name>PairsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab6a99a2e056d910c1690256462186671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsRestraint &gt; &gt;</type>
      <name>PairsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a8d401477694732f814c6d2c47e8049b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParabolicFit.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>ParabolicFit_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">Vector2D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::ParabolicFit2D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParabolicFit2D &gt;</type>
      <name>ParabolicFit2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a26aa3f0f5fc90e9292197cfa7f14907f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parameter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>Parameter_8h</filename>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>Particle.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Particle_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <includes id="Key_8h" name="Key.h" local="yes" imported="no">Key.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::Particle</class>
    <class kind="class">IMP::ParticleAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>particle_geometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>particle__geometry_8h</filename>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="yes" imported="no">geometry_macros.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="Colored_8h" name="Colored.h" local="yes" imported="no">Colored.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <class kind="class">IMP::display::PairGeometry</class>
    <class kind="class">IMP::display::PairsGeometry</class>
    <class kind="class">IMP::display::SingletonGeometry</class>
    <class kind="class">IMP::display::SingletonsGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>particle_index.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>particle__index_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <class kind="class">IMP::ParticleIndexAdaptor</class>
    <class kind="class">IMP::ParticleIndexesAdaptor</class>
    <class kind="class">IMP::ParticleIndexPairsAdaptor</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_indexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aabc6b814ba85ea74a1b3f9f0ce8c06cf</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abf59065e3cb6156b62146eea0a914e40</anchor>
      <arglist>(const ParticlePairsTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_particles</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a282964e47bdd3107ef2e3ef72df66001</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>particle_io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>particle__io_8h</filename>
    <includes id="link__macros_8h" name="link_macros.h" local="yes" imported="no">link_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_particles</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a3ec708eaea5f9a236c558f0759ff0e3e</anchor>
      <arglist>(RMF::FileHandle fh, const ParticlesTemp &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_particles</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a3d3bf9a9a6ceb4aaaae7d699f2243573</anchor>
      <arglist>(RMF::NodeHandle fh, const ParticlesTemp &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_particle</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>abf6e3fa733ef668bb985ed3e52f88187</anchor>
      <arglist>(RMF::FileHandle fh, Particle *hs)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>create_particles</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>af3c5165b1f2cb083d98c36bd202ef275</anchor>
      <arglist>(RMF::FileConstHandle fh, Model *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_particles</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a5736b0372c4c5f8344d093882d883702</anchor>
      <arglist>(RMF::FileConstHandle fh, const ParticlesTemp &amp;hs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>particle_states.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>particle__states_8h</filename>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
    <class kind="class">IMP::domino::CompoundStates</class>
    <class kind="class">IMP::domino::IndexStates</class>
    <class kind="class">IMP::domino::NestedRigidBodyStates</class>
    <class kind="class">IMP::domino::ParticlesAdaptor</class>
    <class kind="class">IMP::domino::ParticleStates</class>
    <class kind="class">IMP::domino::ParticleStatesTable</class>
    <class kind="class">IMP::domino::PermutationStates</class>
    <class kind="class">IMP::domino::RecursiveStates</class>
    <class kind="class">IMP::domino::RigidBodyStates</class>
    <class kind="class">IMP::domino::XYZStates</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleStates &gt; &gt;</type>
      <name>ParticleStatesList</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aea29d31fdfe95447a36f6f0e11f71868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleStates &gt; &gt;</type>
      <name>ParticleStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0e2bfcae35009b44f66a171abcfac5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleStatesTable &gt; &gt;</type>
      <name>ParticleStatesTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aee95feec6e317d6a4e8a4440ca4137cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleStatesTable &gt; &gt;</type>
      <name>ParticleStatesTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a80e95d3c26a2153b46c28262a018f9e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParticleFactory.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ParticleFactory_8h</filename>
    <includes id="SimulationData_8h" name="SimulationData.h" local="yes" imported="no">SimulationData.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="Color_8h" name="Color.h" local="no" imported="no">IMP/display/Color.h</includes>
    <class kind="class">IMP::npctransport::ParticleFactory</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleTransportStatisticsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ParticleTransportStatisticsOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="PeriodicOptimizerState_8h" name="PeriodicOptimizerState.h" local="no" imported="no">IMP/core/PeriodicOptimizerState.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="no" imported="no">IMP/npctransport/typedefs.h</includes>
    <includes id="Simulator_8h" name="Simulator.h" local="no" imported="no">IMP/atom/Simulator.h</includes>
    <class kind="class">IMP::npctransport::ParticleTransportStatisticsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleTransportStatisticsOptimizerState &gt; &gt;</type>
      <name>ParticleTransportStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a67eb64e56e4904cefa23825fe575b274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleTransportStatisticsOptimizerState &gt; &gt;</type>
      <name>ParticleTransportStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1d30f5555d684d1052afb78cb95f7c44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PartitionalClustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>PartitionalClustering_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::statistics::PartitionalClustering</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>void</type>
      <name>validate_partitional_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a5935bfa801d76e543494e701665dd173</anchor>
      <arglist>(PartitionalClustering *pc, unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PartitionalClusteringWithCenter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>PartitionalClusteringWithCenter_8h</filename>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="yes" imported="no">PartitionalClustering.h</includes>
    <class kind="class">IMP::statistics::PartitionalClusteringWithCenter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>path_reader_writer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>path__reader__writer_8h</filename>
    <includes id="DominoSampler_8h" name="DominoSampler.h" local="no" imported="no">IMP/domino/DominoSampler.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>IntsList</type>
      <name>read_paths</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a6d1c73d19e87fced1f49e28866f6acf7</anchor>
      <arglist>(const char *txt_filename, int max_paths=INT_MAX)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PbcBoxedMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>PbcBoxedMover_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <class kind="class">IMP::spb::PbcBoxedMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>PbcBoxedRigidBodyMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>PbcBoxedRigidBodyMover_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <class kind="class">IMP::spb::PbcBoxedRigidBodyMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>pca_based_rigid_fitting.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>pca__based__rigid__fitting_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="rigid__fitting_8h" name="rigid_fitting.h" local="no" imported="no">IMP/em/rigid_fitting.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>pca_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a45c8385d6183240ec7216ae97374c7a9</anchor>
      <arglist>(core::RigidBody rb, Refiner *rb_refiner, em::DensityMap *em_map, Float threshold, FloatKey wei_key=atom::Mass::get_mass_key(), algebra::PrincipalComponentAnalysis dens_pca_input=algebra::PrincipalComponentAnalysis())</arglist>
    </member>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>pca_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>afdf294ea4f4b41a0fa4da41f6c95e32c</anchor>
      <arglist>(ParticlesTemp ps, em::DensityMap *em_map, Float threshold, FloatKey wei_key=atom::Mass::get_mass_key(), algebra::PrincipalComponentAnalysis dens_pca_input=algebra::PrincipalComponentAnalysis())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PCAAligner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>PCAAligner_8h</filename>
    <includes id="converters_8h" name="converters.h" local="no" imported="no">IMP/em/converters.h</includes>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::em::PCAAligner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>PCAFitRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>PCAFitRestraint_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="CoarseCC_8h" name="CoarseCC.h" local="yes" imported="no">CoarseCC.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="eigen__analysis_8h" name="eigen_analysis.h" local="no" imported="no">IMP/algebra/eigen_analysis.h</includes>
    <class kind="class">IMP::em::PCAFitRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>d/PCAFitRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>d_2PCAFitRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::em2d::PCAFitRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>pdb.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>pdb_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="element_8h" name="element.h" local="yes" imported="no">element.h</includes>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="yes" imported="no">Selection.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::AllPDBSelector</class>
    <class kind="class">IMP::atom::AndPDBSelector</class>
    <class kind="class">IMP::atom::ATOMPDBSelector</class>
    <class kind="class">IMP::atom::AtomTypePDBSelector</class>
    <class kind="class">IMP::atom::BackbonePDBSelector</class>
    <class kind="class">IMP::atom::CAlphaPDBSelector</class>
    <class kind="class">IMP::atom::CBetaPDBSelector</class>
    <class kind="class">IMP::atom::ChainPDBSelector</class>
    <class kind="class">IMP::atom::CPDBSelector</class>
    <class kind="class">IMP::atom::HydrogenPDBSelector</class>
    <class kind="class">IMP::atom::NonAlternativePDBSelector</class>
    <class kind="class">IMP::atom::NonHydrogenPDBSelector</class>
    <class kind="class">IMP::atom::NonWaterNonHydrogenPDBSelector</class>
    <class kind="class">IMP::atom::NonWaterPDBSelector</class>
    <class kind="class">IMP::atom::NotPDBSelector</class>
    <class kind="class">IMP::atom::NPDBSelector</class>
    <class kind="class">IMP::atom::OrPDBSelector</class>
    <class kind="class">IMP::atom::PDBRecord</class>
    <class kind="class">IMP::atom::PDBSelector</class>
    <class kind="class">IMP::atom::PPDBSelector</class>
    <class kind="class">IMP::atom::ResidueTypePDBSelector</class>
    <class kind="class">IMP::atom::WaterPDBSelector</class>
    <class kind="class">IMP::atom::WritePDBOptimizerState</class>
    <class kind="class">IMP::atom::XorPDBSelector</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; PDBRecord &gt;</type>
      <name>PDBRecords</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abfee0a877234c3013f490ce13c0981b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PDBSelector &gt; &gt;</type>
      <name>PDBSelectors</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a38154066027dce69633e6db9ccabbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PDBSelector &gt; &gt;</type>
      <name>PDBSelectorsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5617d7f857fee01a006b8aab52ed7e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_pdb</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae3392202746ce0960f27d6acb66c3523</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector(), bool select_first_model=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_pdb</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0176b83aca48c8580d80b88f6d91ef6f</anchor>
      <arglist>(TextInput input, int model, Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>read_multimodel_pdb</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4383e2b7c2330222eaba39867aa4b12d</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_pdb</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a73e18e3fed07044ae62a1fb2954b5784</anchor>
      <arglist>(const Selection &amp;mhd, TextOutput out, unsigned int model=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_pdb_of_c_alphas</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6eee9382831652975bf689feeab8d508</anchor>
      <arglist>(const Selection &amp;mhd, TextOutput out, unsigned int model=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_multimodel_pdb</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a27cddb5d82fc586eee446fa630c58fc2</anchor>
      <arglist>(const Hierarchies &amp;mhd, TextOutput out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PenalizedComplexityPrior.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>PenalizedComplexityPrior_8h</filename>
    <includes id="isd_2distribution_8h" name="isd/distribution.h" local="no" imported="no">IMP/isd/distribution.h</includes>
    <class kind="class">IMP::isd::PenalizedComplexityPrior</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PenalizedComplexityPrior &gt; &gt;</type>
      <name>PenalizedComplexityPriors</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a46d6c3f0e490cfec126275820fd811ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PenalizedComplexityPrior &gt; &gt;</type>
      <name>PenalizedComplexityPriorsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a87caa2967fbe4d3f48d5b1322fcda2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PeriodicOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>PeriodicOptimizerState_8h</filename>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Plane3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Plane3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Plane3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Plane3D &gt;</type>
      <name>Plane3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8bc4706f861ea96868cfb81470849d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1bcf2debc9b22076e1fb66f9ac3d0991</anchor>
      <arglist>(const Plane3D &amp;pln, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_reflected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2ef88c55248b535ca69a39e67fd935bd</anchor>
      <arglist>(const Plane3D &amp;pln, const Vector3D &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pmi.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>pmi_8h</filename>
    <includes id="pmi_2CompositeRestraint_8h" name="pmi/CompositeRestraint.h" local="no" imported="no">IMP/pmi/CompositeRestraint.h</includes>
    <includes id="CrossLinkRestraintSet_8h" name="CrossLinkRestraintSet.h" local="no" imported="no">IMP/pmi/CrossLinkRestraintSet.h</includes>
    <includes id="MembraneRestraint_8h" name="MembraneRestraint.h" local="no" imported="no">IMP/pmi/MembraneRestraint.h</includes>
    <includes id="Resolution_8h" name="Resolution.h" local="no" imported="no">IMP/pmi/Resolution.h</includes>
    <includes id="Symmetric_8h" name="Symmetric.h" local="no" imported="no">IMP/pmi/Symmetric.h</includes>
    <includes id="TransformMover_8h" name="TransformMover.h" local="no" imported="no">IMP/pmi/TransformMover.h</includes>
    <includes id="Uncertainty_8h" name="Uncertainty.h" local="no" imported="no">IMP/pmi/Uncertainty.h</includes>
    <includes id="pmi_2utilities_8h" name="pmi/utilities.h" local="no" imported="no">IMP/pmi/utilities.h</includes>
  </compound>
  <compound kind="file">
    <name>pmi1.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>pmi1_8h</filename>
    <includes id="pmi1_2CompositeRestraint_8h" name="pmi1/CompositeRestraint.h" local="no" imported="no">IMP/pmi1/CompositeRestraint.h</includes>
    <includes id="InternalCoordinatesConstraint_8h" name="InternalCoordinatesConstraint.h" local="no" imported="no">IMP/pmi1/InternalCoordinatesConstraint.h</includes>
    <includes id="_2MembraneRestraint_8h" name="/MembraneRestraint.h" local="no" imported="no">IMP/pmi1/MembraneRestraint.h</includes>
    <includes id="_2Resolution_8h" name="/Resolution.h" local="no" imported="no">IMP/pmi1/Resolution.h</includes>
    <includes id="SigmoidRestraintSphere_8h" name="SigmoidRestraintSphere.h" local="no" imported="no">IMP/pmi1/SigmoidRestraintSphere.h</includes>
    <includes id="_2Symmetric_8h" name="/Symmetric.h" local="no" imported="no">IMP/pmi1/Symmetric.h</includes>
    <includes id="_2TransformMover_8h" name="/TransformMover.h" local="no" imported="no">IMP/pmi1/TransformMover.h</includes>
    <includes id="_2Uncertainty_8h" name="/Uncertainty.h" local="no" imported="no">IMP/pmi1/Uncertainty.h</includes>
    <includes id="pmi1_2utilities_8h" name="pmi1/utilities.h" local="no" imported="no">IMP/pmi1/utilities.h</includes>
  </compound>
  <compound kind="file">
    <name>point_clustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>point__clustering_8h</filename>
    <includes id="PartitionalClusteringWithCenter_8h" name="PartitionalClusteringWithCenter.h" local="yes" imported="no">PartitionalClusteringWithCenter.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="yes" imported="no">Embedding.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_bin_based_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a2ccc84a060553c450d17b18bce708436</anchor>
      <arglist>(Embedding *embed, double side)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_centrality_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a19eae7a22f877948e0582872cb42e760</anchor>
      <arglist>(Embedding *d, double far, int k)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_connectivity_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ad6ac98231fe5e79078029b821e5d2417</anchor>
      <arglist>(Embedding *embed, double dist)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_lloyds_kmeans</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a84d813a09204387c1b2af83e6fb5e014</anchor>
      <arglist>(Embedding *embedding, unsigned int k, unsigned int iterations)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pointer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Pointer_8h</filename>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="yes" imported="no">WeakPointer.h</includes>
    <class kind="struct">IMP::Pointer</class>
    <class kind="struct">IMP::PointerMember</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>PointToSphereDistance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>PointToSphereDistance_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::score_functor::PointToSphereDistance</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>PolarResamplingParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>PolarResamplingParameters_8h</filename>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">IMP/algebra/constants.h</includes>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">IMP/exception.h</includes>
    <includes id="log_8h" name="log.h" local="yes" imported="no">IMP/log.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="yes" imported="no">IMP/log_macros.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::em2d::PolarResamplingParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; PolarResamplingParameters &gt;</type>
      <name>PolarResamplingParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7bf683ebcdacfcddea5349092f6c201e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoreRadiusSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>PoreRadiusSingletonScore_8h</filename>
    <includes id="ransport_2SlabWithPore_8h" name="ransport/SlabWithPore.h" local="no" imported="no">IMP/npctransport/SlabWithPore.h</includes>
    <includes id="GenericAttributeSingletonScore_8h" name="GenericAttributeSingletonScore.h" local="no" imported="no">IMP/core/GenericAttributeSingletonScore.h</includes>
    <includes id="core_2Harmonic_8h" name="core/Harmonic.h" local="no" imported="no">IMP/core/Harmonic.h</includes>
    <includes id="score__functor_2HarmonicLowerBound_8h" name="score_functor/HarmonicLowerBound.h" local="no" imported="no">IMP/score_functor/HarmonicLowerBound.h</includes>
    <class kind="class">IMP::npctransport::PoreRadiusSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>PredicatePairsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PredicatePairsRestraint_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="yes" imported="no">generic.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <class kind="class">IMP::container::PredicatePairsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>PredicateQuadsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PredicateQuadsRestraint_8h</filename>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="yes" imported="no">generic.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <class kind="class">IMP::container::PredicateQuadsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>predicates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>predicates_8h</filename>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <class kind="class">IMP::core::AttributeSingletonPredicate</class>
    <class kind="class">IMP::core::InBoundingBox3DSingletonPredicate</class>
    <class kind="class">IMP::core::IsCollisionPairPredicate</class>
    <class kind="class">IMP::core::PredicateSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>PredicateSingletonScore&lt; Predicate, Score &gt; *</type>
      <name>create_predicates_singleton_score</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a1eaf9e1c2ed00baa10dca7fc61f0169e</anchor>
      <arglist>(Predicate *pred, int val, Score *score)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PredicateSingletonsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PredicateSingletonsRestraint_8h</filename>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="yes" imported="no">generic.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <class kind="class">IMP::container::PredicateSingletonsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>PredicateTripletsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>PredicateTripletsRestraint_8h</filename>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="container_2generic_8h" name="container/generic.h" local="yes" imported="no">generic.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <class kind="class">IMP::container::PredicateTripletsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>primitive_geometries.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>primitive__geometries_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="yes" imported="no">geometry_macros.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="no" imported="no">IMP/algebra/Segment3D.h</includes>
    <includes id="Cylinder3D_8h" name="Cylinder3D.h" local="no" imported="no">IMP/algebra/Cylinder3D.h</includes>
    <includes id="Ellipsoid3D_8h" name="Ellipsoid3D.h" local="no" imported="no">IMP/algebra/Ellipsoid3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="no" imported="no">IMP/algebra/BoundingBoxD.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="no" imported="no">IMP/algebra/Plane3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="Triangle3D_8h" name="Triangle3D.h" local="no" imported="no">IMP/algebra/Triangle3D.h</includes>
    <includes id="standard__grids_8h" name="standard_grids.h" local="no" imported="no">IMP/algebra/standard_grids.h</includes>
    <class kind="class">IMP::display::BoundingBoxGeometry</class>
    <class kind="class">IMP::display::CylinderGeometry</class>
    <class kind="class">IMP::display::EllipsoidGeometry</class>
    <class kind="class">IMP::display::IsosurfaceGeometry</class>
    <class kind="class">IMP::display::LabelGeometry</class>
    <class kind="class">IMP::display::PlaneGeometry</class>
    <class kind="class">IMP::display::PointGeometry</class>
    <class kind="class">IMP::display::PolygonGeometry</class>
    <class kind="class">IMP::display::ReferenceFrameGeometry</class>
    <class kind="class">IMP::display::SegmentGeometry</class>
    <class kind="class">IMP::display::SkinSurfaceGeometry</class>
    <class kind="class">IMP::display::SphereGeometry</class>
    <class kind="class">IMP::display::SurfaceMeshGeometry</class>
    <class kind="class">IMP::display::TriangleGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
    <member kind="function">
      <type>SphereGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ad9d90b0ae0f1f0c079a9f3b4a11d1d77</anchor>
      <arglist>(const algebra::Sphere3D &amp;t, std::string name=&quot;algebra::Sphere3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>CylinderGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a418acde3993b51a25f3ba4311f4c9b74</anchor>
      <arglist>(const algebra::Cylinder3D &amp;t, std::string name=&quot;algebra::Cylinder3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>EllipsoidGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>acbb9389b216a0e7f8c4d9794075ccbf8</anchor>
      <arglist>(const algebra::Ellipsoid3D &amp;t, std::string name=&quot;algebra::Ellipsoid3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PointGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae2f3fba6f3395b1bb19444ba9907314f</anchor>
      <arglist>(const algebra::Vector3D &amp;t, std::string name=&quot;algebra::Vector3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>SegmentGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a071ef8e162f88294b235de620e423d2c</anchor>
      <arglist>(const algebra::Segment3D &amp;t, std::string name=&quot;algebra::Segment3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PolygonGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>aa60c5d366f71d009a94cb7911503ab3d</anchor>
      <arglist>(const algebra::Vector3Ds &amp;t, std::string name=&quot;algebra::Vector3Ds&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>TriangleGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a54a071369efd0709c091051cd6355e67</anchor>
      <arglist>(const algebra::Triangle3D &amp;t, std::string name=&quot;algebra::Triangle3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a788545ff045770aea75e72b5568aba1d</anchor>
      <arglist>(const algebra::BoundingBoxD&lt; 3 &gt; &amp;t, std::string name=&quot;algebra::BoundingBoxD&lt;3&gt;&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceFrameGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7e059bdeb2a7290b1260cab6923bdd29</anchor>
      <arglist>(const algebra::ReferenceFrame3D &amp;t, std::string name=&quot;algebra::ReferenceFrame3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrismaticJoint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>PrismaticJoint_8h</filename>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::kinematics::PrismaticJoint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PrismaticJoint &gt; &gt;</type>
      <name>PrismaticJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>af84ec02addc859311cfb41f4acfcd2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PrismaticJoint &gt; &gt;</type>
      <name>PrismaticJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>abfecff84c05953a734c105ee39c2e47d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Profile.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>Profile_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="FormFactorTable_8h" name="FormFactorTable.h" local="yes" imported="no">FormFactorTable.h</includes>
    <includes id="saxs_2distribution_8h" name="saxs/distribution.h" local="yes" imported="no">Distribution.h</includes>
    <class kind="class">IMP::saxs::Profile</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Profile &gt; &gt;</type>
      <name>Profiles</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a1912f2ff92b59929df371379ed08b790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Profile &gt; &gt;</type>
      <name>ProfilesTemp</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>afb20a5d01382345eb19e4cc4442fff35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProfileClustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>ProfileClustering_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <class kind="class">IMP::saxs::ProfileClustering</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>ProfileFitter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>ProfileFitter_8h</filename>
    <includes id="ChiScore_8h" name="ChiScore.h" local="yes" imported="no">ChiScore.h</includes>
    <includes id="FitParameters_8h" name="FitParameters.h" local="yes" imported="no">FitParameters.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::saxs::ProfileFitter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>Profiler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/benchmark/</path>
    <filename>Profiler_8h</filename>
    <includes id="raii__macros_8h" name="raii_macros.h" local="no" imported="no">IMP/raii_macros.h</includes>
    <class kind="class">IMP::benchmark::Profiler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::benchmark</namespace>
  </compound>
  <compound kind="file">
    <name>project.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>project_8h</filename>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="ProjectionMask_8h" name="ProjectionMask.h" local="yes" imported="no">IMP/em2d/ProjectionMask.h</includes>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="yes" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="FFToperations_8h" name="FFToperations.h" local="yes" imported="no">IMP/em2d/FFToperations.h</includes>
    <includes id="ImageReaderWriter_8h" name="ImageReaderWriter.h" local="yes" imported="no">IMP/em2d/ImageReaderWriter.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="SphericalVector3D_8h" name="SphericalVector3D.h" local="yes" imported="no">IMP/algebra/SphericalVector3D.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="IMP_8h" name="IMP.h" local="yes" imported="no">IMP.h</includes>
    <class kind="class">IMP::em2d::ProjectingOptions</class>
    <class kind="class">IMP::em2d::ProjectingParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectingOptions &gt;</type>
      <name>ProjectingOptionsList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7668a585f311a56e5c82415c1df69d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectingParameters &gt;</type>
      <name>ProjectingParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a99f8e1680ad07e0fc4ce6df37d02ec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Images</type>
      <name>create_evenly_distributed_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac7fc9ca9b6ac50bc5de57a157882766f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, unsigned int n, const ProjectingOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_project_particles</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ab15ba9866050315bb0248dd27f0ef0bb</anchor>
      <arglist>(const ParticlesTemp &amp;ps, cv::Mat &amp;m2, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation, const ProjectingOptions &amp;options, MasksManagerPtr masks)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector2Ds</type>
      <name>do_project_vectors</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a33ff594b9223f368d44b25a7da4c349e</anchor>
      <arglist>(const algebra::Vector3Ds &amp;ps, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector2Ds</type>
      <name>do_project_vectors</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3cc89c1d22ffa4f91512f49072542be6</anchor>
      <arglist>(const algebra::Vector3Ds &amp;ps, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation, const algebra::Vector3D &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_enclosing_image_size</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae2eeaa84aab84eb5254470522964d4de</anchor>
      <arglist>(const ParticlesTemp &amp;ps, double pixel_size, unsigned int slack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_projection</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a060e62f5acd6d4c6dc09f1f2c7b1528b</anchor>
      <arglist>(em2d::Image *img, const ParticlesTemp &amp;ps, const RegistrationResult &amp;reg, const ProjectingOptions &amp;options, MasksManagerPtr masks=MasksManagerPtr(), String name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>em2d::Images</type>
      <name>get_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a65e066ed72e099282a5714fbd2333989</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const algebra::SphericalVector3Ds &amp;vs, int rows, int cols, const ProjectingOptions &amp;options, Strings names=Strings())</arglist>
    </member>
    <member kind="function">
      <type>em2d::Images</type>
      <name>get_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa167999977d5c4f4e0486534693a86da</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const RegistrationResults &amp;registration_values, int rows, int cols, const ProjectingOptions &amp;options, Strings names=Strings())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProjectionFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>ProjectionFinder_8h</filename>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="yes" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="align2D_8h" name="align2D.h" local="yes" imported="no">IMP/em2d/align2D.h</includes>
    <includes id="project_8h" name="project.h" local="yes" imported="no">IMP/em2d/project.h</includes>
    <includes id="ProjectionMask_8h" name="ProjectionMask.h" local="yes" imported="no">IMP/em2d/ProjectionMask.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="scores2D_8h" name="scores2D.h" local="yes" imported="no">IMP/em2d/scores2D.h</includes>
    <includes id="PolarResamplingParameters_8h" name="PolarResamplingParameters.h" local="yes" imported="no">IMP/em2d/PolarResamplingParameters.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Rotation2D_8h" name="Rotation2D.h" local="yes" imported="no">IMP/algebra/Rotation2D.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::em2d::Em2DRestraintParameters</class>
    <class kind="class">IMP::em2d::ProjectionFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Em2DRestraintParameters &gt;</type>
      <name>Em2DRestraintParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6065a628ec32b49d820dddd6ec5aeed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProjectionFinder &gt; &gt;</type>
      <name>ProjectionFinders</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6f263df26134833e66476390f2d8d8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProjectionFinder &gt; &gt;</type>
      <name>ProjectionFindersTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad739fa29c0cc7af9d113cb9c2e229dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ALIGN2D_NO_PREPROCESSING</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aca5349ccf3fac576ea220856d97e0306</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProjectionMask.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>ProjectionMask_8h</filename>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="yes" imported="no">IMP/atom/Mass.h</includes>
    <includes id="exp_8h" name="exp.h" local="yes" imported="no">IMP/em/exp.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="SphericalVector3D_8h" name="SphericalVector3D.h" local="yes" imported="no">IMP/algebra/SphericalVector3D.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="yes" imported="no">IMP/em/KernelParameters.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">IMP/Particle.h</includes>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::em2d::MasksManager</class>
    <class kind="class">IMP::em2d::ProjectionMask</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; MasksManager &gt;</type>
      <name>MasksManagers</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a565903e8d94899a9b2328e79635c7c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectionMask &gt;</type>
      <name>ProjectionMasks</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>afc0ff98aba4fdd78cd71249092f20219</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_place</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a555960c8d2eca9a8fcb74555539827ea</anchor>
      <arglist>(cv::Mat &amp;mask, cv::Mat &amp;m, const algebra::Vector2D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProjectionParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>ProjectionParameters_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="yes" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="yes" imported="no">IMP/decorator_macros.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="yes" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::em2d::ProjectionParameters</class>
    <class kind="class">IMP::em2d::ProjectionParametersScoreState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>protein_anchors_mapping_reader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>protein__anchors__mapping__reader_8h</filename>
    <includes id="anchors__reader_8h" name="anchors_reader.h" local="no" imported="no">IMP/multifit/anchors_reader.h</includes>
    <includes id="DominoSampler_8h" name="DominoSampler.h" local="no" imported="no">IMP/domino/DominoSampler.h</includes>
    <includes id="SettingsData_8h" name="SettingsData.h" local="no" imported="no">IMP/multifit/SettingsData.h</includes>
    <includes id="proteomics__reader_8h" name="proteomics_reader.h" local="no" imported="no">IMP/multifit/proteomics_reader.h</includes>
    <class kind="class">IMP::multifit::ProteinsAnchorsSamplingSpace</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProteinsAnchorsSamplingSpace &gt;</type>
      <name>ProteinsAnchorsSamplingSpaces</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae6378da58c4f17527065713f44a547f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ProteinsAnchorsSamplingSpace</type>
      <name>get_part_of_sampling_space</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a1cc01cbbbb1cf9bb7f226524e0616e12</anchor>
      <arglist>(const ProteinsAnchorsSamplingSpace &amp;prots_ss, const Strings &amp;prot_names)</arglist>
    </member>
    <member kind="function">
      <type>multifit::SettingsData *</type>
      <name>get_partial_assembly_setting_data</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3746dc39094e607667c55bde5aca85e6</anchor>
      <arglist>(multifit::SettingsData *prots_sd, const Strings &amp;prot_names)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>protein_ligand_score.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>protein__ligand__score_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="StatisticalPairScore_8h" name="StatisticalPairScore.h" local="no" imported="no">IMP/core/StatisticalPairScore.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="PairsRestraint_8h" name="PairsRestraint.h" local="no" imported="no">IMP/container/PairsRestraint.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="class">IMP::atom::ProteinLigandAtomPairScore</class>
    <class kind="class">IMP::atom::ProteinLigandRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>Key&lt; 783462 &gt;</type>
      <name>ProteinLigandType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>acf0a5d686bbc251a9002f5f9fb1f6e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProteinLigandType &gt;</type>
      <name>ProteinLigandTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9664d4e0edf20d366a050388a8118182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteinLigandAtomPairScore &gt; &gt;</type>
      <name>ProteinLigandAtomPairScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aafdfb704f0b5c0e43aab37893dc72d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteinLigandAtomPairScore &gt; &gt;</type>
      <name>ProteinLigandAtomPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8fd9af7619c21029f04985ad80a6120c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteinLigandRestraint &gt; &gt;</type>
      <name>ProteinLigandRestraints</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac1d3577cda05fd95b34861893fd85cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteinLigandRestraint &gt; &gt;</type>
      <name>ProteinLigandRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a77ff10c05f2411dc78b3f741b85f2c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_protein_ligand_score_data</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a948fb97a18c5b5d08144b058d2b39ec6</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProteinKinematics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>ProteinKinematics_8h</filename>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="no" imported="no">IMP/kinematics/revolute_joints.h</includes>
    <includes id="KinematicForest_8h" name="KinematicForest.h" local="no" imported="no">IMP/kinematics/KinematicForest.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::kinematics::ProteinKinematics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteinKinematics &gt; &gt;</type>
      <name>ProteinKinematicsList</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad96c4b5cce575b5415d1ce933de85e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteinKinematics &gt; &gt;</type>
      <name>ProteinKinematicsListTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a9efd839868cc1dec27fe56017d9d50ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProteinLocalizationRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>ProteinLocalizationRestraint_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <class kind="class">IMP::npc::AssemblySymmetryByDihedralRestraint</class>
    <class kind="class">IMP::npc::AssemblySymmetryByDistanceRestraint</class>
    <class kind="class">IMP::npc::MembraneExclusionRestraint</class>
    <class kind="class">IMP::npc::MembraneSurfaceLocationConditionalRestraint</class>
    <class kind="class">IMP::npc::MembraneSurfaceLocationRestraint</class>
    <class kind="class">IMP::npc::OverallPositionRestraint</class>
    <class kind="class">IMP::npc::PerinuclearVolumeLocationRestraint</class>
    <class kind="class">IMP::npc::PoreSideVolumeLocationRestraint</class>
    <class kind="class">IMP::npc::ProteinChainRestraint</class>
    <class kind="class">IMP::npc::ProteinContactRestraint</class>
    <class kind="class">IMP::npc::ProteinProximityRestraint</class>
    <class kind="class">IMP::npc::XAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::XAxialPositionRestraint</class>
    <class kind="class">IMP::npc::XAxialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionUpperRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>proteomics_em_alignment_atomic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>proteomics__em__alignment__atomic_8h</filename>
    <includes id="ComplementarityRestraint_8h" name="ComplementarityRestraint.h" local="no" imported="no">IMP/multifit/ComplementarityRestraint.h</includes>
    <includes id="proteomics__reader_8h" name="proteomics_reader.h" local="no" imported="no">IMP/multifit/proteomics_reader.h</includes>
    <includes id="FittingSolutionRecord_8h" name="FittingSolutionRecord.h" local="no" imported="no">IMP/multifit/FittingSolutionRecord.h</includes>
    <includes id="AlignmentParams_8h" name="AlignmentParams.h" local="yes" imported="no">AlignmentParams.h</includes>
    <includes id="anchors__reader_8h" name="anchors_reader.h" local="no" imported="no">IMP/multifit/anchors_reader.h</includes>
    <includes id="SettingsData_8h" name="SettingsData.h" local="no" imported="no">IMP/multifit/SettingsData.h</includes>
    <includes id="protein__anchors__mapping__reader_8h" name="protein_anchors_mapping_reader.h" local="yes" imported="no">protein_anchors_mapping_reader.h</includes>
    <includes id="DominoSampler_8h" name="DominoSampler.h" local="no" imported="no">IMP/domino/DominoSampler.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <class kind="class">IMP::multifit::ProteomicsEMAlignmentAtomic</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteomicsEMAlignmentAtomic &gt; &gt;</type>
      <name>ProteomicsEMAlignmentAtomics</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a14f3e4f1232d67079f8f33c5d11ad100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteomicsEMAlignmentAtomic &gt; &gt;</type>
      <name>ProteomicsEMAlignmentAtomicsTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a682ff8e11ab5eb4ee1e67c045204a9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>proteomics_reader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>proteomics__reader_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="DominoSampler_8h" name="DominoSampler.h" local="no" imported="no">IMP/domino/DominoSampler.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="class">IMP::multifit::ProteomicsData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProteinRecordData &gt;</type>
      <name>ProteinRecordDataList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af7a37843d8533160517b158ae6700659</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ProteomicsData *</type>
      <name>read_proteomics_data</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae4470dd25cd94e09c145556b62fd54b7</anchor>
      <arglist>(const char *proteomics_fn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>protobuf.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>protobuf_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>int</type>
      <name>assign_ranges</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a140cb2ab53906e95e2bd105461cfe305</anchor>
      <arglist>(std::string input_config_fname, std::string output_assignment_fname, unsigned int work_unit, bool show_steps, boost::uint64_t random_seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_output_protobuf</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6157ba860214a9561c7420d3af53fd80</anchor>
      <arglist>(std::string output_fname,::npctransport_proto::Output &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_pb_conformation</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5fc61bf3d6e02c39e648b153ae6f1dbb</anchor>
      <arglist>(const ::npctransport_proto::Conformation &amp;conformation, IMP::SingletonContainerAdaptor beads, boost::unordered_map&lt; core::ParticleType, algebra::Sphere3Ds &gt; &amp;sites)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_pb_conformation</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a314fcf4d4eafa0e7c58ac7b2513f7673</anchor>
      <arglist>(IMP::SingletonContainerAdaptor beads, const boost::unordered_map&lt; core::ParticleType, algebra::Sphere3Ds &gt; &amp;sites,::npctransport_proto::Conformation *conformation)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>provenance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>provenance_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="class">IMP::core::ClusterProvenance</class>
    <class kind="class">IMP::core::CombineProvenance</class>
    <class kind="class">IMP::core::FilterProvenance</class>
    <class kind="class">IMP::core::Provenance</class>
    <class kind="class">IMP::core::Provenanced</class>
    <class kind="class">IMP::core::SampleProvenance</class>
    <class kind="class">IMP::core::ScriptProvenance</class>
    <class kind="class">IMP::core::SoftwareProvenance</class>
    <class kind="class">IMP::core::StructureProvenance</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25de2b4c4ee9212c60a8963a0df5c55e</anchor>
      <arglist>(Model *m, ParticleIndex pi, Provenance p)</arglist>
    </member>
    <member kind="function">
      <type>Provenance</type>
      <name>create_clone</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab7597523d0b09bc8fa288b7261cedb69</anchor>
      <arglist>(Provenance p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pt_stuff.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>pt__stuff_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>PymolWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>PymolWriter_8h</filename>
    <includes id="writer__macros_8h" name="writer_macros.h" local="yes" imported="no">writer_macros.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <class kind="class">IMP::display::PymolWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>algebra/python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2python__only_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>Grid3D&lt; int, SparseGridStorage3D&lt; int, BoundedGridStorage3D &gt; &gt;</type>
      <name>SparseIntGrid3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4007be5a367d1e82a072ef4f888afbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid3D&lt; int, SparseGridStorage3D&lt; int, UnboundedGridStorage3D &gt; &gt;</type>
      <name>SparseUnboundedIntGrid3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aacd3a9ce16d7a69e18e8e55589034cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid3D&lt; double, DenseGridStorage3D&lt; double &gt; &gt;</type>
      <name>DenseDoubleGrid3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a999acd97cf5d7ad5210b11506b215764</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid3D&lt; float, DenseGridStorage3D&lt; float &gt; &gt;</type>
      <name>DenseFloatGrid3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad528c9d0c4d0b50e4799f712d4bc26bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac1d0008195a1cf08b39038c2d7dc44a8</anchor>
      <arglist>(Vector3Ds a, Vector3Ds b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>atom/python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>atom_2python__only_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>void</type>
      <name>show_molecular_hierarchy</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aeb911633eea643d7307e2dbe8e7684a5</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2python__only_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a805c9dce8eeee77af7354cec81a3991a</anchor>
      <arglist>(XYZsOrVector3ds a, XYZsOrVector3ds b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>display/python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>display_2python__only_8h</filename>
    <class kind="class">IMP::display::PivyWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>python__only_8h</filename>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <class kind="class">IMP::PythonDirectedGraph</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>void</type>
      <name>show_altgraph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a76c9f574f48026403808e7b331cb8dd6</anchor>
      <arglist>(Graph g)</arglist>
    </member>
    <member kind="function">
      <type>networkx::DiGraph</type>
      <name>get_networkx_graph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aeb08f05bc55922f202c1d147d78641f4</anchor>
      <arglist>(Graph g)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>show_graphviz</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abf5ea7fba6cb7831b1cbfc25fb5f5673</anchor>
      <arglist>(Graph g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>statistics/python_only.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>statistics_2python__only_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>void</type>
      <name>show_histogram</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a6f2a5df02a675039a03a695b45947498</anchor>
      <arglist>(HistogramD h, std::string xscale=&quot;linear&quot;, std::string yscale=&quot;linear&quot;, Functions curves=Functions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quad_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>quad__macros_8h</filename>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INDEX_QUAD_DERIVATIVE_MODIFIER</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>a865beca3afc09cb377ea6ad0fc8de8a4</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_QUAD_CONTAINER_METHODS</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>a5cda4d5e24dbf1bd06c2c30472cc8718</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_QUAD_DERIVATIVE_MODIFIER</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>a87c2fc6d647ce7654942669aa5a48197</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_QUAD_MODIFIER_METHODS</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>a7f3847c0dc001702aabb857b7da9e596</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_QUAD_PREDICATE_METHODS</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>a1f4ea1b8ef4b600a9a4d076abface65d</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_QUAD_SCORE_METHODS</name>
      <anchorfile>quad__macros_8h.html</anchorfile>
      <anchor>aea7dc166f6e4649dd5963e4a3afd7535</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quad_predicates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>quad__predicates_8h</filename>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="QuadPredicate_8h" name="QuadPredicate.h" local="no" imported="no">IMP/QuadPredicate.h</includes>
    <includes id="quad__macros_8h" name="quad_macros.h" local="no" imported="no">IMP/quad_macros.h</includes>
    <class kind="class">IMP::core::AllSameQuadPredicate</class>
    <class kind="class">IMP::core::CoinFlipQuadPredicate</class>
    <class kind="class">IMP::core::ConstantQuadPredicate</class>
    <class kind="class">IMP::core::OrderedTypeQuadPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeQuadPredicate</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>QuadConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>QuadConstraint_8h</filename>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="no" imported="no">IMP/QuadModifier.h</includes>
    <includes id="QuadDerivativeModifier_8h" name="QuadDerivativeModifier.h" local="no" imported="no">IMP/QuadDerivativeModifier.h</includes>
    <class kind="class">IMP::core::QuadConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>QuadContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>QuadContainer_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="yes" imported="no">container_base.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <class kind="class">IMP::QuadContainer</class>
    <class kind="class">IMP::QuadContainerAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>QuadContainerSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>QuadContainerSet_8h</filename>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <class kind="class">IMP::container::QuadContainerSet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>QuadContainerStatistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>QuadContainerStatistics_8h</filename>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::container::QuadContainerStatistics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>QuadDerivativeModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>QuadDerivativeModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="yes" imported="no">QuadModifier.h</includes>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>QuadModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>QuadModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::QuadModifier</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>QuadPredicate.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>QuadPredicate_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::QuadPredicate</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>QuadraticClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>QuadraticClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="yes" imported="no">ClosePairsFinder.h</includes>
    <class kind="class">IMP::core::QuadraticClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>QuadRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>QuadRestraint_8h</filename>
    <includes id="QuadScore_8h" name="QuadScore.h" local="no" imported="no">IMP/QuadScore.h</includes>
    <class kind="class">IMP::core::QuadRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>QuadsConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>QuadsConstraint_8h</filename>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="no" imported="no">IMP/QuadModifier.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::QuadsConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsConstraint &gt; &gt;</type>
      <name>QuadsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab35b4ba081af0a8999d7b9388b9e3d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsConstraint &gt; &gt;</type>
      <name>QuadsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a8ff5943009e553ef39da0a83851dd156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuadScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>QuadScore_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::QuadScore</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>QuadsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>QuadsOptimizerState_8h</filename>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="QuadModifier_8h" name="QuadModifier.h" local="no" imported="no">IMP/QuadModifier.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::container::QuadsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsOptimizerState &gt; &gt;</type>
      <name>QuadsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7c6785a04e123df0491d06fc27dc5121</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsOptimizerState &gt; &gt;</type>
      <name>QuadsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0b8b7ee781a7bc8d0f68c632a58c6766</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuadsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>QuadsRestraint_8h</filename>
    <includes id="QuadContainer_8h" name="QuadContainer.h" local="no" imported="no">IMP/QuadContainer.h</includes>
    <includes id="QuadScore_8h" name="QuadScore.h" local="no" imported="no">IMP/QuadScore.h</includes>
    <class kind="class">IMP::container::QuadsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsRestraint &gt; &gt;</type>
      <name>QuadsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a56c2b74fe12ee30eb803a75606e2411c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsRestraint &gt; &gt;</type>
      <name>QuadsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad87ecf1cb87c8cd2f26115f9fb737782</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuasiNewton.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/gsl/</path>
    <filename>QuasiNewton_8h</filename>
    <includes id="GSLOptimizer_8h" name="GSLOptimizer.h" local="yes" imported="no">GSLOptimizer.h</includes>
    <class kind="class">IMP::gsl::QuasiNewton</class>
    <namespace>IMP</namespace>
    <namespace>IMP::gsl</namespace>
  </compound>
  <compound kind="file">
    <name>multifit/RadiusOfGyrationRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>multifit_2RadiusOfGyrationRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="core_2HarmonicUpperBound_8h" name="core/HarmonicUpperBound.h" local="no" imported="no">IMP/core/HarmonicUpperBound.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <class kind="class">IMP::multifit::RadiusOfGyrationRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>saxs/RadiusOfGyrationRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>saxs_2RadiusOfGyrationRestraint_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::saxs::RadiusOfGyrationRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>RAII.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>RAII_8h</filename>
    <includes id="NonCopyable_8h" name="NonCopyable.h" local="yes" imported="no">NonCopyable.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <class kind="class">IMP::RAII</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>raii_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>raii__macros_8h</filename>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="RAII_8h" name="RAII.h" local="yes" imported="no">RAII.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_RAII</name>
      <anchorfile>raii__macros_8h.html</anchorfile>
      <anchor>a86558819817f31499860d713702bb092</anchor>
      <arglist>(Name, args, Initialize, Set, Reset, Show)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>random_8h</filename>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>boost::uint64_t</type>
      <name>get_random_seed</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a298294e06d07c91b16bda7a941847a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>RandomNumberGenerator</type>
      <name>random_number_generator</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af895f31f94446acff184e8724fef76d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>random_utils.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>random__utils_8h</filename>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_random_double_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a23fdaa496c8b5e504e3301b0c5349844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_random_double_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8829c750692256e63fcf98afe3e573ff</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_random_float_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7136d2223472a6da0af3a35afe261e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_random_float_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a19bf650dcba3d1313fd04e7e683d0bef</anchor>
      <arglist>(float min, float max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_random_numbers_normal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab756ae75c8588c7ba606e4ec2bc4ab57</anchor>
      <arglist>(Vector&lt; RealType &gt; &amp;v, unsigned int n, RealType mean=0.0, RealType stddev=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_random_numbers_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8db8fe945488db02b181b74a5a5ec378</anchor>
      <arglist>(Vector&lt; RealType &gt; &amp;v, unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomize_particles.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>randomize__particles_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="vector__generators_8h" name="vector_generators.h" local="no" imported="no">IMP/algebra/vector_generators.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>void</type>
      <name>randomize_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a59d1d74df1135da89e6d0270eb3f506c</anchor>
      <arglist>(const ParticlesList &amp;ps, const BoundingVolume &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>randomizing.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>randomizing_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="vector__generators_8h" name="vector_generators.h" local="no" imported="no">IMP/algebra/vector_generators.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::example</namespace>
    <member kind="function">
      <type>void</type>
      <name>randomize_particles</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a9565cd11fa56ad6312caef58c5510a30</anchor>
      <arglist>(const ParticlesList &amp;ps, const BoundingVolume &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RatioVolatilityScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>RatioVolatilityScore_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <class kind="class">IMP::saxs::RatioVolatilityScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>RecursivePartitionalClusteringEmbedding.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>RecursivePartitionalClusteringEmbedding_8h</filename>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="yes" imported="no">PartitionalClustering.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="yes" imported="no">Embedding.h</includes>
    <class kind="class">IMP::statistics::RecursivePartitionalClusteringEmbedding</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>RecursivePartitionalClusteringMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>RecursivePartitionalClusteringMetric_8h</filename>
    <includes id="Metric_8h" name="Metric.h" local="yes" imported="no">Metric.h</includes>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="yes" imported="no">PartitionalClustering.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::statistics::RecursivePartitionalClusteringMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
  </compound>
  <compound kind="file">
    <name>ref_counted_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ref__counted__macros_8h</filename>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_REF_COUNTED_DESTRUCTOR</name>
      <anchorfile>ref__counted__macros_8h.html</anchorfile>
      <anchor>a63d1d56bca849658d8ff97a2d8d2dabe</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_REF_COUNTED_INLINE_DESTRUCTOR</name>
      <anchorfile>ref__counted__macros_8h.html</anchorfile>
      <anchor>a23d038af73d3042fb57e7dc536f18c58</anchor>
      <arglist>(Name, destructor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_REF_COUNTED_NONTRIVIAL_DESTRUCTOR</name>
      <anchorfile>ref__counted__macros_8h.html</anchorfile>
      <anchor>a9c4c4588d7e73c39f4d40af1be6477c1</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReferenceFrame3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>ReferenceFrame3D_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <class kind="class">IMP::algebra::ReferenceFrame3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ReferenceFrame3D &gt;</type>
      <name>ReferenceFrame3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1a4cefe823cc382f41a75b00b5d61ac1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RefinedPairsPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RefinedPairsPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::core::RefinedPairsPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Refiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Refiner_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::Refiner</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Refiner &gt; &gt;</type>
      <name>Refiners</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a57c6a9ada682f4754367dc873a6be5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Refiner &gt; &gt;</type>
      <name>RefinersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4f596d7615e2b43bc8d34f1028d19fff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Reflection3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Reflection3D_8h</filename>
    <includes id="Plane3D_8h" name="Plane3D.h" local="yes" imported="no">Plane3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Reflection3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Reflection3D &gt;</type>
      <name>Reflection3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae5b74b1b4e87cab55bc6674e185b99b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RegistrationResult.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>RegistrationResult_8h</filename>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">IMP/em/ImageHeader.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">IMP/algebra/Vector2D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Rotation2D_8h" name="Rotation2D.h" local="yes" imported="no">IMP/algebra/Rotation2D.h</includes>
    <includes id="Transformation2D_8h" name="Transformation2D.h" local="yes" imported="no">IMP/algebra/Transformation2D.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::em2d::RegistrationResult</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; RegistrationResult &gt;</type>
      <name>RegistrationResults</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4fafde4fee1375f68650f1c51c216e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_evenly_distributed_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a695b83c14bfca657b7c3daff86546790</anchor>
      <arglist>(unsigned int n_projections)</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_random_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>afc1562d753ec9cce98213f96827df038</anchor>
      <arglist>(unsigned int n, double maximum_shift=5.0)</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>read_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a50e128690cfb1d3ed92449a66209bfce</anchor>
      <arglist>(const String &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a84f20afc2fd870b6a3cda621af52d100</anchor>
      <arglist>(String filename, const RegistrationResults &amp;results)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RelativePositionMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>RelativePositionMover_8h</filename>
    <includes id="core_2RigidBodyMover_8h" name="core/RigidBodyMover.h" local="yes" imported="no">IMP/core/RigidBodyMover.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::em2d::RelativePositionMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>std::vector&lt; algebra::Transformation3Ds &gt;</type>
      <name>Transformation3DsList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a21f82bc3a3443cae7bedc305742bd61d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RelaxingSpring.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>RelaxingSpring_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::npctransport::RelaxingSpring</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>RemoveRigidMotionOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>RemoveRigidMotionOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::RemoveRigidMotionOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RemoveRigidMotionOptimizerState &gt; &gt;</type>
      <name>RemoveRigidMotionOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2aa77d4465b33ede42a25f4008ca7463</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RemoveRigidMotionOptimizerState &gt; &gt;</type>
      <name>RemoveRigidMotionOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7d37da69e26a76f2e35194f654e423bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RemoveTranslationOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>RemoveTranslationOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::RemoveTranslationOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RemoveTranslationOptimizerState &gt; &gt;</type>
      <name>RemoveTranslationOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1e0cafffc69c4040dc10f3df4f8580c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RemoveTranslationOptimizerState &gt; &gt;</type>
      <name>RemoveTranslationOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5b513668a8b35e285bef0f9b283fe69d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ReplicaExchange.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/mpi/</path>
    <filename>ReplicaExchange_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="mpi_8h" name="mpi.h" local="no" imported="no">mpi.h</includes>
    <class kind="class">IMP::mpi::ReplicaExchange</class>
    <namespace>IMP</namespace>
    <namespace>IMP::mpi</namespace>
  </compound>
  <compound kind="file">
    <name>Representation.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Representation_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Representation</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="enumeration">
      <type></type>
      <name>RepresentationType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3f3acf356cf798fb64f25487b952baed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Representation</type>
      <name>get_representation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a48aba7ec117050a9a4d05f11266fa56d</anchor>
      <arglist>(Hierarchy h, bool nothrow=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_resolution</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4a85cddf744fd42b22bd994ff4449484</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_resolution</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0413486542eba96a7d75081dff43a096</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_with_representations</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac52c25104f859e6b56e168c3fc1e4307</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RepulsiveDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>RepulsiveDistancePairScore_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <class kind="class">IMP::isd::RepulsiveDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RepulsiveDistancePairScore &gt; &gt;</type>
      <name>RepulsiveDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a65465f3df8530078404696f6782e34b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RepulsiveDistancePairScore &gt; &gt;</type>
      <name>RepulsiveDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a1608c3c32043ab0af077b71e529b5ec9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Residue.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Residue_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Chain_8h" name="Chain.h" local="yes" imported="no">Chain.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::Residue</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ResidueType &gt;</type>
      <name>ResidueTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6ead334bcfeeaf084199bf9c0900cd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7236ea7f2911d16543c5af18f46f0f5c</anchor>
      <arglist>(ResidueType c)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_next_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2cadcc607aa4c1f8b1ec4c0c8d493312</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_one_letter_code</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6bf9912d67e4c9d6a134930015a928de</anchor>
      <arglist>(ResidueType c)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_previous_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad329e5c66a8de2f49304492c5a690d90</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>ResidueType</type>
      <name>get_residue_type</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4069a6db716b4d4a269df0aed8db5287</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="variable">
      <type>const ResidueType</type>
      <name>GLY</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aea45f47684f4d3f1dad7dd1d5f7e7afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ResidueType</type>
      <name>UNK</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac14880d5a13db9545031a99ba1003314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ResidueProteinProximityRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>ResidueProteinProximityRestraint_8h</filename>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="core_2utility_8h" name="core/utility.h" local="no" imported="no">IMP/core/utility.h</includes>
    <class kind="class">IMP::isd::ResidueProteinProximityRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Resolution.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>Resolution_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi::Resolution</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>/Resolution.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>_2Resolution_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi1::Resolution</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>Restraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Restraint_8h</filename>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="ScoreAccumulator_8h" name="ScoreAccumulator.h" local="yes" imported="no">ScoreAccumulator.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="constants_8h" name="constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="RestraintInfo_8h" name="RestraintInfo.h" local="no" imported="no">IMP/RestraintInfo.h</includes>
    <class kind="class">IMP::Restraint</class>
    <class kind="class">IMP::RestraintsAdaptor</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>Restraints</type>
      <name>create_decomposition</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5edca5546e64b6140b7cf778d2068ea0</anchor>
      <arglist>(const RestraintsTemp &amp;rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saxs/Restraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>saxs_2Restraint_8h</filename>
    <includes id="ProfileFitter_8h" name="ProfileFitter.h" local="no" imported="no">IMP/saxs/ProfileFitter.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="DerivativeCalculator_8h" name="DerivativeCalculator.h" local="no" imported="no">IMP/saxs/DerivativeCalculator.h</includes>
    <includes id="RigidBodiesProfileHandler_8h" name="RigidBodiesProfileHandler.h" local="no" imported="no">IMP/saxs/RigidBodiesProfileHandler.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::saxs::Restraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>restraint_geometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>restraint__geometry_8h</filename>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="yes" imported="no">geometry_macros.h</includes>
    <includes id="Colored_8h" name="Colored.h" local="yes" imported="no">Colored.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <class kind="class">IMP::display::RestraintGeometry</class>
    <class kind="class">IMP::display::RestraintSetGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
  </compound>
  <compound kind="file">
    <name>restraint_io.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>restraint__io_8h</filename>
    <includes id="link__macros_8h" name="link_macros.h" local="yes" imported="no">link_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_restraints</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a967b0af7b1880fb5a3bddb0c777e62f7</anchor>
      <arglist>(RMF::FileHandle fh, const Restraints &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_restraints</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>aaf27d994f713670f6c74cabef6fe518b</anchor>
      <arglist>(RMF::NodeHandle fh, const Restraints &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_restraint</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a2308cb4a180c1c885f7dda0c13592b8f</anchor>
      <arglist>(RMF::FileHandle fh, Restraint *hs)</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>create_restraints</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ae393fe01981d8d3b03b431d3d4b26722</anchor>
      <arglist>(RMF::FileConstHandle fh, Model *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_restraints</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a69153635f445884aa2650e5846a160ae</anchor>
      <arglist>(RMF::FileConstHandle fh, const Restraints &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_restraints_as_bonds</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a0f18215b4ec2d33724d0ac6aa88601d6</anchor>
      <arglist>(RMF::FileHandle fh, const Restraints &amp;rs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_number_of_terms</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a1beaf6f632cd1f9d0f623b916bbd3fa3</anchor>
      <arglist>(RMF::FileHandle fh, unsigned int num)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RestraintInfo.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>RestraintInfo_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::RestraintInfo</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>RestraintSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>RestraintSet_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">Restraint.h</includes>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="yes" imported="no">ScoringFunction.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <class kind="class">IMP::RestraintSet</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>RestraintsScoringFunction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RestraintsScoringFunction_8h</filename>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="no" imported="no">IMP/ScoringFunction.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::core::RestraintsScoringFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>revolute_joints.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>revolute__joints_8h</filename>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::kinematics::BondAngleRevoluteJoint</class>
    <class kind="class">IMP::kinematics::DihedralAngleRevoluteJoint</class>
    <class kind="class">IMP::kinematics::RevoluteJoint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondAngleRevoluteJoint &gt; &gt;</type>
      <name>BondAngleRevolteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3652d09c8df3827d2bdf7f1d27deda02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondAngleRevoluteJoint &gt; &gt;</type>
      <name>BondAngleRevolteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a2e025ec082d640cf2c7d12c0ff1d5812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DihedralAngleRevoluteJoint &gt; &gt;</type>
      <name>DihedralAngleRevoluteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a05a5c47395937c30901a6fc8e22e95a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DihedralAngleRevoluteJoint &gt; &gt;</type>
      <name>DihedralAngleRevoluteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad32896252cec6e362460e59c2d91f87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RevoluteJoint &gt; &gt;</type>
      <name>RevoluteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a429d23e0da5eec619c14dfece91c5ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RevoluteJoint &gt; &gt;</type>
      <name>RevoluteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aa51d75a449ab86ea9cb4755fbf9f8db3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RevoluteJointMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>RevoluteJointMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="no" imported="no">IMP/kinematics/revolute_joints.h</includes>
    <class kind="class">IMP::kinematics::RevoluteJointMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>rigid_bodies.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>rigid__bodies_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="no" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <class kind="class">IMP::core::NonRigidMember</class>
    <class kind="class">IMP::core::RigidBody</class>
    <class kind="class">IMP::core::RigidBodyMember</class>
    <class kind="class">IMP::core::RigidMember</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_rigid_body_cache_key</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a0b50565bb6f8cf373e0503b22c82fac8</anchor>
      <arglist>(ObjectKey k)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>create_rigid_bodies</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa9f324c68944164bd609b55bb3ca3b44</anchor>
      <arglist>(Model *m, unsigned int n, bool no_members=false)</arglist>
    </member>
    <member kind="function">
      <type>algebra::ReferenceFrame3D</type>
      <name>get_initial_reference_frame</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a345d1856d74f6a0768a145c96920e04d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_root_rigid_body</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af5b47e4ca263d6c156fb5936223c8a29</anchor>
      <arglist>(RigidMember m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_rigid_body_hierarchy</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad2e0faca3653d6acca9edc09af19ef99</anchor>
      <arglist>(RigidBody rb, TextOutput out=TextOutput(std::cout))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4c5298df54cae6b0e4419852390281be</anchor>
      <arglist>(RigidBody a, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rigid_body_geometries.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>rigid__body__geometries_8h</filename>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">rigid_bodies.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <class kind="class">IMP::core::RigidBodyDerivativeGeometry</class>
    <class kind="class">IMP::core::RigidBodyDerivativesGeometry</class>
    <class kind="class">IMP::core::RigidBodyFrameGeometry</class>
    <class kind="class">IMP::core::RigidBodyFramesGeometry</class>
    <class kind="class">IMP::core::RigidBodyHierarchyGeometry</class>
    <class kind="class">IMP::core::RigidBodyTorque</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>rigid_fitting.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>rigid__fitting_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="core_2ConjugateGradients_8h" name="core/ConjugateGradients.h" local="no" imported="no">IMP/core/ConjugateGradients.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="FitRestraint_8h" name="FitRestraint.h" local="yes" imported="no">FitRestraint.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::em::FittingSolutions</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingSolutions &gt;</type>
      <name>FittingSolutionsList</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8de0e64c35e07253144afdd1c48a6cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>compute_fitting_score</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3f5170ae051deffd9fd3b3c6064f403b</anchor>
      <arglist>(const ParticlesTemp &amp;ps, DensityMap *em_map, FloatKey wei_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>compute_fitting_scores</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a4350b15571abb634d2285ce9114a5725</anchor>
      <arglist>(const ParticlesTemp &amp;ps, DensityMap *em_map, const algebra::Transformation3Ds &amp;transformations, bool fast_version=false, bool local_score=false, const FloatKey &amp;wei_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>compute_fitting_scores</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ab8beedad8915dcd1aa22b5ba75a61439</anchor>
      <arglist>(DensityMap *em_map, core::RigidBody rb, Refiner *refiner, const algebra::Transformation3Ds &amp;transformations)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a300a1ede18ac26749a961beca4c971e3</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;weight_key, DensityMap *dmap, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3, bool fast=true)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_around_point</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a46543f4001a8c31276003433db00f776</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;weight_key, DensityMap *dmap, const algebra::Vector3D &amp;anchor_centroid, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3, bool fast=false)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_around_points</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a729f3b19106724e0dbc8c7e98336ff64</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;wei_key, DensityMap *dmap, const algebra::Vector3Ds &amp;anchor_centroids, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_grid_search</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a2092ec68df3aaeeef8daee59353d0327</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const FloatKey &amp;wei_key, DensityMap *dmap, Int max_voxels_translation=2, Int translation_step=1, Float max_angle_in_radians=0.174, Int number_of_rotations=100)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RigidBodiesImageFitRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>RigidBodiesImageFitRestraint_8h</filename>
    <includes id="project_8h" name="project.h" local="yes" imported="no">IMP/em2d/project.h</includes>
    <includes id="scores2D_8h" name="scores2D.h" local="yes" imported="no">IMP/em2d/scores2D.h</includes>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">IMP/algebra/Rotation3D.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">IMP/Restraint.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="yes" imported="no">IMP/Pointer.h</includes>
    <includes id="macros_8h" name="macros.h" local="yes" imported="no">IMP/macros.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::em2d::IntsOrder</class>
    <class kind="class">IMP::em2d::RigidBodiesImageFitRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RigidBodiesImageFitRestraint &gt; &gt;</type>
      <name>RigidBodiesImageFitRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3aa7b1492b713917576b4b64f4977e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RigidBodiesImageFitRestraint &gt; &gt;</type>
      <name>RigidBodiesImageFitRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a500c614f168f2d41b6f9d221156052d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_unique_index</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad5dd142cfbb44bbea471ab17f9d8ff77</anchor>
      <arglist>(const algebra::Rotation3D &amp;rot)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RigidBodiesProfileHandler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>RigidBodiesProfileHandler_8h</filename>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="DerivativeCalculator_8h" name="DerivativeCalculator.h" local="no" imported="no">IMP/saxs/DerivativeCalculator.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::saxs::RigidBodiesProfileHandler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>RigidBodyAnglePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RigidBodyAnglePairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::RigidBodyAnglePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>RigidBodyDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RigidBodyDistancePairScore_8h</filename>
    <includes id="ClosePairsPairScore_8h" name="ClosePairsPairScore.h" local="yes" imported="no">ClosePairsPairScore.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::RigidBodyDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>core/RigidBodyMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2RigidBodyMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="yes" imported="no">MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::core::RigidBodyMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>symmetry/RigidBodyMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/symmetry/</path>
    <filename>symmetry_2RigidBodyMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::symmetry::RigidBodyMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::symmetry</namespace>
  </compound>
  <compound kind="file">
    <name>RigidBodyNewMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>RigidBodyNewMover_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::spb::RigidBodyNewMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>RigidBodyPackingScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>RigidBodyPackingScore_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="TableRefiner_8h" name="TableRefiner.h" local="no" imported="no">IMP/core/TableRefiner.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::spb::RigidBodyPackingScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RigidBodyPackingScore &gt; &gt;</type>
      <name>RigidBodyPackingScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a8dad1dea544defccb9ea3e3b2de70719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RigidBodyPackingScore &gt; &gt;</type>
      <name>RigidBodyPackingScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>aeb59d4eb22535828795afdc60e5a774e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RigidBodyTunneler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RigidBodyTunneler_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="yes" imported="no">MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <class kind="class">IMP::core::RigidBodyTunneler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>RigidBodyUmbrella.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RigidBodyUmbrella_8h</filename>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="yes" imported="no">DistancePairScore.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::core::RigidBodyUmbrella</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>RigidClosePairsFinder.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>RigidClosePairsFinder_8h</filename>
    <includes id="ClosePairsFinder_8h" name="ClosePairsFinder.h" local="yes" imported="no">ClosePairsFinder.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">rigid_bodies.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::RigidClosePairsFinder</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>RigidLeavesRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>RigidLeavesRefiner_8h</filename>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::multifit::RigidLeavesRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>rmf.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>rmf_8h</filename>
    <includes id="HierarchyLoadLink_8h" name="HierarchyLoadLink.h" local="no" imported="no">IMP/rmf/HierarchyLoadLink.h</includes>
    <includes id="HierarchySaveLink_8h" name="HierarchySaveLink.h" local="no" imported="no">IMP/rmf/HierarchySaveLink.h</includes>
    <includes id="RMFWriter_8h" name="RMFWriter.h" local="no" imported="no">IMP/rmf/RMFWriter.h</includes>
    <includes id="SaveOptimizerState_8h" name="SaveOptimizerState.h" local="no" imported="no">IMP/rmf/SaveOptimizerState.h</includes>
    <includes id="associations_8h" name="associations.h" local="no" imported="no">IMP/rmf/associations.h</includes>
    <includes id="atom__io_8h" name="atom_io.h" local="no" imported="no">IMP/rmf/atom_io.h</includes>
    <includes id="atom__links_8h" name="atom_links.h" local="no" imported="no">IMP/rmf/atom_links.h</includes>
    <includes id="frames_8h" name="frames.h" local="no" imported="no">IMP/rmf/frames.h</includes>
    <includes id="geometry__io_8h" name="geometry_io.h" local="no" imported="no">IMP/rmf/geometry_io.h</includes>
    <includes id="link__macros_8h" name="link_macros.h" local="no" imported="no">IMP/rmf/link_macros.h</includes>
    <includes id="links_8h" name="links.h" local="no" imported="no">IMP/rmf/links.h</includes>
    <includes id="particle__io_8h" name="particle_io.h" local="no" imported="no">IMP/rmf/particle_io.h</includes>
    <includes id="restraint__io_8h" name="restraint_io.h" local="no" imported="no">IMP/rmf/restraint_io.h</includes>
    <includes id="simple__links_8h" name="simple_links.h" local="no" imported="no">IMP/rmf/simple_links.h</includes>
  </compound>
  <compound kind="file">
    <name>rmf_links.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>rmf__links_8h</filename>
    <includes id="SimulationData_8h" name="SimulationData.h" local="yes" imported="no">SimulationData.h</includes>
    <includes id="atom__links_8h" name="atom_links.h" local="no" imported="no">IMP/rmf/atom_links.h</includes>
    <includes id="link__macros_8h" name="link_macros.h" local="no" imported="no">IMP/rmf/link_macros.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <class kind="class">IMP::npctransport::HierarchyWithSitesLoadLink</class>
    <class kind="class">IMP::npctransport::HierarchyWithSitesSaveLink</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a57e19bdcf2152f8ac61b92eea2f3b577</anchor>
      <arglist>(RMF::FileHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a219f900a3b5e5ad3289d2d09356df1eb</anchor>
      <arglist>(RMF::NodeHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchy_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a96dbb54aa78a3ae2f795b3525565044d</anchor>
      <arglist>(RMF::FileHandle fh, atom::Hierarchy hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_test_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a04b0a73e40ad2a5874fa9a0d98b90528</anchor>
      <arglist>(RMF::FileHandle fh, core::ParticleType t, double display_radius, algebra::Vector3Ds sites)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_test_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1b21c03340b8750efd3cd1e8a66ae45d</anchor>
      <arglist>(RMF::FileHandle fh, core::ParticleType t, algebra::Sphere3Ds sites)</arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchies</type>
      <name>create_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>af4eac42b841cb74c967c2f4284ddb1d0</anchor>
      <arglist>(RMF::FileConstHandle fh, Model *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>adb310505fe5a5592a8dc7c13922e4f79</anchor>
      <arglist>(RMF::FileConstHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RMFWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>RMFWriter_8h</filename>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <includes id="display__macros_8h" name="display_macros.h" local="no" imported="no">IMP/display/display_macros.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>RMSDClustering.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>RMSDClustering_8h</filename>
    <includes id="geometric__alignment_8h" name="geometric_alignment.h" local="no" imported="no">IMP/algebra/geometric_alignment.h</includes>
    <includes id="algebra_2distance_8h" name="algebra/distance.h" local="no" imported="no">IMP/algebra/distance.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>RMSDMetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>RMSDMetric_8h</filename>
    <includes id="algebra_8h" name="algebra.h" local="no" imported="no">IMP/algebra.h</includes>
    <includes id="Statistics_8h" name="Statistics.h" local="no" imported="no">IMP/statistics.h</includes>
    <class kind="class">IMP::spb::RMSDMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>rotamer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>rotamer_8h</filename>
    <includes id="RotamerCalculator_8h" name="RotamerCalculator.h" local="no" imported="no">IMP/rotamer/RotamerCalculator.h</includes>
    <includes id="RotamerLibrary_8h" name="RotamerLibrary.h" local="no" imported="no">IMP/rotamer/RotamerLibrary.h</includes>
  </compound>
  <compound kind="file">
    <name>RotamerCalculator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rotamer/</path>
    <filename>RotamerCalculator_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="no" imported="no">IMP/atom/Residue.h</includes>
    <includes id="RotamerLibrary_8h" name="RotamerLibrary.h" local="no" imported="no">IMP/rotamer/RotamerLibrary.h</includes>
    <class kind="class">IMP::rotamer::ResidueRotamer</class>
    <class kind="class">IMP::rotamer::RotamerCalculator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rotamer</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; ResidueRotamer &gt;</type>
      <name>ResidueRotamers</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>afb0ae089ef958f1d3e2cafdf7fd5bb12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RotamerLibrary.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rotamer/</path>
    <filename>RotamerLibrary_8h</filename>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="no" imported="no">IMP/atom/Residue.h</includes>
    <class kind="class">IMP::rotamer::RotamerAngleTuple</class>
    <class kind="class">IMP::rotamer::RotamerLibrary</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rotamer</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; RotamerAngleTuple &gt;</type>
      <name>RotamerAngleTuples</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>a09f458d1d62cc666339ddcd9a0edb669</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation2D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Rotation2D_8h</filename>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">Vector2D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <class kind="class">IMP::algebra::Rotation2D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Rotation2D &gt;</type>
      <name>Rotation2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>add23e69204717fffb8e3392fe031deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4ace4e3f3bb2f5d5fd442360945370a3</anchor>
      <arglist>(const Rotation2D &amp;a, const Rotation2D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_identity_rotation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a34a359be279311b5284c4d2c56a62c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_random_rotation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac7ecfcd34e562d2b08fa9eb977e5f302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_rotation_to_x_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a491932b32722826e03b4e952444be4b0</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rotation3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Rotation3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::algebra::FixedXYZ</class>
    <class kind="class">IMP::algebra::Rotation3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Rotation3D &gt;</type>
      <name>Rotation3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4bf42d2013f88cf587326abddc923cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a216ec1243a72a2c3f9ddf6bd8bc22ece</anchor>
      <arglist>(const Rotation3D &amp;a, const Rotation3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aeaccab75a3705673bac9a5d4c08d1fd7</anchor>
      <arglist>(const Rotation3D &amp;A, const Rotation3D &amp;B, Vector4D DC, Rotation3DAdjoint *DA, Rotation3DAdjoint *DB)</arglist>
    </member>
    <member kind="function">
      <type>ComposeRotation3DAdjoint</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a502cf3dd86afae125f6caf9a0f9763f5</anchor>
      <arglist>(const Rotation3D &amp;A, const Rotation3D &amp;B, const Rotation3DAdjoint &amp;DC)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector3D, double &gt;</type>
      <name>get_axis_and_angle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a691fe5fa25816b65206ae26096c72213</anchor>
      <arglist>(const Rotation3D &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a55e80fed63202bf78ee2234003ddbd0f</anchor>
      <arglist>(const Rotation3D &amp;r0, const Rotation3D &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_identity_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a98a32dfffbb6b9f5f20a12dd479f1b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aad56f25091896ce8e87f8e5f1098bf79</anchor>
      <arglist>(const Rotation3D &amp;a, const Rotation3D &amp;b, double f)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_jacobian_of_composed_wrt_first</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7fa0a30c71127a92245cefc71613bb0f</anchor>
      <arglist>(const Rotation3D &amp;q, const Rotation3D &amp;p, bool wrt_unnorm=false)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_jacobian_of_composed_wrt_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab2f433fffe772a43eab54d008444f27e</anchor>
      <arglist>(const Rotation3D &amp;q, const Rotation3D &amp;p, bool wrt_unnorm=false)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_random_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a139712da5a82968a06bb71b09196bc5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_random_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abd23e8a25dda2d4acf8c00db35e2537f</anchor>
      <arglist>(const Rotation3D &amp;center, double distance)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_about_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a283f1463563e2c38fd3f4ae788c11484</anchor>
      <arglist>(const Vector3D &amp;axis, double angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_about_normalized_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad96b1551c23f1f62de05e9ebbcbf3429</anchor>
      <arglist>(const Vector3D &amp;axis_norm, double angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_matrix</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a28b2093fb8db4340e11cce11de658572</anchor>
      <arglist>(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_matrix</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a00a10a59dcf29a8947623a3fc69edb61</anchor>
      <arglist>(Eigen::Matrix3d m)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_vector4d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3003fd1a5254db165a8600f2979e7146</anchor>
      <arglist>(const VectorD&lt; 4 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_x_y_axes</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a010dd03d5d6e849ea7b0991f646d6b53</anchor>
      <arglist>(const Vector3D &amp;x, const Vector3D &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_taking_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6af4099df3f5babb4891be41ed215978</anchor>
      <arglist>(const Vector3D &amp;v1, const Vector3D &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3Ds</type>
      <name>get_uniform_cover_rotations_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>acbb7b674a77977f615655560633ad72e</anchor>
      <arglist>(unsigned int num_points)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Rotation3Ds</type>
      <name>get_uniformly_sampled_rotations</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae1155e72a76d93cf00ea3c83eeac6056</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FixedXYZ &gt;</type>
      <name>FixedXYZs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abc94aca4f48f07a19bcc1b685cfdba97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_fixed_xyz</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a50728b3c7c4674d610b353a58510b601</anchor>
      <arglist>(double xr, double yr, double zr)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_fixed_zxz</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a25e458f2015410be98a7805c50178c75</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_fixed_zyz</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0d07cdae4fbf65960b6d02ecdc4501f6</anchor>
      <arglist>(double Rot, double Tilt, double Psi)</arglist>
    </member>
    <member kind="function">
      <type>FixedXYZ</type>
      <name>get_fixed_xyz_from_rotation</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9ff9afb5d3b97dc0f5a1af70a0a6dde8</anchor>
      <arglist>(const Rotation3D &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RRT.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>RRT_8h</filename>
    <includes id="DOF_8h" name="DOF.h" local="no" imported="no">IMP/kinematics/DOF.h</includes>
    <includes id="DOFValues_8h" name="DOFValues.h" local="no" imported="no">IMP/kinematics/DOFValues.h</includes>
    <includes id="local__planners_8h" name="local_planners.h" local="no" imported="no">IMP/kinematics/local_planners.h</includes>
    <includes id="Sampler_8h" name="Sampler.h" local="no" imported="no">IMP/Sampler.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="no" imported="no">IMP/ConfigurationSet.h</includes>
    <class kind="class">IMP::kinematics::RRT</class>
    <class kind="class">IMP::kinematics::RRT::RRTNode</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
  </compound>
  <compound kind="file">
    <name>SameParticlePairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>SameParticlePairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::spb::SameParticlePairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>SameResiduePairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>SameResiduePairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::atom::SameResiduePairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>SameRigidBodyPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>SameRigidBodyPairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::spb::SameRigidBodyPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>SampledDensityMap.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>SampledDensityMap_8h</filename>
    <includes id="exp_8h" name="exp.h" local="yes" imported="no">exp.h</includes>
    <includes id="DensityMap_8h" name="DensityMap.h" local="yes" imported="no">DensityMap.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <includes id="KernelParameters_8h" name="KernelParameters.h" local="yes" imported="no">KernelParameters.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">IMP/base_types.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="yes" imported="no">IMP/atom/Mass.h</includes>
    <includes id="masking_8h" name="masking.h" local="yes" imported="no">masking.h</includes>
    <class kind="class">IMP::em::SampledDensityMap</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SampledDensityMap &gt; &gt;</type>
      <name>SampledDensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a35fd296933bf750cd910739f56e8d514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SampledDensityMap &gt; &gt;</type>
      <name>SampledDensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aca58fc6f766def9e223d08c545db4a0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Sampler_8h</filename>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="ConfigurationSet_8h" name="ConfigurationSet.h" local="yes" imported="no">ConfigurationSet.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <class kind="class">IMP::Sampler</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Sampler &gt; &gt;</type>
      <name>Samplers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>acc0a0f4740fa25a516870b820920d62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Sampler &gt; &gt;</type>
      <name>SamplersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac4fc5962c3250f3e9ed700ef40ed80b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SaveOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>SaveOptimizerState_8h</filename>
    <includes id="atom__io_8h" name="atom_io.h" local="yes" imported="no">atom_io.h</includes>
    <includes id="restraint__io_8h" name="restraint_io.h" local="yes" imported="no">restraint_io.h</includes>
    <includes id="particle__io_8h" name="particle_io.h" local="yes" imported="no">particle_io.h</includes>
    <includes id="geometry__io_8h" name="geometry_io.h" local="yes" imported="no">geometry_io.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Simulator_8h" name="Simulator.h" local="no" imported="no">IMP/atom/Simulator.h</includes>
    <class kind="class">IMP::rmf::SaveOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>saxs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>saxs_8h</filename>
    <includes id="ChiFreeScore_8h" name="ChiFreeScore.h" local="no" imported="no">IMP/saxs/ChiFreeScore.h</includes>
    <includes id="ChiScore_8h" name="ChiScore.h" local="no" imported="no">IMP/saxs/ChiScore.h</includes>
    <includes id="ChiScoreLog_8h" name="ChiScoreLog.h" local="no" imported="no">IMP/saxs/ChiScoreLog.h</includes>
    <includes id="DerivativeCalculator_8h" name="DerivativeCalculator.h" local="no" imported="no">IMP/saxs/DerivativeCalculator.h</includes>
    <includes id="saxs_2distribution_8h" name="saxs/distribution.h" local="no" imported="no">IMP/saxs/Distribution.h</includes>
    <includes id="FitParameters_8h" name="FitParameters.h" local="no" imported="no">IMP/saxs/FitParameters.h</includes>
    <includes id="FormFactorTable_8h" name="FormFactorTable.h" local="no" imported="no">IMP/saxs/FormFactorTable.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="ProfileClustering_8h" name="ProfileClustering.h" local="no" imported="no">IMP/saxs/ProfileClustering.h</includes>
    <includes id="ProfileFitter_8h" name="ProfileFitter.h" local="no" imported="no">IMP/saxs/ProfileFitter.h</includes>
    <includes id="saxs_2RadiusOfGyrationRestraint_8h" name="saxs/RadiusOfGyrationRestraint.h" local="no" imported="no">IMP/saxs/RadiusOfGyrationRestraint.h</includes>
    <includes id="RatioVolatilityScore_8h" name="RatioVolatilityScore.h" local="no" imported="no">IMP/saxs/RatioVolatilityScore.h</includes>
    <includes id="saxs_2Restraint_8h" name="saxs/Restraint.h" local="no" imported="no">IMP/saxs/Restraint.h</includes>
    <includes id="RigidBodiesProfileHandler_8h" name="RigidBodiesProfileHandler.h" local="no" imported="no">IMP/saxs/RigidBodiesProfileHandler.h</includes>
    <includes id="SolventAccessibleSurface_8h" name="SolventAccessibleSurface.h" local="no" imported="no">IMP/saxs/SolventAccessibleSurface.h</includes>
    <includes id="WeightedFitParameters_8h" name="WeightedFitParameters.h" local="no" imported="no">IMP/saxs/WeightedFitParameters.h</includes>
    <includes id="WeightedProfileFitter_8h" name="WeightedProfileFitter.h" local="no" imported="no">IMP/saxs/WeightedProfileFitter.h</includes>
    <includes id="nnls_8h" name="nnls.h" local="no" imported="no">IMP/saxs/nnls.h</includes>
    <includes id="saxs_2utility_8h" name="saxs/utility.h" local="no" imported="no">IMP/saxs/utility.h</includes>
  </compound>
  <compound kind="file">
    <name>SAXSMultiCombinationScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>SAXSMultiCombinationScore_8h</filename>
    <includes id="MultiStateModelScore_8h" name="MultiStateModelScore.h" local="yes" imported="no">MultiStateModelScore.h</includes>
    <includes id="MultiStateModel_8h" name="MultiStateModel.h" local="yes" imported="no">MultiStateModel.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="ProfileFitter_8h" name="ProfileFitter.h" local="no" imported="no">IMP/saxs/ProfileFitter.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::multi_state::SAXSMultiCombinationScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>SAXSMultiStateModelScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>SAXSMultiStateModelScore_8h</filename>
    <includes id="MultiStateModelScore_8h" name="MultiStateModelScore.h" local="yes" imported="no">MultiStateModelScore.h</includes>
    <includes id="MultiStateModel_8h" name="MultiStateModel.h" local="yes" imported="no">MultiStateModel.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="no" imported="no">IMP/saxs/Profile.h</includes>
    <includes id="WeightedProfileFitter_8h" name="WeightedProfileFitter.h" local="no" imported="no">IMP/saxs/WeightedProfileFitter.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::multi_state::SAXSMultiStateModelScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>Scale.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>Scale_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <class kind="class">IMP::isd::Scale</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>scoped.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>scoped_8h</filename>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="yes" imported="no">RestraintSet.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="yes" imported="no">ScoreState.h</includes>
    <includes id="Model_8h" name="Model.h" local="yes" imported="no">Model.h</includes>
    <includes id="RAII_8h" name="RAII.h" local="no" imported="no">IMP/RAII.h</includes>
    <includes id="deprecation_8h" name="deprecation.h" local="no" imported="no">IMP/deprecation.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="no" imported="no">IMP/raii_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <class kind="class">IMP::ScopedAddCacheAttribute</class>
    <class kind="class">IMP::ScopedSetAttribute</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>Score.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>Score_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="struct">IMP::score_functor::Score</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>score__functor_8h</filename>
    <includes id="AddScores_8h" name="AddScores.h" local="no" imported="no">IMP/score_functor/AddScores.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="DistancePairScoreWithCache_8h" name="DistancePairScoreWithCache.h" local="no" imported="no">IMP/score_functor/DistancePairScoreWithCache.h</includes>
    <includes id="Dope_8h" name="Dope.h" local="no" imported="no">IMP/score_functor/Dope.h</includes>
    <includes id="score__functor_2Harmonic_8h" name="score_functor/Harmonic.h" local="no" imported="no">IMP/score_functor/Harmonic.h</includes>
    <includes id="score__functor_2HarmonicLowerBound_8h" name="score_functor/HarmonicLowerBound.h" local="no" imported="no">IMP/score_functor/HarmonicLowerBound.h</includes>
    <includes id="score__functor_2HarmonicUpperBound_8h" name="score_functor/HarmonicUpperBound.h" local="no" imported="no">IMP/score_functor/HarmonicUpperBound.h</includes>
    <includes id="LinearLowerBound_8h" name="LinearLowerBound.h" local="no" imported="no">IMP/score_functor/LinearLowerBound.h</includes>
    <includes id="LoopStatistical_8h" name="LoopStatistical.h" local="no" imported="no">IMP/score_functor/LoopStatistical.h</includes>
    <includes id="score__functor_2OpenCubicSpline_8h" name="score_functor/OpenCubicSpline.h" local="no" imported="no">IMP/score_functor/OpenCubicSpline.h</includes>
    <includes id="OrientedSoap_8h" name="OrientedSoap.h" local="no" imported="no">IMP/score_functor/OrientedSoap.h</includes>
    <includes id="PointToSphereDistance_8h" name="PointToSphereDistance.h" local="no" imported="no">IMP/score_functor/PointToSphereDistance.h</includes>
    <includes id="Score_8h" name="Score.h" local="no" imported="no">IMP/score_functor/Score.h</includes>
    <includes id="ScoreUnaryFunction_8h" name="ScoreUnaryFunction.h" local="no" imported="no">IMP/score_functor/ScoreUnaryFunction.h</includes>
    <includes id="ScoreWithCache_8h" name="ScoreWithCache.h" local="no" imported="no">IMP/score_functor/ScoreWithCache.h</includes>
    <includes id="Shift_8h" name="Shift.h" local="no" imported="no">IMP/score_functor/Shift.h</includes>
    <includes id="SingletonStatistical_8h" name="SingletonStatistical.h" local="no" imported="no">IMP/score_functor/SingletonStatistical.h</includes>
    <includes id="Soap_8h" name="Soap.h" local="no" imported="no">IMP/score_functor/Soap.h</includes>
    <includes id="SphereDistance_8h" name="SphereDistance.h" local="no" imported="no">IMP/score_functor/SphereDistance.h</includes>
    <includes id="Statistical_8h" name="Statistical.h" local="no" imported="no">IMP/score_functor/Statistical.h</includes>
    <includes id="score__functor_2SurfaceDistancePairScore_8h" name="score_functor/SurfaceDistancePairScore.h" local="no" imported="no">IMP/score_functor/SurfaceDistancePairScore.h</includes>
    <includes id="UnaryFunctionEvaluate_8h" name="UnaryFunctionEvaluate.h" local="no" imported="no">IMP/score_functor/UnaryFunctionEvaluate.h</includes>
    <includes id="WeightScore_8h" name="WeightScore.h" local="no" imported="no">IMP/score_functor/WeightScore.h</includes>
    <includes id="distance__pair__score__macros_8h" name="distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/distance_pair_score_macros.h</includes>
    <includes id="surface__distance__pair__score__macros_8h" name="surface_distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/surface_distance_pair_score_macros.h</includes>
  </compound>
  <compound kind="file">
    <name>ScoreAccumulator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ScoreAccumulator_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="constants_8h" name="constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="thread__macros_8h" name="thread_macros.h" local="no" imported="no">IMP/thread_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="tuple__macros_8h" name="tuple_macros.h" local="no" imported="no">IMP/tuple_macros.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">IMP/math.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="struct">IMP::EvaluationState</class>
    <class kind="class">IMP::ScoreAccumulator</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; EvaluationState &gt;</type>
      <name>EvaluationStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a258550a42f9f3366e07d20275dc941c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ScoreAccumulator &gt;</type>
      <name>ScoreAccumulators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a94cc97540471ac8aba0410b859d7e1a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scores2D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>scores2D_8h</filename>
    <includes id="Image_8h" name="Image.h" local="yes" imported="no">IMP/em2d/Image.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="RegistrationResult_8h" name="RegistrationResult.h" local="yes" imported="no">IMP/em2d/RegistrationResult.h</includes>
    <includes id="Object_8h" name="Object.h" local="yes" imported="no">IMP/Object.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <class kind="class">IMP::em2d::ChiSquaredScore</class>
    <class kind="class">IMP::em2d::EM2DScore</class>
    <class kind="class">IMP::em2d::HasHigherCCC</class>
    <class kind="class">IMP::em2d::HasLowerScore</class>
    <class kind="class">IMP::em2d::LessPairBySecond</class>
    <class kind="class">IMP::em2d::MeanAbsoluteDifference</class>
    <class kind="class">IMP::em2d::ScoreFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ChiSquaredScore &gt; &gt;</type>
      <name>ChiSquaredScores</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2a1a4c1109d192ac736d26cea9f59038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ChiSquaredScore &gt; &gt;</type>
      <name>ChiSquaredScoresTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4bc70afefdcc96415ced5dd5bc52f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EM2DScore &gt; &gt;</type>
      <name>EM2DScores</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a46036a077f60024e34b05cc21dbd95a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EM2DScore &gt; &gt;</type>
      <name>EM2DScoresTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6c52a2c412526f46439ddd610be4f87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MeanAbsoluteDifference &gt; &gt;</type>
      <name>MeanAbsoluteDifferences</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>adb24ad0996b8d112e498349146f2b678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MeanAbsoluteDifference &gt; &gt;</type>
      <name>MeanAbsoluteDifferencesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8605961e994eb33982464e052adc1312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoreFunction &gt; &gt;</type>
      <name>ScoreFunctions</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ab231add71dc3e8cc93e435cf01865a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoreFunction &gt; &gt;</type>
      <name>ScoreFunctionsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a06ae4c93b481de5c2c4654091b4cf842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a36ce0f68b0bb199a5c0e0e32ded802a6</anchor>
      <arglist>(const cv::Mat &amp;m1, const cv::Mat &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_global_score</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a44fe26f303260f075ccda58b350fe8a0</anchor>
      <arglist>(const RegistrationResults &amp;RRs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rotation_error</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a57a725bb5e94995d20b75abe96d9cfbd</anchor>
      <arglist>(const RegistrationResult &amp;rr1, const RegistrationResult &amp;rr2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_shift_error</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad612906ea96b2c6f162c97b654309c7f</anchor>
      <arglist>(const RegistrationResult &amp;rr1, const RegistrationResult &amp;rr2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScoreState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ScoreState_8h</filename>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="utility_8h" name="utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <class kind="class">IMP::ScoreState</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_update_order</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7fb99c3c5b3bb78d2ab9af042a736ad0</anchor>
      <arglist>(ScoreStatesTemp input)</arglist>
    </member>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_update_order</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a746aad2ee1bd6dfd3abee47e8a24816f</anchor>
      <arglist>(std::set&lt; ScoreState * &gt; input)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScoreUnaryFunction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>ScoreUnaryFunction_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::score_functor::ScoreUnaryFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>ScoreWithCache.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>ScoreWithCache_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="no" imported="no">IMP/warning_macros.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="struct">IMP::score_functor::ScoreWithCache</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>Scoring.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>Scoring_8h</filename>
    <includes id="FGChain_8h" name="FGChain.h" local="yes" imported="no">FGChain.h</includes>
    <includes id="npctransport__proto_8fwd_8h" name="npctransport_proto.fwd.h" local="yes" imported="no">npctransport_proto.fwd.h</includes>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="no" imported="no">IMP/ScoringFunction.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="PairContainerSet_8h" name="PairContainerSet.h" local="no" imported="no">IMP/container/PairContainerSet.h</includes>
    <includes id="PredicatePairsRestraint_8h" name="PredicatePairsRestraint.h" local="no" imported="no">IMP/container/PredicatePairsRestraint.h</includes>
    <includes id="pair__predicates_8h" name="pair_predicates.h" local="no" imported="no">IMP/core/pair_predicates.h</includes>
    <includes id="BoundingBox3DSingletonScore_8h" name="BoundingBox3DSingletonScore.h" local="no" imported="no">IMP/core/BoundingBox3DSingletonScore.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="RestraintsScoringFunction_8h" name="RestraintsScoringFunction.h" local="no" imported="no">IMP/core/RestraintsScoringFunction.h</includes>
    <class kind="class">IMP::npctransport::Scoring</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>ScoringFunction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>ScoringFunction_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="dependency__graph_8h" name="dependency_graph.h" local="yes" imported="no">dependency_graph.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">Restraint.h</includes>
    <includes id="ModelObject_8h" name="ModelObject.h" local="yes" imported="no">ModelObject.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::ScoringFunction</class>
    <class kind="class">IMP::ScoringFunctionAdaptor</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>ScoringFunctions</type>
      <name>create_decomposition</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab557e028ce1a3dfda4936f2f86a89b36</anchor>
      <arglist>(ScoringFunction *sf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_restraint_hierarchy</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0fcf04bcd228de32bba2cde04f75b66e</anchor>
      <arglist>(ScoringFunctionAdaptor rs, std::ostream &amp;out=std::cout)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scratch.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>scratch_8h</filename>
  </compound>
  <compound kind="file">
    <name>secondary_structure_reader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>secondary__structure__reader_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="no" imported="no">IMP/atom/Atom.h</includes>
    <includes id="SecondaryStructureResidue_8h" name="SecondaryStructureResidue.h" local="no" imported="no">IMP/atom/SecondaryStructureResidue.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>SecondaryStructureResidue.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>SecondaryStructureResidue_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="no" imported="no">IMP/atom/atom_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::SecondaryStructureResidue</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>Float</type>
      <name>get_secondary_structure_match_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3164dab692507ddc3602d0a179f642c6</anchor>
      <arglist>(SecondaryStructureResidue ssr1, SecondaryStructureResidue ssr2)</arglist>
    </member>
    <member kind="function">
      <type>SecondaryStructureResidue</type>
      <name>setup_coarse_secondary_structure_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a26d5bf29f960fc1cc1816a3d9fae4da5</anchor>
      <arglist>(const Particles &amp;ssr_ps, Model *mdl, bool winner_takes_all_per_res=false)</arglist>
    </member>
    <member kind="function">
      <type>SecondaryStructureResidues</type>
      <name>setup_coarse_secondary_structure_residues</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a886a95c9c35244e6120f8484f501bdb9</anchor>
      <arglist>(const Particles &amp;ssr_ps, Model *mdl, int coarse_factor, int start_res_num, bool winner_takes_all_per_res=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Segment3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Segment3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <class kind="class">IMP::algebra::Segment3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Segment3D &gt;</type>
      <name>Segment3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad3ca5cf8010bbebf80a90d65f1add3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7f7687e40a5b27f12babf9730ff8d80c</anchor>
      <arglist>(const Segment3D &amp;s, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a27ea6a618c778638a2a0198aeb9fbd7c</anchor>
      <arglist>(const Segment3D &amp;a, const Segment3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_relative_projection_on_segment</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac5577591de549991f08c38744447c953</anchor>
      <arglist>(const Segment3D &amp;s, const algebra::Vector3D &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Selection.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Selection_8h</filename>
    <includes id="atom_2Atom_8h" name="atom/Atom.h" local="yes" imported="no">Atom.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="Residue_8h" name="Residue.h" local="yes" imported="no">Residue.h</includes>
    <includes id="element_8h" name="element.h" local="yes" imported="no">element.h</includes>
    <includes id="Representation_8h" name="Representation.h" local="yes" imported="no">Representation.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <class kind="class">IMP::atom::Selection</class>
    <class kind="class">IMP::atom::SelectionGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Selection &gt;</type>
      <name>Selections</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a882869b6f363351eaeb94ec460fd19fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adb6ec371e048f639a51292a67268f432</anchor>
      <arglist>(const Selections &amp;s, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a76ad13aa02ece8e2a110250b4be878b7</anchor>
      <arglist>(const Selections &amp;s, double x0, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>core::XYZR</type>
      <name>create_cover</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aed5950befd1610327f1bc9bc737de49f</anchor>
      <arglist>(const Selection &amp;s, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_distance_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abc59e05e0e702438730b01f225858438</anchor>
      <arglist>(const Selection &amp;n0, const Selection &amp;n1, double x0, double k, std::string name=&quot;Distance%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af115fdd772a04d5e4f775825a56b61d9</anchor>
      <arglist>(const Selections &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_internal_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2e83759163a5032a2f429eae3e86f0cd</anchor>
      <arglist>(const Selection &amp;s, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_internal_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aced8686a48e1011e90376a302cc3155d</anchor>
      <arglist>(const Selection &amp;s, double x0, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_leaves</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af5b0cc808be9672d3996baeb2f9210fd</anchor>
      <arglist>(const Selection &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae122a232c9f291d3f5f4d218c06652e4</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8ac4a06cec8ed51c3f992851dbaf25b8</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1ffa9eaea1cc4ecd2d9e3a10b2dd50b2</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ada8d754330898011ea1435fa0e693136</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SerialMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SerialMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="yes" imported="no">MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::SerialMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>set_map_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>set__map__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_LARGE_ORDERED_MAP</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>a396a531ec23be4fa0d2fc5b62041b14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_LARGE_ORDERED_SET</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>ac75c4dc51b4fe6db3792c98a738ffac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_LARGE_UNORDERED_MAP</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>a03f9ef015e819ce00775109eddaecd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_LARGE_UNORDERED_SET</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>aa6121936d486c9ce39f61f476e08107f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_SMALL_ORDERED_MAP</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>a9b0cda362a6857d353ab93f4e713769d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_SMALL_ORDERED_SET</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>a253a8ffde2d99fceae98e90d4f291ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_SMALL_UNORDERED_MAP</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>aac471064d56c51e2ab0c4dae81761ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_KERNEL_SMALL_UNORDERED_SET</name>
      <anchorfile>set__map__macros_8h.html</anchorfile>
      <anchor>a66388fb0100fb385859807452af89630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SetCheckState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SetCheckState_8h</filename>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <class kind="class">IMP::SetCheckState</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; SetCheckState &gt;</type>
      <name>SetCheckStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab6afbe9ac9ab8fe720ce39fc2693f499</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SetLogState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SetLogState_8h</filename>
    <includes id="enums_8h" name="enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <class kind="class">IMP::SetLogState</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; SetLogState &gt;</type>
      <name>SetLogStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6cd1a7a5e237904fb7b4e5cd37ca0504</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SettingsData.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>SettingsData_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::multifit::AssemblyHeader</class>
    <class kind="class">IMP::multifit::ComponentHeader</class>
    <class kind="class">IMP::multifit::SettingsData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ComponentHeader &gt; &gt;</type>
      <name>ComponentHeaders</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a9962bd2ae6dfa569fc6138381f9fc72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ComponentHeader &gt; &gt;</type>
      <name>ComponentHeadersTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a2f3433e232b4d17eb22d746c0bf04fee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Shift.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>Shift_8h</filename>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <class kind="class">IMP::score_functor::Shift</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>shortest_segment.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>shortest__segment_8h</filename>
    <includes id="Segment3D_8h" name="Segment3D.h" local="yes" imported="no">Segment3D.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>Segment3D</type>
      <name>get_shortest_segment</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a242c09659e380bd7d7c1dbc779863023</anchor>
      <arglist>(const Segment3D &amp;s, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Segment3D</type>
      <name>get_shortest_segment</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afacab5ba739f7028d32cd34be05a10c7</anchor>
      <arglist>(const Segment3D &amp;sa, const Segment3D &amp;sb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Showable.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Showable_8h</filename>
    <class kind="class">IMP::Showable</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>showable_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>showable__macros_8h</filename>
    <includes id="Showable_8h" name="Showable.h" local="yes" imported="no">Showable.h</includes>
    <includes id="warning__macros_8h" name="warning_macros.h" local="yes" imported="no">warning_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SHOWABLE</name>
      <anchorfile>showable__macros_8h.html</anchorfile>
      <anchor>a6439c6afb9e60ec9bc7abe7c5ef044d9</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SHOWABLE_INLINE</name>
      <anchorfile>showable__macros_8h.html</anchorfile>
      <anchor>a27c0bf6a79c8f5f5aa9442e692bd5ad3</anchor>
      <arglist>(Name, how_to_show)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SigmoidRestraintSphere.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>SigmoidRestraintSphere_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="no" imported="no">IMP/particle_index.h</includes>
    <class kind="class">IMP::pmi1::SigmoidRestraintSphere</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>simple_links.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>simple__links_8h</filename>
    <includes id="links_8h" name="links.h" local="yes" imported="no">links.h</includes>
    <includes id="associations_8h" name="associations.h" local="yes" imported="no">associations.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::rmf::SimpleLoadLink</class>
    <class kind="class">IMP::rmf::SimpleSaveLink</class>
    <namespace>IMP</namespace>
    <namespace>IMP::rmf</namespace>
  </compound>
  <compound kind="file">
    <name>Simplex.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/gsl/</path>
    <filename>Simplex_8h</filename>
    <includes id="GSLOptimizer_8h" name="GSLOptimizer.h" local="yes" imported="no">GSLOptimizer.h</includes>
    <class kind="class">IMP::gsl::Simplex</class>
    <namespace>IMP</namespace>
    <namespace>IMP::gsl</namespace>
  </compound>
  <compound kind="file">
    <name>SimulationData.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SimulationData_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="BrownianDynamics_8h" name="BrownianDynamics.h" local="no" imported="no">IMP/atom/BrownianDynamics.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="PairContainerSet_8h" name="PairContainerSet.h" local="no" imported="no">IMP/container/PairContainerSet.h</includes>
    <includes id="PredicatePairsRestraint_8h" name="PredicatePairsRestraint.h" local="no" imported="no">IMP/container/PredicatePairsRestraint.h</includes>
    <includes id="pair__predicates_8h" name="pair_predicates.h" local="no" imported="no">IMP/core/pair_predicates.h</includes>
    <includes id="BoundingBox3DSingletonScore_8h" name="BoundingBox3DSingletonScore.h" local="no" imported="no">IMP/core/BoundingBox3DSingletonScore.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <includes id="SaveOptimizerState_8h" name="SaveOptimizerState.h" local="no" imported="no">IMP/rmf/SaveOptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="npctransport_2io_8h" name="npctransport/io.h" local="yes" imported="no">io.h</includes>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="Scoring_8h" name="Scoring.h" local="yes" imported="no">Scoring.h</includes>
    <includes id="npctransport_2Statistics_8h" name="npctransport/Statistics.h" local="yes" imported="no">Statistics.h</includes>
    <includes id="npctransport__proto_8fwd_8h" name="npctransport_proto.fwd.h" local="yes" imported="no">npctransport_proto.fwd.h</includes>
    <class kind="class">IMP::npctransport::SimulationData</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>Simulator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>Simulator_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="no" imported="no">IMP/Optimizer.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::atom::Simulator</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Simulator &gt; &gt;</type>
      <name>Simulators</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4fed21937b797f6789b397fb0ce44c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Simulator &gt; &gt;</type>
      <name>SimulatorsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac08f9ff2b2827e3cc820b6fb945d5de8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>singleton_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>singleton__macros_8h</filename>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INDEX_SINGLETON_DERIVATIVE_MODIFIER</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>a88e1a3674bc9f33bb2b6a1c6980b9df9</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SINGLETON_CONTAINER_METHODS</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>aa1eea0a897337a700ae11562f9f2a01c</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SINGLETON_DERIVATIVE_MODIFIER</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>a9b9242a40dbc1fb59ad7534c9a7e36cc</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SINGLETON_MODIFIER_METHODS</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>a0a620c95ac239f5f75095a67d51c4d76</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SINGLETON_PREDICATE_METHODS</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>a1ff7653ad926aba3c4366d00cdf3ccf5</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SINGLETON_SCORE_METHODS</name>
      <anchorfile>singleton__macros_8h.html</anchorfile>
      <anchor>a49474366c8cd46837600a608c212fcc9</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>singleton_predicates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>singleton__predicates_8h</filename>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="SingletonPredicate_8h" name="SingletonPredicate.h" local="no" imported="no">IMP/SingletonPredicate.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::core::AllSameSingletonPredicate</class>
    <class kind="class">IMP::core::CoinFlipSingletonPredicate</class>
    <class kind="class">IMP::core::ConstantSingletonPredicate</class>
    <class kind="class">IMP::core::OrderedTypeSingletonPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeSingletonPredicate</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SingletonConstraint_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <class kind="class">IMP::core::SingletonConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SingletonContainer_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="yes" imported="no">container_base.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <class kind="class">IMP::SingletonContainer</class>
    <class kind="class">IMP::SingletonContainerAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonContainerSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>SingletonContainerSet_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <class kind="class">IMP::container::SingletonContainerSet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonContainerStatistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>SingletonContainerStatistics_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::container::SingletonContainerStatistics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonDerivativeModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SingletonDerivativeModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="yes" imported="no">SingletonModifier.h</includes>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SingletonModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::SingletonModifier</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonPredicate.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SingletonPredicate_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::SingletonPredicate</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SingletonRestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <class kind="class">IMP::core::SingletonRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonsConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>SingletonsConstraint_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::SingletonsConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsConstraint &gt; &gt;</type>
      <name>SingletonsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a69184cac135b1d6d069af401d7cee774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsConstraint &gt; &gt;</type>
      <name>SingletonsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a44f8d9385e928f4d3dc443eb2032f247</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>SingletonScore_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::SingletonScore</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>SingletonsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>SingletonsOptimizerState_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::container::SingletonsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsOptimizerState &gt; &gt;</type>
      <name>SingletonsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a18122427917eb217b95fb3dd357da7e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsOptimizerState &gt; &gt;</type>
      <name>SingletonsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7dec1a3499bc08f2bec251174b569360</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingletonsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>SingletonsRestraint_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <class kind="class">IMP::container::SingletonsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsRestraint &gt; &gt;</type>
      <name>SingletonsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a6371908c5084ed828b6a6cbb4dd96988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsRestraint &gt; &gt;</type>
      <name>SingletonsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>afc4395004b31afccd8fe5bc40329c474</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SingletonStatistical.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>SingletonStatistical_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::score_functor::SingletonStatistical</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>SitesGeometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SitesGeometry_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="estimates_8h" name="estimates.h" local="no" imported="no">IMP/atom/estimates.h</includes>
    <class kind="class">IMP::npctransport::SitesGeometry</class>
    <class kind="class">IMP::npctransport::TypedSitesGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SitesPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SitesPairScore_8h</filename>
    <includes id="linear__distance__pair__scores_8h" name="linear_distance_pair_scores.h" local="yes" imported="no">linear_distance_pair_scores.h</includes>
    <includes id="SitesPairScoreParameters_8h" name="SitesPairScoreParameters.h" local="yes" imported="no">SitesPairScoreParameters.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="SphereDistancePairScore_8h" name="SphereDistancePairScore.h" local="no" imported="no">IMP/core/SphereDistancePairScore.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="vector__search_8h" name="vector_search.h" local="no" imported="no">IMP/algebra/vector_search.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <includes id="PredicatePairsRestraint_8h" name="PredicatePairsRestraint.h" local="no" imported="no">IMP/container/PredicatePairsRestraint.h</includes>
    <includes id="estimates_8h" name="estimates.h" local="no" imported="no">IMP/atom/estimates.h</includes>
    <class kind="class">IMP::npctransport::SitesPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SitesPairScoreParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SitesPairScoreParameters_8h</filename>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <class kind="struct">IMP::npctransport::SitesPairScoreParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; SitesPairScoreParameters &gt;</type>
      <name>SitesPairScoreParametersList</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae629319c73de421821e583fcfe1fa31e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SlabWithCylindricalPore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SlabWithCylindricalPore_8h</filename>
    <includes id="ransport_2SlabWithPore_8h" name="ransport/SlabWithPore.h" local="yes" imported="no">SlabWithPore.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithCylindricalPoreGeometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SlabWithCylindricalPoreGeometry_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">IMP/display/geometry.h</includes>
    <includes id="display__macros_8h" name="display_macros.h" local="no" imported="no">IMP/display/display_macros.h</includes>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPoreWireGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithCylindricalPorePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SlabWithCylindricalPorePairScore_8h</filename>
    <includes id="SlabWithCylindricalPore_8h" name="SlabWithCylindricalPore.h" local="yes" imported="no">SlabWithCylindricalPore.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPorePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithPore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithPore_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npc::SlabWithPore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>ransport/SlabWithPore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ransport_2SlabWithPore_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npctransport::SlabWithPore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithSphericalIndent.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithSphericalIndent_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::npc::SlabWithSphericalIndent</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithSphericalIndentGeometry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithSphericalIndentGeometry_8h</filename>
    <includes id="geometry_8h" name="geometry.h" local="no" imported="no">IMP/display/geometry.h</includes>
    <includes id="display__macros_8h" name="display_macros.h" local="no" imported="no">IMP/display/display_macros.h</includes>
    <class kind="class">IMP::npc::SlabWithSphericalIndentGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithSphericalIndentMBMScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithSphericalIndentMBMScore_8h</filename>
    <includes id="SlabWithSphericalIndent_8h" name="SlabWithSphericalIndent.h" local="yes" imported="no">SlabWithSphericalIndent.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::npc::SlabWithSphericalIndentMBMScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithSphericalIndentMBMScore &gt; &gt;</type>
      <name>SlabWithSphericalIndentMBMScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a9118d6774a0225d8449e80929bb413c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithSphericalIndentMBMScore &gt; &gt;</type>
      <name>SlabWithSphericalIndentMBMScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a6aab20c75043a77079de546857ebd528</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SlabWithToroidalPore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithToroidalPore_8h</filename>
    <includes id="SlabWithPore_8h" name="SlabWithPore.h" local="yes" imported="no">SlabWithPore.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npc::SlabWithToroidalPore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
  </compound>
  <compound kind="file">
    <name>ransport/SlabWithToroidalPore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ransport_2SlabWithToroidalPore_8h</filename>
    <includes id="ransport_2SlabWithPore_8h" name="ransport/SlabWithPore.h" local="yes" imported="no">SlabWithPore.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npctransport::SlabWithToroidalPore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>SlabWithToroidalPoreGoPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithToroidalPoreGoPairScore_8h</filename>
    <includes id="SlabWithToroidalPore_8h" name="SlabWithToroidalPore.h" local="yes" imported="no">SlabWithToroidalPore.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::npc::SlabWithToroidalPoreGoPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithToroidalPoreGoPairScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreGoPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a5a859de534d3e53d665daab41edbc4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithToroidalPoreGoPairScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreGoPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>ada271e63fc71762c502aec88d260c432</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SlabWithToroidalPoreMBMScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SlabWithToroidalPoreMBMScore_8h</filename>
    <includes id="SlabWithToroidalPore_8h" name="SlabWithToroidalPore.h" local="yes" imported="no">SlabWithToroidalPore.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::npc::SlabWithToroidalPoreMBMScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithToroidalPoreMBMScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreMBMScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a569c7cc204429d27b3e65fb7cd8c1718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithToroidalPoreMBMScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreMBMScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a7a5b19f314e6be6f668b08261a2e0309</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SlabWithToroidalPorePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>SlabWithToroidalPorePairScore_8h</filename>
    <includes id="ransport_2SlabWithToroidalPore_8h" name="ransport/SlabWithToroidalPore.h" local="yes" imported="no">SlabWithToroidalPore.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::npctransport::SlabWithToroidalPorePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>Slice.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>Slice_8h</filename>
    <includes id="macros_8h" name="macros.h" local="yes" imported="no">IMP/macros.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="ConstVector_8h" name="ConstVector.h" local="no" imported="no">IMP/ConstVector.h</includes>
    <class kind="class">IMP::domino::Slice</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Slice &gt;</type>
      <name>Slices</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a6e79a85dc061abb0566b643745adb6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Slice</type>
      <name>get_slice</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a619c0aea6816fda8b69b08cf5e57876d</anchor>
      <arglist>(Subset outer, Subset inner, const Subsets &amp;excluded)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>smoothing_functions.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>smoothing__functions_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::atom::ForceSwitch</class>
    <class kind="class">IMP::atom::SmoothingFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>Soap.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>Soap_8h</filename>
    <includes id="Dope_8h" name="Dope.h" local="yes" imported="no">Dope.h</includes>
    <includes id="Statistical_8h" name="Statistical.h" local="yes" imported="no">Statistical.h</includes>
    <class kind="class">IMP::score_functor::Soap</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>SoapPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>SoapPairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::atom::SoapPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>SoftCylinderPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>SoftCylinderPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::misc::SoftCylinderPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>SolventAccessibleSurface.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>SolventAccessibleSurface_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::saxs::SolventAccessibleSurface</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>spb.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>spb_8h</filename>
    <includes id="AttributeDistancePairScore_8h" name="AttributeDistancePairScore.h" local="no" imported="no">IMP/spb/AttributeDistancePairScore.h</includes>
    <includes id="BoxedMover_8h" name="BoxedMover.h" local="no" imported="no">IMP/spb/BoxedMover.h</includes>
    <includes id="CellMover_8h" name="CellMover.h" local="no" imported="no">IMP/spb/CellMover.h</includes>
    <includes id="spb_2ChiSquareMetric_8h" name="spb/ChiSquareMetric.h" local="no" imported="no">IMP/spb/ChiSquareMetric.h</includes>
    <includes id="ContactMapMetric_8h" name="ContactMapMetric.h" local="no" imported="no">IMP/spb/ContactMapMetric.h</includes>
    <includes id="DiameterRgyrRestraint_8h" name="DiameterRgyrRestraint.h" local="no" imported="no">IMP/spb/DiameterRgyrRestraint.h</includes>
    <includes id="DistanceRMSDMetric_8h" name="DistanceRMSDMetric.h" local="no" imported="no">IMP/spb/DistanceRMSDMetric.h</includes>
    <includes id="DistanceTerminiRestraint_8h" name="DistanceTerminiRestraint.h" local="no" imported="no">IMP/spb/DistanceTerminiRestraint.h</includes>
    <includes id="spb_2Em2DRestraint_8h" name="spb/Em2DRestraint.h" local="no" imported="no">IMP/spb/EM2DRestraint.h</includes>
    <includes id="spb_2Gaussian_8h" name="spb/Gaussian.h" local="no" imported="no">IMP/spb/Gaussian.h</includes>
    <includes id="HelixDecorator_8h" name="HelixDecorator.h" local="no" imported="no">IMP/spb/HelixDecorator.h</includes>
    <includes id="spb_2ISDRestraint_8h" name="spb/ISDRestraint.h" local="no" imported="no">IMP/spb/ISDRestraint.h</includes>
    <includes id="KinkPairScore_8h" name="KinkPairScore.h" local="no" imported="no">IMP/spb/KinkPairScore.h</includes>
    <includes id="MolecularDynamicsWithWte_8h" name="MolecularDynamicsWithWte.h" local="no" imported="no">IMP/spb/MolecularDynamicsWithWte.h</includes>
    <includes id="MonteCarloWithWte_8h" name="MonteCarloWithWte.h" local="no" imported="no">IMP/spb/MonteCarloWithWte.h</includes>
    <includes id="NuisanceRangeModifier_8h" name="NuisanceRangeModifier.h" local="no" imported="no">IMP/spb/NuisanceRangeModifier.h</includes>
    <includes id="PbcBoxedMover_8h" name="PbcBoxedMover.h" local="no" imported="no">IMP/spb/PbcBoxedMover.h</includes>
    <includes id="PbcBoxedRigidBodyMover_8h" name="PbcBoxedRigidBodyMover.h" local="no" imported="no">IMP/spb/PbcBoxedRigidBodyMover.h</includes>
    <includes id="RMSDMetric_8h" name="RMSDMetric.h" local="no" imported="no">IMP/spb/RMSDMetric.h</includes>
    <includes id="RigidBodyNewMover_8h" name="RigidBodyNewMover.h" local="no" imported="no">IMP/spb/RigidBodyNewMover.h</includes>
    <includes id="RigidBodyPackingScore_8h" name="RigidBodyPackingScore.h" local="no" imported="no">IMP/spb/RigidBodyPackingScore.h</includes>
    <includes id="SameParticlePairFilter_8h" name="SameParticlePairFilter.h" local="no" imported="no">IMP/spb/SameParticlePairFilter.h</includes>
    <includes id="SameRigidBodyPairFilter_8h" name="SameRigidBodyPairFilter.h" local="no" imported="no">IMP/spb/SameRigidBodyPairFilter.h</includes>
    <includes id="TiltSingletonScore_8h" name="TiltSingletonScore.h" local="no" imported="no">IMP/spb/TiltSingletonScore.h</includes>
    <includes id="TransformationSymmetry_8h" name="TransformationSymmetry.h" local="no" imported="no">IMP/spb/TransformationSymmetry.h</includes>
    <includes id="TwoStateGoModelRestraint_8h" name="TwoStateGoModelRestraint.h" local="no" imported="no">IMP/spb/TwoStateGoModelRestraint.h</includes>
    <includes id="UniformBoundedRestraint_8h" name="UniformBoundedRestraint.h" local="no" imported="no">IMP/spb/UniformBoundedRestraint.h</includes>
    <includes id="pt__stuff_8h" name="pt_stuff.h" local="no" imported="no">IMP/spb/pt_stuff.h</includes>
    <includes id="spb__ISD__particles_8h" name="spb_ISD_particles.h" local="no" imported="no">IMP/spb/spb_ISD_particles.h</includes>
    <includes id="spb__assemble__restraints_8h" name="spb_assemble_restraints.h" local="no" imported="no">IMP/spb/spb_assemble_restraints.h</includes>
    <includes id="spb__main_8h" name="spb_main.h" local="no" imported="no">IMP/spb/spb_main.h</includes>
    <includes id="spb__parser_8h" name="spb_parser.h" local="no" imported="no">IMP/spb/spb_parser.h</includes>
    <includes id="spb__representation_8h" name="spb_representation.h" local="no" imported="no">IMP/spb/spb_representation.h</includes>
    <includes id="spb__restraint_8h" name="spb_restraint.h" local="no" imported="no">IMP/spb/spb_restraint.h</includes>
    <includes id="spb__sampler_8h" name="spb_sampler.h" local="no" imported="no">IMP/spb/spb_sampler.h</includes>
  </compound>
  <compound kind="file">
    <name>spb_assemble_restraints.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__assemble__restraints_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="Atom_8h" name="Atom.h" local="no" imported="no">IMP/atom.h</includes>
    <includes id="container_8h" name="container.h" local="no" imported="no">IMP/container.h</includes>
    <includes id="spb__main_8h" name="spb_main.h" local="no" imported="no">IMP/spb/spb_main.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_ISD_particles.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__ISD__particles_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="Atom_8h" name="Atom.h" local="no" imported="no">IMP/atom.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <includes id="spb__main_8h" name="spb_main.h" local="no" imported="no">IMP/spb/spb_main.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_main.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__main_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_parser.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__parser_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="spb_8h" name="spb.h" local="no" imported="no">IMP/spb.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_representation.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__representation_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="Atom_8h" name="Atom.h" local="no" imported="no">IMP/atom.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_restraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__restraint_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="Atom_8h" name="Atom.h" local="no" imported="no">IMP/atom.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <includes id="em2d_8h" name="em2d.h" local="no" imported="no">IMP/em2d.h</includes>
    <includes id="isd_8h" name="isd.h" local="no" imported="no">IMP/isd.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>spb_sampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>spb__sampler_8h</filename>
    <includes id="IMP_8h" name="IMP.h" local="no" imported="no">IMP.h</includes>
    <includes id="Atom_8h" name="Atom.h" local="no" imported="no">IMP/atom.h</includes>
    <includes id="core_8h" name="core.h" local="no" imported="no">IMP/core.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Sphere3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Sphere3D_8h</filename>
    <includes id="SphereD_8h" name="SphereD.h" local="yes" imported="no">SphereD.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_ball_radius_from_volume_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2693b140f128265e471ec83fad891e69</anchor>
      <arglist>(double volume)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a45e22a35c32d75dab31815486e31dc68</anchor>
      <arglist>(const Sphere3Ds &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a44e78707e29c0d1a638a48a95c7b50e0</anchor>
      <arglist>(const Vector3Ds &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3Ds</type>
      <name>get_simplified_from_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a33f90402257cda167482752bb7e34a76</anchor>
      <arglist>(Sphere3Ds in, double maximum_allowed_error_angstroms)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_surface_area_and_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af5fbfbd528673b73afb47f67266b77b6</anchor>
      <arglist>(const algebra::Sphere3Ds &amp;ss)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphereD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>SphereD_8h</filename>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::SphereD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>SphereD&lt; 1 &gt;</type>
      <name>Sphere1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae36b5d052dc92ba68199337a643068cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere1D &gt;</type>
      <name>Sphere1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a25fe42a7b84d72cd10a1d4a3809b25d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 2 &gt;</type>
      <name>Sphere2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0bd5342c11918edce25a64fa0b645771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere2D &gt;</type>
      <name>Sphere2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abf9035c9f059be55c3ba1d0366c2a02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 3 &gt;</type>
      <name>Sphere3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a38b93111c6cddc59d162cf38ef6239a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere3D &gt;</type>
      <name>Sphere3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>adba386612598ac5fad7717f548fdb36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 4 &gt;</type>
      <name>Sphere4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae15e8870ff6a00a6846770058e30576f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere4D &gt;</type>
      <name>Sphere4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>accc33fa8917c1d5bad5069d3e788a979</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 5 &gt;</type>
      <name>Sphere5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a901474a2533333fb3de8cb8c3440a0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere5D &gt;</type>
      <name>Sphere5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a02449f4acce24d84c72b1adc23cfae7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 6 &gt;</type>
      <name>Sphere6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa68534da2936e24e953a87822d56722c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere6D &gt;</type>
      <name>Sphere6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5831ce98688d6392290eefdfa7cbb5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt;-1 &gt;</type>
      <name>SphereKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae8394f52404e0448ca99a1e8f5797883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SphereKD &gt;</type>
      <name>SphereKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae42e45bae47e4bdb83d8140741f8d7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_area</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6ada52de6426c614d94ba40f7f71df26</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab71786f84ddb7835f6dd75bc61b1efda</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a847f07074743af85946a6b46cd2a296f</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_interiors_intersect</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9538f0814e3bdb8494ad2083acea5f20</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_power_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a79e54ebe8fa9974a1401ba40be75d732</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a59af2a64542f335ac33b2cc3b90f6681</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>affca1f7420725f98cde80ad06a40364f</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphereDistance.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>SphereDistance_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::score_functor::SphereDistance</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>SphereDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SphereDistancePairScore_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="UnaryFunctionEvaluate_8h" name="UnaryFunctionEvaluate.h" local="no" imported="no">IMP/score_functor/UnaryFunctionEvaluate.h</includes>
    <includes id="SphereDistance_8h" name="SphereDistance.h" local="no" imported="no">IMP/score_functor/SphereDistance.h</includes>
    <includes id="Shift_8h" name="Shift.h" local="no" imported="no">IMP/score_functor/Shift.h</includes>
    <includes id="score__functor_2Harmonic_8h" name="score_functor/Harmonic.h" local="no" imported="no">IMP/score_functor/Harmonic.h</includes>
    <includes id="score__functor_2HarmonicLowerBound_8h" name="score_functor/HarmonicLowerBound.h" local="no" imported="no">IMP/score_functor/HarmonicLowerBound.h</includes>
    <includes id="score__functor_2HarmonicUpperBound_8h" name="score_functor/HarmonicUpperBound.h" local="no" imported="no">IMP/score_functor/HarmonicUpperBound.h</includes>
    <includes id="distance__pair__score__macros_8h" name="distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/distance_pair_score_macros.h</includes>
    <class kind="class">IMP::core::HarmonicSphereDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicUpperBoundSphereDiameterPairScore</class>
    <class kind="class">IMP::core::HarmonicUpperBoundSphereDistancePairScore</class>
    <class kind="class">IMP::core::NormalizedSphereDistancePairScore</class>
    <class kind="class">IMP::core::SoftSpherePairScore</class>
    <class kind="class">IMP::core::SphereDistancePairScore</class>
    <class kind="class">IMP::core::WeightedSphereDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicUpperBoundSphereDiameterPairScore &gt; &gt;</type>
      <name>HarmonicUpperBoundSphereDiameterPairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4be372bcbe2f41c89abbd257f91e887b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicUpperBoundSphereDiameterPairScore &gt; &gt;</type>
      <name>HarmonicUpperBoundSphereDiameterPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ac18d62ae5e18cadabbbd62ef9e084746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpherePatch3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>SpherePatch3D_8h</filename>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="yes" imported="no">Sphere3D.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="yes" imported="no">Plane3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::SpherePatch3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; SpherePatch3D &gt;</type>
      <name>SpherePatch3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6f38b70b8460d70318f581724c0b89f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalIndentSurfaceDepthPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>SphericalIndentSurfaceDepthPairScore_8h</filename>
    <includes id="SlabWithSphericalIndent_8h" name="SlabWithSphericalIndent.h" local="yes" imported="no">SlabWithSphericalIndent.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::npc::SphericalIndentSurfaceDepthPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SphericalIndentSurfaceDepthPairScore &gt; &gt;</type>
      <name>SphericalIndentSurfaceDepthPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a83f21737106a1d39f4da1065dac8c8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SphericalIndentSurfaceDepthPairScore &gt; &gt;</type>
      <name>SphericalIndentSurfaceDepthPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a9a35501fd415555cf1f68e17b902429a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SphericalVector3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>SphericalVector3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">IMP/exception.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::SphericalVector3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; SphericalVector3D &gt;</type>
      <name>SphericalVector3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa6041103669cf8ec2db95fca7b7da7ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpiderHeader.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>SpiderHeader_8h</filename>
    <class kind="struct">IMP::em::SpiderHeader</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>SpiderImageReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>SpiderImageReaderWriter_8h</filename>
    <includes id="ImageReaderWriter_8h" name="ImageReaderWriter.h" local="yes" imported="no">IMP/em2d/ImageReaderWriter.h</includes>
    <includes id="opencv__interface_8h" name="opencv_interface.h" local="yes" imported="no">IMP/em2d/opencv_interface.h</includes>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="yes" imported="no">IMP/em/ImageHeader.h</includes>
    <includes id="header__converters_8h" name="header_converters.h" local="yes" imported="no">IMP/em/header_converters.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="endian_8h" name="endian.h" local="no" imported="no">IMP/algebra/endian.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em2d::SpiderImageReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>SpiderReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>SpiderReaderWriter_8h</filename>
    <includes id="ImageHeader_8h" name="ImageHeader.h" local="no" imported="no">IMP/em/ImageHeader.h</includes>
    <includes id="header__converters_8h" name="header_converters.h" local="no" imported="no">IMP/em/header_converters.h</includes>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="no" imported="no">IMP/em/MapReaderWriter.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="no" imported="no">IMP/em/DensityHeader.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <includes id="endian_8h" name="endian.h" local="no" imported="no">IMP/algebra/endian.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <class kind="class">IMP::em::SpiderMapReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>standard_grids.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>standard__grids_8h</filename>
    <includes id="GridD_8h" name="GridD.h" local="yes" imported="no">GridD.h</includes>
    <includes id="grid__ranges_8h" name="grid_ranges.h" local="yes" imported="no">grid_ranges.h</includes>
    <includes id="grid__storages_8h" name="grid_storages.h" local="yes" imported="no">grid_storages.h</includes>
    <includes id="grid__embeddings_8h" name="grid_embeddings.h" local="yes" imported="no">grid_embeddings.h</includes>
    <class kind="struct">IMP::algebra::DenseFloatLogGridKD</class>
    <class kind="struct">IMP::algebra::DenseGrid3D</class>
    <class kind="struct">IMP::algebra::DenseIntLogGrid3D</class>
    <class kind="struct">IMP::algebra::SparseGrid3D</class>
    <class kind="struct">IMP::algebra::SparseUnboundedGrid3D</class>
    <class kind="struct">IMP::algebra::SparseUnboundedGridD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>stat_helpers.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>stat__helpers_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::multi_state</namespace>
  </compound>
  <compound kind="file">
    <name>State.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>State_8h</filename>
    <includes id="atom__macros_8h" name="atom_macros.h" local="yes" imported="no">atom_macros.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="yes" imported="no">Hierarchy.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::atom::State</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="function">
      <type>int</type>
      <name>get_state_index</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a230e74d4b499e3e9ada75e78e93c1af8</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StateAdaptor.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>StateAdaptor_8h</filename>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::misc::StateAdaptor</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>Statistical.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>Statistical_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::Statistical</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>StatisticalPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>StatisticalPairScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="score__functor_2DistancePairScore_8h" name="score_functor/DistancePairScore.h" local="no" imported="no">IMP/score_functor/DistancePairScore.h</includes>
    <includes id="Statistical_8h" name="Statistical.h" local="no" imported="no">IMP/score_functor/Statistical.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="file_8h" name="file.h" local="no" imported="no">IMP/file.h</includes>
    <class kind="class">IMP::core::StatisticalPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>npctransport/Statistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>npctransport_2Statistics_8h</filename>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="BrownianDynamics_8h" name="BrownianDynamics.h" local="no" imported="no">IMP/atom/BrownianDynamics.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="CloseBipartitePairContainer_8h" name="CloseBipartitePairContainer.h" local="no" imported="no">IMP/container/CloseBipartitePairContainer.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="PairContainerSet_8h" name="PairContainerSet.h" local="no" imported="no">IMP/container/PairContainerSet.h</includes>
    <includes id="PredicatePairsRestraint_8h" name="PredicatePairsRestraint.h" local="no" imported="no">IMP/container/PredicatePairsRestraint.h</includes>
    <includes id="pair__predicates_8h" name="pair_predicates.h" local="no" imported="no">IMP/core/pair_predicates.h</includes>
    <includes id="BoundingBox3DSingletonScore_8h" name="BoundingBox3DSingletonScore.h" local="no" imported="no">IMP/core/BoundingBox3DSingletonScore.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <includes id="SaveOptimizerState_8h" name="SaveOptimizerState.h" local="no" imported="no">IMP/rmf/SaveOptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="set__map__macros_8h" name="set_map_macros.h" local="no" imported="no">IMP/set_map_macros.h</includes>
    <includes id="npctransport_2io_8h" name="npctransport/io.h" local="yes" imported="no">io.h</includes>
    <includes id="BodyStatisticsOptimizerState_8h" name="BodyStatisticsOptimizerState.h" local="yes" imported="no">BodyStatisticsOptimizerState.h</includes>
    <includes id="GlobalStatisticsOptimizerState_8h" name="GlobalStatisticsOptimizerState.h" local="yes" imported="no">GlobalStatisticsOptimizerState.h</includes>
    <includes id="ParticleTransportStatisticsOptimizerState_8h" name="ParticleTransportStatisticsOptimizerState.h" local="yes" imported="no">ParticleTransportStatisticsOptimizerState.h</includes>
    <includes id="ChainStatisticsOptimizerState_8h" name="ChainStatisticsOptimizerState.h" local="yes" imported="no">ChainStatisticsOptimizerState.h</includes>
    <includes id="BipartitePairsStatisticsOptimizerState_8h" name="BipartitePairsStatisticsOptimizerState.h" local="yes" imported="no">BipartitePairsStatisticsOptimizerState.h</includes>
    <includes id="Parameter_8h" name="Parameter.h" local="yes" imported="no">Parameter.h</includes>
    <includes id="Scoring_8h" name="Scoring.h" local="yes" imported="no">Scoring.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">typedefs.h</includes>
    <class kind="class">IMP::npctransport::Statistics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>Statistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Statistics_8h</filename>
    <includes id="statistics_2ChiSquareMetric_8h" name="statistics/ChiSquareMetric.h" local="no" imported="no">IMP/statistics/ChiSquareMetric.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="no" imported="no">IMP/statistics/Embedding.h</includes>
    <includes id="HistogramD_8h" name="HistogramD.h" local="no" imported="no">IMP/statistics/HistogramD.h</includes>
    <includes id="Metric_8h" name="Metric.h" local="no" imported="no">IMP/statistics/Metric.h</includes>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="no" imported="no">IMP/statistics/PartitionalClustering.h</includes>
    <includes id="PartitionalClusteringWithCenter_8h" name="PartitionalClusteringWithCenter.h" local="no" imported="no">IMP/statistics/PartitionalClusteringWithCenter.h</includes>
    <includes id="RecursivePartitionalClusteringEmbedding_8h" name="RecursivePartitionalClusteringEmbedding.h" local="no" imported="no">IMP/statistics/RecursivePartitionalClusteringEmbedding.h</includes>
    <includes id="RecursivePartitionalClusteringMetric_8h" name="RecursivePartitionalClusteringMetric.h" local="no" imported="no">IMP/statistics/RecursivePartitionalClusteringMetric.h</includes>
    <includes id="embeddings_8h" name="embeddings.h" local="no" imported="no">IMP/statistics/embeddings.h</includes>
    <includes id="metric__clustering_8h" name="metric_clustering.h" local="no" imported="no">IMP/statistics/metric_clustering.h</includes>
    <includes id="metrics_8h" name="metrics.h" local="no" imported="no">IMP/statistics/metrics.h</includes>
    <includes id="point__clustering_8h" name="point_clustering.h" local="no" imported="no">IMP/statistics/point_clustering.h</includes>
    <includes id="statistics_2python__only_8h" name="statistics/python_only.h" local="no" imported="no">IMP/statistics/python_only.h</includes>
    <includes id="statistics_2utility_8h" name="statistics/utility.h" local="no" imported="no">IMP/statistics/utility.h</includes>
  </compound>
  <compound kind="file">
    <name>SteepestDescent.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SteepestDescent_8h</filename>
    <includes id="AttributeOptimizer_8h" name="AttributeOptimizer.h" local="no" imported="no">IMP/AttributeOptimizer.h</includes>
    <class kind="class">IMP::core::SteepestDescent</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>StereochemistryPairFilter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>StereochemistryPairFilter_8h</filename>
    <includes id="PairPredicate_8h" name="PairPredicate.h" local="no" imported="no">IMP/PairPredicate.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::atom::StereochemistryPairFilter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>StructureSource.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>StructureSource_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <class kind="class">IMP::atom::StructureSource</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>StudentTRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>StudentTRestraint_8h</filename>
    <includes id="FStudentT_8h" name="FStudentT.h" local="no" imported="no">IMP/isd/FStudentT.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::StudentTRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Subset.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>Subset_8h</filename>
    <includes id="macros_8h" name="macros.h" local="yes" imported="no">IMP/macros.h</includes>
    <includes id="ListSingletonContainer_8h" name="ListSingletonContainer.h" local="no" imported="no">IMP/container/ListSingletonContainer.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Value_8h" name="Value.h" local="no" imported="no">IMP/Value.h</includes>
    <includes id="ConstVector_8h" name="ConstVector.h" local="no" imported="no">IMP/ConstVector.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <class kind="class">IMP::domino::Subset</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Subset &gt;</type>
      <name>Subsets</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a016238d59f38a3c1bfa667f9b7a8139e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>subset_filters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>subset__filters_8h</filename>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="domino__macros_8h" name="domino_macros.h" local="yes" imported="no">domino_macros.h</includes>
    <includes id="subset__scores_8h" name="subset_scores.h" local="yes" imported="no">subset_scores.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Configuration_8h" name="Configuration.h" local="no" imported="no">IMP/Configuration.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <class kind="class">IMP::domino::DisjointSetsSubsetFilterTable</class>
    <class kind="class">IMP::domino::EqualitySubsetFilterTable</class>
    <class kind="class">IMP::domino::EquivalenceAndExclusionSubsetFilterTable</class>
    <class kind="class">IMP::domino::EquivalenceSubsetFilterTable</class>
    <class kind="class">IMP::domino::ExclusionSubsetFilterTable</class>
    <class kind="class">IMP::domino::ListSubsetFilterTable</class>
    <class kind="class">IMP::domino::MinimumRestraintScoreSubsetFilterTable</class>
    <class kind="class">IMP::domino::PairListSubsetFilterTable</class>
    <class kind="class">IMP::domino::ProbabilisticSubsetFilterTable</class>
    <class kind="class">IMP::domino::RestraintScoreSubsetFilterTable</class>
    <class kind="class">IMP::domino::SubsetFilter</class>
    <class kind="class">IMP::domino::SubsetFilterTable</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EqualitySubsetFilterTable &gt; &gt;</type>
      <name>EqualitySubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aadfc0557d83b44cfe3f59d1ce6152c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EqualitySubsetFilterTable &gt; &gt;</type>
      <name>EqualitySubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a7d3f9a43cf2c55b8e6930b9f36874506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EquivalenceAndExclusionSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceAndExclusionSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aa76efcdf89055bbdd8aa941daa003169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EquivalenceAndExclusionSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceAndExclusionSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a8ae320e16de25bc9c0690c4365125707</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EquivalenceSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab67bda5bd3c2e3d8ca40681f6e409796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EquivalenceSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a060f83a3232b169a9dcd13f7f9cf9660</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ExclusionSubsetFilterTable &gt; &gt;</type>
      <name>ExclusionSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>afaa8e7addc6ded747b8dbaa601934b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ExclusionSubsetFilterTable &gt; &gt;</type>
      <name>ExclusionSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a8832019607f1602f711e0ada37ee28a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListSubsetFilterTable &gt; &gt;</type>
      <name>ListSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aef134c322be708367b347ef3e08c6439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListSubsetFilterTable &gt; &gt;</type>
      <name>ListSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3821749f040b5c070171f00c6d4c06a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumRestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>MinimumRestraintScoreSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a60a525009d7f2cb77fa2d2d552e05f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumRestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>MinimumRestraintScoreSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a23fb3c45423ca909605594707d6a2faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairListSubsetFilterTable &gt; &gt;</type>
      <name>PairListSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0a9ebb805a72c557c4481ec09aab8bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairListSubsetFilterTable &gt; &gt;</type>
      <name>PairListSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a355b39d20269fad4129e381c39a1c316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>RestraintScoreSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>afcd7d1fe94aec4a8ab6b789675ff3491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>RestraintScoreSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a82eb3da79770425986ea95ecfa5dddf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SubsetFilter &gt; &gt;</type>
      <name>SubsetFilters</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ad37158e525386e6eebdc98fd90440ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SubsetFilter &gt; &gt;</type>
      <name>SubsetFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aedd44a20f4816cc0bbb1dc1dd926ade3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SubsetFilterTable &gt; &gt;</type>
      <name>SubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a350dd16b16823a214a8863310023ed03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SubsetFilterTable &gt; &gt;</type>
      <name>SubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ae2d67db3607ca47b9ec0e8a2c79ddaad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>subset_graphs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>subset__graphs_8h</filename>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="ScoringFunction_8h" name="ScoringFunction.h" local="no" imported="no">IMP/ScoringFunction.h</includes>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="no" imported="no">IMP/display/declare_Geometry.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>InteractionGraph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a1b3e02fbad93dad74459f871a1bb0dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>SubsetGraph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a74be81f3536006c91216322e4af87a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SubsetGraph</type>
      <name>get_junction_tree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>af4ecbb31cd9704335911eef3d583a754</anchor>
      <arglist>(const InteractionGraph &amp;ig)</arglist>
    </member>
    <member kind="function">
      <type>SubsetGraph</type>
      <name>get_restraint_graph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab0eb2c05d5eb0c9e64fba8c85011ad01</anchor>
      <arglist>(ScoringFunctionAdaptor rs, const ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>Subsets</type>
      <name>get_subsets</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a451bc898770bf9a620fa517ff74d4ef6</anchor>
      <arglist>(const SubsetGraph &amp;g)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>MergeTree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a38647c3c174545c068db94b01a3a06c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>InteractionGraph</type>
      <name>get_interaction_graph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a7745ea629841a6a4475211ba0a134b44</anchor>
      <arglist>(ScoringFunctionAdaptor rs, const ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_interaction_graph_geometry</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a6ffff7ad684ef09edb410ae5bc69ffea</anchor>
      <arglist>(const InteractionGraph &amp;ig)</arglist>
    </member>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_subset_graph_geometry</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a65e48f223bd909759754f61224256b21</anchor>
      <arglist>(const SubsetGraph &amp;ig)</arglist>
    </member>
    <member kind="function">
      <type>MergeTree</type>
      <name>get_merge_tree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a52b8de54766ce0eeaece21adff2c9bd1</anchor>
      <arglist>(ScoringFunctionAdaptor input, const ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>MergeTree</type>
      <name>get_merge_tree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a4253062f182189cdac543e96eaf8633f</anchor>
      <arglist>(const SubsetGraph &amp;junction_tree)</arglist>
    </member>
    <member kind="function">
      <type>MergeTree</type>
      <name>get_balanced_merge_tree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>acab55ab855b7cff0e33d25fd2056067a</anchor>
      <arglist>(const SubsetGraph &amp;junction_tree)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>subset_scores.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>subset__scores_8h</filename>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="Slice_8h" name="Slice.h" local="yes" imported="no">Slice.h</includes>
    <includes id="domino_2utility_8h" name="domino/utility.h" local="yes" imported="no">utility.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="cache_8h" name="cache.h" local="no" imported="no">IMP/cache.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::domino::RestraintCache</class>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
  </compound>
  <compound kind="file">
    <name>SubsetMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SubsetMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="yes" imported="no">MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::SubsetMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Surface.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>Surface_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="no" imported="no">IMP/display/primitive_geometries.h</includes>
    <includes id="Plane3D_8h" name="Plane3D.h" local="no" imported="no">IMP/algebra/Plane3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="no" imported="no">IMP/algebra/Segment3D.h</includes>
    <includes id="Cylinder3D_8h" name="Cylinder3D.h" local="no" imported="no">IMP/algebra/Cylinder3D.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::core::LateralSurfaceConstraint</class>
    <class kind="class">IMP::core::Surface</class>
    <class kind="class">IMP::core::SurfaceGeometry</class>
    <class kind="class">IMP::core::SurfaceGeometryConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceGeometry &gt; &gt;</type>
      <name>SurfaceGeometries</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab239e7ccf64beff87984f837e9708867</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceGeometry &gt; &gt;</type>
      <name>SurfaceGeometriesTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a47b8042ff5a42989b9c16dc00fd4386d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceGeometryConstraint &gt; &gt;</type>
      <name>SurfaceGeometryConstraints</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab1e6dcec6befdf55ba997dafbc78a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceGeometryConstraint &gt; &gt;</type>
      <name>SurfaceGeometryConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a786d774d9f3b8f1b2dd8a9baabc22ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SurfaceGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a1713078e0a0ce8c3fb525af366bb71a5</anchor>
      <arglist>(const Surface s, std::string name=std::string(&quot;SurfaceGeometry%1%&quot;))</arglist>
    </member>
    <member kind="function">
      <type>SurfaceGeometry *</type>
      <name>get_constrained_surface_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa4af8ca0fe605b70667023285eccf34d</anchor>
      <arglist>(const Surface s, std::string name=&quot;SurfaceGeometry%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_depth</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a75ddddcaa7bc977a250b60f266cd39ec</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_depth</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a871feee8cd80fe860602685979bbb5f2</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af9c67a7fc68dd22fa3f7e685ff7e77b9</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6392a6cdb5d044f09949dd87846de2fa</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aca45b7f82466b871a7a2772559b2e121</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a2de8a0a4e81ff897fdf4a8741be335e1</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>surface_distance_pair_score_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>surface__distance__pair__score__macros_8h</filename>
    <includes id="score__functor_2SurfaceDistancePairScore_8h" name="score_functor/SurfaceDistancePairScore.h" local="yes" imported="no">SurfaceDistancePairScore.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_FUNCTOR_SURFACE_DISTANCE_PAIR_SCORE</name>
      <anchorfile>surface__distance__pair__score__macros_8h.html</anchorfile>
      <anchor>ad671e3d56f925673086041c1a1a3578e</anchor>
      <arglist>(Name, PName, Functor, Args, PassArgs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/SurfaceDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2SurfaceDistancePairScore_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="yes" imported="no">Surface.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="UnaryFunctionEvaluate_8h" name="UnaryFunctionEvaluate.h" local="no" imported="no">IMP/score_functor/UnaryFunctionEvaluate.h</includes>
    <includes id="PointToSphereDistance_8h" name="PointToSphereDistance.h" local="no" imported="no">IMP/score_functor/PointToSphereDistance.h</includes>
    <includes id="Shift_8h" name="Shift.h" local="no" imported="no">IMP/score_functor/Shift.h</includes>
    <includes id="score__functor_2Harmonic_8h" name="score_functor/Harmonic.h" local="no" imported="no">IMP/score_functor/Harmonic.h</includes>
    <includes id="score__functor_2HarmonicLowerBound_8h" name="score_functor/HarmonicLowerBound.h" local="no" imported="no">IMP/score_functor/HarmonicLowerBound.h</includes>
    <includes id="score__functor_2HarmonicUpperBound_8h" name="score_functor/HarmonicUpperBound.h" local="no" imported="no">IMP/score_functor/HarmonicUpperBound.h</includes>
    <includes id="surface__distance__pair__score__macros_8h" name="surface_distance_pair_score_macros.h" local="no" imported="no">IMP/score_functor/surface_distance_pair_score_macros.h</includes>
    <class kind="class">IMP::core::HarmonicSurfaceDepthPairScore</class>
    <class kind="class">IMP::core::HarmonicSurfaceDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicSurfaceHeightPairScore</class>
    <class kind="class">IMP::core::SoftSubSurfacePairScore</class>
    <class kind="class">IMP::core::SoftSuperSurfacePairScore</class>
    <class kind="class">IMP::core::SurfaceDepthPairScore</class>
    <class kind="class">IMP::core::SurfaceDistancePairScore</class>
    <class kind="class">IMP::core::SurfaceHeightPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>score_functor/SurfaceDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>score__functor_2SurfaceDistancePairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::score_functor::SurfaceDepthPairScore</class>
    <class kind="class">IMP::score_functor::SurfaceDistancePairScore</class>
    <class kind="class">IMP::score_functor::SurfaceHeightPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SurfaceMover_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">IMP/core/Surface.h</includes>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::core::SurfaceMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceShellDensityMap.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>SurfaceShellDensityMap_8h</filename>
    <includes id="exp_8h" name="exp.h" local="yes" imported="no">exp.h</includes>
    <includes id="SampledDensityMap_8h" name="SampledDensityMap.h" local="yes" imported="no">SampledDensityMap.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <includes id="def_8h" name="def.h" local="yes" imported="no">def.h</includes>
    <class kind="class">IMP::em::SurfaceShellDensityMap</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceShellDensityMap &gt; &gt;</type>
      <name>SurfaceShellDensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3a6e4ca91c6a06603dd1d379a62bda42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceShellDensityMap &gt; &gt;</type>
      <name>SurfaceShellDensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac9a5ef2e476985ca051d711116321602</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SurfaceSymmetryConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SurfaceSymmetryConstraint_8h</filename>
    <includes id="Surface_8h" name="Surface.h" local="no" imported="no">IMP/core/Surface.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <class kind="class">IMP::core::SurfaceSymmetryConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>SurfaceTetheredChain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>SurfaceTetheredChain_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::core::SurfaceTetheredChain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>swap_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>swap__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_SWAP_MEMBER</name>
      <anchorfile>swap__macros_8h.html</anchorfile>
      <anchor>a6b85b07e6542cccc472616e90c990e22</anchor>
      <arglist>(var_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>swig_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>swig__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_NO_SWIG</name>
      <anchorfile>swig__macros_8h.html</anchorfile>
      <anchor>abcb6aa30b6f6f97083fe0e7e4f9d61be</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Switching.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>Switching_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <class kind="class">IMP::isd::Switching</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Symmetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>Symmetric_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi::Symmetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>/Symmetric.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>_2Symmetric_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi1::Symmetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>symmetric_multifit.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>symmetric__multifit_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <member kind="function">
      <type>void</type>
      <name>do_all_fitting</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a7b47b0bbc4f3260cde8572faf24b7187</anchor>
      <arglist>(const std::string param_filename, const std::string chimera_filename=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/symmetry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2symmetry_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Reflection3D_8h" name="Reflection3D.h" local="no" imported="no">IMP/algebra/Reflection3D.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">rigid_bodies.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="yes" imported="no">MonteCarloMover.h</includes>
    <class kind="class">IMP::core::Reference</class>
    <class kind="class">IMP::core::TransformationAndReflectionSymmetry</class>
    <class kind="class">IMP::core::TransformationSymmetry</class>
    <class kind="class">IMP::core::TransformationSymmetryMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>symmetry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>symmetry_8h</filename>
    <includes id="symmetry_2BallMover_8h" name="symmetry/BallMover.h" local="no" imported="no">IMP/symmetry/BallMover.h</includes>
    <includes id="symmetry_2RigidBodyMover_8h" name="symmetry/RigidBodyMover.h" local="no" imported="no">IMP/symmetry/RigidBodyMover.h</includes>
  </compound>
  <compound kind="file">
    <name>symmetry_utils.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>symmetry__utils_8h</filename>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="CnSymmAxisDetector_8h" name="CnSymmAxisDetector.h" local="yes" imported="no">CnSymmAxisDetector.h</includes>
    <includes id="MolCnSymmAxisDetector_8h" name="MolCnSymmAxisDetector.h" local="no" imported="no">IMP/cnmultifit/MolCnSymmAxisDetector.h</includes>
    <includes id="rigid__fitting_8h" name="rigid_fitting.h" local="no" imported="no">IMP/em/rigid_fitting.h</includes>
    <includes id="LeavesRefiner_8h" name="LeavesRefiner.h" local="no" imported="no">IMP/core/LeavesRefiner.h</includes>
    <includes id="fitting__solutions__reader__writer_8h" name="fitting_solutions_reader_writer.h" local="no" imported="no">IMP/multifit/fitting_solutions_reader_writer.h</includes>
    <includes id="AlignSymmetric_8h" name="AlignSymmetric.h" local="yes" imported="no">AlignSymmetric.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <member kind="function">
      <type>float</type>
      <name>cn_symm_score</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a957e7710eb8a161975d25f3549824df8</anchor>
      <arglist>(atom::Hierarchies mhs, const algebra::Vector3D &amp;center, const algebra::Vector3D &amp;direction, int symm_deg)</arglist>
    </member>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>fit_cn_assembly</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a6067aedfd378547038d133f84bb820e3</anchor>
      <arglist>(atom::Hierarchies mhs, int dn_symm_deg, em::DensityMap *dmap, float threshold, const AlignSymmetric &amp;aligner, bool sample_translation=false, bool fine_rotational_sampling=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_cn_rmsd</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a6955cc359b815de543af54b62dcaf87d</anchor>
      <arglist>(atom::Hierarchies mh1, atom::Hierarchies mh2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TableRefiner.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TableRefiner_8h</filename>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::core::TableRefiner</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>TALOSRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>TALOSRestraint_8h</filename>
    <includes id="Scale_8h" name="Scale.h" local="yes" imported="no">Scale.h</includes>
    <includes id="vonMisesSufficient_8h" name="vonMisesSufficient.h" local="yes" imported="no">vonMisesSufficient.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <class kind="class">IMP::isd::TALOSRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>TAMDCentroid.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>TAMDCentroid_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="CentroidOfRefined_8h" name="CentroidOfRefined.h" local="no" imported="no">IMP/core/CentroidOfRefined.h</includes>
    <includes id="Diffusion_8h" name="Diffusion.h" local="no" imported="no">IMP/atom/Diffusion.h</includes>
    <class kind="class">IMP::atom::TAMDCentroid</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>TAMDParticle.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>TAMDParticle_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="Diffusion_8h" name="Diffusion.h" local="no" imported="no">IMP/atom/Diffusion.h</includes>
    <class kind="class">IMP::atom::TAMDParticle</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
  </compound>
  <compound kind="file">
    <name>test_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/test/</path>
    <filename>test__macros_8h</filename>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TEST_EQUAL</name>
      <anchorfile>test__macros_8h.html</anchorfile>
      <anchor>ac9e926691f7d65558cfc4ab8f34c6d93</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TEST_GREATER_THAN</name>
      <anchorfile>test__macros_8h.html</anchorfile>
      <anchor>a15b290538e08a58a0743b55ac4ae58f1</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TEST_LESS_THAN</name>
      <anchorfile>test__macros_8h.html</anchorfile>
      <anchor>aea6c8f21193d0fe879716cb7ce64d598</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TEST_TRUE</name>
      <anchorfile>test__macros_8h.html</anchorfile>
      <anchor>a8f64d56eb901701e68aad43ed67c1fbe</anchor>
      <arglist>(a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>thread__macros_8h</filename>
    <includes id="threads_8h" name="threads.h" local="yes" imported="no">threads.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="yes" imported="no">log_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_OMP_PRAGMA</name>
      <anchorfile>thread__macros_8h.html</anchorfile>
      <anchor>a23be334270a8da2ae521fa70a57376a9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TASK</name>
      <anchorfile>thread__macros_8h.html</anchorfile>
      <anchor>aecd56bdbfe4f383cff7491cf607735f5</anchor>
      <arglist>(privatev, action, name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TASK_SHARED</name>
      <anchorfile>thread__macros_8h.html</anchorfile>
      <anchor>a090d3ed0ff015d85e838a4db4c5ce39f</anchor>
      <arglist>(privatev, sharedv, action, name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_THREADS</name>
      <anchorfile>thread__macros_8h.html</anchorfile>
      <anchor>a0f48de197b75f8028442aac895283e5a</anchor>
      <arglist>(variables, action)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>threads.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>threads_8h</filename>
    <includes id="raii__macros_8h" name="raii_macros.h" local="yes" imported="no">raii_macros.h</includes>
    <class kind="class">IMP::SetNumberOfThreads</class>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_threads</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a54939eb501f043baed952ab94caf8874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_threads</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3b278436c9d9ad48a13694bb38780a26</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TIFFImageReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>TIFFImageReaderWriter_8h</filename>
    <includes id="ImageReaderWriter_8h" name="ImageReaderWriter.h" local="yes" imported="no">IMP/em2d/ImageReaderWriter.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <class kind="class">IMP::em2d::TIFFImageReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em2d</namespace>
  </compound>
  <compound kind="file">
    <name>TiltSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>TiltSingletonScore_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::spb::TiltSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>ToroidalPoreSurfaceDepthPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>ToroidalPoreSurfaceDepthPairScore_8h</filename>
    <includes id="SlabWithToroidalPore_8h" name="SlabWithToroidalPore.h" local="yes" imported="no">SlabWithToroidalPore.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">IMP/core/XYZR.h</includes>
    <class kind="class">IMP::npc::ToroidalPoreSurfaceDepthPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npc</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ToroidalPoreSurfaceDepthPairScore &gt; &gt;</type>
      <name>ToroidalPoreSurfaceDepthPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a098a83361d3fa51f50695973f95be4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ToroidalPoreSurfaceDepthPairScore &gt; &gt;</type>
      <name>ToroidalPoreSurfaceDepthPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a5b8d58ae565ded6ba08b432266721a8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Torus3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Torus3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">Rotation3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="yes" imported="no">Segment3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <class kind="class">IMP::algebra::Torus3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Torus3D &gt;</type>
      <name>Torus3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee8083e43cb27052853b54d8ce1ce8f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>Transform_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <class kind="class">IMP::core::Transform</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>Transformation2D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Transformation2D_8h</filename>
    <includes id="Vector2D_8h" name="Vector2D.h" local="yes" imported="no">Vector2D.h</includes>
    <includes id="Rotation2D_8h" name="Rotation2D.h" local="yes" imported="no">Rotation2D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Transformation2D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Transformation2D &gt;</type>
      <name>Transformation2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aae800dde5dbb7b2b5b94d411f77bb717</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5d83cbee6a0e0af8738adf030f364f6d</anchor>
      <arglist>(const Transformation2D &amp;a, const Transformation2D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_identity_transformation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aea1eef3d3cd259593cb46677dc510c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_rotation_about_point</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae3383dcf150f2e7d76498fecbc55dde9</anchor>
      <arglist>(const Vector2D &amp;point, const Rotation2D &amp;rotation)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transformation3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Transformation3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Line3D_8h" name="Line3D.h" local="yes" imported="no">Line3D.h</includes>
    <includes id="Rotation3D_8h" name="Rotation3D.h" local="yes" imported="no">Rotation3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <class kind="class">IMP::algebra::Transformation3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Transformation3D &gt;</type>
      <name>Transformation3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3819c80ac5ca00fa6f0ca5e6a67370c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af2121b116324f67ee007e4aef258555c</anchor>
      <arglist>(const Transformation3D &amp;a, const Transformation3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee0ec0159d4e39827517da06b6e354a5</anchor>
      <arglist>(const Transformation3D &amp;TA, const Transformation3D &amp;TB, const Transformation3DAdjoint &amp;DTC, Transformation3DAdjoint *DTA, Transformation3DAdjoint *DTB)</arglist>
    </member>
    <member kind="function">
      <type>ComposeTransformation3DAdjoint</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7ba58ded833da82158e5830aa9ffb6b2</anchor>
      <arglist>(const Transformation3D &amp;TA, const Transformation3D &amp;TB, const Transformation3DAdjoint &amp;DTC)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_identity_transformation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5c675979c1dfb0467246764a7e1e2cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_random_local_transformation</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1b3cdecd88bb99e7cf34d42117199775</anchor>
      <arglist>(Vector3D origin, double max_translation=5., double max_angle_in_rad=0.26)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_rotation_about_point</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a07063149bf0d6fd24bd5a1116d6b5115</anchor>
      <arglist>(const Vector3D &amp;point, const Rotation3D &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_transformation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a95b9c2466fd2ba29cddff88efc887aff</anchor>
      <arglist>(const Transformation2D &amp;t2d)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_transformed</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aec3bea2d24fbbf621216822517ca1593</anchor>
      <arglist>(const BoundingBoxD&lt; 3 &gt; &amp;bb, const Transformation3D &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TransformationJoint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>TransformationJoint_8h</filename>
    <includes id="KinematicNode_8h" name="KinematicNode.h" local="no" imported="no">IMP/kinematics/KinematicNode.h</includes>
    <includes id="Joint_8h" name="Joint.h" local="no" imported="no">IMP/kinematics/Joint.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <class kind="class">IMP::kinematics::TransformationJoint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TransformationJoint &gt; &gt;</type>
      <name>TransformationJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ab3156e2951a1c36f5b08d663a4972b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TransformationJoint &gt; &gt;</type>
      <name>TransformationJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a95e6ac5b502f174aced44a97290d2711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TransformationSymmetry.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>TransformationSymmetry_8h</filename>
    <includes id="SingletonModifier_8h" name="SingletonModifier.h" local="no" imported="no">IMP/SingletonModifier.h</includes>
    <includes id="Reflection3D_8h" name="Reflection3D.h" local="no" imported="no">IMP/algebra/Reflection3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">IMP/core/XYZ.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="yes" imported="no">IMP/core/rigid_bodies.h</includes>
    <class kind="class">IMP::spb::TransformationSymmetry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>TransformedDistancePairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TransformedDistancePairScore_8h</filename>
    <includes id="generic_8h" name="generic.h" local="no" imported="no">IMP/generic.h</includes>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::core::TransformedDistancePairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>TransformMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>TransformMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <class kind="class">IMP::pmi::TransformMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>/TransformMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>_2TransformMover_8h</filename>
    <includes id="MonteCarlo_8h" name="MonteCarlo.h" local="no" imported="no">IMP/core/MonteCarlo.h</includes>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <class kind="class">IMP::pmi1::TransformMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>Transporting.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>Transporting_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::npctransport::Transporting</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="file">
    <name>Triangle3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Triangle3D_8h</filename>
    <includes id="Vector3D_8h" name="Vector3D.h" local="yes" imported="no">Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="yes" imported="no">Transformation3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="yes" imported="no">ReferenceFrame3D.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="algebra_2constants_8h" name="algebra/constants.h" local="yes" imported="no">constants.h</includes>
    <class kind="class">IMP::algebra::Triangle3D</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; Triangle3D &gt;</type>
      <name>Triangle3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2e7bd89b266aa9dc56247011836078d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_colinear</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7db2737802a80272f10a9740ec9b3a71</anchor>
      <arglist>(const Vector3D &amp;p1, const Vector3D &amp;p2, const Vector3D &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>Triangle3D</type>
      <name>get_largest_triangle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3619d60308d5ac5c78e601d1e6426dee</anchor>
      <arglist>(const Vector3Ds &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_transformation_from_first_triangle_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a40b9b1290fa21102bda8255d8eb3c4d8</anchor>
      <arglist>(Triangle3D first_tri, Triangle3D second_tri)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triplet_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>triplet__macros_8h</filename>
    <includes id="container__macros_8h" name="container_macros.h" local="yes" imported="no">container_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_INDEX_TRIPLET_DERIVATIVE_MODIFIER</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>a1ebb98a6173de3b89190125c17d7c638</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TRIPLET_CONTAINER_METHODS</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>a71096ede689f6ed3fdf3e9e7a4f7be5f</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TRIPLET_DERIVATIVE_MODIFIER</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>adae780bd17f67d3e0fee3b80fa1a2512</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TRIPLET_MODIFIER_METHODS</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>ac15653e43baa657ebfe36c260509e459</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TRIPLET_PREDICATE_METHODS</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>a99e8d5e1e4c515f72601196dda7297ad</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TRIPLET_SCORE_METHODS</name>
      <anchorfile>triplet__macros_8h.html</anchorfile>
      <anchor>ad5f63a39861d847d5e2b6c538125e83d</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triplet_predicates.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>triplet__predicates_8h</filename>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="TripletPredicate_8h" name="TripletPredicate.h" local="no" imported="no">IMP/TripletPredicate.h</includes>
    <includes id="triplet__macros_8h" name="triplet_macros.h" local="no" imported="no">IMP/triplet_macros.h</includes>
    <class kind="class">IMP::core::AllSameTripletPredicate</class>
    <class kind="class">IMP::core::CoinFlipTripletPredicate</class>
    <class kind="class">IMP::core::ConstantTripletPredicate</class>
    <class kind="class">IMP::core::OrderedTypeTripletPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeTripletPredicate</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>TripletConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TripletConstraint_8h</filename>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="no" imported="no">IMP/TripletModifier.h</includes>
    <includes id="TripletDerivativeModifier_8h" name="TripletDerivativeModifier.h" local="no" imported="no">IMP/TripletDerivativeModifier.h</includes>
    <class kind="class">IMP::core::TripletConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>TripletContainer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>TripletContainer_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="yes" imported="no">Particle.h</includes>
    <includes id="container__base_8h" name="container_base.h" local="yes" imported="no">container_base.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="ref__counted__macros_8h" name="ref_counted_macros.h" local="no" imported="no">IMP/ref_counted_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <class kind="class">IMP::TripletContainer</class>
    <class kind="class">IMP::TripletContainerAdaptor</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>TripletContainerSet.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>TripletContainerSet_8h</filename>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="container__macros_8h" name="container_macros.h" local="no" imported="no">IMP/container_macros.h</includes>
    <includes id="scoped_8h" name="scoped.h" local="no" imported="no">IMP/scoped.h</includes>
    <class kind="class">IMP::container::TripletContainerSet</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>TripletContainerStatistics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>TripletContainerStatistics_8h</filename>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="ScoreState_8h" name="ScoreState.h" local="no" imported="no">IMP/ScoreState.h</includes>
    <class kind="class">IMP::container::TripletContainerStatistics</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
  </compound>
  <compound kind="file">
    <name>TripletDerivativeModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>TripletDerivativeModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="yes" imported="no">TripletModifier.h</includes>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>TripletModifier.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>TripletModifier_8h</filename>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::TripletModifier</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>TripletPredicate.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>TripletPredicate_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::TripletPredicate</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>TripletRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TripletRestraint_8h</filename>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <class kind="class">IMP::core::TripletRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>TripletsConstraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>TripletsConstraint_8h</filename>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="no" imported="no">IMP/TripletModifier.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="no" imported="no">IMP/Constraint.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <class kind="class">IMP::container::TripletsConstraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsConstraint &gt; &gt;</type>
      <name>TripletsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a44ab040927300f18702d1ca5bbc9c2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsConstraint &gt; &gt;</type>
      <name>TripletsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a74cb9a9a72868f91c3516557be05ba63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TripletScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>TripletScore_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="DerivativeAccumulator_8h" name="DerivativeAccumulator.h" local="yes" imported="no">DerivativeAccumulator.h</includes>
    <includes id="utility__macros_8h" name="utility_macros.h" local="no" imported="no">IMP/utility_macros.h</includes>
    <includes id="model__object__helpers_8h" name="model_object_helpers.h" local="yes" imported="no">model_object_helpers.h</includes>
    <class kind="class">IMP::TripletScore</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>TripletsOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>TripletsOptimizerState_8h</filename>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="TripletModifier_8h" name="TripletModifier.h" local="no" imported="no">IMP/TripletModifier.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::container::TripletsOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsOptimizerState &gt; &gt;</type>
      <name>TripletsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aac86e6c64651f94c12c75973726678f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsOptimizerState &gt; &gt;</type>
      <name>TripletsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ccad8a4528d4eb9ae4bcf13e9a0bdb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TripletsRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>TripletsRestraint_8h</filename>
    <includes id="TripletContainer_8h" name="TripletContainer.h" local="no" imported="no">IMP/TripletContainer.h</includes>
    <includes id="TripletScore_8h" name="TripletScore.h" local="no" imported="no">IMP/TripletScore.h</includes>
    <class kind="class">IMP::container::TripletsRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::container</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsRestraint &gt; &gt;</type>
      <name>TripletsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aefbae684bced6abf914392580cbfc08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsRestraint &gt; &gt;</type>
      <name>TripletsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a4c35a3b8c05ef10bc1682fe34769f62c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TruncatedHarmonic.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TruncatedHarmonic_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="no" imported="no">IMP/object_macros.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <class kind="class">IMP::core::TruncatedHarmonic</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; BOTH &gt;</type>
      <name>TruncatedHarmonicBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6ca15966812fbbe341b93c2d0d867662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; LOWER &gt;</type>
      <name>TruncatedHarmonicLowerBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a252abc8a6bb323bd047a0305923d5e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; UPPER &gt;</type>
      <name>TruncatedHarmonicUpperBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a34b5eb10143f75cf67fb8de298cfdd50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tuple_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>tuple__macros_8h</filename>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <includes id="Showable_8h" name="Showable.h" local="yes" imported="no">Showable.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">hash.h</includes>
    <includes id="hash__macros_8h" name="hash_macros.h" local="yes" imported="no">hash_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="yes" imported="no">comparison_macros.h</includes>
    <includes id="swig__macros_8h" name="swig_macros.h" local="yes" imported="no">swig_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TUPLE_VALUE</name>
      <anchorfile>tuple__macros_8h.html</anchorfile>
      <anchor>a8b973406e11839bed10c8ea3669f4109</anchor>
      <arglist>(Name, type_name, data_name, var_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TwoStateGoModelRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>TwoStateGoModelRestraint_8h</filename>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">IMP/Restraint.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <class kind="class">IMP::spb::TwoStateGoModelRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>Typed.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>Typed_8h</filename>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::core::Typed</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="typedef">
      <type>Key&lt; 34897493 &gt;</type>
      <name>ParticleType</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a5f886ae0b4b72e1f435a926565e42efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleType &gt;</type>
      <name>ParticleTypes</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6ec72f350cb843adfad85e11398bbdfe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typedefs.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>typedefs_8h</filename>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="typedef">
      <type>std::pair&lt; IMP::core::ParticleType, IMP::core::ParticleType &gt;</type>
      <name>InteractionType</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5611f4b5403f1c3223c116933fe38a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; InteractionType &gt;</type>
      <name>InteractionTypes</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a4d47850ed928d475a285ee51d072b7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>InteractionType</type>
      <name>make_ordered_interaction_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa28a3ebab79cfdf4c82ee9207e35f09a</anchor>
      <arglist>(IMP::core::ParticleType t0, IMP::core::ParticleType t1)</arglist>
    </member>
    <member kind="function">
      <type>InteractionType</type>
      <name>make_unordered_interaction_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1ff4e67d99d365a9182a7cfe54c2ffe2</anchor>
      <arglist>(IMP::core::ParticleType t0, IMP::core::ParticleType t1)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ParticleIndexPair</type>
      <name>make_unordered_particle_index_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a87e4abb800a27fa45024be5679f60084</anchor>
      <arglist>(IMP::ParticleIndex pi0, IMP::ParticleIndex pi1)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>make_unordered_particle_index_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a795fe17c17d57c27a5b28f7a9d6d02a3</anchor>
      <arglist>(ParticleIndexPair pip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TypedPairScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>TypedPairScore_8h</filename>
    <includes id="PairScore_8h" name="PairScore.h" local="no" imported="no">IMP/PairScore.h</includes>
    <includes id="pair__macros_8h" name="pair_macros.h" local="no" imported="no">IMP/pair_macros.h</includes>
    <class kind="class">IMP::core::TypedPairScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>types_8h</filename>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <includes id="object__macros_8h" name="object_macros.h" local="yes" imported="no">object_macros.h</includes>
    <includes id="hash_8h" name="hash.h" local="no" imported="no">IMP/hash.h</includes>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>DerivativePair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a854b275d82ceb4619b1ab0740e96c977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativePair &gt;</type>
      <name>DerivativePairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3c3b84e32d70ea396e45beb9b65a8b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativePairs &gt;</type>
      <name>DerivativePairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af900f1d7f756cd5c7a11251b40793e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Float</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a32655edcba715e26c441239e8f04a701</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>FloatPair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aeae0e87d16ee55f5995d2706a97fc10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatPair &gt;</type>
      <name>FloatPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aef01d43a7045a69ea65ebe1a96cf51f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatPairs &gt;</type>
      <name>FloatPairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aed9bdf623f3c9f9146e849ec12ed11a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Float, Float &gt;</type>
      <name>FloatRange</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af43013d43362cce713dab77df9d2bca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatRange &gt;</type>
      <name>FloatRanges</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0a4870a7b13e75ff394291580944a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatRanges &gt;</type>
      <name>FloatRangess</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a33b44f38e2a1dab551b81cd347675d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Float &gt;</type>
      <name>Floats</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8680e7baae03e4117e30d61224f746aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Floats &gt;</type>
      <name>FloatsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aefca40502016467478c4ef5cfd02f7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatsList &gt;</type>
      <name>FloatsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa631dfe87513a670ae89a7f1fc83e93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Floats &gt;</type>
      <name>Floatss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ade406c9125b0a3e0cf92ab49687debb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Int</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3dd7827c9a7c660e058fb26295769b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntPair &gt;</type>
      <name>IntPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6eec087a3175f42eef3849b57c4bc396</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntPairs &gt;</type>
      <name>IntPairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a11122233ab841881f0060d2475199337</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntRange &gt;</type>
      <name>IntRanges</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a20e1ae24d01974a42950bec6eaf9f53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntRanges &gt;</type>
      <name>IntRangess</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a553ad39c28edd74b3087077a0901fe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Int &gt;</type>
      <name>Ints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a476bb33361c6420aabbf922653ae5d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ints &gt;</type>
      <name>IntsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a252b87270d8572cd8649844ff278ea94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntsList &gt;</type>
      <name>IntsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab0766932f7700be80ac3e667037fdf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ints &gt;</type>
      <name>Intss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aaa6f79d156464a3dbbe27158b2b7a264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Object &gt; &gt;</type>
      <name>Objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a592adb4d26788523152de9ed6454c321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Object &gt; &gt;</type>
      <name>ObjectsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9cc4edf42ed5d3afbaeb8c1cb17910c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>String</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a60f8fe8b08d17690d68edcb43dbdc9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; String &gt;</type>
      <name>Strings</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>addce6ed593d3f02434356e99fd3dbbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Strings &gt;</type>
      <name>StringsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afce85dce99836e04101552e16c56a442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; StringsList &gt;</type>
      <name>StringsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a96dee74affb84a95ee2da66828c27cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Strings &gt;</type>
      <name>Stringss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8e6cd04b233c86f95a4416f4433842e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnaryFunction.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>UnaryFunction_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::UnaryFunction</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; UnaryFunction &gt; &gt;</type>
      <name>UnaryFunctions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4890405dc96ab89e32cec721c7b43803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; UnaryFunction &gt; &gt;</type>
      <name>UnaryFunctionsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a70d42fccbc1ed2236d24787c283ac82a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnaryFunctionEvaluate.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>UnaryFunctionEvaluate_8h</filename>
    <includes id="Score_8h" name="Score.h" local="yes" imported="no">Score.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="no" imported="no">IMP/value_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <class kind="class">IMP::score_functor::UnaryFunctionEvaluate</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>Uncertainty.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>Uncertainty_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi::Uncertainty</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
  </compound>
  <compound kind="file">
    <name>/Uncertainty.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>_2Uncertainty_8h</filename>
    <includes id="PairContainer_8h" name="PairContainer.h" local="no" imported="no">IMP/PairContainer.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <class kind="class">IMP::pmi1::Uncertainty</class>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
  </compound>
  <compound kind="file">
    <name>Undecorator.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Undecorator_8h</filename>
    <includes id="base__types_8h" name="base_types.h" local="yes" imported="no">base_types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="particle__index_8h" name="particle_index.h" local="yes" imported="no">particle_index.h</includes>
    <class kind="class">IMP::Undecorator</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Undecorator &gt; &gt;</type>
      <name>Undecorators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a793c6b69a2c579c202b3c1331f1a1ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Undecorator &gt; &gt;</type>
      <name>UndecoratorsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a104935166ae9148607c60d7601679235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UniformBackboneSampler.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>UniformBackboneSampler_8h</filename>
    <includes id="DOFsSampler_8h" name="DOFsSampler.h" local="yes" imported="no">DOFsSampler.h</includes>
    <includes id="revolute__joints_8h" name="revolute_joints.h" local="yes" imported="no">revolute_joints.h</includes>
    <class kind="class">IMP::kinematics::UniformBackboneSampler</class>
    <namespace>IMP</namespace>
    <namespace>IMP::kinematics</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; UniformBackboneSampler &gt; &gt;</type>
      <name>UniformBackboneSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ae1bfb4d7de7b288b03f07dc58a9e1079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; UniformBackboneSampler &gt; &gt;</type>
      <name>UniformBackboneSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3ec9c5e1c73578d3cc66dc0337d43eed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UniformBoundedRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>UniformBoundedRestraint_8h</filename>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="spb_2ISDRestraint_8h" name="spb/ISDRestraint.h" local="no" imported="no">IMP/spb/ISDRestraint.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="yes" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::spb::UniformBoundedRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::spb</namespace>
  </compound>
  <compound kind="file">
    <name>UniformPrior.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>UniformPrior_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::UniformPrior</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>UnitSimplexD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>UnitSimplexD_8h</filename>
    <includes id="Triangle3D_8h" name="Triangle3D.h" local="no" imported="no">IMP/algebra/Triangle3D.h</includes>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="no" imported="no">IMP/algebra/GeometricPrimitiveD.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="no" imported="no">IMP/showable_macros.h</includes>
    <class kind="class">IMP::algebra::UnitSimplexBaseD</class>
    <class kind="class">IMP::algebra::UnitSimplexD</class>
    <class kind="class">IMP::algebra::UnitSimplexD&lt;-1 &gt;</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex1D &gt;</type>
      <name>UnitSimplex1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3bb771e655a7a6869588021104689b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex2D &gt;</type>
      <name>UnitSimplex2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a858e7134208fa382a861280e985c79e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex3D &gt;</type>
      <name>UnitSimplex3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3eda21d400d1405cbc0af4954c73e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex4D &gt;</type>
      <name>UnitSimplex4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a00ba27b1939270cded4d434ffaaf1d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex5D &gt;</type>
      <name>UnitSimplex5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a764bfd70494fee0cffb7da0346037386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex6D &gt;</type>
      <name>UnitSimplex6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af0521f7183db224daa6c923f0fc89bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplexKD &gt;</type>
      <name>UnitSimplexKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8471ee99bf049d6d6c2190c955f93b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_embedded_from_increasing</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa4da44bccd16cdd03d99be6dba3c9bb1</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_increasing_from_embedded</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad15dcdb7389932d61124924f60e2249c</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa359f8016971b4ea9ae8642f51490a9c</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_vertices</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab92aec57b46d729379791cdda2d5d9b6</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>univariate_functions.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>univariate__functions_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="Nuisance_8h" name="Nuisance.h" local="no" imported="no">IMP/isd/Nuisance.h</includes>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Switching_8h" name="Switching.h" local="no" imported="no">IMP/isd/Switching.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <class kind="class">IMP::isd::GeneralizedGuinierPorodFunction</class>
    <class kind="class">IMP::isd::Linear1DFunction</class>
    <class kind="class">IMP::isd::UnivariateFunction</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>util.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>util_8h</filename>
    <includes id="npctransport__proto_8fwd_8h" name="npctransport_proto.fwd.h" local="no" imported="no">IMP/npctransport/npctransport_proto.fwd.h</includes>
    <includes id="Typed_8h" name="Typed.h" local="no" imported="no">IMP/core/Typed.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="ReferenceFrame3D_8h" name="ReferenceFrame3D.h" local="no" imported="no">IMP/algebra/ReferenceFrame3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="typedefs_8h" name="typedefs.h" local="yes" imported="no">typedefs.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
    <member kind="function">
      <type>void</type>
      <name>copy_FGs_coordinates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6ccdfe974fc27d12b30cfa5eac2a2297</anchor>
      <arglist>(SimulationData const *src_sd, SimulationData *trg_sd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_hierarchy_reference_frame_recursive</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1b69574be5151ac787bd44f6f33d8383</anchor>
      <arglist>(Particle *src_p, Particle *trg_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_particle_reference_frame_if_applicable</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7def529ac221a63d72836659cfa0f3cf</anchor>
      <arglist>(Particle *src_p, Particle *trg_p)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_fg_bead_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9bbeb15848526f263aa2fe210f967d4b</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_fg_chain_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa1713e38f848886ade58226061fd4b04</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_floater_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a13962ff20dede35cfe7a189f37d5f09a</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_interaction_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a252b25512154db426b2ac42c5c96db8e</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::npctransport::InteractionType it)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_global_from_local_v3</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0affdade87f4dedc26d84d57faf2009e</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;local)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; unsigned int, unsigned int &gt;</type>
      <name>get_n_lost_and_gained</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>af98e287eada2ce07af699b66d4641e19</anchor>
      <arglist>(t_ordered_set old, t_ordered_set cur)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_non_optimizable_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5c9e777a69706ccc7d158f6dcfe50950</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_optimizable_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa2114c9f9168cf02dccc106844de85ec</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_particle_indexes</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aca539801adb3226e34f7e8c7598dd0b8</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_protobuf_configuration_from_text</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a20d9f367674ec1b9caf9b6772c311b84</anchor>
      <arglist>(std::string config_txt, std::string config_pb)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3Ds</type>
      <name>get_spheres_from_vectors</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aae1fad50867850b6ddc6349aa6ed1f21</anchor>
      <arglist>(V3iter first, V3iter last, double radius)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3Ds</type>
      <name>get_spheres_from_vectors</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>afcbf12f6b88328a9d1f5abd09a88daa4</anchor>
      <arglist>(algebra::Vector3Ds const &amp;vs, double radius)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; t_value, t_value &gt;</type>
      <name>make_unordered_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a236e868e3eec8e987dc65b352f7c8354</anchor>
      <arglist>(t_value v0, t_value v1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bayesianem/utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/bayesianem/</path>
    <filename>bayesianem_2utilities_8h</filename>
    <includes id="Gaussian3D_8h" name="Gaussian3D.h" local="yes" imported="no">IMP/algebra/Gaussian3D.h</includes>
    <includes id="grid__utility_8h" name="grid_utility.h" local="no" imported="no">IMP/algebra/grid_utility.h</includes>
    <includes id="em_8h" name="em.h" local="no" imported="no">IMP/em.h</includes>
    <includes id="isd_8h" name="isd.h" local="no" imported="no">IMP/isd.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::bayesianem</namespace>
    <member kind="function">
      <type>DensityGrid</type>
      <name>get_grid</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>af6d8a571066636cd36d4e067ad1a8dac</anchor>
      <arglist>(IMP::em::DensityMap *in)</arglist>
    </member>
    <member kind="function">
      <type>IMP::algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>a2b1cbbee53f6277e776c525a0ea8ff09</anchor>
      <arglist>(const IMP::atom::Selection &amp;s1, const IMP::atom::Selection &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pmi/utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>pmi_2utilities_8h</filename>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="no" imported="no">IMP/core/DistancePairScore.h</includes>
    <includes id="DistanceRestraint_8h" name="DistanceRestraint.h" local="no" imported="no">IMP/core/DistanceRestraint.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="Molecule_8h" name="Molecule.h" local="no" imported="no">IMP/atom/Molecule.h</includes>
    <includes id="Copy_8h" name="Copy.h" local="no" imported="no">IMP/atom/Copy.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="no" imported="no">IMP/atom/Selection.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi</namespace>
    <member kind="function">
      <type>RestraintSet *</type>
      <name>create_elastic_network</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a136fbe0c4b8cf1f652b8786ae448bc24</anchor>
      <arglist>(const Particles &amp;ps, Float dist_cutoff, Float strength)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_molecule_name_and_copy</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a29784187f69b015fd2d9ae278d862188</anchor>
      <arglist>(atom::Hierarchy h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pmi1/utilities.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>pmi1_2utilities_8h</filename>
    <includes id="core_2DistancePairScore_8h" name="core/DistancePairScore.h" local="no" imported="no">IMP/core/DistancePairScore.h</includes>
    <includes id="DistanceRestraint_8h" name="DistanceRestraint.h" local="no" imported="no">IMP/core/DistanceRestraint.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="Molecule_8h" name="Molecule.h" local="no" imported="no">IMP/atom/Molecule.h</includes>
    <includes id="Copy_8h" name="Copy.h" local="no" imported="no">IMP/atom/Copy.h</includes>
    <includes id="Selection_8h" name="Selection.h" local="no" imported="no">IMP/atom/Selection.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::pmi1</namespace>
    <member kind="function">
      <type>RestraintSet *</type>
      <name>create_elastic_network</name>
      <anchorfile>namespaceIMP_1_1pmi1.html</anchorfile>
      <anchor>a2995df7ccbc9bebba29bf2f879e92fc7</anchor>
      <arglist>(const Particles &amp;ps, Float dist_cutoff, Float strength)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algebra/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>algebra_2utility_8h</filename>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>bool</type>
      <name>get_are_almost_equal</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9d61efb52ee93bd26782baefddaf651d</anchor>
      <arglist>(const double a, const double b, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_closer_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afd9f1cc0774ccbef7c028bf66c2746a2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_constrained</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9e59d47d7c61a3b8fcd0e3d16be9e3dd</anchor>
      <arglist>(const T x, const T x0, const T xF)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_next_larger_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aefbb40abc74c00ef9c93f3bb63176f39</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_next_larger_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aeb20ad9c063cf74bceb5a033700e1d66</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_rounded</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a906189330fdf6e8345747efdd1c15dc8</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_sign</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a17cab6ae10d194c0230777f2d3ee9c54</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>benchmark/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/benchmark/</path>
    <filename>benchmark_2utility_8h</filename>
    <namespace>IMP</namespace>
    <namespace>IMP::benchmark</namespace>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>namespaceIMP_1_1benchmark.html</anchorfile>
      <anchor>a03336ed99faca58b56f1037c0bb01de8</anchor>
      <arglist>(std::string benchmark, std::string algorithm, double time, double check)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>core/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>core_2utility_8h</filename>
    <includes id="XYZR_8h" name="XYZR.h" local="yes" imported="no">XYZR.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="Segment3D_8h" name="Segment3D.h" local="no" imported="no">IMP/algebra/Segment3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a0ba3b6f5fba01f4ecf8a3b8f18a311f2</anchor>
      <arglist>(const XYZRs &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_centroid</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a46250a46a10465f03487ad0670586394</anchor>
      <arglist>(const XYZs &amp;ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>domino/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>domino_2utility_8h</filename>
    <includes id="Assignment_8h" name="Assignment.h" local="yes" imported="no">Assignment.h</includes>
    <includes id="Subset_8h" name="Subset.h" local="yes" imported="no">Subset.h</includes>
    <includes id="particle__states_8h" name="particle_states.h" local="yes" imported="no">particle_states.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="RestraintSet_8h" name="RestraintSet.h" local="no" imported="no">IMP/RestraintSet.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Writer_8h" name="Writer.h" local="no" imported="no">IMP/display/Writer.h</includes>
    <includes id="dependency__graph_8h" name="dependency_graph.h" local="no" imported="no">IMP/dependency_graph.h</includes>
    <includes id="metric__clustering_8h" name="metric_clustering.h" local="no" imported="no">IMP/statistics/metric_clustering.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::domino</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_distance_if_smaller_than</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3a112fd41a97e8e93dbff8be3dfb8bb6</anchor>
      <arglist>(const Subset &amp;s, const Assignment &amp;a, const Assignment &amp;b, ParticleStatesTable *pst, const statistics::Metrics &amp;metrics, double max)</arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3247d32b900c4633e5c58cd7032d043b</anchor>
      <arglist>(const Subset &amp;s, const Assignment &amp;a, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_index</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab5fc791399c0d6c76e1bea5d4b3da6ca</anchor>
      <arglist>(const ParticlesTemp &amp;particles, const Subset &amp;subset, const Subsets &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type>Assignment</type>
      <name>get_nearest_assignment</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>abd8a69ba2cc2b8fea2f49c99189d8711</anchor>
      <arglist>(const Subset &amp;s, const algebra::VectorKD &amp;embedding, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_partial_index</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a4c8c50c718ab2dcabacc4b2e41aba522</anchor>
      <arglist>(const ParticlesTemp &amp;particles, const Subset &amp;subset, const Subsets &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePairsTemp</type>
      <name>get_possible_interactions</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aa29c2ec35739c08db3a13ffe4ec38088</anchor>
      <arglist>(const ParticlesTemp &amp;ps, double max_distance, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_particle_states</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0c08cfa3955a23464c5f59c15f95a4ae</anchor>
      <arglist>(const Subset &amp;s, const Assignment &amp;ss, const ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>RestraintsTemp</type>
      <name>get_restraints</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab0efd3e3db335ea082bf9b7567011958</anchor>
      <arglist>(const Subset &amp;s, const ParticleStatesTable *pst, const DependencyGraph &amp;dg, RestraintSet *rs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>saxs/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>saxs_2utility_8h</filename>
    <includes id="FormFactorTable_8h" name="FormFactorTable.h" local="yes" imported="no">FormFactorTable.h</includes>
    <includes id="Profile_8h" name="Profile.h" local="yes" imported="no">Profile.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
    <member kind="function">
      <type>double</type>
      <name>compute_max_distance</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a9dd5a67ebe96a9ce98c53ab08f9d93ef</anchor>
      <arglist>(const Particles &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_max_distance</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>ac62b03b218a730a56a730b06a14bfffd</anchor>
      <arglist>(const Particles &amp;particles1, const Particles &amp;particles2)</arglist>
    </member>
    <member kind="function">
      <type>Profile *</type>
      <name>compute_profile</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a3088d29b90d6cefe75a9cf2bd68f340b</anchor>
      <arglist>(Particles particles, double min_q=0.0, double max_q=0.5, double delta_q=0.001, FormFactorTable *ft=get_default_form_factor_table(), FormFactorType ff_type=HEAVY_ATOMS, bool hydration_layer=true, bool fit=true, bool reciprocal=false, bool ab_initio=false, bool vacuum=false, std::string beam_profile_file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a770cbee09c575c3e143146e040bc7128</anchor>
      <arglist>(const Particles &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_files</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a48a6e99f77380532e66b861ecd6ff64c</anchor>
      <arglist>(Model *m, const std::vector&lt; std::string &gt; &amp;files, std::vector&lt; std::string &gt; &amp;pdb_file_names, std::vector&lt; std::string &gt; &amp;dat_files, std::vector&lt; IMP::Particles &gt; &amp;particles_vec, Profiles &amp;exp_profiles, bool residue_level=false, bool heavy_atoms_only=true, int multi_model_pdb=2, bool explicit_water=false, float max_q=0.0, int units=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_pdb</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>abd840b58460b2d3c4874fe738272f80b</anchor>
      <arglist>(Model *m, const std::string file, std::vector&lt; std::string &gt; &amp;pdb_file_names, std::vector&lt; IMP::Particles &gt; &amp;particles_vec, bool residue_level=false, bool heavy_atoms_only=true, int multi_model_pdb=2, bool explicit_water=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>statistics/utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>statistics_2utility_8h</filename>
    <includes id="PartitionalClustering_8h" name="PartitionalClustering.h" local="yes" imported="no">PartitionalClustering.h</includes>
    <includes id="statistics_2embedding_8h" name="statistics/embedding.h" local="yes" imported="no">Embedding.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::statistics</namespace>
    <member kind="function">
      <type>algebra::VectorKDs</type>
      <name>get_centroids</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ac31b5cbb1a3c6722e837341ce0ee872d</anchor>
      <arglist>(Embedding *d, PartitionalClustering *pc)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_representatives</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a974ae5760db93ab3cf0afced47455a29</anchor>
      <arglist>(Embedding *d, PartitionalClustering *pc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utility.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>utility_8h</filename>
    <includes id="base__macros_8h" name="base_macros.h" local="yes" imported="no">base_macros.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <includes id="math_8h" name="math.h" local="no" imported="no">IMP/math.h</includes>
    <namespace>IMP</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>get_copyright</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8a47a211cc3d6b83f87939695d369634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_unique_name</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8032c62dbbd1bead7a978046ad9a676d</anchor>
      <arglist>(std::string templ)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utility_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>utility__macros_8h</filename>
    <includes id="deprecation__macros_8h" name="deprecation_macros.h" local="no" imported="no">IMP/deprecation_macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_COPY_CONSTRUCTOR</name>
      <anchorfile>utility__macros_8h.html</anchorfile>
      <anchor>a774371d7c12afa5a76b98c226a67f1cd</anchor>
      <arglist>(Name, Base)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Value.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Value_8h</filename>
    <includes id="utility__macros_8h" name="utility_macros.h" local="yes" imported="no">utility_macros.h</includes>
    <class kind="class">IMP::Value</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>value_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>value__macros_8h</filename>
    <includes id="Vector_8h" name="Vector.h" local="yes" imported="no">Vector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_BUILTIN_VALUES</name>
      <anchorfile>value__macros_8h.html</anchorfile>
      <anchor>a94deb913b672a906062d19314c90e791</anchor>
      <arglist>(Name, PluralName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_VALUES</name>
      <anchorfile>value__macros_8h.html</anchorfile>
      <anchor>abe23a98ffe966ba494002b9dcbf79f05</anchor>
      <arglist>(Name, PluralName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IMP_VALUES_UNIFIED</name>
      <anchorfile>value__macros_8h.html</anchorfile>
      <anchor>ab1876eb2a48a96bff5331ac2ef521965</anchor>
      <arglist>(Name, PluralName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>Vector_8h</filename>
    <includes id="Showable_8h" name="Showable.h" local="yes" imported="no">Showable.h</includes>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <includes id="hash_8h" name="hash.h" local="yes" imported="no">hash.h</includes>
    <class kind="class">IMP::Vector</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>Vector2D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Vector2D_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>Vector3D.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>Vector3D_8h</filename>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="base__macros_8h" name="base_macros.h" local="no" imported="no">IMP/base_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_vector_product</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab6aacb0a905c6cbe34a27ed70bff1bec</anchor>
      <arglist>(const Vector3D &amp;p1, const Vector3D &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_orthogonal_vector</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1c0658ada8e19426bf987e4f9f47fa83</anchor>
      <arglist>(const Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_centroid</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1ba22220d5684b27ae2360a5c83b7662</anchor>
      <arglist>(const Vector3Ds &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1330cea388b5ce1dcc0bc87bdc0c52c8</anchor>
      <arglist>(const Vector3Ds &amp;ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector_generators.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>vector__generators_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="Cylinder3D_8h" name="Cylinder3D.h" local="yes" imported="no">Cylinder3D.h</includes>
    <includes id="Cone3D_8h" name="Cone3D.h" local="yes" imported="no">Cone3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="yes" imported="no">Sphere3D.h</includes>
    <includes id="SpherePatch3D_8h" name="SpherePatch3D.h" local="yes" imported="no">SpherePatch3D.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="yes" imported="no">utility.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4140479bd360f14cb9edd70534b34a75</anchor>
      <arglist>(const Sphere3Ds &amp;in, double points_per_square_angstrom)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_random_vector_in</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa93b951ad9978ca2264245e0178777fc</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_random_vector_on</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1d68a09215054f5656feb5c310a9e9e0</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_random_vector_in</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2d16674563f8d6b2ec19ca4ac4141f35</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; 2 &gt;</type>
      <name>get_random_vector_in</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a13112e2dae882f9c03a368a64986c198</anchor>
      <arglist>(const SphereD&lt; 2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_random_vector_in</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0c132a833a6f30793378bbed6dfb8f65</anchor>
      <arglist>(const Cylinder3D &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; 3 &gt;</type>
      <name>get_random_vector_on_unit_sphere</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a15788395c438b5a87b99281375c9e1e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_random_vector_on</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5cee60da7af2c8bdb9939983e71b4c40</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad574480bc92f3b796036c52057f02c53</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;s, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a991a576bd3cb05927a2cf4b0089f9d56</anchor>
      <arglist>(const Cylinder3D &amp;cyl, int number_of_points)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_uniform_upper_hemisphere_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a089e7a683da477067cf9083066239c2a</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;s, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_random_vector_on</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a98110c41b03335f1cd92afd6b31dc072</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_grid_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af754ef2df6fa5f3ba1a211458399a8b5</anchor>
      <arglist>(const Cylinder3D &amp;cyl, int number_of_cycles, int number_of_points_on_cycle)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a72ff2a60e8a826fcc1914fba3552f359</anchor>
      <arglist>(const SpherePatch3D &amp;sph, unsigned int number_of_points)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a87c353d6dce6da5d919b552792b88c46</anchor>
      <arglist>(const Cone3D &amp;cone, unsigned int number_of_points)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_grid_interior_cover_by_spacing</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac8c32603c6e50a2178b34e5b7cd5f4a7</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb, double s)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_random_chain</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af95c0a3778d1f9afd80b8120bd4cf721</anchor>
      <arglist>(unsigned int n, double r, const Vector3D &amp;start=Vector3D(0, 0, 0), const Sphere3Ds &amp;obstacles=Sphere3Ds())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector_metrics.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>vector__metrics_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="BoundingBoxD_8h" name="BoundingBoxD.h" local="yes" imported="no">BoundingBoxD.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="WeakPointer_8h" name="WeakPointer.h" local="no" imported="no">IMP/WeakPointer.h</includes>
    <class kind="class">IMP::algebra::EuclideanVectorKDMetric</class>
    <class kind="class">IMP::algebra::MaxVectorKDMetric</class>
    <class kind="class">IMP::algebra::VectorKDMetric</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; VectorKDMetric &gt; &gt;</type>
      <name>VectorKDMetrics</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af2821108217b399827bce4b800b79f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; VectorKDMetric &gt; &gt;</type>
      <name>VectorKDMetricsTemp</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a36a0abe3925cc5cff0c247f945b7ad4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vector_search.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>vector__search_8h</filename>
    <includes id="VectorD_8h" name="VectorD.h" local="yes" imported="no">VectorD.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="Object_8h" name="Object.h" local="no" imported="no">IMP/Object.h</includes>
    <includes id="log_8h" name="log.h" local="no" imported="no">IMP/log.h</includes>
    <includes id="log__macros_8h" name="log_macros.h" local="no" imported="no">IMP/log_macros.h</includes>
    <includes id="SetCheckState_8h" name="SetCheckState.h" local="no" imported="no">IMP/SetCheckState.h</includes>
    <includes id="grid__storages_8h" name="grid_storages.h" local="yes" imported="no">grid_storages.h</includes>
    <includes id="grid__ranges_8h" name="grid_ranges.h" local="yes" imported="no">grid_ranges.h</includes>
    <includes id="GridD_8h" name="GridD.h" local="yes" imported="no">GridD.h</includes>
    <class kind="class">IMP::algebra::DynamicNearestNeighbor3D</class>
    <class kind="class">IMP::algebra::NearestNeighborD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
  </compound>
  <compound kind="file">
    <name>VectorBaseD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>VectorBaseD_8h</filename>
    <includes id="GeometricPrimitiveD_8h" name="GeometricPrimitiveD.h" local="yes" imported="no">GeometricPrimitiveD.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <class kind="class">IMP::algebra::VectorBaseD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_magnitude_and_normalize_in_place</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6240457629712f77924081526b1a7235</anchor>
      <arglist>(VT &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>VT</type>
      <name>get_unit_vector</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9f2f456aa0ea20e1abd53f2f10c6e9f5</anchor>
      <arglist>(VT vt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorD.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>VectorD_8h</filename>
    <includes id="VectorBaseD_8h" name="VectorBaseD.h" local="yes" imported="no">VectorBaseD.h</includes>
    <includes id="types_8h" name="types.h" local="no" imported="no">IMP/types.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="no" imported="no">IMP/check_macros.h</includes>
    <includes id="exception_8h" name="exception.h" local="no" imported="no">IMP/exception.h</includes>
    <includes id="utility_8h" name="utility.h" local="no" imported="no">IMP/utility.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <includes id="random_8h" name="random.h" local="no" imported="no">IMP/random.h</includes>
    <includes id="algebra__macros_8h" name="algebra_macros.h" local="yes" imported="no">algebra_macros.h</includes>
    <class kind="class">IMP::algebra::VectorD</class>
    <namespace>IMP</namespace>
    <namespace>IMP::algebra</namespace>
    <member kind="typedef">
      <type>VectorD&lt; 1 &gt;</type>
      <name>Vector1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad90c712bbeb4778ce8106957f709ee7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 1 &gt; &gt;</type>
      <name>Vector1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ade1d0d90d879bcd9bdccf14f50597131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 2 &gt;</type>
      <name>Vector2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a36a435bdeaceca02fe3c687df15d1576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 2 &gt; &gt;</type>
      <name>Vector2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2c4b8174c9562970e30a09d050104959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 3 &gt;</type>
      <name>Vector3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac775f2279108541ab50c89452791ddcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 3 &gt; &gt;</type>
      <name>Vector3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abe6cf118d6e01165af3c37ef6ed28ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 4 &gt;</type>
      <name>Vector4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a11723e3eda336def30bbfb907062c257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 4 &gt; &gt;</type>
      <name>Vector4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2cd56a7660b1c0e9e66b7cfc7d6a7840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 5 &gt;</type>
      <name>Vector5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae643b3dff932183fe6371dfd6c90760a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 5 &gt; &gt;</type>
      <name>Vector5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afa35fbfc601b5595ffed5e05f410a7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 6 &gt;</type>
      <name>Vector6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a04173f79fe3ff9502c3dea3ddecf24d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 6 &gt; &gt;</type>
      <name>Vector6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1c7a6fa55175d5e72060c30cca255302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt;-1 &gt;</type>
      <name>VectorKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aca0a99d322d59f5738bcf38f9d35ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt;-1 &gt; &gt;</type>
      <name>VectorKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6f53a63f848c50065cb54e135c050160</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa040b3bcfec950a979371f3e19b14058</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;a, const VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_basis_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0a503cf13c00d688f6683a980174a145</anchor>
      <arglist>(unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_basis_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ade6392415b879dc044738a956686a512</anchor>
      <arglist>(int Di, unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_basis_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a92b4877cc788e114ebc983c050f6218e</anchor>
      <arglist>(int D, unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a01d00ac6807479bb970254b3e188bcc6</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;v1, const VectorD&lt; D &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_elementwise_product</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af800ee8500d39c126da5897ca6f8ebaa</anchor>
      <arglist>(const algebra::VectorD&lt; D &gt; &amp;a, const algebra::VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_elementwise_product</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a019cfab4b720c4002cd8ca3085176778</anchor>
      <arglist>(const Ints &amp;a, const algebra::VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_ones_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a279ba9f72f6c5f803509dff75ac208d7</anchor>
      <arglist>(double v=1)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_ones_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa97923eb2f858bc66bd83997299934d6</anchor>
      <arglist>(unsigned int Di, double v=1)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_ones_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab2737562aba5b6a92a38c231538ce2cc</anchor>
      <arglist>(unsigned int D, double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_squared_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af6c0ba059d657cbc42dad97dfb6cc490</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;v1, const VectorD&lt; D &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; C::DIMENSION &gt; &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aafef6ef92101a692e3daa5effbbca568</anchor>
      <arglist>(const C &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_zero_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a55b0250f087b46ac5647346318c71c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_zero_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae70b03fb713b8950050e06bb2c206cee</anchor>
      <arglist>(int Di)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_zero_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee99e2fdbca505bd36a478c9eb6ca171</anchor>
      <arglist>(int D)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afdc2e1d2d13e716a0d8b2b315187e13e</anchor>
      <arglist>(double s, VectorD&lt; D &gt; o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8162423a898de05afd7e912d0a7fdfa2</anchor>
      <arglist>(C &amp;g, const E &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityScalingOptimizerState.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>VelocityScalingOptimizerState_8h</filename>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="base__types_8h" name="base_types.h" local="no" imported="no">IMP/base_types.h</includes>
    <includes id="OptimizerState_8h" name="OptimizerState.h" local="no" imported="no">IMP/OptimizerState.h</includes>
    <class kind="class">IMP::atom::VelocityScalingOptimizerState</class>
    <namespace>IMP</namespace>
    <namespace>IMP::atom</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; VelocityScalingOptimizerState &gt; &gt;</type>
      <name>VelocityScalingOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aad9e3197039651cc9679b86215efa519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; VelocityScalingOptimizerState &gt; &gt;</type>
      <name>VelocityScalingOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>acf7f10f1c9392c3b0875054e435f3726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VersionInfo.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>VersionInfo_8h</filename>
    <includes id="exception_8h" name="exception.h" local="yes" imported="no">exception.h</includes>
    <includes id="comparison__macros_8h" name="comparison_macros.h" local="yes" imported="no">comparison_macros.h</includes>
    <includes id="check__macros_8h" name="check_macros.h" local="yes" imported="no">check_macros.h</includes>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <includes id="value__macros_8h" name="value_macros.h" local="yes" imported="no">value_macros.h</includes>
    <includes id="Value_8h" name="Value.h" local="yes" imported="no">Value.h</includes>
    <class kind="class">IMP::VersionInfo</class>
    <namespace>IMP</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; VersionInfo &gt;</type>
      <name>VersionInfos</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2485614e2ebd66bf5e478569e9d14aa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VolumeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>VolumeRestraint_8h</filename>
    <includes id="SingletonContainer_8h" name="SingletonContainer.h" local="no" imported="no">IMP/SingletonContainer.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::VolumeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>vonMises.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>vonMises_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::vonMises</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>vonMisesKappaConjugateRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>vonMisesKappaConjugateRestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::vonMisesKappaConjugateRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>vonMisesKappaJeffreysRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>vonMisesKappaJeffreysRestraint_8h</filename>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::vonMisesKappaJeffreysRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>vonMisesSufficient.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>vonMisesSufficient_8h</filename>
    <includes id="macros_8h" name="macros.h" local="no" imported="no">IMP/macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="constants_8h" name="constants.h" local="no" imported="no">IMP/constants.h</includes>
    <class kind="class">IMP::isd::vonMisesSufficient</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>Voxel.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>Voxel_8h</filename>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="XYZ_8h" name="XYZ.h" local="no" imported="no">IMP/core/XYZ.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <class kind="class">IMP::em::Voxel</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>warning_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>warning__macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IMP_UNUSED</name>
      <anchorfile>warning__macros_8h.html</anchorfile>
      <anchor>af58ea437f724ed25076578b9664e77d8</anchor>
      <arglist>(variable)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WarningContext.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>WarningContext_8h</filename>
    <includes id="showable__macros_8h" name="showable_macros.h" local="yes" imported="no">showable_macros.h</includes>
    <class kind="struct">IMP::WarningContext</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>WeakPointer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>WeakPointer_8h</filename>
    <class kind="struct">IMP::UncheckedWeakPointer</class>
    <class kind="struct">IMP::WeakPointer</class>
    <namespace>IMP</namespace>
  </compound>
  <compound kind="file">
    <name>Weight.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>Weight_8h</filename>
    <includes id="UnitSimplexD_8h" name="UnitSimplexD.h" local="no" imported="no">IMP/algebra/UnitSimplexD.h</includes>
    <includes id="Particle_8h" name="Particle.h" local="no" imported="no">IMP/Particle.h</includes>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <class kind="class">IMP::isd::Weight</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>weighted_excluded_volume.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>weighted__excluded__volume_8h</filename>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="core_2Hierarchy_8h" name="core/Hierarchy.h" local="no" imported="no">IMP/core/Hierarchy.h</includes>
    <includes id="rigid__bodies_8h" name="rigid_bodies.h" local="no" imported="no">IMP/core/rigid_bodies.h</includes>
    <includes id="Mass_8h" name="Mass.h" local="no" imported="no">IMP/atom/Mass.h</includes>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
    <member kind="function">
      <type>void</type>
      <name>add_surface_index</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3e058408a3879546f50897a4e8f9253b</anchor>
      <arglist>(core::Hierarchy mhd, Float apix, FloatKey shell_key=FloatKey(&quot;surf_ind&quot;), FloatKey radius_key=core::XYZR::get_radius_key(), FloatKey weight_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>IMP::Restraint *</type>
      <name>create_weighted_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a8273d850c0ab1cd53983c9f169af3cd6</anchor>
      <arglist>(core::RigidBody rb1, core::RigidBody rb2, FloatKey shell_key=FloatKey(&quot;surf_ind&quot;))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WeightedDerivativesToRefined.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>WeightedDerivativesToRefined_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="SingletonDerivativeModifier_8h" name="SingletonDerivativeModifier.h" local="no" imported="no">IMP/SingletonDerivativeModifier.h</includes>
    <class kind="class">IMP::core::WeightedDerivativesToRefined</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedExcludedVolumeRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>WeightedExcludedVolumeRestraint_8h</filename>
    <includes id="DensityMap_8h" name="DensityMap.h" local="no" imported="no">IMP/em/DensityMap.h</includes>
    <includes id="CoarseCC_8h" name="CoarseCC.h" local="no" imported="no">IMP/em/CoarseCC.h</includes>
    <includes id="SurfaceShellDensityMap_8h" name="SurfaceShellDensityMap.h" local="no" imported="no">IMP/em/SurfaceShellDensityMap.h</includes>
    <includes id="atom_2Hierarchy_8h" name="atom/Hierarchy.h" local="no" imported="no">IMP/atom/Hierarchy.h</includes>
    <includes id="XYZR_8h" name="XYZR.h" local="no" imported="no">IMP/core/XYZR.h</includes>
    <includes id="Model_8h" name="Model.h" local="no" imported="no">IMP/Model.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <includes id="Refiner_8h" name="Refiner.h" local="no" imported="no">IMP/Refiner.h</includes>
    <class kind="class">IMP::multifit::WeightedExcludedVolumeRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::multifit</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedFitParameters.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>WeightedFitParameters_8h</filename>
    <includes id="FitParameters_8h" name="FitParameters.h" local="yes" imported="no">FitParameters.h</includes>
    <includes id="Vector_8h" name="Vector.h" local="no" imported="no">IMP/Vector.h</includes>
    <class kind="class">IMP::saxs::WeightedFitParameters</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedProfileFitter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>WeightedProfileFitter_8h</filename>
    <includes id="ProfileFitter_8h" name="ProfileFitter.h" local="yes" imported="no">ProfileFitter.h</includes>
    <includes id="ChiScore_8h" name="ChiScore.h" local="yes" imported="no">ChiScore.h</includes>
    <includes id="WeightedFitParameters_8h" name="WeightedFitParameters.h" local="yes" imported="no">WeightedFitParameters.h</includes>
    <includes id="nnls_8h" name="nnls.h" local="yes" imported="no">nnls.h</includes>
    <class kind="class">IMP::saxs::WeightedProfileFitter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::saxs</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedSum.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>WeightedSum_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::WeightedSum</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedSumOfExponential.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>WeightedSumOfExponential_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::core::WeightedSumOfExponential</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
  </compound>
  <compound kind="file">
    <name>WeightMover.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>WeightMover_8h</filename>
    <includes id="MonteCarloMover_8h" name="MonteCarloMover.h" local="no" imported="no">IMP/core/MonteCarloMover.h</includes>
    <includes id="VectorD_8h" name="VectorD.h" local="no" imported="no">IMP/algebra/VectorD.h</includes>
    <includes id="Weight_8h" name="Weight.h" local="no" imported="no">IMP/isd/Weight.h</includes>
    <class kind="class">IMP::isd::WeightMover</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>WeightRestraint.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>WeightRestraint_8h</filename>
    <includes id="Scale_8h" name="Scale.h" local="no" imported="no">IMP/isd/Scale.h</includes>
    <includes id="Restraint_8h" name="Restraint.h" local="no" imported="no">IMP/Restraint.h</includes>
    <class kind="class">IMP::isd::WeightRestraint</class>
    <namespace>IMP</namespace>
    <namespace>IMP::isd</namespace>
  </compound>
  <compound kind="file">
    <name>WeightScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>WeightScore_8h</filename>
    <includes id="algebra_2utility_8h" name="algebra/utility.h" local="no" imported="no">IMP/algebra/utility.h</includes>
    <class kind="class">IMP::score_functor::WeightScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::score_functor</namespace>
  </compound>
  <compound kind="file">
    <name>WormLikeChain.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>WormLikeChain_8h</filename>
    <includes id="UnaryFunction_8h" name="UnaryFunction.h" local="no" imported="no">IMP/UnaryFunction.h</includes>
    <class kind="class">IMP::misc::WormLikeChain</class>
    <namespace>IMP</namespace>
    <namespace>IMP::misc</namespace>
  </compound>
  <compound kind="file">
    <name>Writer.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>Writer_8h</filename>
    <includes id="declare__Geometry_8h" name="declare_Geometry.h" local="yes" imported="no">declare_Geometry.h</includes>
    <includes id="GeometryProcessor_8h" name="GeometryProcessor.h" local="yes" imported="no">GeometryProcessor.h</includes>
    <includes id="Pointer_8h" name="Pointer.h" local="no" imported="no">IMP/Pointer.h</includes>
    <includes id="InputAdaptor_8h" name="InputAdaptor.h" local="no" imported="no">IMP/InputAdaptor.h</includes>
    <class kind="class">IMP::display::TextWriter</class>
    <class kind="class">IMP::display::Writer</class>
    <class kind="class">IMP::display::WriterAdaptor</class>
    <namespace>IMP</namespace>
    <namespace>IMP::display</namespace>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TextWriter &gt; &gt;</type>
      <name>TextWriters</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a4b8d9702b5e612a25902b329061d5fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TextWriter &gt; &gt;</type>
      <name>TextWritersTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>aa152cdd65458f06e7173d7d0558f3e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; WriterAdaptor &gt;</type>
      <name>WriterAdaptors</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a62242d77a7ab9b5bdfa8221418570658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Writer &gt; &gt;</type>
      <name>Writers</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae968d0eeee18d12dce65f5673e5a9fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Writer &gt; &gt;</type>
      <name>WritersTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a76cf2e7480dd0664a1a389137f5ce38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Writer *</type>
      <name>create_writer</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a55414a3681ffd79c126fabdbf13abb2d</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>writer_macros.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>writer__macros_8h</filename>
    <includes id="Writer_8h" name="Writer.h" local="yes" imported="no">Writer.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IMP_TEXT_WRITER</name>
      <anchorfile>writer__macros_8h.html</anchorfile>
      <anchor>a666b31d884366b31a002bce4fa489f74</anchor>
      <arglist>(Name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XplorReaderWriter.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>XplorReaderWriter_8h</filename>
    <includes id="MapReaderWriter_8h" name="MapReaderWriter.h" local="yes" imported="no">MapReaderWriter.h</includes>
    <includes id="DensityHeader_8h" name="DensityHeader.h" local="yes" imported="no">DensityHeader.h</includes>
    <class kind="class">IMP::em::XplorReaderWriter</class>
    <namespace>IMP</namespace>
    <namespace>IMP::em</namespace>
  </compound>
  <compound kind="file">
    <name>XYZ.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>XYZ_8h</filename>
    <includes id="decorator__macros_8h" name="decorator_macros.h" local="no" imported="no">IMP/decorator_macros.h</includes>
    <includes id="Decorator_8h" name="Decorator.h" local="no" imported="no">IMP/Decorator.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <includes id="Transformation3D_8h" name="Transformation3D.h" local="no" imported="no">IMP/algebra/Transformation3D.h</includes>
    <class kind="class">IMP::core::XYZ</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>double</type>
      <name>get_dihedral</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a8586c04d2d9396490dc9cc71f7899141</anchor>
      <arglist>(XYZ a, XYZ b, XYZ c, XYZ d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af2049fdca8aae38e86549cfdeff1d1fc</anchor>
      <arglist>(XYZ a, XYZ b)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab188fc0fd41b9715232fe9c23b11bfdf</anchor>
      <arglist>(XYZ d)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4b39d171e19de7d77b18712a1d53371b</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa284a594e40d97aa3e915a3da70a4d3d</anchor>
      <arglist>(XYZ d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af7eb121360be9b6e4c0468e6677bb8d0</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a89524841bb4f39bcbac5ef704f2b9b84</anchor>
      <arglist>(Decorator d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a61ee62a2ede595280473bffc1f1ee19d</anchor>
      <arglist>(WeakPointer&lt; Particle &gt; d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a35e75da7a2e6761f503887aa48a25211</anchor>
      <arglist>(Pointer&lt; Particle &gt; d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a556f7cad1de8ed389d05b4d7acbeb4d0</anchor>
      <arglist>(XYZ a, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XYZR.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>XYZR_8h</filename>
    <includes id="XYZ_8h" name="XYZ.h" local="yes" imported="no">XYZ.h</includes>
    <includes id="Sphere3D_8h" name="Sphere3D.h" local="no" imported="no">IMP/algebra/Sphere3D.h</includes>
    <includes id="particle__geometry_8h" name="particle_geometry.h" local="no" imported="no">IMP/display/particle_geometry.h</includes>
    <includes id="geometry__macros_8h" name="geometry_macros.h" local="no" imported="no">IMP/display/geometry_macros.h</includes>
    <includes id="primitive__geometries_8h" name="primitive_geometries.h" local="no" imported="no">IMP/display/primitive_geometries.h</includes>
    <class kind="class">IMP::core::EdgePairGeometry</class>
    <class kind="class">IMP::core::EdgePairsGeometry</class>
    <class kind="class">IMP::core::XYZDerivativeGeometry</class>
    <class kind="class">IMP::core::XYZDerivativesGeometry</class>
    <class kind="class">IMP::core::XYZR</class>
    <class kind="class">IMP::core::XYZRGeometry</class>
    <class kind="class">IMP::core::XYZRsGeometry</class>
    <namespace>IMP</namespace>
    <namespace>IMP::core</namespace>
    <member kind="function">
      <type>XYZRs</type>
      <name>create_xyzr_particles</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad63b32c4f50e42d6ca6d72fa75b5cc02</anchor>
      <arglist>(Model *m, unsigned int num, Float radius, Float box_side=10)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad65d79ddb3c6e1db815d57f73c8f18ea</anchor>
      <arglist>(XYZR a, XYZR b)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ac28cbff46cedec4186ab8e63a3c3b41b</anchor>
      <arglist>(const XYZs &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enclosing_radius</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25735ab61a19f9813d051462afd24b2f</anchor>
      <arglist>(XYZR b, const XYZs &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a9f00e88e92a88b5ef349978fe737df7d</anchor>
      <arglist>(XYZR b, const XYZs &amp;v, double slack=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ZBiasSingletonScore.h</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>ZBiasSingletonScore_8h</filename>
    <includes id="npctransport_2enums_8h" name="npctransport/enums.h" local="yes" imported="no">enums.h</includes>
    <includes id="SingletonScore_8h" name="SingletonScore.h" local="no" imported="no">IMP/SingletonScore.h</includes>
    <includes id="singleton__macros_8h" name="singleton_macros.h" local="no" imported="no">IMP/singleton_macros.h</includes>
    <includes id="Vector3D_8h" name="Vector3D.h" local="no" imported="no">IMP/algebra/Vector3D.h</includes>
    <class kind="class">IMP::npctransport::ZBiasSingletonScore</class>
    <namespace>IMP</namespace>
    <namespace>IMP::npctransport</namespace>
  </compound>
  <compound kind="page">
    <name>argument_index</name>
    <title>Argument Index</title>
    <filename>argument_index</filename>
    <docanchor file="argument_index" title="IMP (kernel)">argument_index_kernel</docanchor>
    <docanchor file="argument_index" title="IMP.algebra">argument_index_algebra</docanchor>
    <docanchor file="argument_index" title="IMP.atom">argument_index_atom</docanchor>
    <docanchor file="argument_index" title="IMP.cnmultifit">argument_index_cnmultifit</docanchor>
    <docanchor file="argument_index" title="IMP.container">argument_index_container</docanchor>
    <docanchor file="argument_index" title="IMP.core">argument_index_core</docanchor>
    <docanchor file="argument_index" title="IMP.display">argument_index_display</docanchor>
    <docanchor file="argument_index" title="IMP.domino">argument_index_domino</docanchor>
    <docanchor file="argument_index" title="IMP.em">argument_index_em</docanchor>
    <docanchor file="argument_index" title="IMP.em2d">argument_index_em2d</docanchor>
    <docanchor file="argument_index" title="IMP.isd">argument_index_isd</docanchor>
    <docanchor file="argument_index" title="IMP.kinematics">argument_index_kinematics</docanchor>
    <docanchor file="argument_index" title="IMP.misc">argument_index_misc</docanchor>
    <docanchor file="argument_index" title="IMP.multi_state">argument_index_multi_state</docanchor>
    <docanchor file="argument_index" title="IMP.multifit">argument_index_multifit</docanchor>
    <docanchor file="argument_index" title="IMP.npctransport">argument_index_npctransport</docanchor>
    <docanchor file="argument_index" title="IMP.rotamer">argument_index_rotamer</docanchor>
    <docanchor file="argument_index" title="IMP.saxs">argument_index_saxs</docanchor>
    <docanchor file="argument_index" title="IMP.statistics">argument_index_statistics</docanchor>
  </compound>
  <compound kind="page">
    <name>class_example_index</name>
    <title>Class Examples</title>
    <filename>class_example_index</filename>
    <docanchor file="class_example_index" title="IMP (kernel)">class_example_index_kernel</docanchor>
    <docanchor file="class_example_index" title="IMP.algebra">class_example_index_algebra</docanchor>
    <docanchor file="class_example_index" title="IMP.atom">class_example_index_atom</docanchor>
    <docanchor file="class_example_index" title="IMP.container">class_example_index_container</docanchor>
    <docanchor file="class_example_index" title="IMP.core">class_example_index_core</docanchor>
    <docanchor file="class_example_index" title="IMP.display">class_example_index_display</docanchor>
    <docanchor file="class_example_index" title="IMP.domino">class_example_index_domino</docanchor>
    <docanchor file="class_example_index" title="IMP.em">class_example_index_em</docanchor>
    <docanchor file="class_example_index" title="IMP.em2d">class_example_index_em2d</docanchor>
    <docanchor file="class_example_index" title="IMP.example">class_example_index_example</docanchor>
    <docanchor file="class_example_index" title="IMP.gsl">class_example_index_gsl</docanchor>
    <docanchor file="class_example_index" title="IMP.kmeans">class_example_index_kmeans</docanchor>
    <docanchor file="class_example_index" title="IMP.misc">class_example_index_misc</docanchor>
    <docanchor file="class_example_index" title="IMP.modeller">class_example_index_modeller</docanchor>
    <docanchor file="class_example_index" title="IMP.mpi">class_example_index_mpi</docanchor>
    <docanchor file="class_example_index" title="IMP.parallel">class_example_index_parallel</docanchor>
    <docanchor file="class_example_index" title="IMP.pmi">class_example_index_pmi</docanchor>
    <docanchor file="class_example_index" title="IMP.rmf">class_example_index_rmf</docanchor>
    <docanchor file="class_example_index" title="IMP.rotamer">class_example_index_rotamer</docanchor>
    <docanchor file="class_example_index" title="IMP.saxs">class_example_index_saxs</docanchor>
    <docanchor file="class_example_index" title="IMP.score_functor">class_example_index_score_functor</docanchor>
    <docanchor file="class_example_index" title="IMP.statistics">class_example_index_statistics</docanchor>
    <docanchor file="class_example_index" title="IMP.symmetry">class_example_index_symmetry</docanchor>
  </compound>
  <compound kind="page">
    <name>cmdline_tools</name>
    <title>All IMP command line tools</title>
    <filename>cmdline_tools</filename>
  </compound>
  <compound kind="page">
    <name>factory_index</name>
    <title>Factory Index</title>
    <filename>factory_index</filename>
    <docanchor file="factory_index" title="IMP (kernel)">factory_index_kernel</docanchor>
    <docanchor file="factory_index" title="IMP.algebra">factory_index_algebra</docanchor>
    <docanchor file="factory_index" title="IMP.atom">factory_index_atom</docanchor>
    <docanchor file="factory_index" title="IMP.container">factory_index_container</docanchor>
    <docanchor file="factory_index" title="IMP.core">factory_index_core</docanchor>
    <docanchor file="factory_index" title="IMP.display">factory_index_display</docanchor>
    <docanchor file="factory_index" title="IMP.domino">factory_index_domino</docanchor>
    <docanchor file="factory_index" title="IMP.em">factory_index_em</docanchor>
    <docanchor file="factory_index" title="IMP.em2d">factory_index_em2d</docanchor>
    <docanchor file="factory_index" title="IMP.example">factory_index_example</docanchor>
    <docanchor file="factory_index" title="IMP.isd">factory_index_isd</docanchor>
    <docanchor file="factory_index" title="IMP.kinematics">factory_index_kinematics</docanchor>
    <docanchor file="factory_index" title="IMP.misc">factory_index_misc</docanchor>
    <docanchor file="factory_index" title="IMP.multifit">factory_index_multifit</docanchor>
    <docanchor file="factory_index" title="IMP.npc">factory_index_npc</docanchor>
    <docanchor file="factory_index" title="IMP.npctransport">factory_index_npctransport</docanchor>
    <docanchor file="factory_index" title="IMP.pmi">factory_index_pmi</docanchor>
    <docanchor file="factory_index" title="IMP.pmi1">factory_index_pmi1</docanchor>
    <docanchor file="factory_index" title="IMP.rmf">factory_index_rmf</docanchor>
    <docanchor file="factory_index" title="IMP.rotamer">factory_index_rotamer</docanchor>
    <docanchor file="factory_index" title="IMP.saxs">factory_index_saxs</docanchor>
    <docanchor file="factory_index" title="IMP.spb">factory_index_spb</docanchor>
    <docanchor file="factory_index" title="IMP.statistics">factory_index_statistics</docanchor>
  </compound>
  <compound kind="page">
    <name>function_example_index</name>
    <title>Function Examples</title>
    <filename>function_example_index</filename>
    <docanchor file="function_example_index" title="IMP (kernel)">function_example_index_kernel</docanchor>
    <docanchor file="function_example_index" title="IMP.algebra">function_example_index_algebra</docanchor>
    <docanchor file="function_example_index" title="IMP.atom">function_example_index_atom</docanchor>
    <docanchor file="function_example_index" title="IMP.core">function_example_index_core</docanchor>
    <docanchor file="function_example_index" title="IMP.display">function_example_index_display</docanchor>
    <docanchor file="function_example_index" title="IMP.domino">function_example_index_domino</docanchor>
    <docanchor file="function_example_index" title="IMP.em">function_example_index_em</docanchor>
    <docanchor file="function_example_index" title="IMP.em2d">function_example_index_em2d</docanchor>
    <docanchor file="function_example_index" title="IMP.pmi">function_example_index_pmi</docanchor>
    <docanchor file="function_example_index" title="IMP.rmf">function_example_index_rmf</docanchor>
    <docanchor file="function_example_index" title="IMP.saxs">function_example_index_saxs</docanchor>
    <docanchor file="function_example_index" title="IMP.statistics">function_example_index_statistics</docanchor>
  </compound>
  <compound kind="page">
    <name>md_doc_examples_nestor_README</name>
    <title>README</title>
    <filename>md_doc_examples_nestor_README</filename>
  </compound>
  <compound kind="page">
    <name>md_doc_examples_spatiotemporal_README</name>
    <title>Spatialtemporal scoring in IMP</title>
    <filename>md_doc_examples_spatiotemporal_README</filename>
  </compound>
  <compound kind="page">
    <name>emagefit_protocol</name>
    <title>EMageFit protocol</title>
    <filename>emagefit_protocol</filename>
    <docanchor file="emagefit_protocol" title="Input data">input</docanchor>
    <docanchor file="emagefit_protocol" title="Producing models">models</docanchor>
    <docanchor file="emagefit_protocol" title="Pairwise dockings">docking</docanchor>
    <docanchor file="emagefit_protocol" title="Obtain models with Simulated annealing Monte Carlo optimization">montecarlo</docanchor>
    <docanchor file="emagefit_protocol" title="Gather the results of all Monte Carlo optimizations">gather</docanchor>
    <docanchor file="emagefit_protocol" title="Combine the models from Monte Carlo with DOMINO">domino</docanchor>
    <docanchor file="emagefit_protocol" title="Visualizing the models and understanding the information in the database of solutions">db</docanchor>
  </compound>
  <compound kind="page">
    <name>emagefit_scripts</name>
    <title>EMageFit scripts and tools</title>
    <filename>emagefit_scripts</filename>
    <docanchor file="emagefit_scripts" title="Command line tools">tools</docanchor>
    <docanchor file="emagefit_scripts" title="emagefit: Run all steps of modeling">emagefit_bin</docanchor>
    <docanchor file="emagefit_scripts" title="emagefit_dock: Docking using the HEXDOCK program">emagefit_dock_bin</docanchor>
    <docanchor file="emagefit_scripts" title="emagefit_cluster: Performs clustering of the solutions stored in a database file.">emagefit_cluster_bin</docanchor>
    <docanchor file="emagefit_scripts" title="emagefit_score: Scores a model using EM images.">emagefit_score_bin</docanchor>
    <docanchor file="emagefit_scripts" title="convert_spider_to_jpg: Image conversion utility for EMageFit.">convert_spider_to_jpg_bin</docanchor>
    <docanchor file="emagefit_scripts" title="IMP.em2d Python package utilities">em2d_pkg</docanchor>
    <docanchor file="emagefit_scripts" title="IMP.em2d.imp_general Python package utilities">em2d_gen_pkg</docanchor>
  </compound>
  <compound kind="page">
    <name>em2d_progs</name>
    <title>Short Explanation of the functionality of programs in em2d</title>
    <filename>em2d_progs</filename>
    <docanchor file="em2d_progs" title="create_single_particle_images">create_single_particle_images_bin</docanchor>
  </compound>
  <compound kind="page">
    <name>idock_progs</name>
    <title>Integrative docking utility programs</title>
    <filename>idock_progs</filename>
    <docanchor file="idock_progs" title="saxs_score">saxs_score_bin</docanchor>
    <docanchor file="idock_progs" title="em2d_score">em2d_score_bin</docanchor>
    <docanchor file="idock_progs" title="em3d_score">em3d_score_bin</docanchor>
    <docanchor file="idock_progs" title="nmr_rtc_score">nmr_rtc_score_bin</docanchor>
    <docanchor file="idock_progs" title="cross_links_score">cross_links_score_bin</docanchor>
    <docanchor file="idock_progs" title="combine_scores">combine_scores_bin</docanchor>
    <docanchor file="idock_progs" title="recompute_zscore">recompute_zscore_bin</docanchor>
    <docanchor file="idock_progs" title="em3d_single_score">em3d_single_score_bin</docanchor>
    <docanchor file="idock_progs" title="em2d_single_score">em2d_single_score_bin</docanchor>
    <docanchor file="idock_progs" title="soap_score">soap_score_bin</docanchor>
    <docanchor file="idock_progs" title="cross_links_single_score">cross_links_single_score_bin</docanchor>
    <docanchor file="idock_progs" title="interface_cross_links">interface_cross_links_bin</docanchor>
    <docanchor file="idock_progs" title="interface_rtc">interface_rtc_bin</docanchor>
  </compound>
  <compound kind="page">
    <name>dependencies</name>
    <title>Dependencies</title>
    <filename>dependencies</filename>
    <docanchor file="dependencies" title="Dependency graph">dependency_graph</docanchor>
    <docanchor file="dependencies" title="Caching dependencies">dependency_caching</docanchor>
  </compound>
  <compound kind="page">
    <name>pmi_changelog</name>
    <title>PMI changelog</title>
    <filename>pmi_changelog</filename>
  </compound>
  <compound kind="page">
    <name>pmi_resolution</name>
    <title>Resolution in PMI</title>
    <filename>pmi_resolution</filename>
  </compound>
  <compound kind="page">
    <name>pmi1_changelog</name>
    <title>PMI1 changelog</title>
    <filename>pmi1_changelog</filename>
  </compound>
  <compound kind="page">
    <name>pmi1_resolution</name>
    <title>Resolution in PMI</title>
    <filename>pmi1_resolution</filename>
  </compound>
  <compound kind="group">
    <name>bond</name>
    <title>Creating and restraining bonds</title>
    <filename>group__bond.html</filename>
    <class kind="class">IMP::atom::Bond</class>
    <class kind="class">IMP::atom::Bonded</class>
    <class kind="class">IMP::atom::BondedPairFilter</class>
    <class kind="class">IMP::atom::BondEndpointsRefiner</class>
    <class kind="class">IMP::atom::BondPairContainer</class>
    <class kind="class">IMP::atom::BondSingletonScore</class>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gad928d4afc3de5646070a1a55499772d3</anchor>
      <arglist>(Bonded a, Bonded b, Int t)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga1c817f9827d6115fe10530ca349098fa</anchor>
      <arglist>(Bonded a, Bonded b, Bond o)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_custom_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga4434a119a32491177223b0fe0d6f7d6d</anchor>
      <arglist>(Bonded a, Bonded b, Float length, Float stiffness=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga53d105256db430c876b1a83c5a2786a4</anchor>
      <arglist>(Bond b)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>get_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gaf75358e1a709b3b9cf2153bf741b5efa</anchor>
      <arglist>(Bonded a, Bonded b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>hierarchy</name>
    <title>Hierarchies of particles</title>
    <filename>group__hierarchy.html</filename>
    <class kind="class">IMP::atom::Atom</class>
    <class kind="class">IMP::core::ChildrenRefiner</class>
    <class kind="class">IMP::core::Hierarchy</class>
    <class kind="struct">IMP::core::HierarchyCounter</class>
    <class kind="class">IMP::core::HierarchyVisitor</class>
    <class kind="class">IMP::core::LeavesRefiner</class>
    <class kind="class">IMP::core::ModifierVisitor</class>
    <class kind="class">IMP::atom::Residue</class>
    <member kind="function">
      <type>HD</type>
      <name>find_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga48885d7285d63571bbdc7035bf25d162</anchor>
      <arglist>(HD h, F f)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gadc7639d87f38fa58e15d16da9ee6b6fe</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attribute</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gae624839ef9e8df72cd594696969b804e</anchor>
      <arglist>(H h, K k, V v, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attributes</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gab703f5be2ab05b43dd31df7f62698309</anchor>
      <arglist>(H h, K0 k0, V0 v0, K1 k1, V1 v1, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_slice</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga2f922d6675216bea33de2292c161faef</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>show</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga346251f63e1305b2bd2b0599f1d8d761</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gaf1c5c6abcc4e68e8966a2be6793020fe</anchor>
      <arglist>(HD d, F f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gabbac0bce3555909b3b9e5978cb576eff</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga52cb6fb554a44d6ce8d8c997d20f2850</anchor>
      <arglist>(HD d, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga669953449da1f01f7ca196d9a06a0fbb</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SurfacesGeometry</name>
    <filename>classSurfacesGeometry.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP</name>
    <filename>namespaceIMP.html</filename>
    <namespace>IMP::algebra</namespace>
    <namespace>IMP::atom</namespace>
    <namespace>IMP::bayesianem</namespace>
    <namespace>IMP::benchmark</namespace>
    <namespace>IMP::cgal</namespace>
    <namespace>IMP::cnmultifit</namespace>
    <namespace>IMP::container</namespace>
    <namespace>IMP::core</namespace>
    <namespace>IMP::display</namespace>
    <namespace>IMP::domino</namespace>
    <namespace>IMP::em</namespace>
    <namespace>IMP::em2d</namespace>
    <namespace>IMP::EMageFit</namespace>
    <namespace>IMP::example</namespace>
    <namespace>IMP::foxs</namespace>
    <namespace>IMP::gsl</namespace>
    <namespace>IMP::integrative_docking</namespace>
    <namespace>IMP::isd</namespace>
    <namespace>IMP::kinematics</namespace>
    <namespace>IMP::kmeans</namespace>
    <namespace>IMP::misc</namespace>
    <namespace>IMP::mmcif</namespace>
    <namespace>IMP::modeller</namespace>
    <namespace>IMP::mpi</namespace>
    <namespace>IMP::multi_state</namespace>
    <namespace>IMP::multifit</namespace>
    <namespace>IMP::nestor</namespace>
    <namespace>IMP::npc</namespace>
    <namespace>IMP::npctransport</namespace>
    <namespace>IMP::parallel</namespace>
    <namespace>IMP::pepdock</namespace>
    <namespace>IMP::pmi</namespace>
    <namespace>IMP::pmi1</namespace>
    <namespace>IMP::rmf</namespace>
    <namespace>IMP::rotamer</namespace>
    <namespace>IMP::sampcon</namespace>
    <namespace>IMP::saxs</namespace>
    <namespace>IMP::saxs_merge</namespace>
    <namespace>IMP::score_functor</namespace>
    <namespace>IMP::scratch</namespace>
    <namespace>IMP::spatiotemporal</namespace>
    <namespace>IMP::spb</namespace>
    <namespace>IMP::statistics</namespace>
    <namespace>IMP::symmetry</namespace>
    <namespace>IMP::test</namespace>
    <class kind="struct">IMP::AddBoolFlag</class>
    <class kind="struct">IMP::AddFloatFlag</class>
    <class kind="struct">IMP::AddIntFlag</class>
    <class kind="struct">IMP::AddStringFlag</class>
    <class kind="class">IMP::AdvancedFlag</class>
    <class kind="class">IMP::ArgumentParser</class>
    <class kind="class">IMP::Array</class>
    <class kind="class">IMP::AttributeOptimizer</class>
    <class kind="class">IMP::CommandDispatcher</class>
    <class kind="class">IMP::Configuration</class>
    <class kind="class">IMP::ConfigurationSet</class>
    <class kind="class">IMP::Constraint</class>
    <class kind="class">IMP::ConstVector</class>
    <class kind="class">IMP::Container</class>
    <class kind="class">IMP::CreateLogContext</class>
    <class kind="class">IMP::Decorator</class>
    <class kind="class">IMP::DerivativeAccumulator</class>
    <class kind="struct">IMP::EvaluationState</class>
    <class kind="class">IMP::EventException</class>
    <class kind="class">IMP::Exception</class>
    <class kind="class">IMP::Flag</class>
    <class kind="struct">IMP::FloatIndex</class>
    <class kind="class">IMP::Index</class>
    <class kind="class">IMP::IndexException</class>
    <class kind="class">IMP::IndexVector</class>
    <class kind="class">IMP::InputAdaptor</class>
    <class kind="struct">IMP::InternalException</class>
    <class kind="class">IMP::IOException</class>
    <class kind="class">IMP::Key</class>
    <class kind="class">IMP::LRUCache</class>
    <class kind="class">IMP::Memoizer</class>
    <class kind="class">IMP::Model</class>
    <class kind="class">IMP::ModelException</class>
    <class kind="class">IMP::ModelObject</class>
    <class kind="class">IMP::NonCopyable</class>
    <class kind="class">IMP::Object</class>
    <class kind="class">IMP::Optimizer</class>
    <class kind="class">IMP::OptimizerState</class>
    <class kind="class">IMP::PairContainer</class>
    <class kind="class">IMP::PairContainerAdaptor</class>
    <class kind="class">IMP::PairModifier</class>
    <class kind="class">IMP::PairPredicate</class>
    <class kind="class">IMP::PairScore</class>
    <class kind="class">IMP::Particle</class>
    <class kind="class">IMP::ParticleAdaptor</class>
    <class kind="class">IMP::ParticleIndexAdaptor</class>
    <class kind="class">IMP::ParticleIndexesAdaptor</class>
    <class kind="class">IMP::ParticleIndexPairsAdaptor</class>
    <class kind="class">IMP::ParticleInputs</class>
    <class kind="class">IMP::ParticleOutputs</class>
    <class kind="struct">IMP::Pointer</class>
    <class kind="struct">IMP::PointerMember</class>
    <class kind="class">IMP::PythonDirectedGraph</class>
    <class kind="class">IMP::QuadContainer</class>
    <class kind="class">IMP::QuadContainerAdaptor</class>
    <class kind="class">IMP::QuadModifier</class>
    <class kind="class">IMP::QuadPredicate</class>
    <class kind="class">IMP::QuadScore</class>
    <class kind="class">IMP::RAII</class>
    <class kind="class">IMP::Refiner</class>
    <class kind="class">IMP::Restraint</class>
    <class kind="class">IMP::RestraintInfo</class>
    <class kind="class">IMP::RestraintsAdaptor</class>
    <class kind="class">IMP::RestraintSet</class>
    <class kind="class">IMP::Sampler</class>
    <class kind="class">IMP::SaveToConfigurationSetOptimizerState</class>
    <class kind="class">IMP::ScopedAddCacheAttribute</class>
    <class kind="class">IMP::ScopedSetAttribute</class>
    <class kind="class">IMP::ScoreAccumulator</class>
    <class kind="class">IMP::ScoreState</class>
    <class kind="class">IMP::ScoringFunction</class>
    <class kind="class">IMP::ScoringFunctionAdaptor</class>
    <class kind="class">IMP::SetCheckState</class>
    <class kind="class">IMP::SetLogState</class>
    <class kind="class">IMP::SetLogTarget</class>
    <class kind="class">IMP::SetNumberOfThreads</class>
    <class kind="class">IMP::Showable</class>
    <class kind="class">IMP::SingletonContainer</class>
    <class kind="class">IMP::SingletonContainerAdaptor</class>
    <class kind="class">IMP::SingletonModifier</class>
    <class kind="class">IMP::SingletonPredicate</class>
    <class kind="class">IMP::SingletonScore</class>
    <class kind="class">IMP::SparseSymmetricPairMemoizer</class>
    <class kind="class">IMP::TextInput</class>
    <class kind="class">IMP::TextOutput</class>
    <class kind="class">IMP::TripletContainer</class>
    <class kind="class">IMP::TripletContainerAdaptor</class>
    <class kind="class">IMP::TripletModifier</class>
    <class kind="class">IMP::TripletPredicate</class>
    <class kind="class">IMP::TripletScore</class>
    <class kind="class">IMP::TypeException</class>
    <class kind="class">IMP::UnaryFunction</class>
    <class kind="struct">IMP::UncheckedWeakPointer</class>
    <class kind="class">IMP::Undecorator</class>
    <class kind="class">IMP::UsageException</class>
    <class kind="class">IMP::Value</class>
    <class kind="class">IMP::ValueException</class>
    <class kind="class">IMP::Vector</class>
    <class kind="class">IMP::VersionInfo</class>
    <class kind="struct">IMP::WarningContext</class>
    <class kind="struct">IMP::WeakPointer</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AttributeOptimizer &gt; &gt;</type>
      <name>AttributeOptimizers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e57750edebd36bc6b31988e1ef05087</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AttributeOptimizer &gt; &gt;</type>
      <name>AttributeOptimizersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e87e522bbdb3efc23f0db9a16d0c7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Configuration &gt; &gt;</type>
      <name>Configurations</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a12047f864f5db7afddc5cc49057de1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConfigurationSet &gt; &gt;</type>
      <name>ConfigurationSets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab2cf06098172860cad42b5e146275b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConfigurationSet &gt; &gt;</type>
      <name>ConfigurationSetsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a574121f72b5f322cba37f41ea0779c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Configuration &gt; &gt;</type>
      <name>ConfigurationsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa6c19a7f0b57804ad95ba98c2a92828c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Constraint &gt; &gt;</type>
      <name>Constraints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae085194580d3f4bd73cfb67d7774acad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Constraint &gt; &gt;</type>
      <name>ConstraintsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5346910999ef12ed58666ebd10cb425f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Container &gt; &gt;</type>
      <name>Containers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a253000b1c7f4d3350c8ef4c27142f469</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Container &gt; &gt;</type>
      <name>ContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0e4e1276d7355dedce0890d6a99d283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>DependencyGraph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>addc7bfaa427b0b5a86d1e2dce94c68ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativeAccumulator &gt;</type>
      <name>DerivativeAccumulators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3ac00af20ff6f7f2687685d06cf71f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>DerivativePair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a854b275d82ceb4619b1ab0740e96c977</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativePair &gt;</type>
      <name>DerivativePairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3c3b84e32d70ea396e45beb9b65a8b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DerivativePairs &gt;</type>
      <name>DerivativePairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af900f1d7f756cd5c7a11251b40793e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; EvaluationState &gt;</type>
      <name>EvaluationStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a258550a42f9f3366e07d20275dc941c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Float</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a32655edcba715e26c441239e8f04a701</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatIndex &gt;</type>
      <name>FloatIndexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a25694e02f7357c9e36cecaa1bae08801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>FloatPair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aeae0e87d16ee55f5995d2706a97fc10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatPair &gt;</type>
      <name>FloatPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aef01d43a7045a69ea65ebe1a96cf51f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatPairs &gt;</type>
      <name>FloatPairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aed9bdf623f3c9f9146e849ec12ed11a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Float, Float &gt;</type>
      <name>FloatRange</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af43013d43362cce713dab77df9d2bca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatRange &gt;</type>
      <name>FloatRanges</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0a4870a7b13e75ff394291580944a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatRanges &gt;</type>
      <name>FloatRangess</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a33b44f38e2a1dab551b81cd347675d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Float &gt;</type>
      <name>Floats</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8680e7baae03e4117e30d61224f746aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Floats &gt;</type>
      <name>FloatsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aefca40502016467478c4ef5cfd02f7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FloatsList &gt;</type>
      <name>FloatsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa631dfe87513a670ae89a7f1fc83e93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Floats &gt;</type>
      <name>Floatss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ade406c9125b0a3e0cf92ab49687debb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Int</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3dd7827c9a7c660e058fb26295769b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntPair &gt;</type>
      <name>IntPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6eec087a3175f42eef3849b57c4bc396</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntPairs &gt;</type>
      <name>IntPairss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a11122233ab841881f0060d2475199337</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntRange &gt;</type>
      <name>IntRanges</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a20e1ae24d01974a42950bec6eaf9f53a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntRanges &gt;</type>
      <name>IntRangess</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a553ad39c28edd74b3087077a0901fe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Int &gt;</type>
      <name>Ints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a476bb33361c6420aabbf922653ae5d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ints &gt;</type>
      <name>IntsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a252b87270d8572cd8649844ff278ea94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IntsList &gt;</type>
      <name>IntsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab0766932f7700be80ac3e667037fdf37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ints &gt;</type>
      <name>Intss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aaa6f79d156464a3dbbe27158b2b7a264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ModelObject &gt; &gt;</type>
      <name>ModelObjects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a95391c7f8ed4c97fe8fe485480cd9f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ModelObject &gt; &gt;</type>
      <name>ModelObjectsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a1c6cbd237b82ff951283c6dda35ad276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Model &gt; &gt;</type>
      <name>Models</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5bc8f1104b2e2a3b0581cd72ab92f607</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Model &gt; &gt;</type>
      <name>ModelsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7f3207df6e931de8bef7ad5912c2d073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Object &gt; &gt;</type>
      <name>Objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a592adb4d26788523152de9ed6454c321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Object &gt; &gt;</type>
      <name>ObjectsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9cc4edf42ed5d3afbaeb8c1cb17910c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Optimizer &gt; &gt;</type>
      <name>Optimizers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab55b1b9a87645be934591671abdcd03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OptimizerState &gt; &gt;</type>
      <name>OptimizerStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad0dfe95ed61ec535d0c8a562691cdc1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OptimizerState &gt; &gt;</type>
      <name>OptimizerStatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae37dac59213501af700e07ac00151335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Optimizer &gt; &gt;</type>
      <name>OptimizersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6fbdee798fda00b0f9e7d04515bff9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairContainer &gt; &gt;</type>
      <name>PairContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e2a43cf872cf753deca1701c9cf5d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairContainer &gt; &gt;</type>
      <name>PairContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abe4de15a5d46ca6165940dd94dda4eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairModifier &gt; &gt;</type>
      <name>PairModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a25df1381ef02cccfe4ad0f43b46a49d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairModifier &gt; &gt;</type>
      <name>PairModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e8f23dd8fcfa1b3a2255b666be7e205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairPredicate &gt; &gt;</type>
      <name>PairPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a52f189fe35231c2c3f8599ef839de572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairPredicate &gt; &gt;</type>
      <name>PairPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aad7fad1d9dcb13dbe39133c7f7961a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairScore &gt; &gt;</type>
      <name>PairScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab28674a5ec2a50421ddc21b3f9a7ce2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairScore &gt; &gt;</type>
      <name>PairScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a128bfcd14abee62ff2f06e6beb18171a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Index&lt; ParticleIndexTag &gt;</type>
      <name>ParticleIndex</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0fb12cf46147695b0365cfb8566dc7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexPair, std::allocator&lt; ParticleIndexPair &gt; &gt;</type>
      <name>ParticleIndexPairs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7f5bc4971dca3cc2c665c127a1138d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexQuad, std::allocator&lt; ParticleIndexQuad &gt; &gt;</type>
      <name>ParticleIndexQuads</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab6581f6a58b7b7da70ad126dfe33c6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleIndexTriplet, std::allocator&lt; ParticleIndexTriplet &gt; &gt;</type>
      <name>ParticleIndexTriplets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a52871bad76ac983ebcede8e82735c760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 2, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticlePair</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a86eb3979a08bd365b0f3bfb2ab1debd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticlePair &gt;</type>
      <name>ParticlePairsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af2c5498b9c239d1de81615cd3f862ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 4, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticleQuad</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3bea39c93d3cd27860781d0c060a17cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleQuad &gt;</type>
      <name>ParticleQuadsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>affef61fd70b4c50734740e15dac00ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; 3, WeakPointer&lt; Particle &gt;, Particle * &gt;</type>
      <name>ParticleTriplet</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a613d15b3ae8dfe0c7a535d7250020a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleTriplet &gt;</type>
      <name>ParticleTripletsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6a1c662c3711e134a30418dede0e2add</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadContainer &gt; &gt;</type>
      <name>QuadContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad9d81ff55d9811a67488d33cdc0235c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadContainer &gt; &gt;</type>
      <name>QuadContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afbcf03e9967e7b8b968fd2b755d7eb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadModifier &gt; &gt;</type>
      <name>QuadModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab8c544ce0065e188126d720a19e834e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadModifier &gt; &gt;</type>
      <name>QuadModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae1b3066661a985a2aac2867c3da8ab5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadPredicate &gt; &gt;</type>
      <name>QuadPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2cbcb756440e989cd634504fd30011a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadPredicate &gt; &gt;</type>
      <name>QuadPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a18919cd1d353842ec23e3640672db6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadScore &gt; &gt;</type>
      <name>QuadScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afc25eb9ed045e9e3379989a19cd07bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadScore &gt; &gt;</type>
      <name>QuadScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af85d6e7b0482a34035bd91354655eeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Refiner &gt; &gt;</type>
      <name>Refiners</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a57c6a9ada682f4754367dc873a6be5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Refiner &gt; &gt;</type>
      <name>RefinersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4f596d7615e2b43bc8d34f1028d19fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Restraint &gt; &gt;</type>
      <name>Restraints</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a349823de4c765f28451fa168fe226a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RestraintSet &gt; &gt;</type>
      <name>RestraintSets</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aed52c0a9d7e77fe8dcee78162bd06229</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RestraintSet &gt; &gt;</type>
      <name>RestraintSetsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad13234811d85751c6ffc38adc2663c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Restraint &gt; &gt;</type>
      <name>RestraintsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8ee8250078bde97153d08a7566bbafa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Sampler &gt; &gt;</type>
      <name>Samplers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>acc0a0f4740fa25a516870b820920d62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Sampler &gt; &gt;</type>
      <name>SamplersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac4fc5962c3250f3e9ed700ef40ed80b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ScoreAccumulator &gt;</type>
      <name>ScoreAccumulators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a94cc97540471ac8aba0410b859d7e1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoreState &gt; &gt;</type>
      <name>ScoreStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a82ae113817a9eebee046d9ee3d9cf3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoreState &gt; &gt;</type>
      <name>ScoreStatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a17bd0c7aa6226512d217a90d34d55120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoringFunction &gt; &gt;</type>
      <name>ScoringFunctions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a82ca81a62ef47c8bc9b36c09bb3d737e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoringFunction &gt; &gt;</type>
      <name>ScoringFunctionsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a46cb27970b559904b9b5c88d0a6e1bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SetCheckState &gt;</type>
      <name>SetCheckStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab6afbe9ac9ab8fe720ce39fc2693f499</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SetLogState &gt;</type>
      <name>SetLogStates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6cd1a7a5e237904fb7b4e5cd37ca0504</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonContainer &gt; &gt;</type>
      <name>SingletonContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a70a3a03933a96ba8bd26c5bb20270fc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonContainer &gt; &gt;</type>
      <name>SingletonContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>adfc8554c95a6a0d56a76627d622e92f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonModifier &gt; &gt;</type>
      <name>SingletonModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9f2bad21c076749b31f9e601d8f3c61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonModifier &gt; &gt;</type>
      <name>SingletonModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2e7ef4f734830298d33a4fd9c67c896f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonPredicate &gt; &gt;</type>
      <name>SingletonPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a1b04ea5f7281a34e52f4a098485a9748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonPredicate &gt; &gt;</type>
      <name>SingletonPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac2e3e22a239c2058b8502626f2d8b9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonScore &gt; &gt;</type>
      <name>SingletonScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a543a59dfaa86351d39cda5c407af0a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonScore &gt; &gt;</type>
      <name>SingletonScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2c9b37a40b435b8a12f9250798096ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>String</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a60f8fe8b08d17690d68edcb43dbdc9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; String &gt;</type>
      <name>Strings</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>addce6ed593d3f02434356e99fd3dbbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Strings &gt;</type>
      <name>StringsList</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afce85dce99836e04101552e16c56a442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; StringsList &gt;</type>
      <name>StringsLists</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a96dee74affb84a95ee2da66828c27cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Strings &gt;</type>
      <name>Stringss</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8e6cd04b233c86f95a4416f4433842e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; TextInput &gt;</type>
      <name>TextInputs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae6002d73f61d27ae4e2fd043c2948a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; TextOutput &gt;</type>
      <name>TextOutputs</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa96e1a2a30476bd720cf97b42ce46e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletContainer &gt; &gt;</type>
      <name>TripletContainers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a06542f6867bd646aae10f4fed199abb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletContainer &gt; &gt;</type>
      <name>TripletContainersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a320cd612f335b70579322e4c037f246b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletModifier &gt; &gt;</type>
      <name>TripletModifiers</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7a2c92ce0cf32fe4bb3d69e01546cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletModifier &gt; &gt;</type>
      <name>TripletModifiersTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a9f9348e4565e9375335543c82065c60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletPredicate &gt; &gt;</type>
      <name>TripletPredicates</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa4de228b810435d80b80fef2ca565ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletPredicate &gt; &gt;</type>
      <name>TripletPredicatesTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a747b726f241c73f40a5da258419d6c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletScore &gt; &gt;</type>
      <name>TripletScores</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4d7c637de479254a34f681424421b857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletScore &gt; &gt;</type>
      <name>TripletScoresTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a86b6d21a3b8496a2b3cc3f4a74299c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; UnaryFunction &gt; &gt;</type>
      <name>UnaryFunctions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4890405dc96ab89e32cec721c7b43803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; UnaryFunction &gt; &gt;</type>
      <name>UnaryFunctionsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a70d42fccbc1ed2236d24787c283ac82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Undecorator &gt; &gt;</type>
      <name>Undecorators</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a793c6b69a2c579c202b3c1331f1a1ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Undecorator &gt; &gt;</type>
      <name>UndecoratorsTemp</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a104935166ae9148607c60d7601679235</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; VersionInfo &gt;</type>
      <name>VersionInfos</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2485614e2ebd66bf5e478569e9d14aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CheckLevel</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT_CHECK</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7acaaf92e1c86ce15d65c3e411d583c76aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7aca7e4fc874347d08361f27c0d0e0fb193d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USAGE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7aca2ee9bf03f28b95093805af0848a742ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USAGE_AND_INTERNAL</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3a9a15172193c2c23aae548fb930d7acaae5cfdef31e7a48532eb8b55cb8d5a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFAULT</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a16d1612b87a38b835057c8c1fd3b94dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SILENT</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a8dcdfe6b39776037fc051b5f329cdc67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WARNING</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a29a8324a4b97866dcb03c690ee3a5182</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROGRESS</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182af1e29caec01f661ebf53f5064505e1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TERSE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a863886e8e4fac571b4ea1ca817b4f20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VERBOSE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a90d193f5f24a5bf6ff010579e6505a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MEMORY</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af0eddf379aa036a59c47c5485c11e182a7a2dc8adf999dbeb92cc26018ca759d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>allow_deprecated</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4d3df238eeaae6ebd76631b05113bb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>create_constraint</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7c1e58ca2b8292e0c29445ac12129f41</anchor>
      <arglist>(Before *b, After *a, const typename Before::Argument &amp;t, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>ScoringFunctions</type>
      <name>create_decomposition</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab557e028ce1a3dfda4936f2f86a89b36</anchor>
      <arglist>(ScoringFunction *sf)</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>create_decomposition</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5edca5546e64b6140b7cf778d2068ea0</anchor>
      <arglist>(const RestraintsTemp &amp;rs)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_restraint</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a48dcab9692f457d67f21de48014deedb</anchor>
      <arglist>(Score *s, const typename Score::Argument &amp;t, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>ScoringFunction *</type>
      <name>create_scoring_function</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af14ee21fcb9e4de052f33454e3bdf5e1</anchor>
      <arglist>(RestraintType *rs, double weight=1.0, double max=NO_MAX, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>TextOutput</type>
      <name>create_temporary_file</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab80a40f6e42e620a158a956ec33acb68</anchor>
      <arglist>(std::string prefix=&quot;imp_temp&quot;, std::string suffix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>create_temporary_file_name</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a3242b867f308d26108a257087714c3da</anchor>
      <arglist>(std::string prefix=&quot;imp_temp&quot;, std::string suffix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deprecated_function</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a5c418b6789c5f4a50ea49d8172290a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deprecated_method</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a59be367672fd18b95a502b8e9786263a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deprecated_module</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae66ac707aa9b6b674c90a3f8fe4471e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>deprecated_object</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0c747e448567caaeeb3fd1eef555ce2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_absolute_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a405450b8b6fb9eb4c790bc6770de9f51</anchor>
      <arglist>(std::string file)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_copyright</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8a47a211cc3d6b83f87939695d369634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph</type>
      <name>get_dependency_graph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af26dddbf636cb7a7f3570cbcd3387bcb</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_deprecation_exceptions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a01af18a6301d245e5e149fdeeb3e859b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_indexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aabc6b814ba85ea74a1b3f9f0ce8c06cf</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>abf59065e3cb6156b62146eea0a914e40</anchor>
      <arglist>(const ParticlePairsTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_quick_test</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4dc39629503b0dc2821ee8110b84b2df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>get_live_object_names</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a2a1e5a70392770f13aa7d671aac1238a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Objects</type>
      <name>get_live_objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a6a0f515e473b6d1fc8aa5bf919bc6ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_particles</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a282964e47bdd3107ef2e3ef72df66001</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>DependencyGraph</type>
      <name>get_pruned_dependency_graph</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad7a7ba8372d2c5b86b98588ddcc8e023</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_random_double_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a23fdaa496c8b5e504e3301b0c5349844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_random_double_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8829c750692256e63fcf98afe3e573ff</anchor>
      <arglist>(double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_random_float_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7136d2223472a6da0af3a35afe261e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_random_float_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a19bf650dcba3d1313fd04e7e683d0bef</anchor>
      <arglist>(float min, float max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_random_numbers_normal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ab756ae75c8588c7ba606e4ec2bc4ab57</anchor>
      <arglist>(Vector&lt; RealType &gt; &amp;v, unsigned int n, RealType mean=0.0, RealType stddev=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_random_numbers_uniform</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8db8fe945488db02b181b74a5a5ec378</anchor>
      <arglist>(Vector&lt; RealType &gt; &amp;v, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>boost::uint64_t</type>
      <name>get_random_seed</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a298294e06d07c91b16bda7a941847a1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_relative_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a88408d94584a6307954d029aee9a8c8c</anchor>
      <arglist>(std::string base, std::string relative)</arglist>
    </member>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_required_score_states</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a87c780c587a232b7b167d2a9efd13e4d</anchor>
      <arglist>(const ModelObjectsTemp &amp;mos, ScoreStatesTemp exclude=ScoreStatesTemp())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_unique_name</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8032c62dbbd1bead7a978046ad9a676d</anchor>
      <arglist>(std::string templ)</arglist>
    </member>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_update_order</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7fb99c3c5b3bb78d2ab9af042a736ad0</anchor>
      <arglist>(ScoreStatesTemp input)</arglist>
    </member>
    <member kind="function">
      <type>ScoreStatesTemp</type>
      <name>get_update_order</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a746aad2ee1bd6dfd3abee47e8a24816f</anchor>
      <arglist>(std::set&lt; ScoreState * &gt; input)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4b39d171e19de7d77b18712a1d53371b</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handle_use_deprecated</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8a184b20254e6ba550d42ddd36f4e572</anchor>
      <arglist>(std::string message)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isinf</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a04bfc395de74386ea03d2c3f8c8f2308</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isnan</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac5636d6160e3a0253b7ba90be892a6c8</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>internal::PredicateEquals&lt; Pred, true &gt;</type>
      <name>make_predicate_equal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ac41efde5dbdaa13e7166be7a63819d09</anchor>
      <arglist>(const Pred *p, Model *m, int value)</arglist>
    </member>
    <member kind="function">
      <type>internal::PredicateEquals&lt; Pred, false &gt;</type>
      <name>make_predicate_not_equal</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ae566fd45264b1979dd14b55d2fa6d288</anchor>
      <arglist>(const Pred *p, Model *m, int value)</arglist>
    </member>
    <member kind="function">
      <type>O *</type>
      <name>object_cast</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a7e5cb87b915025d9948ecc762db49136</anchor>
      <arglist>(Object *o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_deprecation_exceptions</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a8728fa756dd30b529a0dfe520a2d720e</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_deprecation_warnings</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a43715c8fb5143d0bc4d67f6a40896ebe</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_target</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a53851bd4b9e93a219fc7a2b8da3811f7</anchor>
      <arglist>(TextOutput l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_show_leaked_objects</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>ad1be728e53585811d673eaadf261b761</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af7eb121360be9b6e4c0468e6677bb8d0</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a89524841bb4f39bcbac5ef704f2b9b84</anchor>
      <arglist>(Decorator d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a61ee62a2ede595280473bffc1f1ee19d</anchor>
      <arglist>(WeakPointer&lt; Particle &gt; d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a35e75da7a2e6761f503887aa48a25211</anchor>
      <arglist>(Pointer&lt; Particle &gt; d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_restraint_hierarchy</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a0fcf04bcd228de32bba2cde04f75b66e</anchor>
      <arglist>(ScoringFunctionAdaptor rs, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_help</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4306531ff1cc0c532973cc461cb3b5c6</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>BAD_SCORE</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a4224eb6634397a782d17f850534a1f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>NO_MAX</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aa27f95bed7fac81929db8729845be717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RandomNumberGenerator</type>
      <name>random_number_generator</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>af895f31f94446acff184e8724fef76d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>afa2f8ac983c4bfdbb64d650f8d514d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>aad268dae29331e49c47069cf7669294c</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP.html</anchorfile>
      <anchor>a46f0f27c1e7f714ae9e84f3f0c860a20</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP" title="Graphs">graphs</docanchor>
    <docanchor file="namespaceIMP" title="Values and Objects (C++ only)">values</docanchor>
    <docanchor file="namespaceIMP" title="Google Perf Tools">perf</docanchor>
  </compound>
  <compound kind="struct">
    <name>IMP::AddBoolFlag</name>
    <filename>structIMP_1_1AddBoolFlag.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::AddFloatFlag</name>
    <filename>structIMP_1_1AddFloatFlag.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::AddIntFlag</name>
    <filename>structIMP_1_1AddIntFlag.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::AddStringFlag</name>
    <filename>structIMP_1_1AddStringFlag.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::AdvancedFlag</name>
    <filename>classIMP_1_1AdvancedFlag.html</filename>
    <templarg></templarg>
    <templarg>ENABLED</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::ArgumentParser</name>
    <filename>classIMP_1_1ArgumentParser.html</filename>
    <member kind="function">
      <type>def</type>
      <name>parse_args</name>
      <anchorfile>classIMP_1_1ArgumentParser.html</anchorfile>
      <anchor>a312c342fa6babf8f98c200751be76eec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Array</name>
    <filename>classIMP_1_1Array.html</filename>
    <templarg>D</templarg>
    <templarg>Data</templarg>
    <templarg>SwigData</templarg>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::AttributeOptimizer</name>
    <filename>classIMP_1_1AttributeOptimizer.html</filename>
    <base>IMP::Optimizer</base>
    <member kind="function">
      <type>double</type>
      <name>get_last_score</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a0648a040e41a57060509220ece1a11d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ScoringFunction *</type>
      <name>get_scoring_function</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a6be2b10dcfb0be4616a54ac32ece8a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>ab4582f19387b3ac38dbeb854e613a2c0</anchor>
      <arglist>(unsigned int max_steps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_scoring_function</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a0f6b4b9b00d0e5d766cbd1f498a5e575</anchor>
      <arglist>(ScoringFunctionAdaptor sf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stop_on_good_score</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>ad01418280bc2b93df0ace7217f0658c5</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_dependencies</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a52e11f6e1aae10667a777d07c97148b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_required_score_states</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a47d8148404862c099bc76e9cf3f62204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>accb896b0bfe9412a9268b576584c2da9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemps</type>
      <name>get_interactions</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>ad36883c4a980f5d8f0fe1dd512f2d46e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_outputs</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>ac626900719a020f02b326a3a53e77c17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ScoreStatesTemp &amp;</type>
      <name>get_required_score_states</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>abdfbbd374c5c45f839748821cc524056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_has_dependencies</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>ab3c1f4f461a4b593cc3fbf63aae14d8d</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_has_required_score_states</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>af05808f65e2e052da44c3f7403f2d490</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear_caches</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>aee7e40210481e7c2ffcdab5464cc6973</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a0bed6774bc4e0652d9de26295d9439cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_check_level</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a1c5e64dbd8bc74cf060cef1f0ec48f66</anchor>
      <arglist>(CheckLevel l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_log_level</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a0d3a43f589e45a6b4a61115b127ec054</anchor>
      <arglist>(LogLevel l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_was_used</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a894ddc307f07dc001a4134b363945633</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>aa5c0200769c230a5f553b790f2379af8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a18fc2fa57dd08feb435d2a5710727bc0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a36ad4eba62a18b23ba45eb86e13a5e29</anchor>
      <arglist>(unsigned int ns)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_states</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>a9a9e26bc148ee2dc662ce37bc783d961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemps</type>
      <name>do_get_interactions</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a119f13183a7a4f2e79c3bbd719329486</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handle_set_has_required_score_states</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a1c0dd35782e4bab0fcb3cee52e500f3b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a15d33ac02e7bc30b05f3bfcd91d4572e</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_destroy</name>
      <anchorfile>classIMP_1_1Object.html</anchorfile>
      <anchor>a2ce4f8fb9abd6d673ed254608a09fb50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clear_range_cache</name>
      <anchorfile>classIMP_1_1AttributeOptimizer.html</anchorfile>
      <anchor>a4783df9c3bc18c78da8920d515101b14</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::CommandDispatcher</name>
    <filename>classIMP_1_1CommandDispatcher.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1CommandDispatcher.html</anchorfile>
      <anchor>aa972c1c2028b15f14986c07b66f7fa3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>classIMP_1_1CommandDispatcher.html</anchorfile>
      <anchor>ae473f8fb876b42106c06cbbc3c21eb29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Configuration</name>
    <filename>classIMP_1_1Configuration.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Configuration</name>
      <anchorfile>classIMP_1_1Configuration.html</anchorfile>
      <anchor>ac6ea0e2d7495231d46df0dfceeca9890</anchor>
      <arglist>(Model *m, Configuration *base, std::string name=&quot;Configuration %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1Configuration.html</anchorfile>
      <anchor>a642f7dca965a2836d0e81c2eac26f0d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_configuration</name>
      <anchorfile>classIMP_1_1Configuration.html</anchorfile>
      <anchor>a167792e13c8adf27836d8ba655a732fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ConfigurationSet</name>
    <filename>classIMP_1_1ConfigurationSet.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1ConfigurationSet.html</anchorfile>
      <anchor>aacea1a78983a83d1a4b50ce97b0823a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_configuration</name>
      <anchorfile>classIMP_1_1ConfigurationSet.html</anchorfile>
      <anchor>a461ffb2ab5869ee960940ca949bf1418</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_configuration</name>
      <anchorfile>classIMP_1_1ConfigurationSet.html</anchorfile>
      <anchor>a3ce0085140ccf06631ece7738b0048ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Constraint</name>
    <filename>classIMP_1_1Constraint.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1Constraint.html</anchorfile>
      <anchor>ad90bc5b0026aac9f9fcfd8ad2b747f8c</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1Constraint.html</anchorfile>
      <anchor>a1924fe7701a889339cc5e9fe20f321ca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>after_evaluate</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a5a289a65663e993ebfc7ba335a24c87f</anchor>
      <arglist>(DerivativeAccumulator *accpt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>before_evaluate</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a4879195555f0fb8c9bc80a73cff994d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_skip</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a333cbb2064028f78315851ccfd8523e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_can_skip</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a58df4e014d435745fa6209b75f90e423</anchor>
      <arglist>(bool can_skip)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a8020d0d2ed937769a8fb0dda27633e3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1ModelObject.html</anchorfile>
      <anchor>a00c6811ff8a4ccb012a65ac9b58dbe8d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ConstVector</name>
    <filename>classIMP_1_1ConstVector.html</filename>
    <templarg>Data</templarg>
    <templarg>SwigData</templarg>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::Container</name>
    <filename>classIMP_1_1Container.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1Container.html</anchorfile>
      <anchor>a772eb607afcc92ed7bbfa435f07485fa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1Container.html</anchorfile>
      <anchor>a3c1564f6fe55ed0bbb9e0d7ca2d41abe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_contents_hash</name>
      <anchorfile>classIMP_1_1Container.html</anchorfile>
      <anchor>adc93eb0ec48099e0c167d17faee6f096</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_is_decomposable</name>
      <anchorfile>classIMP_1_1Container.html</anchorfile>
      <anchor>aa5b7c2ebaa4f83d879ea9bb0497b0a59</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::CreateLogContext</name>
    <filename>classIMP_1_1CreateLogContext.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>CreateLogContext</name>
      <anchorfile>classIMP_1_1CreateLogContext.html</anchorfile>
      <anchor>a6599201fcefd6bd0fdad2d33c36518db</anchor>
      <arglist>(const char *fname, const Object *object=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1CreateLogContext.html</anchorfile>
      <anchor>aaa088dfc4249068435a466c458db0425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1CreateLogContext.html</anchorfile>
      <anchor>a75c6da5833b963ecf839b02f660791e1</anchor>
      <arglist>(const char *fname, const Object *object=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Decorator</name>
    <filename>classIMP_1_1Decorator.html</filename>
    <base>IMP::Value</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_valid</name>
      <anchorfile>classIMP_1_1Decorator.html</anchorfile>
      <anchor>ace9801e2cbf47b2bbe97531471727994</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1Decorator.html</anchorfile>
      <anchor>a553058bfcf00d1e5de7aff0a99cc3bc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_particle</name>
      <anchorfile>classIMP_1_1Decorator.html</anchorfile>
      <anchor>ad1accb02f8c3be95582c0a6021c61fcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_particle_index</name>
      <anchorfile>classIMP_1_1Decorator.html</anchorfile>
      <anchor>a66a419314a1f6791ec84ef34493ac70d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::DerivativeAccumulator</name>
    <filename>classIMP_1_1DerivativeAccumulator.html</filename>
    <member kind="function">
      <type></type>
      <name>DerivativeAccumulator</name>
      <anchorfile>classIMP_1_1DerivativeAccumulator.html</anchorfile>
      <anchor>a66ebfb89ad7c7b8b17f7aabdbe088b8f</anchor>
      <arglist>(double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DerivativeAccumulator</name>
      <anchorfile>classIMP_1_1DerivativeAccumulator.html</anchorfile>
      <anchor>aa348f8327dfe74a5948c75f83b1beb3c</anchor>
      <arglist>(const DerivativeAccumulator &amp;copy, double weight)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1DerivativeAccumulator.html</anchorfile>
      <anchor>aa0ec085d8e61198d9ab7ae680eb889ab</anchor>
      <arglist>(const double value) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::EvaluationState</name>
    <filename>structIMP_1_1EvaluationState.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::EventException</name>
    <filename>classIMP_1_1EventException.html</filename>
    <base>IMP::Exception</base>
    <member kind="function">
      <type></type>
      <name>EventException</name>
      <anchorfile>classIMP_1_1EventException.html</anchorfile>
      <anchor>ad7bd7c8e7bda8e4b18d0543c37c7bc3b</anchor>
      <arglist>(const char *t=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Exception</name>
    <filename>classIMP_1_1Exception.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::Flag</name>
    <filename>classIMP_1_1Flag.html</filename>
    <templarg>T</templarg>
    <templarg>ENABLED</templarg>
  </compound>
  <compound kind="struct">
    <name>IMP::FloatIndex</name>
    <filename>structIMP_1_1FloatIndex.html</filename>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::Index</name>
    <filename>classIMP_1_1Index.html</filename>
    <templarg>Tag</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::IndexException</name>
    <filename>classIMP_1_1IndexException.html</filename>
    <base>IMP::Exception</base>
    <member kind="function">
      <type></type>
      <name>IndexException</name>
      <anchorfile>classIMP_1_1IndexException.html</anchorfile>
      <anchor>aa2a5513d235c8fef0bfd9f462cb744d5</anchor>
      <arglist>(const char *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::IndexVector</name>
    <filename>classIMP_1_1IndexVector.html</filename>
    <templarg>Tag</templarg>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <templarg>Equal</templarg>
    <base>IMP::Vector</base>
  </compound>
  <compound kind="class">
    <name>IMP::InputAdaptor</name>
    <filename>classIMP_1_1InputAdaptor.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::InternalException</name>
    <filename>structIMP_1_1InternalException.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::IOException</name>
    <filename>classIMP_1_1IOException.html</filename>
    <base>IMP::Exception</base>
  </compound>
  <compound kind="class">
    <name>IMP::Key</name>
    <filename>classIMP_1_1Key.html</filename>
    <templarg>ID</templarg>
    <base>IMP::Value</base>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>ad3e9384cc61f7f917fa7f92a94d7ca54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Key</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>ac42cbbda76ffe82bb931bcd21fb52d6e</anchor>
      <arglist>(std::string const &amp;c, bool is_implicit_add_permitted=true)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>get_string</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>ae0040b844eba408a4f63a75f208d68b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Key &amp;</type>
      <name>operator++</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>a99ee2d411e6951df306fd2500d88f4ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key&lt; ID &gt;</type>
      <name>add_alias</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>af693f942a3d828618581b1d99eed633b</anchor>
      <arglist>(Key&lt; ID &gt; old_key, std::string new_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector&lt; std::string &gt;</type>
      <name>get_all_strings</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>a0f163e7862cfb282d4a29fe2cbee3b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_key_exists</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>ac5a1d18c31bc0b34c2d362ec4689b19b</anchor>
      <arglist>(std::string sc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>get_number_unique</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>a6f4bf663856397258bb6122c3d817d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>show_all</name>
      <anchorfile>classIMP_1_1Key.html</anchorfile>
      <anchor>a83e531bc5f7fb5384341560e9ec6c108</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::LRUCache</name>
    <filename>classIMP_1_1LRUCache.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::Memoizer</name>
    <filename>classIMP_1_1Memoizer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1Memoizer.html</anchorfile>
      <anchor>a673541c2c4ed5835c8d92cea3d1330ca</anchor>
      <arglist>(const Value &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Model</name>
    <filename>classIMP_1_1Model.html</filename>
    <base>IMP::Object</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a66b119f49b1a34db80d80393c8efdf7a</anchor>
      <arglist>(std::string name=&quot;Model %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>add_particle</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a8a6fd31dc2c37900e879826a2547c2f9</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_undecorator</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a542551beb5170eedbd3488b636942351</anchor>
      <arglist>(ParticleIndex pi, Undecorator *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_particle_caches</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a54b856b0959b2e82bd2cc83b5ce2bdb6</anchor>
      <arglist>(ParticleIndex pi)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_dependencies_updated</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a8102f946916eeac81a122caee5635168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_derivatives_numpy</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ab1f0070a4854af228bd4c85fd944171a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_floats_numpy</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a2ca542fc183d9c399870b9a088c2679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_particle</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ac9fc6548109bca3e62904a460c71b450</anchor>
      <arglist>(ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_ints_numpy</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a54736aec28e32f400def2b2b8544f920</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_model_objects</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ad8192fa104bc2c1af1777c8df1116463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_particle</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a5557ecdab824617aab45889f5258a1df</anchor>
      <arglist>(ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_particle_indexes</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>af7c7e0c0efb8c8bd3cd425ef1528eb54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_particle_name</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>af1dc95d2814b6f241b3ced572eeb8754</anchor>
      <arglist>(ParticleIndex pi)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_particles_size</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a16d787444157d562220806a5ee620afe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_sphere_derivatives_numpy</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a41b1335837231f7432a5d67c0600d4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_spheres_numpy</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>aa4ef536fbc1a24693dd89d718937af59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>get_unique_id</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a2a87ffac266a7c72d2880f81d88ab4f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a47e96f8e30231b2858ae9af6d28f494c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_particle</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a79997f3d9cd3e741691cd82bf354eeba</anchor>
      <arglist>(ParticleIndex pi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore_dependencies</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a08b81cd6e655d3d90907cfa87627663f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_dependencies</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a70163e349ab5eee48ecb60a3e0b3ee16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a102aa219a8ccfd726f5505693c625702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Model *</type>
      <name>get_by_unique_id</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ae79bbc844c07d807a8c2942d1629ed1d</anchor>
      <arglist>(uint32_t id)</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>score_states</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a0b76400121d1449bbeb02872fcea571b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a91ccfce695a3fca9573db62aeac238a7</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle, Type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a50641e3e4bb4327f0070337b46b4f330</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a2069d4c9b7c5c16270b11492e24129fd</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a6330dc49deda471fed3eafbe4f070162</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle, Type value)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>get_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a70beaf9edacfdf5bdf9734686714121b</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_cache_attribute</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a5d7120c2ca95a551bf4b6427defee468</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle, Type value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_optimized</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>aa723c09f91b7a28231411b893daaf033</anchor>
      <arglist>(TypeKey attribute_key, ParticleIndex particle, bool true_or_false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ab6f2323f70ce6ae41b012712c2320347</anchor>
      <arglist>(ModelKey mk, Object *o)</arglist>
    </member>
    <member kind="function">
      <type>Object *</type>
      <name>get_data</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a4576e3d546cb47cdcfd5984e95372904</anchor>
      <arglist>(ModelKey mk) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_data</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>ab482d2551fb3bc15a51a315f8661e91f</anchor>
      <arglist>(ModelKey mk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_data</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>abc66c2f78fee9e851d52dfda0b423d89</anchor>
      <arglist>(ModelKey mk) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_age</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>aa2e43b6bb99f205a33c43822bd8ed615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_trigger_last_updated</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>af673bc657b73af95c3015127adbc587a</anchor>
      <arglist>(TriggerKey tk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_trigger_updated</name>
      <anchorfile>classIMP_1_1Model.html</anchorfile>
      <anchor>a5cc601d9d057325a7fb3baea58fef4c5</anchor>
      <arglist>(TriggerKey tk)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ModelException</name>
    <filename>classIMP_1_1ModelException.html</filename>
    <base>IMP::Exception</base>
    <member kind="function">
      <type></type>
      <name>ModelException</name>
      <anchorfile>classIMP_1_1ModelException.html</anchorfile>
      <anchor>a2f495bdd0ede099fb38226785263fdfa</anchor>
      <arglist>(const char *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ModelObject</name>
    <filename>classIMP_1_1ModelObject.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::NonCopyable</name>
    <filename>classIMP_1_1NonCopyable.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::Object</name>
    <filename>classIMP_1_1Object.html</filename>
    <base>IMP::NonCopyable</base>
  </compound>
  <compound kind="class">
    <name>IMP::Optimizer</name>
    <filename>classIMP_1_1Optimizer.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="variable">
      <type>list</type>
      <name>optimizer_states</name>
      <anchorfile>classIMP_1_1Optimizer.html</anchorfile>
      <anchor>ab77e64843b1f210f5281274ac5a5793f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::OptimizerState</name>
    <filename>classIMP_1_1OptimizerState.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function">
      <type></type>
      <name>OptimizerState</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>ad6c2225465a62144555ff0a350e2c1e7</anchor>
      <arglist>(Model *m, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_updates</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>aeccba4271d7981c85469edfde1afe8d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_period</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a09c905ef32f2becc2f3a67d0fc0f7e42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a54ce7836830e3c8a5628d217af3b4d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_is_optimizing</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a8da4bab2f9aee7663a13c8595072507b</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_updates</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a68a4aff48a3ff0797d5834f55722305c</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_period</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a3af96302c7b825b674eed25faddd72ef</anchor>
      <arglist>(unsigned int p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>ab402f8a97020c882161de5fdec9d059d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_always</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>ab41ae68c4bee6101d8c537a682e50a79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>ac543c98de209952ec14e4488c4d57d73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>a521a6223c00bcf88fe06210646708a76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1OptimizerState.html</anchorfile>
      <anchor>af6ac1164214c65ed0529db97f79c9115</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PairContainer</name>
    <filename>classIMP_1_1PairContainer.html</filename>
    <base>IMP::Container</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>ae4d131f42b91dfea7785493ea3092ce7</anchor>
      <arglist>(const PairModifier *sm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>a22536a01bbe9a437b59fa3d39fb4b453</anchor>
      <arglist>(const PairModifier *m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic_moved</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>a7bbb919465a48da1f8875030af040737</anchor>
      <arglist>(const PairModifier *m, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_moved</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>a4056f063501464a662a6d34a665b1ea8</anchor>
      <arglist>(const PairModifier *sm, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>a0bf936522768e2f9db9b619447b7a1e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1PairContainer.html</anchorfile>
      <anchor>a4694608c68aaa026d806cfd42c08684b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PairContainerAdaptor</name>
    <filename>classIMP_1_1PairContainerAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>PairContainerAdaptor</name>
      <anchorfile>classIMP_1_1PairContainerAdaptor.html</anchorfile>
      <anchor>ad6224f22244c6a5bd3df68d444268644</anchor>
      <arglist>(PairContainer *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairContainerAdaptor</name>
      <anchorfile>classIMP_1_1PairContainerAdaptor.html</anchorfile>
      <anchor>a2fc7a74cc52749a75a9044ff65ec9fbb</anchor>
      <arglist>(IMP::internal::PointerBase&lt; C &gt; c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairContainerAdaptor</name>
      <anchorfile>classIMP_1_1PairContainerAdaptor.html</anchorfile>
      <anchor>acdd7c82b444638d13edfef35d971654b</anchor>
      <arglist>(const ParticlePairsTemp &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name_if_default</name>
      <anchorfile>classIMP_1_1PairContainerAdaptor.html</anchorfile>
      <anchor>a22a1aafb6fbd4d43f89bff983cd8e9d9</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PairModifier</name>
    <filename>classIMP_1_1PairModifier.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::ParticleOutputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1PairModifier.html</anchorfile>
      <anchor>a1203f866809502706d3ddd3d5e1d930e</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1PairModifier.html</anchorfile>
      <anchor>ae71e356ac6257d8c65b3b2415b768e85</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes_moved</name>
      <anchorfile>classIMP_1_1PairModifier.html</anchorfile>
      <anchor>aa5d8ffc0c3a1e03d5d1c23cd5b35602c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, unsigned int lower_bound, unsigned int upper_bound, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1ParticleInputs.html</anchorfile>
      <anchor>a117b8901ab831bde1b2badb3599447c9</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_outputs</name>
      <anchorfile>classIMP_1_1ParticleOutputs.html</anchorfile>
      <anchor>a319cf644ab7d3d1b4041c3bc21318009</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1ParticleInputs.html</anchorfile>
      <anchor>a98f8a3455c3d69f08eebdb2b659c3317</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1ParticleOutputs.html</anchorfile>
      <anchor>ac90bae015c3ee606281cead2719631ff</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PairPredicate</name>
    <filename>classIMP_1_1PairPredicate.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1PairPredicate.html</anchorfile>
      <anchor>a812ced5db0cb09c670fedb3a900e0fcf</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1PairPredicate.html</anchorfile>
      <anchor>ab5f444057ff7abd671ffee74da71610f</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1PairPredicate.html</anchorfile>
      <anchor>af1a76c20d0da0cb8091f70010abab1b3</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1PairPredicate.html</anchorfile>
      <anchor>af48cdb44570360fcae3b3e3596954ff4</anchor>
      <arglist>(Model *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PairScore</name>
    <filename>classIMP_1_1PairScore.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Restraints</type>
      <name>create_current_decomposition</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>ac3f53ee0daf867730b666ccfbfcbfa25</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>a9353c185485691a3f4cc49fa2e85db84</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt, DerivativeAccumulator *da, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>aaaebeddee8c8b2719360af5e5ee60467</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>addfa4378ed7ec501350f1f70d96446de</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt, DerivativeAccumulator *da) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>a2dca93e58717faf070de26c0095b5948</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>a1e2eda017291b400ccaa6f5d4d4a1b53</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>a645eae1da1512fbd98ddca38f5a4cb7c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1PairScore.html</anchorfile>
      <anchor>a39261041d14094111cb11a8d98f74241</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Particle</name>
    <filename>classIMP_1_1Particle.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>a6caf01fd20050cd3a9db409ef073fc3b</anchor>
      <arglist>(Model *m, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>ac64c5db6063037526f0c0065b5e2fa5e</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>ac6e7075abec94713fd43ed2fbde721c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>af042b70035d9c879ca622e182d4cada5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>aa7aa8ce798d372ab8b8691342c885339</anchor>
      <arglist>() const overridefinal</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1Particle.html</anchorfile>
      <anchor>abd7e0f4455e31b62ab242c7885628928</anchor>
      <arglist>() const overridefinal</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleAdaptor</name>
    <filename>classIMP_1_1ParticleAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>ParticleAdaptor</name>
      <anchorfile>classIMP_1_1ParticleAdaptor.html</anchorfile>
      <anchor>a37b3a8366e47946b8312d7a5fd7e5279</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParticleAdaptor</name>
      <anchorfile>classIMP_1_1ParticleAdaptor.html</anchorfile>
      <anchor>aa1ccdc4c6d666ff5fec1e97acf23cc19</anchor>
      <arglist>(const Decorator &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleIndexAdaptor</name>
    <filename>classIMP_1_1ParticleIndexAdaptor.html</filename>
    <base>Index&lt; ParticleIndexTag &gt;</base>
    <base protection="private">IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleIndexesAdaptor</name>
    <filename>classIMP_1_1ParticleIndexesAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleIndexPairsAdaptor</name>
    <filename>classIMP_1_1ParticleIndexPairsAdaptor.html</filename>
    <base>IMP::Vector</base>
    <base protection="private">IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleInputs</name>
    <filename>classIMP_1_1ParticleInputs.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::ParticleOutputs</name>
    <filename>classIMP_1_1ParticleOutputs.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::Pointer</name>
    <filename>structIMP_1_1Pointer.html</filename>
    <templarg>O</templarg>
    <member kind="function">
      <type>O *</type>
      <name>get</name>
      <anchorfile>structIMP_1_1Pointer.html</anchorfile>
      <anchor>a397812d1cb0521722ee4d69dc321c2d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>O *</type>
      <name>release</name>
      <anchorfile>structIMP_1_1Pointer.html</anchorfile>
      <anchor>a13dccde3a7516a6f77dc562f9872eb81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::PointerMember</name>
    <filename>structIMP_1_1PointerMember.html</filename>
    <templarg>O</templarg>
    <member kind="function">
      <type>O *</type>
      <name>get</name>
      <anchorfile>structIMP_1_1PointerMember.html</anchorfile>
      <anchor>ae1caef82a5f0087e3da9b14c7359e65c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>O *</type>
      <name>release</name>
      <anchorfile>structIMP_1_1PointerMember.html</anchorfile>
      <anchor>a96db338f13191f0d0ed5a5411b264bc2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::PythonDirectedGraph</name>
    <filename>classIMP_1_1PythonDirectedGraph.html</filename>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1PythonDirectedGraph.html</anchorfile>
      <anchor>a05ad2172a8114530eac4b4f6e696ddcd</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::QuadContainer</name>
    <filename>classIMP_1_1QuadContainer.html</filename>
    <base>IMP::Container</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>a7b1ba7958e70ba7c3411e2d949839ac2</anchor>
      <arglist>(const QuadModifier *sm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>a7a5945aff269bdc6f7e8e27d327e1974</anchor>
      <arglist>(const QuadModifier *m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic_moved</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>af2e0fe21fe427f811178c0a1704f1ba7</anchor>
      <arglist>(const QuadModifier *m, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_moved</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>a69b4c8cb88a2162dc18b7f07a6f7e60c</anchor>
      <arglist>(const QuadModifier *sm, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexQuads</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>a22a0e3ee54632328c0e92e2f516d26c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexQuads</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1QuadContainer.html</anchorfile>
      <anchor>a7cd6bfec41f540aab9cfc0c90d10df48</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::QuadContainerAdaptor</name>
    <filename>classIMP_1_1QuadContainerAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>QuadContainerAdaptor</name>
      <anchorfile>classIMP_1_1QuadContainerAdaptor.html</anchorfile>
      <anchor>ac170cad8e100bbed73e7292a6f686620</anchor>
      <arglist>(QuadContainer *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadContainerAdaptor</name>
      <anchorfile>classIMP_1_1QuadContainerAdaptor.html</anchorfile>
      <anchor>a03c5fa176737a981b06fcbdb864ab764</anchor>
      <arglist>(IMP::internal::PointerBase&lt; C &gt; c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadContainerAdaptor</name>
      <anchorfile>classIMP_1_1QuadContainerAdaptor.html</anchorfile>
      <anchor>aabb4af10c74d866e9cd30c8d9345163e</anchor>
      <arglist>(const ParticleQuadsTemp &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name_if_default</name>
      <anchorfile>classIMP_1_1QuadContainerAdaptor.html</anchorfile>
      <anchor>a3eed755215d0b3bedf4e59df1678f4a7</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::QuadModifier</name>
    <filename>classIMP_1_1QuadModifier.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::ParticleOutputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1QuadModifier.html</anchorfile>
      <anchor>ab694ee2dc014bd33fbd125ebd2411b1a</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1QuadModifier.html</anchorfile>
      <anchor>acbc547917363142e0ccd74fbfe0f31ab</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes_moved</name>
      <anchorfile>classIMP_1_1QuadModifier.html</anchorfile>
      <anchor>ace28229b91ce1475a4de2dea5fa235b9</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, unsigned int lower_bound, unsigned int upper_bound, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::QuadPredicate</name>
    <filename>classIMP_1_1QuadPredicate.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1QuadPredicate.html</anchorfile>
      <anchor>a44d432e3d1746aea93562aa4778adb85</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1QuadPredicate.html</anchorfile>
      <anchor>a10a8b17f369245507bfe891fd94dd507</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1QuadPredicate.html</anchorfile>
      <anchor>a2ab73aa13a7fc2ca8a37ee9b27633f6c</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1QuadPredicate.html</anchorfile>
      <anchor>a1cfb9e54d01416f23d1a67674860d02c</anchor>
      <arglist>(Model *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::QuadScore</name>
    <filename>classIMP_1_1QuadScore.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Restraints</type>
      <name>create_current_decomposition</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>ae36391e637be084a570bf20cb6315f8e</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>adfcf52bbb55dccf87eac762c158bcfc4</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt, DerivativeAccumulator *da, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>a23fe083ebd9ab41fae847c739c565e56</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>a8811aa00b39851809b84403156adde47</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt, DerivativeAccumulator *da) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>a5998238ace6d73cdb32b11941a640fe0</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>a58869d3e961b4fca71e86fa1a79540fc</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>ac239db0a3df1c7ab445b3f3aa0faf193</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1QuadScore.html</anchorfile>
      <anchor>af8518e746dc7d2ccabaec558c16f0b6c</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::RAII</name>
    <filename>classIMP_1_1RAII.html</filename>
    <base>IMP::NonCopyable</base>
  </compound>
  <compound kind="class">
    <name>IMP::Refiner</name>
    <filename>classIMP_1_1Refiner.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Refiner</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a943633ba085e113df7ffc0cbbdc059b5</anchor>
      <arglist>(std::string name=&quot;Refiner %1%&quot;, bool is_by_ref=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a88fd0c21d615aca9bc30f651a2d4df24</anchor>
      <arglist>(Particle *) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_by_ref_supported</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a2b0e403264296e1c1779be0a058d2a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>get_number_of_refined</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a86526ae1b5275cf0d1c42c3201f2e366</anchor>
      <arglist>(Particle *a) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a5472c3ed2b59a73d39ca58fba0aad9d9</anchor>
      <arglist>(Particle *a) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Particle *</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>aee8d61be106d561f9be0e7ace3bbef34</anchor>
      <arglist>(Particle *a, unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_refined_indexes</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>a93aea26b1bfc67c1b704fd25df6ba3da</anchor>
      <arglist>(Model *m, ParticleIndex pi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes const &amp;</type>
      <name>get_refined_indexes_by_ref</name>
      <anchorfile>classIMP_1_1Refiner.html</anchorfile>
      <anchor>aa56cac7a4534bc17640ca939e4e8fcee</anchor>
      <arglist>(Model *m, ParticleIndex pi) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Restraint</name>
    <filename>classIMP_1_1Restraint.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function">
      <type></type>
      <name>Restraint</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a65f5bfc07a342897b316c4cd0bc6f06c</anchor>
      <arglist>(Model *m, std::string name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Restraint</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>af4062b270dcd7eeb4679e93a8f795403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_current_decomposition</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a884c8cc8b6fb790f8b0f057958f4d4ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_decomposition</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>ae21bbd0c803b1ea05fc04d0aa6a6c200</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ScoringFunction *</type>
      <name>create_scoring_function</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a2bf725ecf399f8fe8ab65980e0386f00</anchor>
      <arglist>(double weight=1.0, double max=NO_MAX) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RestraintInfo *</type>
      <name>get_dynamic_info</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a38bbb37b0e8dc92785b1834233f577c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_aggregate</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a406e1998c4ccde0f5185111ef8050362</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_last_score</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>afab6b967bb46ba89946c71d9f6e516d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_last_score</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>aa36c49e393b7d1245c32a597398fe255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a21c36dd27e6c2ce79f0466e8747ffaeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>af07a7d34ad419288411fd39b97cfd2b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_was_good</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a32a7f2a5fef3c5d097bb5a989297e536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a5f8953071e17101c7894fee0b1941c01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_decomposition</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a36830b31f93a79a4b4049f06b67b4457</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a65249c6698a447733695711cd9dd3ff3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a9241a9d36d77c3ce2ff0369dedfee90c</anchor>
      <arglist>(bool calc_derivs) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_moved</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>ad5a4fba3d82bca2768a81d11f1f43517</anchor>
      <arglist>(bool calc_derivs, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_moved_if_below</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a3102c3af911a903aec91fff1939ad2d4</anchor>
      <arglist>(bool calc_derivatives, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis, double max) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_moved_if_good</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a1b6e3a41f853457ceaf5c98c42f1a3ac</anchor>
      <arglist>(bool calc_derivatives, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a098ff90cebf45d969eb8a4142000710c</anchor>
      <arglist>(bool calc_derivatives) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_below</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a6c7cd78b7a7440b5621c114d05e0c534</anchor>
      <arglist>(bool calc_derivatives, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a56c8448bd88343b01b7f75f2d08bb903</anchor>
      <arglist>(DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate_moved</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>ace21b908773f7c028768216d0e05615a</anchor>
      <arglist>(DerivativeAccumulator *da, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate_if_good</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>a942cd3803b44810941509df2c9c14e95</anchor>
      <arglist>(DerivativeAccumulator *da, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate_if_below</name>
      <anchorfile>classIMP_1_1Restraint.html</anchorfile>
      <anchor>ac97f2ecce9e97260b0e99d9474984c96</anchor>
      <arglist>(DerivativeAccumulator *da, double max) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::RestraintInfo</name>
    <filename>classIMP_1_1RestraintInfo.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>add_filename</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>ad24f215e01a74c2beb60cfca641594ec</anchor>
      <arglist>(std::string key, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_filenames</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a5406ce92043900c279c70350a591fa44</anchor>
      <arglist>(std::string key, Strings value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_float</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>afef5e1097e91cbe3918212a9df07d421</anchor>
      <arglist>(std::string key, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_floats</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>acbd69e05ec400c56c632a9dda5527992</anchor>
      <arglist>(std::string key, Floats value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_int</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>ada258110398e5c5e742cc21545371a8a</anchor>
      <arglist>(std::string key, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_ints</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a9853bc56553c99617aa9a8f870cb3fea</anchor>
      <arglist>(std::string key, Ints value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_particle_indexes</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a3c4509787a136fc0c28f92c2468764ed</anchor>
      <arglist>(std::string key, ParticleIndexes value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_string</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a43952488871f475bc1c052c96dafa1fd</anchor>
      <arglist>(std::string key, std::string value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_strings</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a57dccdb6f691f072fae67bc72d270795</anchor>
      <arglist>(std::string key, Strings value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a42bfe95db76244a4aae2c206bff4b03f</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a4e896eae14c3c4d296069a59ae82f152</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filenames_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a112fc8820d4194f7576f712b393be24e</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>get_filenames_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a30cdf6307b1eea3cec62d1c245c9e620</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_float_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>aad0bfd48a10e374050018c2e2bc0dba0</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_float_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>abea3127bc5a0b52f71d6acdb4a1a82c0</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_floats_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>aec6671449aa578e0628da001712bb250</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_floats_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a8f0ed8fad307595a7570430eccd0637c</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_int_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>af2de25762a864d80a94d8af7703c57a9</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_int_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a74d098abcd0bb440bd154c94e5c1be4b</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_ints_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a41afe1153128d405a1763653fcd2fdf3</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_ints_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>aa9f60e1383573771b95a33d4d7ba3de6</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_filename</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>af5a8695c7473872a9fd1daa7341edd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_filenames</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>ad26f626e31ca6f0693b3defb778d31a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_float</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>af97aa1fc895a674e6dcd4ed548fdb7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_floats</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a4f178bdc8f4c930514a2bf2b486e2a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_int</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a458cd65f341c2c1b64f819c6be5db7ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_ints</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a5f42cbb8fbef36d9e2d67ca30e45064f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_particle_indexes</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a7e4f2fc1f93c1384642588f24efdb590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_string</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a8aac81ff51c7c95cbec99dc4eb23022f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_strings</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a1cee4ac03a6fbf277c9874f68be4abc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_particle_indexes_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a89d16eebfd763dd1fb42d426b2fd845c</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_particle_indexes_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a80e65ed136d91ca7fd2d95b315793696</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a18063e9936354acdea7a7e3cfd1c5b28</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a18aae1fed4123253e52f1c36c32c4fb7</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_strings_key</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a91cdb926bee85afe3e9e0848ce2ae1f0</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Strings</type>
      <name>get_strings_value</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a1fbefc84b9a41c28f25e5a7a32025657</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1RestraintInfo.html</anchorfile>
      <anchor>a9a6b74ea5dfbdad897a15c8ba0c2bcdd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::RestraintsAdaptor</name>
    <filename>classIMP_1_1RestraintsAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::RestraintSet</name>
    <filename>classIMP_1_1RestraintSet.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>RestraintSet</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a8879e7a6fc3143465b5aa5e5e49f5ea1</anchor>
      <arglist>(Model *m, double weight, const std::string &amp;name=&quot;RestraintSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestraintSet</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a815c2a582544773485481f97c3c2d96e</anchor>
      <arglist>(Model *m, const std::string &amp;name=&quot;RestraintSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestraintSet</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a11dcdbe27b20597a83cac9a8179e4008</anchor>
      <arglist>(const RestraintsTemp &amp;rs, double weight, const std::string &amp;name=&quot;RestraintSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_score</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a5b6ea995db77867f2b3fac23e4d08600</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; RestraintsTemp, RestraintSetsTemp &gt;</type>
      <name>get_non_sets_and_sets</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a5220aab1dcc6af68fa466a99ea2af3fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a10446d56e7dd2dc6c5ad626c16048d14</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>ab4bfc35d01d1a6f68cd4726b121ff2e9</anchor>
      <arglist>(DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>restraints</name>
      <anchorfile>classIMP_1_1RestraintSet.html</anchorfile>
      <anchor>a0e683911b860bc7ef8045838751bb08e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Sampler</name>
    <filename>classIMP_1_1Sampler.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>ScoringFunction *</type>
      <name>get_scoring_function</name>
      <anchorfile>classIMP_1_1Sampler.html</anchorfile>
      <anchor>a15adf816246a121950892cbc957f0681</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SaveToConfigurationSetOptimizerState</name>
    <filename>classIMP_1_1SaveToConfigurationSetOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1SaveToConfigurationSetOptimizerState.html</anchorfile>
      <anchor>ac5d97e31680960e80669a30078c694aa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1SaveToConfigurationSetOptimizerState.html</anchorfile>
      <anchor>aa81739098140aa96f93f3af7b8b000b1</anchor>
      <arglist>(unsigned int update_number) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScopedAddCacheAttribute</name>
    <filename>classIMP_1_1ScopedAddCacheAttribute.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>ScopedAddCacheAttribute</name>
      <anchorfile>classIMP_1_1ScopedAddCacheAttribute.html</anchorfile>
      <anchor>a8af77bca25f204c29b0b5787e2b8788d</anchor>
      <arglist>(Particle *p, Key key, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1ScopedAddCacheAttribute.html</anchorfile>
      <anchor>aeff285cf671e6b89e08c6d53fd7203c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1ScopedAddCacheAttribute.html</anchorfile>
      <anchor>a950aa06fe61aafec097d962eb556714a</anchor>
      <arglist>(Particle *p, Key key, const Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScopedSetAttribute</name>
    <filename>classIMP_1_1ScopedSetAttribute.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>ScopedSetAttribute</name>
      <anchorfile>classIMP_1_1ScopedSetAttribute.html</anchorfile>
      <anchor>a99b2803e357b09f6de49e93ce6cfefbd</anchor>
      <arglist>(Particle *p, Key key, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1ScopedSetAttribute.html</anchorfile>
      <anchor>a6a1966e2a4e88775ab2baf1a7f358721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1ScopedSetAttribute.html</anchorfile>
      <anchor>a7adf89db75ee85754c433440f37eb3ad</anchor>
      <arglist>(Particle *p, Key key, const Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScoreAccumulator</name>
    <filename>classIMP_1_1ScoreAccumulator.html</filename>
    <base>IMP::Value</base>
    <member kind="function">
      <type></type>
      <name>ScoreAccumulator</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>afb10562c8b23ceea984690c8d1026889</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScoreAccumulator</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>a02c104d9f192ea011f0a7f8b69612bfa</anchor>
      <arglist>(ScoreAccumulator o, const Restraint *r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScoreAccumulator</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>ac46b358820c2a6e1faa379873b786390</anchor>
      <arglist>(ScoreAccumulator o, double weight, double local_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_score</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>ac467da74fb010272870fcbc53c27272d</anchor>
      <arglist>(double score)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_abort_evaluation</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>ae055902bfb984f8131967e76856e5cf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_evaluate_if_below</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>afcb09bbe3fb0134aee0fbd218e4e4a8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_evaluate_if_good</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>ab4d7f8a97ea75683866290519c424bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum</name>
      <anchorfile>classIMP_1_1ScoreAccumulator.html</anchorfile>
      <anchor>aca78ec8b82630cf4933de3ebb8fbc5a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScoreState</name>
    <filename>classIMP_1_1ScoreState.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a23aacfd7132adf7e82d4f99719297369</anchor>
      <arglist>(DerivativeAccumulator *accpt)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1ScoreState.html</anchorfile>
      <anchor>a37c5872c7ef4895851364e73c3ad7708</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScoringFunction</name>
    <filename>classIMP_1_1ScoringFunction.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual Restraints</type>
      <name>create_restraints</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a125a2b8e087c03304992e5ac5bcaef66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>aef918cb4171cafe7bbaa72432f1451aa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a47372db3767fc4fabb582850e3f234af</anchor>
      <arglist>(bool derivatives)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_moved</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>ab58935a06c3a9c2a4c956987ce30cada</anchor>
      <arglist>(bool derivatives, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_had_good_score</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a66185d3f07449a8ba75c29c121dca7fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_score</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a0d4cc2fb34995e3cdc2a5140423b9fa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_add_score_and_derivatives</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a1dbb15f117f7ae2e6398ddc1acfe5316</anchor>
      <arglist>(ScoreAccumulator sa, const ScoreStatesTemp &amp;ss)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_add_score_and_derivatives_moved</name>
      <anchorfile>classIMP_1_1ScoringFunction.html</anchorfile>
      <anchor>a0a3b283bf930c2dfabf13192ef617fa6</anchor>
      <arglist>(ScoreAccumulator sa, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis, const ScoreStatesTemp &amp;ss)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::ScoringFunctionAdaptor</name>
    <filename>classIMP_1_1ScoringFunctionAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::SetCheckState</name>
    <filename>classIMP_1_1SetCheckState.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>SetCheckState</name>
      <anchorfile>classIMP_1_1SetCheckState.html</anchorfile>
      <anchor>af3c629aea0fc699de8ebfccda3c5e9dd</anchor>
      <arglist>(Object *o, CheckLevel l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetCheckState</name>
      <anchorfile>classIMP_1_1SetCheckState.html</anchorfile>
      <anchor>a33fed0cb3ec3db98583d8499c5d3cd8b</anchor>
      <arglist>(CheckLevel l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1SetCheckState.html</anchorfile>
      <anchor>a4e72513ed5b103060e663b6b98a65e81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1SetCheckState.html</anchorfile>
      <anchor>aefc4eaea42c097c397f18cfe172de163</anchor>
      <arglist>(Object *o, CheckLevel l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SetLogState</name>
    <filename>classIMP_1_1SetLogState.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>SetLogState</name>
      <anchorfile>classIMP_1_1SetLogState.html</anchorfile>
      <anchor>a50645d667e2e83b9068525e32369e35b</anchor>
      <arglist>(Object *o, LogLevel l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetLogState</name>
      <anchorfile>classIMP_1_1SetLogState.html</anchorfile>
      <anchor>a050f0393198ad078f3ab133d013c7bc6</anchor>
      <arglist>(LogLevel l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1SetLogState.html</anchorfile>
      <anchor>ae8defa02d444b5a6563e65a8c9fa4c50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1SetLogState.html</anchorfile>
      <anchor>ab9da0857b9c5cd09e20e096eac7f3e5f</anchor>
      <arglist>(Object *o, LogLevel l)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SetLogTarget</name>
    <filename>classIMP_1_1SetLogTarget.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>SetLogTarget</name>
      <anchorfile>classIMP_1_1SetLogTarget.html</anchorfile>
      <anchor>affb259b20b780a7eeda3e1321ecbb449</anchor>
      <arglist>(TextOutput to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1SetLogTarget.html</anchorfile>
      <anchor>a027dde182299ba2867a11ec044ca4899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1SetLogTarget.html</anchorfile>
      <anchor>a9d2e1fa326b32ea584eb948c212897d4</anchor>
      <arglist>(TextOutput to)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SetNumberOfThreads</name>
    <filename>classIMP_1_1SetNumberOfThreads.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>SetNumberOfThreads</name>
      <anchorfile>classIMP_1_1SetNumberOfThreads.html</anchorfile>
      <anchor>a786de7fe775204fc40dfcbabbdd03c62</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1SetNumberOfThreads.html</anchorfile>
      <anchor>a89cd0ab147526e6ca0f3a85743a75e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1SetNumberOfThreads.html</anchorfile>
      <anchor>af29adae3802ae1d30e2a8f3764d7a20a</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::Showable</name>
    <filename>classIMP_1_1Showable.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::SingletonContainer</name>
    <filename>classIMP_1_1SingletonContainer.html</filename>
    <base>IMP::Container</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>abc33d2f583c005dcddc80985e31be519</anchor>
      <arglist>(const SingletonModifier *sm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>a9379f8eba15a16219eccc38f9f7ca827</anchor>
      <arglist>(const SingletonModifier *m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic_moved</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>a881db3daef9944eb98dfa40eea54b028</anchor>
      <arglist>(const SingletonModifier *m, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_moved</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>aaa76cfad0e04e47ac27c9ee508e3485a</anchor>
      <arglist>(const SingletonModifier *sm, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexes</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>a0f805ae830a2b77dc47d2528822a0308</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexes</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1SingletonContainer.html</anchorfile>
      <anchor>aeebe47b7201a29319f0a522c33f6d738</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SingletonContainerAdaptor</name>
    <filename>classIMP_1_1SingletonContainerAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>SingletonContainerAdaptor</name>
      <anchorfile>classIMP_1_1SingletonContainerAdaptor.html</anchorfile>
      <anchor>a87a965e7f45d6062b4bd9b2de90e07d6</anchor>
      <arglist>(SingletonContainer *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingletonContainerAdaptor</name>
      <anchorfile>classIMP_1_1SingletonContainerAdaptor.html</anchorfile>
      <anchor>ae8ed20c4f25267b6d2e97978f3324add</anchor>
      <arglist>(IMP::internal::PointerBase&lt; C &gt; c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingletonContainerAdaptor</name>
      <anchorfile>classIMP_1_1SingletonContainerAdaptor.html</anchorfile>
      <anchor>a0a71a74b5dfe5e02ccb1468471330920</anchor>
      <arglist>(const ParticlesTemp &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name_if_default</name>
      <anchorfile>classIMP_1_1SingletonContainerAdaptor.html</anchorfile>
      <anchor>ab119503142c15b6a4fe3fd5adcb0de56</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SingletonModifier</name>
    <filename>classIMP_1_1SingletonModifier.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::ParticleOutputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1SingletonModifier.html</anchorfile>
      <anchor>a20017115e6adc4aef22a45918beb77f9</anchor>
      <arglist>(Model *m, ParticleIndex v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1SingletonModifier.html</anchorfile>
      <anchor>a80231ec89eb82fa05d6b525fa6ed849f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes_moved</name>
      <anchorfile>classIMP_1_1SingletonModifier.html</anchorfile>
      <anchor>a5a299e609e143eb15b9453681a85f8dc</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SingletonPredicate</name>
    <filename>classIMP_1_1SingletonPredicate.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1SingletonPredicate.html</anchorfile>
      <anchor>a64a04d72baf5b56f35cf28cf758e1746</anchor>
      <arglist>(Model *m, ParticleIndex vt) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1SingletonPredicate.html</anchorfile>
      <anchor>a7b51f2837f9b2b429d2245eb8c80beac</anchor>
      <arglist>(Model *m, ParticleIndex vt) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1SingletonPredicate.html</anchorfile>
      <anchor>a3fe80fa98a4011cee2ffec3a391c513b</anchor>
      <arglist>(Model *m, ParticleIndex vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1SingletonPredicate.html</anchorfile>
      <anchor>a2c20739d37be0db235f6b5aeb6567cc2</anchor>
      <arglist>(Model *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SingletonScore</name>
    <filename>classIMP_1_1SingletonScore.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Restraints</type>
      <name>create_current_decomposition</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>ada1d3df437cff3117db1aaa65870a9f7</anchor>
      <arglist>(Model *m, ParticleIndex vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>aceff09a984620d3e0fd287e5e1692304</anchor>
      <arglist>(Model *m, ParticleIndex vt, DerivativeAccumulator *da, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>a72fedd1e026640d8dff579c8138cb543</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>a65c2554625de92d0c0cfbabe108491c2</anchor>
      <arglist>(Model *m, ParticleIndex vt, DerivativeAccumulator *da) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>a6b4756b83a12ad91eb5f6d5f943cde39</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>a4212150dc45c60f04b7422491d0f919f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>a2ddfa8309b6f3589864c028066777e59</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1SingletonScore.html</anchorfile>
      <anchor>ad96fd46369829929bb48e4da6b63494e</anchor>
      <arglist>(Model *m, ParticleIndex vt) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::SparseSymmetricPairMemoizer</name>
    <filename>classIMP_1_1SparseSymmetricPairMemoizer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>F</type>
      <name>apply_to_current_contents</name>
      <anchorfile>classIMP_1_1SparseSymmetricPairMemoizer.html</anchorfile>
      <anchor>a958e1d379361fa341763aae399c245dc</anchor>
      <arglist>(F f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classIMP_1_1SparseSymmetricPairMemoizer.html</anchorfile>
      <anchor>abccd5fb5420c45a5bd1239836d851bdc</anchor>
      <arglist>(const Key &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TextInput</name>
    <filename>classIMP_1_1TextInput.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::TextOutput</name>
    <filename>classIMP_1_1TextOutput.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::TripletContainer</name>
    <filename>classIMP_1_1TripletContainer.html</filename>
    <base>IMP::Container</base>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>a4a6b9e2955f3b48a34bafe045692cb7c</anchor>
      <arglist>(const TripletModifier *sm) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>a53b7f6552eb455c99db57feb1efff7e6</anchor>
      <arglist>(const TripletModifier *m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic_moved</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>a3ee0a2b797304469888071bf682a1f7d</anchor>
      <arglist>(const TripletModifier *m, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_moved</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>a47b9edc68b3e7f1b1f10153845659090</anchor>
      <arglist>(const TripletModifier *sm, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexTriplets</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>ac4cc4941a494fa3731e385a7a1039b9a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexTriplets</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1TripletContainer.html</anchorfile>
      <anchor>a9aa50299b2d184b0034a9315c602528d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TripletContainerAdaptor</name>
    <filename>classIMP_1_1TripletContainerAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>TripletContainerAdaptor</name>
      <anchorfile>classIMP_1_1TripletContainerAdaptor.html</anchorfile>
      <anchor>a27446f85c68928fe7a13642b342d2b13</anchor>
      <arglist>(TripletContainer *c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripletContainerAdaptor</name>
      <anchorfile>classIMP_1_1TripletContainerAdaptor.html</anchorfile>
      <anchor>aabc46eb0f42594724113104af4dcc724</anchor>
      <arglist>(IMP::internal::PointerBase&lt; C &gt; c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripletContainerAdaptor</name>
      <anchorfile>classIMP_1_1TripletContainerAdaptor.html</anchorfile>
      <anchor>aecf8cd1b7568706eb4ba9747388feac0</anchor>
      <arglist>(const ParticleTripletsTemp &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name_if_default</name>
      <anchorfile>classIMP_1_1TripletContainerAdaptor.html</anchorfile>
      <anchor>a263f68607204915da83b73a3361c74e8</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TripletModifier</name>
    <filename>classIMP_1_1TripletModifier.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::ParticleOutputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1TripletModifier.html</anchorfile>
      <anchor>a56b9bd816c98bd67afe47b471ecfb21b</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1TripletModifier.html</anchorfile>
      <anchor>a8b1cd25d9895fd9e7d1c689fdbd7c325</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes_moved</name>
      <anchorfile>classIMP_1_1TripletModifier.html</anchorfile>
      <anchor>aaa5dd7e8b3bcadc69f59f9eaf6540bd8</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, unsigned int lower_bound, unsigned int upper_bound, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TripletPredicate</name>
    <filename>classIMP_1_1TripletPredicate.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1TripletPredicate.html</anchorfile>
      <anchor>ab2cb55c8ca95d1d875d65fae9977ea88</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1TripletPredicate.html</anchorfile>
      <anchor>a897085c21313ebf0669fea6be4d73db2</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1TripletPredicate.html</anchorfile>
      <anchor>aed542435fb88ad7c1703296651f4ef2e</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1TripletPredicate.html</anchorfile>
      <anchor>a30cc08c4b00790b2e47efd830ce96779</anchor>
      <arglist>(Model *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TripletScore</name>
    <filename>classIMP_1_1TripletScore.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Restraints</type>
      <name>create_current_decomposition</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>a5f3906cbe68e8b3fd5b4fad2177dd700</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>a3d24b25ec1320d6659c7475c07e63d5c</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt, DerivativeAccumulator *da, double max) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>aba77cc17c5736a22c4ba8678b97ca3d2</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>a0d484717b416e3caeecae8064b4a547b</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt, DerivativeAccumulator *da) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>acac89a806de002ddd26368e3f73a79aa</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>a094e729370c397cad9bd4190be908a2a</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>aa0afab007addd7a4852c7519ccf34307</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;o, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1TripletScore.html</anchorfile>
      <anchor>ae356b8328fb4fb1f8e09ea9916ac3af0</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::TypeException</name>
    <filename>classIMP_1_1TypeException.html</filename>
    <base>IMP::Exception</base>
  </compound>
  <compound kind="class">
    <name>IMP::UnaryFunction</name>
    <filename>classIMP_1_1UnaryFunction.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1UnaryFunction.html</anchorfile>
      <anchor>a5e4b5040b5e344060403fee5b721741a</anchor>
      <arglist>(double feature) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1UnaryFunction.html</anchorfile>
      <anchor>ac451d05c0ca9f5e9f87f6544e588584c</anchor>
      <arglist>(double feature) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::UncheckedWeakPointer</name>
    <filename>structIMP_1_1UncheckedWeakPointer.html</filename>
    <templarg>O</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::Undecorator</name>
    <filename>classIMP_1_1Undecorator.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::UsageException</name>
    <filename>classIMP_1_1UsageException.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::Value</name>
    <filename>classIMP_1_1Value.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::ValueException</name>
    <filename>classIMP_1_1ValueException.html</filename>
    <base>IMP::Exception</base>
  </compound>
  <compound kind="class">
    <name>IMP::Vector</name>
    <filename>classIMP_1_1Vector.html</filename>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::VersionInfo</name>
    <filename>classIMP_1_1VersionInfo.html</filename>
    <base>IMP::Value</base>
    <member kind="function">
      <type></type>
      <name>VersionInfo</name>
      <anchorfile>classIMP_1_1VersionInfo.html</anchorfile>
      <anchor>a1e6fdbd41b626f0014d06f61e72bd15e</anchor>
      <arglist>(std::string module, std::string version)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::WarningContext</name>
    <filename>structIMP_1_1WarningContext.html</filename>
  </compound>
  <compound kind="struct">
    <name>IMP::WeakPointer</name>
    <filename>structIMP_1_1WeakPointer.html</filename>
    <templarg>O</templarg>
  </compound>
  <compound kind="namespace">
    <name>IMP::algebra</name>
    <filename>namespaceIMP_1_1algebra.html</filename>
    <class kind="class">IMP::algebra::BoundedGridRangeD</class>
    <class kind="class">IMP::algebra::BoundingBoxD</class>
    <class kind="class">IMP::algebra::Cone3D</class>
    <class kind="class">IMP::algebra::ConnollySurfacePoint</class>
    <class kind="class">IMP::algebra::Cylinder3D</class>
    <class kind="class">IMP::algebra::DefaultEmbeddingD</class>
    <class kind="struct">IMP::algebra::DenseFloatLogGridKD</class>
    <class kind="struct">IMP::algebra::DenseGrid3D</class>
    <class kind="class">IMP::algebra::DenseGridStorageD</class>
    <class kind="struct">IMP::algebra::DenseIntLogGrid3D</class>
    <class kind="class">IMP::algebra::DynamicNearestNeighbor3D</class>
    <class kind="class">IMP::algebra::Ellipsoid3D</class>
    <class kind="class">IMP::algebra::EuclideanVectorKDMetric</class>
    <class kind="class">IMP::algebra::ExtendedGridIndexD</class>
    <class kind="class">IMP::algebra::FixedXYZ</class>
    <class kind="class">IMP::algebra::Gaussian3D</class>
    <class kind="class">IMP::algebra::GeometricPrimitiveD</class>
    <class kind="class">IMP::algebra::GridD</class>
    <class kind="class">IMP::algebra::GridIndexD</class>
    <class kind="class">IMP::algebra::Line3D</class>
    <class kind="class">IMP::algebra::LinearFit2D</class>
    <class kind="class">IMP::algebra::LogEmbeddingD</class>
    <class kind="class">IMP::algebra::MaxVectorKDMetric</class>
    <class kind="class">IMP::algebra::NearestNeighborD</class>
    <class kind="class">IMP::algebra::ParabolicFit2D</class>
    <class kind="class">IMP::algebra::Plane3D</class>
    <class kind="class">IMP::algebra::PrincipalComponentAnalysisD</class>
    <class kind="class">IMP::algebra::ReferenceFrame3D</class>
    <class kind="class">IMP::algebra::Reflection3D</class>
    <class kind="class">IMP::algebra::Rotation2D</class>
    <class kind="class">IMP::algebra::Rotation3D</class>
    <class kind="class">IMP::algebra::Segment3D</class>
    <class kind="struct">IMP::algebra::SparseGrid3D</class>
    <class kind="class">IMP::algebra::SparseGridStorageD</class>
    <class kind="struct">IMP::algebra::SparseUnboundedGrid3D</class>
    <class kind="struct">IMP::algebra::SparseUnboundedGridD</class>
    <class kind="class">IMP::algebra::SphereD</class>
    <class kind="class">IMP::algebra::SpherePatch3D</class>
    <class kind="class">IMP::algebra::SphericalVector3D</class>
    <class kind="class">IMP::algebra::Torus3D</class>
    <class kind="class">IMP::algebra::Transformation2D</class>
    <class kind="class">IMP::algebra::Transformation3D</class>
    <class kind="class">IMP::algebra::Triangle3D</class>
    <class kind="class">IMP::algebra::UnboundedGridRangeD</class>
    <class kind="class">IMP::algebra::UnitSimplexBaseD</class>
    <class kind="class">IMP::algebra::UnitSimplexD</class>
    <class kind="class">IMP::algebra::UnitSimplexD&lt;-1 &gt;</class>
    <class kind="class">IMP::algebra::VectorBaseD</class>
    <class kind="class">IMP::algebra::VectorD</class>
    <class kind="class">IMP::algebra::VectorKDMetric</class>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 1 &gt;</type>
      <name>BoundingBox1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7eb3cac9d0dd97a605a803c3c1c9a7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox1D &gt;</type>
      <name>BoundingBox1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a994e2c2aae43e308fbc0d3d96790ca3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 2 &gt;</type>
      <name>BoundingBox2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1b14e4914ad97543ce955f34f2e61752</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox2D &gt;</type>
      <name>BoundingBox2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9b8e42fea79aa584d27dcadda8971ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>BoundingBox3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a185f2504357db1e9a24a03d26cec4079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox3D &gt;</type>
      <name>BoundingBox3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7541ed26cfd8dfb1a59719464a9a296d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 4 &gt;</type>
      <name>BoundingBox4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af9789e57e6fd60240be2f8bb4a9eabb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox4D &gt;</type>
      <name>BoundingBox4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3b43fb6706765c75adb324c7a6698a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 5 &gt;</type>
      <name>BoundingBox5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0ee9f049309eb6756f2ce1a6d7d4d3cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox5D &gt;</type>
      <name>BoundingBox5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae1351d28391b466c818cfc811653d3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt; 6 &gt;</type>
      <name>BoundingBox6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abe8e949accf9c66f00dde408e29794ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBox6D &gt;</type>
      <name>BoundingBox6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4c92d644283c16a846a05a881c59f7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>BoundingBoxKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4882602f27f726c425028dc402de4562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BoundingBoxKD &gt;</type>
      <name>BoundingBoxKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4797ce61c4a2e51db6953f360520eb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Cone3D &gt;</type>
      <name>Cone3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac06ebe231231089e3fc7721863ae2ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ConnollySurfacePoint &gt;</type>
      <name>ConnollySurfacePoints</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a32ed4fa7e3d7afd2e60de17508aad26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Cylinder3D &gt;</type>
      <name>Cylinder3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a958423e1b621cf3799fd6334f8ceb755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Ellipsoid3D &gt;</type>
      <name>Ellipsoid3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af7d3072ebe08ae4ae83065ba0b682e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Gaussian3D &gt;</type>
      <name>Gaussian3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad372e62d98d7c08c91e4c53b2e09e200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Line3D &gt;</type>
      <name>Line3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aec97b3cca72d195cf990b1e77c21680b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; LinearFit2D &gt;</type>
      <name>LinearFit2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae143affa8cfbbec298a52b20e1a17487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParabolicFit2D &gt;</type>
      <name>ParabolicFit2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a26aa3f0f5fc90e9292197cfa7f14907f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Plane3D &gt;</type>
      <name>Plane3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8bc4706f861ea96868cfb81470849d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ReferenceFrame3D &gt;</type>
      <name>ReferenceFrame3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1a4cefe823cc382f41a75b00b5d61ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Reflection3D &gt;</type>
      <name>Reflection3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae5b74b1b4e87cab55bc6674e185b99b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Rotation2D &gt;</type>
      <name>Rotation2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>add23e69204717fffb8e3392fe031deff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Rotation3D &gt;</type>
      <name>Rotation3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4bf42d2013f88cf587326abddc923cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Segment3D &gt;</type>
      <name>Segment3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad3ca5cf8010bbebf80a90d65f1add3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 1 &gt;</type>
      <name>Sphere1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae36b5d052dc92ba68199337a643068cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere1D &gt;</type>
      <name>Sphere1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a25fe42a7b84d72cd10a1d4a3809b25d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 2 &gt;</type>
      <name>Sphere2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0bd5342c11918edce25a64fa0b645771</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere2D &gt;</type>
      <name>Sphere2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abf9035c9f059be55c3ba1d0366c2a02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 3 &gt;</type>
      <name>Sphere3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a38b93111c6cddc59d162cf38ef6239a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere3D &gt;</type>
      <name>Sphere3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>adba386612598ac5fad7717f548fdb36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 4 &gt;</type>
      <name>Sphere4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae15e8870ff6a00a6846770058e30576f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere4D &gt;</type>
      <name>Sphere4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>accc33fa8917c1d5bad5069d3e788a979</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 5 &gt;</type>
      <name>Sphere5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a901474a2533333fb3de8cb8c3440a0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere5D &gt;</type>
      <name>Sphere5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a02449f4acce24d84c72b1adc23cfae7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt; 6 &gt;</type>
      <name>Sphere6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa68534da2936e24e953a87822d56722c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Sphere6D &gt;</type>
      <name>Sphere6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5831ce98688d6392290eefdfa7cbb5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SphereD&lt;-1 &gt;</type>
      <name>SphereKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae8394f52404e0448ca99a1e8f5797883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SphereKD &gt;</type>
      <name>SphereKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae42e45bae47e4bdb83d8140741f8d7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SpherePatch3D &gt;</type>
      <name>SpherePatch3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6f38b70b8460d70318f581724c0b89f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SphericalVector3D &gt;</type>
      <name>SphericalVector3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa6041103669cf8ec2db95fca7b7da7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Torus3D &gt;</type>
      <name>Torus3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee8083e43cb27052853b54d8ce1ce8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Transformation2D &gt;</type>
      <name>Transformation2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aae800dde5dbb7b2b5b94d411f77bb717</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Transformation3D &gt;</type>
      <name>Transformation3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3819c80ac5ca00fa6f0ca5e6a67370c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Triangle3D &gt;</type>
      <name>Triangle3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2e7bd89b266aa9dc56247011836078d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex1D &gt;</type>
      <name>UnitSimplex1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3bb771e655a7a6869588021104689b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex2D &gt;</type>
      <name>UnitSimplex2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a858e7134208fa382a861280e985c79e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex3D &gt;</type>
      <name>UnitSimplex3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3eda21d400d1405cbc0af4954c73e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex4D &gt;</type>
      <name>UnitSimplex4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a00ba27b1939270cded4d434ffaaf1d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex5D &gt;</type>
      <name>UnitSimplex5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a764bfd70494fee0cffb7da0346037386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplex6D &gt;</type>
      <name>UnitSimplex6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af0521f7183db224daa6c923f0fc89bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; UnitSimplexKD &gt;</type>
      <name>UnitSimplexKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8471ee99bf049d6d6c2190c955f93b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 1 &gt;</type>
      <name>Vector1D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad90c712bbeb4778ce8106957f709ee7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 1 &gt; &gt;</type>
      <name>Vector1Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ade1d0d90d879bcd9bdccf14f50597131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 2 &gt;</type>
      <name>Vector2D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a36a435bdeaceca02fe3c687df15d1576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 2 &gt; &gt;</type>
      <name>Vector2Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2c4b8174c9562970e30a09d050104959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 3 &gt;</type>
      <name>Vector3D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac775f2279108541ab50c89452791ddcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 3 &gt; &gt;</type>
      <name>Vector3Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abe6cf118d6e01165af3c37ef6ed28ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 4 &gt;</type>
      <name>Vector4D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a11723e3eda336def30bbfb907062c257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 4 &gt; &gt;</type>
      <name>Vector4Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2cd56a7660b1c0e9e66b7cfc7d6a7840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 5 &gt;</type>
      <name>Vector5D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae643b3dff932183fe6371dfd6c90760a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 5 &gt; &gt;</type>
      <name>Vector5Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afa35fbfc601b5595ffed5e05f410a7d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt; 6 &gt;</type>
      <name>Vector6D</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a04173f79fe3ff9502c3dea3ddecf24d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt; 6 &gt; &gt;</type>
      <name>Vector6Ds</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1c7a6fa55175d5e72060c30cca255302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorD&lt;-1 &gt;</type>
      <name>VectorKD</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aca0a99d322d59f5738bcf38f9d35ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; VectorKDMetric &gt; &gt;</type>
      <name>VectorKDMetrics</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af2821108217b399827bce4b800b79f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; VectorKDMetric &gt; &gt;</type>
      <name>VectorKDMetricsTemp</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a36a0abe3925cc5cff0c247f945b7ad4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; VectorD&lt;-1 &gt; &gt;</type>
      <name>VectorKDs</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6f53a63f848c50065cb54e135c050160</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa040b3bcfec950a979371f3e19b14058</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;a, const VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4ace4e3f3bb2f5d5fd442360945370a3</anchor>
      <arglist>(const Rotation2D &amp;a, const Rotation2D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5d83cbee6a0e0af8738adf030f364f6d</anchor>
      <arglist>(const Transformation2D &amp;a, const Transformation2D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af2121b116324f67ee007e4aef258555c</anchor>
      <arglist>(const Transformation3D &amp;a, const Transformation3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>compose</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a216ec1243a72a2c3f9ddf6bd8bc22ece</anchor>
      <arglist>(const Rotation3D &amp;a, const Rotation3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee0ec0159d4e39827517da06b6e354a5</anchor>
      <arglist>(const Transformation3D &amp;TA, const Transformation3D &amp;TB, const Transformation3DAdjoint &amp;DTC, Transformation3DAdjoint *DTA, Transformation3DAdjoint *DTB)</arglist>
    </member>
    <member kind="function">
      <type>ComposeTransformation3DAdjoint</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7ba58ded833da82158e5830aa9ffb6b2</anchor>
      <arglist>(const Transformation3D &amp;TA, const Transformation3D &amp;TB, const Transformation3DAdjoint &amp;DTC)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aeaccab75a3705673bac9a5d4c08d1fd7</anchor>
      <arglist>(const Rotation3D &amp;A, const Rotation3D &amp;B, Vector4D DC, Rotation3DAdjoint *DA, Rotation3DAdjoint *DB)</arglist>
    </member>
    <member kind="function">
      <type>ComposeRotation3DAdjoint</type>
      <name>compose_adjoint</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a502cf3dd86afae125f6caf9a0f9763f5</anchor>
      <arglist>(const Rotation3D &amp;A, const Rotation3D &amp;B, const Rotation3DAdjoint &amp;DC)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3Ds</type>
      <name>get_alignments_from_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aea2393b6f73c8eb830dfbe6996cafdc5</anchor>
      <arglist>(const PrincipalComponentAnalysisD&lt; 3 &gt; &amp;pca1, const PrincipalComponentAnalysisD&lt; 3 &gt; &amp;pca2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3b3d323c48102eb90b501b0bab217bbe</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_almost_equal</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9d61efb52ee93bd26782baefddaf651d</anchor>
      <arglist>(const double a, const double b, const double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_colinear</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7db2737802a80272f10a9740ec9b3a71</anchor>
      <arglist>(const Vector3D &amp;p1, const Vector3D &amp;p2, const Vector3D &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_area</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6ada52de6426c614d94ba40f7f71df26</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector3D, double &gt;</type>
      <name>get_axis_and_angle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a691fe5fa25816b65206ae26096c72213</anchor>
      <arglist>(const Rotation3D &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_ball_radius_from_volume_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2693b140f128265e471ec83fad891e69</anchor>
      <arglist>(double volume)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_basis_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0a503cf13c00d688f6683a980174a145</anchor>
      <arglist>(unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_basis_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ade6392415b879dc044738a956686a512</anchor>
      <arglist>(int Di, unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_basis_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a92b4877cc788e114ebc983c050f6218e</anchor>
      <arglist>(int D, unsigned int coordinate)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab71786f84ddb7835f6dd75bc61b1efda</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_closer_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afd9f1cc0774ccbef7c028bf66c2746a2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>ConnollySurfacePoints</type>
      <name>get_connolly_surface</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a64a1c062bcafe2d51a77853d06506938</anchor>
      <arglist>(const algebra::Sphere3Ds &amp;spheres, double density, double probe_radius)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_constrained</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9e59d47d7c61a3b8fcd0e3d16be9e3dd</anchor>
      <arglist>(const T x, const T x0, const T xF)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>get_covariance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4883e8de2c04d91ad0b0d336564dc4a4</anchor>
      <arglist>(const Gaussian3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_cube_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afc7bf8d6b520c4abfed644b0eb7b1288</anchor>
      <arglist>(double radius)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>get_cube_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aecec6f9c6ca668315e6693773ac1c15f</anchor>
      <arglist>(unsigned int d, double radius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7f7687e40a5b27f12babf9730ff8d80c</anchor>
      <arglist>(const Segment3D &amp;s, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1bcf2debc9b22076e1fb66f9ac3d0991</anchor>
      <arglist>(const Plane3D &amp;pln, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a27ea6a618c778638a2a0198aeb9fbd7c</anchor>
      <arglist>(const Segment3D &amp;a, const Segment3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>acf82e7318469cc77db87a30cc98ef67f</anchor>
      <arglist>(const Line3D &amp;s, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac02176c89a2b318dac48b35e11b90343</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a847f07074743af85946a6b46cd2a296f</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a01d00ac6807479bb970254b3e188bcc6</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;v1, const VectorD&lt; D &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a55e80fed63202bf78ee2234003ddbd0f</anchor>
      <arglist>(const Rotation3D &amp;r0, const Rotation3D &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type>IntPairs</type>
      <name>get_edges</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a17aeb2742e60928cf687ef786530d44c</anchor>
      <arglist>(const BoundingBoxD&lt; 3 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_elementwise_product</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af800ee8500d39c126da5897ca6f8ebaa</anchor>
      <arglist>(const algebra::VectorD&lt; D &gt; &amp;a, const algebra::VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_elementwise_product</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a019cfab4b720c4002cd8ca3085176778</anchor>
      <arglist>(const Ints &amp;a, const algebra::VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_embedded_from_increasing</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa4da44bccd16cdd03d99be6dba3c9bb1</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a45e22a35c32d75dab31815486e31dc68</anchor>
      <arglist>(const Sphere3Ds &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a44e78707e29c0d1a638a48a95c7b50e0</anchor>
      <arglist>(const Vector3Ds &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>Gaussian3D</type>
      <name>get_gaussian_from_covariance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a059a34d24381984fa86ea77b026daa7e</anchor>
      <arglist>(const Eigen::Matrix3d &amp;covariance, const Vector3D &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_identity_rotation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a34a359be279311b5284c4d2c56a62c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_identity_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a98a32dfffbb6b9f5f20a12dd479f1b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_identity_transformation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aea1eef3d3cd259593cb46677dc510c29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_identity_transformation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5c675979c1dfb0467246764a7e1e2cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_increasing_from_embedded</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad15dcdb7389932d61124924f60e2249c</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_interiors_intersect</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9538f0814e3bdb8494ad2083acea5f20</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_interiors_intersect</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab00c98290b98833acf41b7cdfaa1a701</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aad56f25091896ce8e87f8e5f1098bf79</anchor>
      <arglist>(const Rotation3D &amp;a, const Rotation3D &amp;b, double f)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_intersection</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7d107e54c2f6c82ac6af484a62dba718</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_jacobian_of_composed_wrt_first</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a7fa0a30c71127a92245cefc71613bb0f</anchor>
      <arglist>(const Rotation3D &amp;q, const Rotation3D &amp;p, bool wrt_unnorm=false)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_jacobian_of_composed_wrt_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab2f433fffe772a43eab54d008444f27e</anchor>
      <arglist>(const Rotation3D &amp;q, const Rotation3D &amp;p, bool wrt_unnorm=false)</arglist>
    </member>
    <member kind="function">
      <type>Triangle3D</type>
      <name>get_largest_triangle</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3619d60308d5ac5c78e601d1e6426dee</anchor>
      <arglist>(const Vector3Ds &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get_linearly_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>adb4e0a724bc2f1f9c54e3ebc9437c260</anchor>
      <arglist>(const GridD&lt; D, Storage, Value, Embedding &gt; &amp;g, const VectorD&lt; D &gt; &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_magnitude_and_normalize_in_place</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6240457629712f77924081526b1a7235</anchor>
      <arglist>(VT &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_length</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a06143c1eada26a19c52b0727f8ab2028</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_next_larger_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aefbb40abc74c00ef9c93f3bb63176f39</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_next_larger_power_of_2</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aeb20ad9c063cf74bceb5a033700e1d66</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_ones_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a279ba9f72f6c5f803509dff75ac208d7</anchor>
      <arglist>(double v=1)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_ones_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa97923eb2f858bc66bd83997299934d6</anchor>
      <arglist>(unsigned int Di, double v=1)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_ones_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab2737562aba5b6a92a38c231538ce2cc</anchor>
      <arglist>(unsigned int D, double v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_power_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a79e54ebe8fa9974a1401ba40be75d732</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;a, const SphereD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>PrincipalComponentAnalysisD&lt; D &gt;</type>
      <name>get_principal_components</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a45f138d8d70f63b404c8ffc9e9b2896e</anchor>
      <arglist>(const Vector&lt; VectorD&lt; D &gt; &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a77d0b01755739146b53216fecabcb899</anchor>
      <arglist>(const Line3D &amp;l, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Segment3D</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae4a0378baab9f9cb01c824f2ec6abc51</anchor>
      <arglist>(const Line3D &amp;l, const algebra::Segment3D &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_projected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa359f8016971b4ea9ae8642f51490a9c</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s, const VectorD&lt; D &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_random_local_transformation</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1b3cdecd88bb99e7cf34d42117199775</anchor>
      <arglist>(Vector3D origin, double max_translation=5., double max_angle_in_rad=0.26)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_random_rotation_2d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac7ecfcd34e562d2b08fa9eb977e5f302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_random_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a139712da5a82968a06bb71b09196bc5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_random_rotation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>abd23e8a25dda2d4acf8c00db35e2537f</anchor>
      <arglist>(const Rotation3D &amp;center, double distance)</arglist>
    </member>
    <member kind="function">
      <type>DenseGrid3D&lt; double &gt;</type>
      <name>get_rasterized</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a12a52b82cf3482107fa5557bb03406ba</anchor>
      <arglist>(const Gaussian3Ds &amp;gmm, const Floats &amp;weights, double cell_width, const BoundingBox3D &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>DenseGrid3D&lt; double &gt;</type>
      <name>get_rasterized_fast</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a06a6c8eb266cb9aa4e9a6bdac5b12752</anchor>
      <arglist>(const Gaussian3Ds &amp;gmm, const Floats &amp;weights, double cell_width, const BoundingBox3D &amp;bb, double factor=2.5)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_reflected</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a2ef88c55248b535ca69a39e67fd935bd</anchor>
      <arglist>(const Plane3D &amp;pln, const Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_relative_projection_on_segment</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ac5577591de549991f08c38744447c953</anchor>
      <arglist>(const Segment3D &amp;s, const algebra::Vector3D &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a0ff1b8570222f9aabf2c1f78c85ed541</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4a5934ef70db58630906eaaf2ff5bae8</anchor>
      <arglist>(const Transformation3D &amp;tr, const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_about_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a283f1463563e2c38fd3f4ae788c11484</anchor>
      <arglist>(const Vector3D &amp;axis, double angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_about_normalized_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad96b1551c23f1f62de05e9ebbcbf3429</anchor>
      <arglist>(const Vector3D &amp;axis_norm, double angle)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_rotation_about_point</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae3383dcf150f2e7d76498fecbc55dde9</anchor>
      <arglist>(const Vector2D &amp;point, const Rotation2D &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_rotation_about_point</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a07063149bf0d6fd24bd5a1116d6b5115</anchor>
      <arglist>(const Vector3D &amp;point, const Rotation3D &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_matrix</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a28b2093fb8db4340e11cce11de658572</anchor>
      <arglist>(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_matrix</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a00a10a59dcf29a8947623a3fc69edb61</anchor>
      <arglist>(Eigen::Matrix3d m)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_vector4d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a3003fd1a5254db165a8600f2979e7146</anchor>
      <arglist>(const VectorD&lt; 4 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_from_x_y_axes</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a010dd03d5d6e849ea7b0991f646d6b53</anchor>
      <arglist>(const Vector3D &amp;x, const Vector3D &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_rotation_taking_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a6af4099df3f5babb4891be41ed215978</anchor>
      <arglist>(const Vector3D &amp;v1, const Vector3D &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_rotation_to_x_axis</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a491932b32722826e03b4e952444be4b0</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_rounded</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a906189330fdf6e8345747efdd1c15dc8</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Segment3D</type>
      <name>get_segment_connecting_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aba7bf2d5c4d78a8bcd21d63ced9c30ad</anchor>
      <arglist>(const Line3D &amp;a, const Line3D &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_sign</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a17cab6ae10d194c0230777f2d3ee9c54</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Sphere3Ds</type>
      <name>get_simplified_from_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a33f90402257cda167482752bb7e34a76</anchor>
      <arglist>(Sphere3Ds in, double maximum_allowed_error_angstroms)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_squared_distance</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af6c0ba059d657cbc42dad97dfb6cc490</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;v1, const VectorD&lt; D &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a59af2a64542f335ac33b2cc3b90f6681</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_surface_area_and_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>af5fbfbd528673b73afb47f67266b77b6</anchor>
      <arglist>(const algebra::Sphere3Ds &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_transformation_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a95b9c2466fd2ba29cddff88efc887aff</anchor>
      <arglist>(const Transformation2D &amp;t2d)</arglist>
    </member>
    <member kind="function">
      <type>IMP::algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a119b22ccf68628a2cba2885904d7d314</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;source, const Vector3DsOrXYZs1 &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_transformation_aligning_pair</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a86f1249e8339878f8b0be5b73b031ad8</anchor>
      <arglist>(const Vector2Ds &amp;set_from, const Vector2Ds &amp;set_to)</arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>get_transformation_from_first_triangle_to_second</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a40b9b1290fa21102bda8255d8eb3c4d8</anchor>
      <arglist>(Triangle3D first_tri, Triangle3D second_tri)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_transformed</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aec3bea2d24fbbf621216822517ca1593</anchor>
      <arglist>(const BoundingBoxD&lt; 3 &gt; &amp;bb, const Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>const Storage::Value</type>
      <name>get_trilinearly_interpolated</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a32242a25f36a56f9acc877f4841b3c24</anchor>
      <arglist>(const GridD&lt; 3, Storage, typename Storage::Value, Embedding &gt; &amp;g, const Vector3D &amp;v, const typename Storage::Value &amp;outside=0)</arglist>
    </member>
    <member kind="function">
      <type>Rotation3Ds</type>
      <name>get_uniform_cover_rotations_3d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>acbb7b674a77977f615655560633ad72e</anchor>
      <arglist>(unsigned int num_points)</arglist>
    </member>
    <member kind="function">
      <type>Vector3Ds</type>
      <name>get_uniform_surface_cover</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a4140479bd360f14cb9edd70534b34a75</anchor>
      <arglist>(const Sphere3Ds &amp;in, double points_per_square_angstrom)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Rotation3Ds</type>
      <name>get_uniformly_sampled_rotations</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae1155e72a76d93cf00ea3c83eeac6056</anchor>
      <arglist>(double delta)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_union</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a5884c6b32a247dd314db4c33b92508b8</anchor>
      <arglist>(BoundingBoxD&lt; D &gt; a, const BoundingBoxD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; D &gt;</type>
      <name>get_unit_bounding_box_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aefe76b06844e6f12a5c08da8673517b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt;-1 &gt;</type>
      <name>get_unit_bounding_box_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aa88ff22c3c9a9a857314e714d69dea62</anchor>
      <arglist>(unsigned int d)</arglist>
    </member>
    <member kind="function">
      <type>VT</type>
      <name>get_unit_vector</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a9f2f456aa0ea20e1abd53f2f10c6e9f5</anchor>
      <arglist>(VT vt)</arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; C::DIMENSION &gt; &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aafef6ef92101a692e3daa5effbbca568</anchor>
      <arglist>(const C &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_vertices</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ab92aec57b46d729379791cdda2d5d9b6</anchor>
      <arglist>(const UnitSimplexD&lt; D &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; VectorD&lt; D &gt; &gt;</type>
      <name>get_vertices</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae9bb408f4492a9ce063d095b02cd4cd1</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a94f280e1b578da3b5875fb157cfc7c68</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>affca1f7420725f98cde80ad06a40364f</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weighted_rmsd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ad8088f5211eb076cc858dbd6d10de660</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, const Floats &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_zero_vector_d</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a55b0250f087b46ac5647346318c71c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_zero_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae70b03fb713b8950050e06bb2c206cee</anchor>
      <arglist>(int Di)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt;-1 &gt;</type>
      <name>get_zero_vector_kd</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>aee99e2fdbca505bd36a478c9eb6ca171</anchor>
      <arglist>(int D)</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>afdc2e1d2d13e716a0d8b2b315187e13e</anchor>
      <arglist>(double s, VectorD&lt; D &gt; o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a8162423a898de05afd7e912d0a7fdfa2</anchor>
      <arglist>(C &amp;g, const E &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>PI</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a071394330f4828c69b25f99767b5fc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>a1bbdd82a07614a683f13ea86dd799f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>ae2323ef438011b6bf9a3f6fa52f7b36f</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1algebra.html</anchorfile>
      <anchor>affbe02c12e6194a93a2cd84d27e22721</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1algebra" title="Geometric primitives">geometricprimitives</docanchor>
    <docanchor file="namespaceIMP_1_1algebra" title="Generic geometry">genericgeometry</docanchor>
    <docanchor file="namespaceIMP_1_1algebra" title="ANN">ANN</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::BoundedGridRangeD</name>
    <filename>classIMP_1_1algebra_1_1BoundedGridRangeD.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_end_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a61d03caf63e70aa0c0e6d6d74130c27c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a4aae88234ef495bca2bfd9baf28b8ce3</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>acf1f33b1c1d7957330f442f15d656ac9</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_maximum_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a395874afecb718cda8209087070b9aaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_minimum_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a3630e2bb1873a86f4606a04b5bf7c847</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_voxels</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>ab19336e6b92ff4048a6e1affdb12eced</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::BoundingBoxD</name>
    <filename>classIMP_1_1algebra_1_1BoundingBoxD.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type></type>
      <name>BoundingBoxD</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a7a070941c2c5defa644ef4d5555b3126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBoxD</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a2e42e6414fa68b1bc0c2fde335a555b7</anchor>
      <arglist>(unsigned int d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBoxD</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a7850dae79dc4afd896372a3a3156e027</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;lb, const VectorD&lt; D &gt; &amp;ub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBoxD</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>af4deddc06a6067f120d36d48d8cc5ecd</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundingBoxD</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a612cedf52eea6d53f4ce2d5e219541b7</anchor>
      <arglist>(const Vector&lt; VectorD&lt; D &gt; &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a79a46310633b3f17c6ba14b06f25492f</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>ac93f335b7c79748991ec968e7209b28f</anchor>
      <arglist>(const BoundingBoxD &amp;bb) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_corner</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>aa31f8295a3ecc17ce469438df678617b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const BoundingBoxD&lt; D &gt;</type>
      <name>operator+</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a2469d780b50d800679f17bdc0b536541</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const BoundingBoxD&lt; D &gt;</type>
      <name>operator+</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a54934a0e61f8f00eca35bfa11a4d1e13</anchor>
      <arglist>(const O &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const BoundingBoxD&lt; D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>aa8092895377c9aca82b78050456b33c9</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const BoundingBoxD&lt; D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>abe7e39f1ee5d58dae32272ee29e51f0b</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const BoundingBoxD&lt; D &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundingBoxD.html</anchorfile>
      <anchor>a83c31adcb8aafca645af67822d996eed</anchor>
      <arglist>(double o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Cone3D</name>
    <filename>classIMP_1_1algebra_1_1Cone3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Cone3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a54ff89422998af39f072dd3f3723e772</anchor>
      <arglist>(const Segment3D &amp;s, double radius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a56002101bfffc42d83dd61936a288449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Plane3D</type>
      <name>get_base_plane</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a9a39fe81e54ff2d233613fc1b6d92a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>af16c88d6375ea514fc0ca035e7591dfe</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_direction</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>adf906109d1916a08c9d63aee7b74e32a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a87ce45f7f1ad3efd173fdb45d39d4000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_tip</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a5a1bb704f6a1ed8ccbc59082e53aa611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a42215f5c82c6b41689887aee272d6f29</anchor>
      <arglist>(const Cone3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Cone3D &amp;</type>
      <name>get_cone_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a9408590e3b4ed9bea9901e0cc53f1039</anchor>
      <arglist>(const Cone3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a65a8552f8446684eba1acb5a97edd9c2</anchor>
      <arglist>(const Cone3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a024adad21c3b01de7558343ad0520532</anchor>
      <arglist>(const Cone3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cone_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Cone3D.html</anchorfile>
      <anchor>a8ef5b67cbfb8740ffc1efe1d2c28ab9e</anchor>
      <arglist>(Cone3D &amp;g, const Cone3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::ConnollySurfacePoint</name>
    <filename>classIMP_1_1algebra_1_1ConnollySurfacePoint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Cylinder3D</name>
    <filename>classIMP_1_1algebra_1_1Cylinder3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type>const Vector3D</type>
      <name>get_inner_point_at</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>ae87e38fd6735d32b7bfd1c6132baa0a6</anchor>
      <arglist>(double relative_height, double relative_radius, double angle) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector3D</type>
      <name>get_surface_point_at</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>ae50da606bf83c208d2b060baa02691fe</anchor>
      <arglist>(double relative_height, double angle)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>a2c0e1a36a0080caf666ff5e8657c44ea</anchor>
      <arglist>(const Cylinder3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Cylinder3D &amp;</type>
      <name>get_cylinder_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>a1f598fc535a050c3979cd2726732a552</anchor>
      <arglist>(const Cylinder3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>a16c33aab2de593af8b93d80f4c76f74e</anchor>
      <arglist>(const Cylinder3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>a8a6dda8bdf445ff3c166165eddc7e2e5</anchor>
      <arglist>(const Cylinder3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cylinder_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Cylinder3D.html</anchorfile>
      <anchor>a286efcbeac664dac18d23afae3232bb7</anchor>
      <arglist>(Cylinder3D &amp;g, const Cylinder3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::DefaultEmbeddingD</name>
    <filename>classIMP_1_1algebra_1_1DefaultEmbeddingD.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1DefaultEmbeddingD.html</anchorfile>
      <anchor>a7c5f5633d6495ade19fa00cca4dccff5</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_unit_cell</name>
      <anchorfile>classIMP_1_1algebra_1_1DefaultEmbeddingD.html</anchorfile>
      <anchor>a243f6b777d32aa49cc8e585edfaf79f6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::DenseFloatLogGridKD</name>
    <filename>structIMP_1_1algebra_1_1DenseFloatLogGridKD.html</filename>
    <base>GridD&lt;-1, DenseGridStorageD&lt;-1, float &gt;, float, LogEmbeddingD&lt;-1 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, floatdefault_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const float &amp;default_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const float &amp;default_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const float &amp;default_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const float &amp;default_value=float())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogEmbeddingD</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a11cfe0991d05693602b83f0a601a9c26</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb, const VectorD&lt; D &gt; &amp;bases, const Ints &amp;counts, bool bound_centers=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a333cca1384be415a4beb6423dc4e6273</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_unit_cell</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>adb20715e237723bf9de57872e11fb515</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::DenseGrid3D</name>
    <filename>structIMP_1_1algebra_1_1DenseGrid3D.html</filename>
    <templarg>VT</templarg>
    <base>GridD&lt; 3, DenseGridStorageD&lt; 3, VT &gt;, VT, DefaultEmbeddingD&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, VTdefault_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1DefaultEmbeddingD.html</anchorfile>
      <anchor>a7c5f5633d6495ade19fa00cca4dccff5</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_unit_cell</name>
      <anchorfile>classIMP_1_1algebra_1_1DefaultEmbeddingD.html</anchorfile>
      <anchor>a243f6b777d32aa49cc8e585edfaf79f6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::DenseGridStorageD</name>
    <filename>classIMP_1_1algebra_1_1DenseGridStorageD.html</filename>
    <templarg>D</templarg>
    <templarg>VT</templarg>
    <base>IMP::algebra::BoundedGridRangeD</base>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::DenseIntLogGrid3D</name>
    <filename>structIMP_1_1algebra_1_1DenseIntLogGrid3D.html</filename>
    <base>GridD&lt; 3, DenseGridStorageD&lt; 3, int &gt;, int, LogEmbeddingD&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, intdefault_value=int())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const int &amp;default_value=int())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const int &amp;default_value=int())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const int &amp;default_value=int())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const int &amp;default_value=int())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogEmbeddingD</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a11cfe0991d05693602b83f0a601a9c26</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb, const VectorD&lt; D &gt; &amp;bases, const Ints &amp;counts, bool bound_centers=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a333cca1384be415a4beb6423dc4e6273</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_unit_cell</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>adb20715e237723bf9de57872e11fb515</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::DynamicNearestNeighbor3D</name>
    <filename>classIMP_1_1algebra_1_1DynamicNearestNeighbor3D.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1algebra_1_1DynamicNearestNeighbor3D.html</anchorfile>
      <anchor>a6cd80c9eb6264ce8639666c3006f5ae7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Ellipsoid3D</name>
    <filename>classIMP_1_1algebra_1_1Ellipsoid3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Ellipsoid3D.html</anchorfile>
      <anchor>a51e51989d370ac6d1f72605ea2b55659</anchor>
      <arglist>(const Ellipsoid3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Ellipsoid3D &amp;</type>
      <name>get_ellipsoid_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Ellipsoid3D.html</anchorfile>
      <anchor>a2fd68925f46292fc3f90454f7a34bded</anchor>
      <arglist>(const Ellipsoid3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>classIMP_1_1algebra_1_1Ellipsoid3D.html</anchorfile>
      <anchor>a5cea431932512ba0f6c5e54fd129deba</anchor>
      <arglist>(const Ellipsoid3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>classIMP_1_1algebra_1_1Ellipsoid3D.html</anchorfile>
      <anchor>a7a64fb811faa2d387a26960c723bb772</anchor>
      <arglist>(const Ellipsoid3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ellipsoid_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Ellipsoid3D.html</anchorfile>
      <anchor>a00d1a28d190859480cc3a8f1c01aef0e</anchor>
      <arglist>(Ellipsoid3D &amp;g, const Ellipsoid3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::EuclideanVectorKDMetric</name>
    <filename>classIMP_1_1algebra_1_1EuclideanVectorKDMetric.html</filename>
    <base>IMP::algebra::VectorKDMetric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1algebra_1_1EuclideanVectorKDMetric.html</anchorfile>
      <anchor>a4a8941aca8e98679d014411eef1d84a3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::ExtendedGridIndexD</name>
    <filename>classIMP_1_1algebra_1_1ExtendedGridIndexD.html</filename>
    <templarg>D</templarg>
    <base>IMP::Value</base>
    <member kind="function">
      <type></type>
      <name>ExtendedGridIndexD</name>
      <anchorfile>classIMP_1_1algebra_1_1ExtendedGridIndexD.html</anchorfile>
      <anchor>af9c637eb6a35d9dd4b82b778b7006a90</anchor>
      <arglist>(Ints vals)</arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>at</name>
      <anchorfile>classIMP_1_1algebra_1_1ExtendedGridIndexD.html</anchorfile>
      <anchor>a6cd4bb82ce6a9efb5b862039780769f4</anchor>
      <arglist>(unsigned int) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::FixedXYZ</name>
    <filename>classIMP_1_1algebra_1_1FixedXYZ.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Gaussian3D</name>
    <filename>classIMP_1_1algebra_1_1Gaussian3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::GeometricPrimitiveD</name>
    <filename>classIMP_1_1algebra_1_1GeometricPrimitiveD.html</filename>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::GridD</name>
    <filename>classIMP_1_1algebra_1_1GridD.html</filename>
    <templarg>D</templarg>
    <templarg>StorageT</templarg>
    <templarg>Value</templarg>
    <templarg>EmbeddingT</templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, Value default_value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const Value &amp;default_value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const Value &amp;default_value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const Value &amp;default_value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const Value &amp;default_value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::GridIndexD</name>
    <filename>classIMP_1_1algebra_1_1GridIndexD.html</filename>
    <templarg>D</templarg>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Line3D</name>
    <filename>classIMP_1_1algebra_1_1Line3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Line3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a448a5b70799cc482486c08a07d016869</anchor>
      <arglist>(const algebra::Segment3D &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Vector3D &amp;</type>
      <name>get_direction</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a12ccf7f29db3167c09d25cd46740fa0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_moment</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>af323af13dd9f062a71978de2c33035fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_moment</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a02b108b4c2cddfc1ef7547af4d34947e</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Line3D</type>
      <name>get_opposite</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a4728fdd68054674a97088544ad173bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_point_on_line</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a013722a777438e9a19558c28547100f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_reciprocal_product</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a43cfe2dada35bf7f0765ac32a62b0b0c</anchor>
      <arglist>(const Line3D &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Segment3D</type>
      <name>get_segment_starting_at</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>ab153c557e037c6cde16a6feb795e1094</anchor>
      <arglist>(const Vector3D &amp;v, double d) const </arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>a0ddee92213d742382802d0fe52ca8e44</anchor>
      <arglist>(const Line3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Line3D &amp;</type>
      <name>get_line_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Line3D.html</anchorfile>
      <anchor>afc6ba02a46de817baba50c58eab655e8</anchor>
      <arglist>(const Line3D &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::LinearFit2D</name>
    <filename>classIMP_1_1algebra_1_1LinearFit2D.html</filename>
    <base>GeometricPrimitiveD&lt; 2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>LinearFit2D</name>
      <anchorfile>classIMP_1_1algebra_1_1LinearFit2D.html</anchorfile>
      <anchor>a000d10d87ed91d5dc05aca2bfc41fde6</anchor>
      <arglist>(const Vector2Ds &amp;data, const Floats &amp;error_bars=Floats())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_a</name>
      <anchorfile>classIMP_1_1algebra_1_1LinearFit2D.html</anchorfile>
      <anchor>ad8079cad8e72d6dc64e881e378a9534a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_b</name>
      <anchorfile>classIMP_1_1algebra_1_1LinearFit2D.html</anchorfile>
      <anchor>a927bd5f163c73d1efd863989afd44578</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_fit_error</name>
      <anchorfile>classIMP_1_1algebra_1_1LinearFit2D.html</anchorfile>
      <anchor>a3da260f640f799c13b7594250055a9da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1algebra_1_1LinearFit2D.html</anchorfile>
      <anchor>abdfb05370c00da570f3cbb5022a58614</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::LogEmbeddingD</name>
    <filename>classIMP_1_1algebra_1_1LogEmbeddingD.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type></type>
      <name>LogEmbeddingD</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a11cfe0991d05693602b83f0a601a9c26</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb, const VectorD&lt; D &gt; &amp;bases, const Ints &amp;counts, bool bound_centers=false)</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>a333cca1384be415a4beb6423dc4e6273</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const VectorD&lt; D &gt; &amp;</type>
      <name>get_unit_cell</name>
      <anchorfile>classIMP_1_1algebra_1_1LogEmbeddingD.html</anchorfile>
      <anchor>adb20715e237723bf9de57872e11fb515</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::MaxVectorKDMetric</name>
    <filename>classIMP_1_1algebra_1_1MaxVectorKDMetric.html</filename>
    <base>IMP::algebra::VectorKDMetric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1algebra_1_1MaxVectorKDMetric.html</anchorfile>
      <anchor>a1c0e14cbdeded47506e4cf4c9f903277</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::NearestNeighborD</name>
    <filename>classIMP_1_1algebra_1_1NearestNeighborD.html</filename>
    <templarg>D</templarg>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Ints</type>
      <name>get_in_ball</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>a65d0de09ec8205ee7b3bd25f4949b52d</anchor>
      <arglist>(unsigned int i, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_in_ball</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>ae8e3cd61ac7781993d837de4bb875b41</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;pt, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_nearest_neighbor</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>aa9d12e5ed704b01a530c058ec5a466ab</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_nearest_neighbors</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>a19ac6ba3425b78f1fa10ab6fe5ca6410</anchor>
      <arglist>(unsigned int i, unsigned int k) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>accf99b31a4479e4c274eebd4a9a5e1ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_query_log</name>
      <anchorfile>classIMP_1_1algebra_1_1NearestNeighborD.html</anchorfile>
      <anchor>abf675a682240798340ae1613af8971a3</anchor>
      <arglist>(std::string fname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::ParabolicFit2D</name>
    <filename>classIMP_1_1algebra_1_1ParabolicFit2D.html</filename>
    <base>GeometricPrimitiveD&lt; 2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ParabolicFit2D</name>
      <anchorfile>classIMP_1_1algebra_1_1ParabolicFit2D.html</anchorfile>
      <anchor>a05ad9d165ebd1884db6416d0061ea26f</anchor>
      <arglist>(const Vector2Ds &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_a</name>
      <anchorfile>classIMP_1_1algebra_1_1ParabolicFit2D.html</anchorfile>
      <anchor>a17687da891224a40d062163e7f7678c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_b</name>
      <anchorfile>classIMP_1_1algebra_1_1ParabolicFit2D.html</anchorfile>
      <anchor>a87016328edd4699869ce56d463bcdc2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_c</name>
      <anchorfile>classIMP_1_1algebra_1_1ParabolicFit2D.html</anchorfile>
      <anchor>ade87cd6e9f1026b60624ec4ec338deab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_fit_error</name>
      <anchorfile>classIMP_1_1algebra_1_1ParabolicFit2D.html</anchorfile>
      <anchor>afe67ab5f8b897a581b75eb06a6cc2601</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Plane3D</name>
    <filename>classIMP_1_1algebra_1_1Plane3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type>Plane3D</type>
      <name>get_opposite</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>aaccbebe65a7c6c14a0bde93ab9b91363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_projected</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>a854ba9b2d105a4b3fa05991b22ada40d</anchor>
      <arglist>(const Vector3D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_area</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>a2ce4dc9bc8335a283d1993a24ed1130e</anchor>
      <arglist>(const Plane3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>aedce7034965a145fc52252f640761b26</anchor>
      <arglist>(const Plane3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Plane3D &amp;</type>
      <name>get_plane_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>ade3bebd378b15acf3e134236ccf4a894</anchor>
      <arglist>(const Plane3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_plane_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Plane3D.html</anchorfile>
      <anchor>a6e8806b130e7420d2a33e532c4ecfdcf</anchor>
      <arglist>(Plane3D &amp;g, const Plane3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::PrincipalComponentAnalysisD</name>
    <filename>classIMP_1_1algebra_1_1PrincipalComponentAnalysisD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::ReferenceFrame3D</name>
    <filename>classIMP_1_1algebra_1_1ReferenceFrame3D.html</filename>
    <member kind="function">
      <type></type>
      <name>ReferenceFrame3D</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>a3e17bdb4c935a8552c1b5e0ebea55730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrame3D</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>a2784d26ef83ccd5b34f1f2752d0940fc</anchor>
      <arglist>(const Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_global_coordinates</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>a15ad3ffad22d0a4f715920a5a13867e7</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>ReferenceFrame3D</type>
      <name>get_global_reference_frame</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>af4e8c0e2c90dffb8a059a866ada3f7e4</anchor>
      <arglist>(const ReferenceFrame3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_local_coordinates</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>adc92c123d433bfa804c5323c541f4a7b</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>ReferenceFrame3D</type>
      <name>get_local_reference_frame</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>ac4adf03ce952d182320a9a99709cb728</anchor>
      <arglist>(const ReferenceFrame3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const Transformation3D &amp;</type>
      <name>get_transformation_from</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>a0ea138451954b123f39698f67903f5ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transformation3D &amp;</type>
      <name>get_transformation_to</name>
      <anchorfile>classIMP_1_1algebra_1_1ReferenceFrame3D.html</anchorfile>
      <anchor>a1e26b1d2ad062f25d54acdceb4566976</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Reflection3D</name>
    <filename>classIMP_1_1algebra_1_1Reflection3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Rotation2D</name>
    <filename>classIMP_1_1algebra_1_1Rotation2D.html</filename>
    <base>GeometricPrimitiveD&lt; 2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>a6383c662fb6484efedf0d0641524c985</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>a5cfcab3320800c85e365621666dc20b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>get_inverse</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>a2f2b6db0f0898eb427c79f576c9e6b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>get_rotated</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>af81a15837d618f5193cf977d50efa840</anchor>
      <arglist>(const Vector2D &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>get_rotated</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>a58fa9b6a2bfdc0344326ce3f600a9263</anchor>
      <arglist>(const double x, const double y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_angle</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>ab9c0e54322d11974d9a12703c048aac2</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation2D.html</anchorfile>
      <anchor>aec34f5a22b129ff64db17150b0d2ef37</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Rotation3D</name>
    <filename>classIMP_1_1algebra_1_1Rotation3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rotation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a291747d669f67987bca04174ecafc0c1</anchor>
      <arglist>(const Rotation3D &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a7f9a88f4c31d4d8f2115beeda2a979a8</anchor>
      <arglist>(const VectorD&lt; 4 &gt; &amp;v, bool assume_normalized=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a8f42f5508cb8f50832961b3c45af5077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a6ac672270fcad45eeffb377404553e66</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_gradient_of_rotated</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a2728556fca7e42f61a63bbaf6264a9dc</anchor>
      <arglist>(const Vector3D &amp;v, unsigned int i, bool wrt_unnorm=false) const </arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>get_inverse</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a64277befc08357d6768b5f8cba5fdf56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_valid</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a65b6637966fb8c03f68f0154476dd634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_jacobian_of_rotated</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a7a4e7d2a89e9192874a47b04045986c8</anchor>
      <arglist>(const Eigen::Vector3d &amp;v, bool wrt_unnorm=false) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector4D &amp;</type>
      <name>get_quaternion</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>aac89c996b82edc7aa141a6e821d1156e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_rotated</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a6e8cb23dae55da2e45c157f5b0654108</anchor>
      <arglist>(const Vector3D &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_rotated_adjoint</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a1ff091221932dab189b6fda6a9d2f879</anchor>
      <arglist>(const Vector3D &amp;v, const Vector3D &amp;Dw, Vector3D *Dv, Rotation3DAdjoint *Dr) const </arglist>
    </member>
    <member kind="function">
      <type>RotatedVector3DAdjoint</type>
      <name>get_rotated_adjoint</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a8058c7df66410fb6d155847ba2b222b2</anchor>
      <arglist>(const Vector3D &amp;v, const Vector3D &amp;Dw) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rotated_one_coordinate</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a76bdfad7e869ff30554af843e6276236</anchor>
      <arglist>(const Vector3D &amp;o, unsigned int coord) const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a16a68aa93e72637d2a5e513714dc3a41</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>add6b45584377d72708fa41d93cf0e912</anchor>
      <arglist>(const Rotation3D &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Rotation3D</type>
      <name>operator/</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a1f4eed6fc383b00ae8c5430c42190d39</anchor>
      <arglist>(const Rotation3D &amp;r) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend Rotation3D</type>
      <name>compose</name>
      <anchorfile>classIMP_1_1algebra_1_1Rotation3D.html</anchorfile>
      <anchor>a245bbd42a3c675e79a9ad216d7b63be4</anchor>
      <arglist>(const Rotation3D &amp;a, const Rotation3D &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Segment3D</name>
    <filename>classIMP_1_1algebra_1_1Segment3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_direction</name>
      <anchorfile>classIMP_1_1algebra_1_1Segment3D.html</anchorfile>
      <anchor>addbf23051b42cbb79b81d5c9b7c1f4c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector3D &amp;</type>
      <name>get_point</name>
      <anchorfile>classIMP_1_1algebra_1_1Segment3D.html</anchorfile>
      <anchor>af03a6a66e92472aff506e205c22ebdca</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Segment3D.html</anchorfile>
      <anchor>abd21d39499ca4acd3616d7a9355b90fd</anchor>
      <arglist>(const Segment3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Segment3D &amp;</type>
      <name>get_segment_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Segment3D.html</anchorfile>
      <anchor>af5c43b376efc839be7570ffa3ee7825b</anchor>
      <arglist>(const Segment3D &amp;g)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::SparseGrid3D</name>
    <filename>structIMP_1_1algebra_1_1SparseGrid3D.html</filename>
    <templarg></templarg>
    <base>GridD&lt; 3, SparseGridStorageD&lt; 3, VT, BoundedGridRangeD&lt; 3 &gt; &gt;, VT, DefaultEmbeddingD&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, VTdefault_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>add_voxel</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>ab3283a6eb40d179b0648b804a95ef499</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i, const VT &amp;gi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>a053acf2aeafd935e97726038903032b6</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>abcf4643d745ad8f61ac711026cb9a5cb</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_end_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a61d03caf63e70aa0c0e6d6d74130c27c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a4aae88234ef495bca2bfd9baf28b8ce3</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>acf1f33b1c1d7957330f442f15d656ac9</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_maximum_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a395874afecb718cda8209087070b9aaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_minimum_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>a3630e2bb1873a86f4606a04b5bf7c847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_voxels</name>
      <anchorfile>classIMP_1_1algebra_1_1BoundedGridRangeD.html</anchorfile>
      <anchor>ab19336e6b92ff4048a6e1affdb12eced</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::SparseGridStorageD</name>
    <filename>classIMP_1_1algebra_1_1SparseGridStorageD.html</filename>
    <templarg>D</templarg>
    <templarg>VT</templarg>
    <templarg>Base</templarg>
    <templarg>Map</templarg>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>add_voxel</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>ab3283a6eb40d179b0648b804a95ef499</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i, const VT &amp;gi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>a053acf2aeafd935e97726038903032b6</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>abcf4643d745ad8f61ac711026cb9a5cb</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::SparseUnboundedGrid3D</name>
    <filename>structIMP_1_1algebra_1_1SparseUnboundedGrid3D.html</filename>
    <templarg></templarg>
    <base>GridD&lt; 3, SparseGridStorageD&lt; 3, VT, UnboundedGridRangeD&lt; 3 &gt; &gt;, VT, DefaultEmbeddingD&lt; 3 &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, VTdefault_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>add_voxel</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>ab3283a6eb40d179b0648b804a95ef499</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i, const VT &amp;gi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>a053acf2aeafd935e97726038903032b6</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>abcf4643d745ad8f61ac711026cb9a5cb</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::algebra::SparseUnboundedGridD</name>
    <filename>structIMP_1_1algebra_1_1SparseUnboundedGridD.html</filename>
    <templarg>D</templarg>
    <templarg></templarg>
    <base>GridD&lt; D, SparseGridStorageD&lt; D, VT, UnboundedGridRangeD&lt; D &gt; &gt;, VT, DefaultEmbeddingD&lt; D &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a97ccb184c448edc82741a0b8126ec750</anchor>
      <arglist>(const Ints counts, const BoundingBoxD&lt; D &gt; &amp;bb, VTdefault_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aa575da807c4f8427657289c1725587c2</anchor>
      <arglist>(double side, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab96be5a02e7d8a1729e6b47e8f6b93da</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const BoundingBoxD&lt; D &gt; &amp;bb, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a3d5363a55aec81dc831a332a57be4cfb</anchor>
      <arglist>(const Storage &amp;storage, const Embedding &amp;embed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>adb32bd20c18445dd15609b6d71ab6eff</anchor>
      <arglist>(double side, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1331afb93fdf474e352ce38076a1dd56</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;sides, const VectorD&lt; D &gt; &amp;origin, const VT &amp;default_value=VT())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridD</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>aec69617c1e10c1937ce5900f4b62fcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExtendedGridIndexD&lt; D &gt;</type>
      <name>get_extended_index</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>a1f513a99898cd34a8f760b887b4f9220</anchor>
      <arglist>(const GridIndexD&lt; D &gt; &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1GridD.html</anchorfile>
      <anchor>ab560837a0b4afe66e89bfc0d628deaa8</anchor>
      <arglist>(const BoundingBoxD&lt; D &gt; &amp;bb3)</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>add_voxel</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>ab3283a6eb40d179b0648b804a95ef499</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i, const VT &amp;gi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>a053acf2aeafd935e97726038903032b6</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>GridIndexD&lt; D &gt;</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1algebra_1_1SparseGridStorageD.html</anchorfile>
      <anchor>abcf4643d745ad8f61ac711026cb9a5cb</anchor>
      <arglist>(const ExtendedGridIndexD&lt; D &gt; &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::SphereD</name>
    <filename>classIMP_1_1algebra_1_1SphereD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1SphereD.html</anchorfile>
      <anchor>a77963d4ae201c1d27518495e9c13275d</anchor>
      <arglist>(const SphereD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1SphereD.html</anchorfile>
      <anchor>a9c5b271fe56058daa14d41b4463994e1</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::SpherePatch3D</name>
    <filename>classIMP_1_1algebra_1_1SpherePatch3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>SpherePatch3D</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>ae2287e153d7407b77aa454e4e838fa65</anchor>
      <arglist>(const Sphere3D &amp;sph, const Plane3D &amp;crossing_plane)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_boundary_point</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>afc6e12a3499bbc46394f7df0dc4e751d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>a07f278aee7f47c8bf4b5113b3842c8d6</anchor>
      <arglist>(const Vector3D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_area</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>a96d364ca0c2621089adcfe22945de30b</anchor>
      <arglist>(const SpherePatch3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>ae5375e21b4c4a14ecf4278d36cab2387</anchor>
      <arglist>(const SpherePatch3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const SpherePatch3D &amp;</type>
      <name>get_sphere_patch_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>ab64eeda4f1106781fd57c3635e593b12</anchor>
      <arglist>(const SpherePatch3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sphere_patch_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1SpherePatch3D.html</anchorfile>
      <anchor>a45d61d6b1d79f6f08aaa5e7540b25001</anchor>
      <arglist>(SpherePatch3D &amp;g, const SpherePatch3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::SphericalVector3D</name>
    <filename>classIMP_1_1algebra_1_1SphericalVector3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>SphericalVector3D</name>
      <anchorfile>classIMP_1_1algebra_1_1SphericalVector3D.html</anchorfile>
      <anchor>a09e37962ad04ec9c5ced7a60b5980235</anchor>
      <arglist>(const Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalVector3D</name>
      <anchorfile>classIMP_1_1algebra_1_1SphericalVector3D.html</anchorfile>
      <anchor>afec127601c927be6b908257465d1233d</anchor>
      <arglist>(double r, double theta, double psi, bool apply_check=true)</arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_cartesian_coordinates</name>
      <anchorfile>classIMP_1_1algebra_1_1SphericalVector3D.html</anchorfile>
      <anchor>ad1fadf6af9456378bc86f64d18635914</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Torus3D</name>
    <filename>classIMP_1_1algebra_1_1Torus3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type>std::pair&lt; double, algebra::Vector3D &gt;</type>
      <name>get_torus_distance</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>ab5e0b952d3e56a26368c402175f35343</anchor>
      <arglist>(Sphere3D) const </arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>aaaa8ffb3b19028f35539da46be602814</anchor>
      <arglist>(const Torus3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>a52583cc4f6079095374c4cf242aacb0b</anchor>
      <arglist>(const Torus3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Torus3D &amp;</type>
      <name>get_torus_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>a87d58fbd0252feffafd1fe4cb8b3ff0e</anchor>
      <arglist>(const Torus3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>a138c34153dc211ac2e43aca8dd2988d9</anchor>
      <arglist>(const Torus3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_torus_3d_geometry</name>
      <anchorfile>classIMP_1_1algebra_1_1Torus3D.html</anchorfile>
      <anchor>aabbf662b635d6bfb8a745d77b9a543a0</anchor>
      <arglist>(Torus3D &amp;g, const Torus3D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Transformation2D</name>
    <filename>classIMP_1_1algebra_1_1Transformation2D.html</filename>
    <base>GeometricPrimitiveD&lt; 2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Transformation2D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a8f01e719bb5a78a68456c0ce0fd22e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation2D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>ae38299503ccbbfc00f6601c73c934524</anchor>
      <arglist>(const Rotation2D &amp;r, const Vector2D &amp;t=Vector2D(0.0, 0.0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation2D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>aa7a9aaf33ef8ea35d4010bcb52a3b81f</anchor>
      <arglist>(const Vector2D &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>get_inverse</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a800d5df3b998086944f787ecc52f7961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation2D</type>
      <name>get_rotation</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a9c6b8c68d237c6327947db7f73df7a5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>get_transformed</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a9264e3d5e70de2e07277ef81cad54f63</anchor>
      <arglist>(const Vector2D &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector2D</type>
      <name>get_translation</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>aca88bafb0c99af6d87e372b3877ba368</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>aa03ac439408fa1a4eb67c57cd6f091cf</anchor>
      <arglist>(const Vector2D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a522e638b36bb208b63a4cff80481b2fd</anchor>
      <arglist>(const Transformation2D &amp;tr) const </arglist>
    </member>
    <member kind="function">
      <type>const Transformation2D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>afaf5b30d6215c311e8d00ad6f2ae28ab</anchor>
      <arglist>(const Transformation2D &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>Transformation2D</type>
      <name>operator/</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>aeea8a543dd04a6a6c4eb1b646eee47ed</anchor>
      <arglist>(const Transformation2D &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>const Transformation2D &amp;</type>
      <name>operator/=</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>aa4796bb23d7e3855e14f3603323f8260</anchor>
      <arglist>(const Transformation2D &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation2D.html</anchorfile>
      <anchor>a6356b07e0812e41b9d1592aeaa9c9d0d</anchor>
      <arglist>(const Vector2D &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Transformation3D</name>
    <filename>classIMP_1_1algebra_1_1Transformation3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Transformation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a06edb05ffed07cf63af15f1fa4985f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a0f2df89b87c067870907e1cf5103e036</anchor>
      <arglist>(const Rotation3D &amp;r, const Vector3D &amp;t=Vector3D(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>afba85c756d4f1af1f29d1a466854e711</anchor>
      <arglist>(const Vector3D &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_valid</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>ae3a043ae151f5a5f35f7750d5a0e2f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation3D &amp;</type>
      <name>get_rotation</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>af38f7b53af59c4d73defebca22893b14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>get_transformed</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a4bb8cadeb62fc4cf0f93ae42b3d0d2c2</anchor>
      <arglist>(const Vector3D &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_transformed_adjoint</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>adf595d5b74e3ce9fb8eaf38c9c549a28</anchor>
      <arglist>(const Vector3D &amp;v, const Vector3D &amp;Dw, Vector3D *Dv, Transformation3DAdjoint *DT) const </arglist>
    </member>
    <member kind="function">
      <type>TransformedVector3DAdjoint</type>
      <name>get_transformed_adjoint</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a747bf579fe4b892a1037fbaa822ea20a</anchor>
      <arglist>(const Vector3D &amp;v, const Vector3D &amp;Dw) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector3D &amp;</type>
      <name>get_translation</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a7de945c2257542936ab83f5e48bafa67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector3D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a40182b2ded100d30401f85c72d618a41</anchor>
      <arglist>(const Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>operator*</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>a3d4eb9fcd2303c38d71935e133c909ea</anchor>
      <arglist>(const Transformation3D &amp;tr) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation3D</type>
      <name>operator/</name>
      <anchorfile>classIMP_1_1algebra_1_1Transformation3D.html</anchorfile>
      <anchor>ad527f26807df0a9fe8a5aca648d91b4c</anchor>
      <arglist>(const Transformation3D &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::Triangle3D</name>
    <filename>classIMP_1_1algebra_1_1Triangle3D.html</filename>
    <base>GeometricPrimitiveD&lt; 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Triangle3D</name>
      <anchorfile>classIMP_1_1algebra_1_1Triangle3D.html</anchorfile>
      <anchor>a3efc6bd478bb6d12de567a87f068693a</anchor>
      <arglist>(const Vector3D &amp;p1, const Vector3D &amp;p2, const Vector3D &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>const Vector3D &amp;</type>
      <name>get_point</name>
      <anchorfile>classIMP_1_1algebra_1_1Triangle3D.html</anchorfile>
      <anchor>a87d615ec9b7c9f04acd9b1b55e015a76</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::UnboundedGridRangeD</name>
    <filename>classIMP_1_1algebra_1_1UnboundedGridRangeD.html</filename>
    <templarg>D</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::UnitSimplexBaseD</name>
    <filename>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_barycenter</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</anchorfile>
      <anchor>a60cc3282f9f54822abad19cd7fc970ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</anchorfile>
      <anchor>a5cfd4528d5d55177a1fa777a4976dfb4</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;p, double atol=std::numeric_limits&lt; double &gt;::epsilon()) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_dimension</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</anchorfile>
      <anchor>a5cf54a71a2a6c0167ad855e7adb88d42</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::UnitSimplexD</name>
    <filename>classIMP_1_1algebra_1_1UnitSimplexD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::UnitSimplexBaseD</base>
    <member kind="function">
      <type>int</type>
      <name>get_dimension</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexD.html</anchorfile>
      <anchor>a83c5bc1d252d5816d007b8f429eab3bf</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::UnitSimplexD&lt;-1 &gt;</name>
    <filename>classIMP_1_1algebra_1_1UnitSimplexD_3-1_01_4.html</filename>
    <base>UnitSimplexBaseD&lt;-1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>UnitSimplexD</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexD_3-1_01_4.html</anchorfile>
      <anchor>af149cf2dba5dd9a686fa6515fe006286</anchor>
      <arglist>(int d=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_dimension</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexD_3-1_01_4.html</anchorfile>
      <anchor>a438b260f32ab4728c6e48e16ac05bc17</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>VectorD&lt; D &gt;</type>
      <name>get_barycenter</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</anchorfile>
      <anchor>a60cc3282f9f54822abad19cd7fc970ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1algebra_1_1UnitSimplexBaseD.html</anchorfile>
      <anchor>a5cfd4528d5d55177a1fa777a4976dfb4</anchor>
      <arglist>(const VectorD&lt; D &gt; &amp;p, double atol=std::numeric_limits&lt; double &gt;::epsilon()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::VectorBaseD</name>
    <filename>classIMP_1_1algebra_1_1VectorBaseD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
    <member kind="function">
      <type></type>
      <name>VectorBaseD</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>a4025e871ecfbcd007b94508cabaed5fa</anchor>
      <arglist>(const Range &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBaseD</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>a8d07bc543f52036972f74d33f3fc772a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>get_data</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>a5ff0587b892235c9cb4bf1678075f3b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>aa7e359f32294e041dc7b6a035f637885</anchor>
      <arglist>(const VectorBaseD&lt; D &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>aa28e30d7de2f19a048ecc66ae218d230</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorBaseD.html</anchorfile>
      <anchor>abaed0f65e3d01eb6cd76980e1cd8c1a3</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::VectorD</name>
    <filename>classIMP_1_1algebra_1_1VectorD.html</filename>
    <templarg>D</templarg>
    <base>IMP::algebra::VectorBaseD</base>
    <member kind="function">
      <type></type>
      <name>VectorD</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorD.html</anchorfile>
      <anchor>a99f009054b6a4f3523ce6a536a173af9</anchor>
      <arglist>(const Range &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorD</name>
      <anchorfile>classIMP_1_1algebra_1_1VectorD.html</anchorfile>
      <anchor>a0a73b8962a5353e5a0d9ee9a388f0826</anchor>
      <arglist>(It b, It e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::algebra::VectorKDMetric</name>
    <filename>classIMP_1_1algebra_1_1VectorKDMetric.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="namespace">
    <name>IMP::atom</name>
    <filename>namespaceIMP_1_1atom.html</filename>
    <class kind="class">IMP::atom::AllMol2Selector</class>
    <class kind="class">IMP::atom::AllPDBSelector</class>
    <class kind="class">IMP::atom::AndPDBSelector</class>
    <class kind="class">IMP::atom::Angle</class>
    <class kind="class">IMP::atom::AngleSingletonScore</class>
    <class kind="class">IMP::atom::AngularVelocity</class>
    <class kind="class">IMP::atom::Atom</class>
    <class kind="class">IMP::atom::ATOMPDBSelector</class>
    <class kind="class">IMP::atom::AtomType</class>
    <class kind="class">IMP::atom::AtomTypePDBSelector</class>
    <class kind="class">IMP::atom::BackbonePDBSelector</class>
    <class kind="class">IMP::atom::BerendsenThermostatOptimizerState</class>
    <class kind="class">IMP::atom::Bond</class>
    <class kind="class">IMP::atom::Bonded</class>
    <class kind="class">IMP::atom::BondedPairFilter</class>
    <class kind="class">IMP::atom::BondEndpointsRefiner</class>
    <class kind="class">IMP::atom::BondGeometry</class>
    <class kind="class">IMP::atom::BondGraph</class>
    <class kind="class">IMP::atom::BondPairContainer</class>
    <class kind="class">IMP::atom::BondsGeometry</class>
    <class kind="class">IMP::atom::BondSingletonScore</class>
    <class kind="class">IMP::atom::BrownianDynamics</class>
    <class kind="class">IMP::atom::BrownianDynamicsTAMD</class>
    <class kind="class">IMP::atom::CAAngleRestraint</class>
    <class kind="class">IMP::atom::CADihedralRestraint</class>
    <class kind="class">IMP::atom::CAlphaPDBSelector</class>
    <class kind="class">IMP::atom::CBetaPDBSelector</class>
    <class kind="class">IMP::atom::CenterOfMass</class>
    <class kind="class">IMP::atom::Chain</class>
    <class kind="class">IMP::atom::ChainPDBSelector</class>
    <class kind="class">IMP::atom::ChainType</class>
    <class kind="class">IMP::atom::Charged</class>
    <class kind="class">IMP::atom::CHARMMAtom</class>
    <class kind="class">IMP::atom::CHARMMAtomTopology</class>
    <class kind="class">IMP::atom::CHARMMBondEndpoint</class>
    <class kind="struct">IMP::atom::CHARMMBondParameters</class>
    <class kind="class">IMP::atom::CHARMMConnection</class>
    <class kind="struct">IMP::atom::CHARMMDihedralParameters</class>
    <class kind="class">IMP::atom::CHARMMIdealResidueTopology</class>
    <class kind="class">IMP::atom::CHARMMInternalCoordinate</class>
    <class kind="class">IMP::atom::CHARMMParameters</class>
    <class kind="class">IMP::atom::CHARMMPatch</class>
    <class kind="class">IMP::atom::CHARMMResidueTopology</class>
    <class kind="class">IMP::atom::CHARMMResidueTopologyBase</class>
    <class kind="class">IMP::atom::CHARMMSegmentTopology</class>
    <class kind="class">IMP::atom::CHARMMStereochemistryRestraint</class>
    <class kind="class">IMP::atom::CHARMMTopology</class>
    <class kind="class">IMP::atom::Copy</class>
    <class kind="class">IMP::atom::CoulombPairScore</class>
    <class kind="class">IMP::atom::CoverBond</class>
    <class kind="class">IMP::atom::CPDBSelector</class>
    <class kind="class">IMP::atom::Diffusion</class>
    <class kind="class">IMP::atom::Dihedral</class>
    <class kind="class">IMP::atom::DihedralSingletonScore</class>
    <class kind="class">IMP::atom::Domain</class>
    <class kind="class">IMP::atom::DopePairScore</class>
    <class kind="class">IMP::atom::ElementTable</class>
    <class kind="class">IMP::atom::EzRestraint</class>
    <class kind="class">IMP::atom::ForceFieldParameters</class>
    <class kind="class">IMP::atom::ForceSwitch</class>
    <class kind="class">IMP::atom::Fragment</class>
    <class kind="class">IMP::atom::HelixRestraint</class>
    <class kind="class">IMP::atom::HierarchiesGeometry</class>
    <class kind="class">IMP::atom::Hierarchy</class>
    <class kind="class">IMP::atom::HierarchyGeometry</class>
    <class kind="class">IMP::atom::HydrogenPDBSelector</class>
    <class kind="class">IMP::atom::ImproperSingletonScore</class>
    <class kind="class">IMP::atom::LangevinThermostatOptimizerState</class>
    <class kind="class">IMP::atom::LennardJones</class>
    <class kind="class">IMP::atom::LennardJonesPairScore</class>
    <class kind="class">IMP::atom::LinearVelocity</class>
    <class kind="class">IMP::atom::LoopStatisticalPairScore</class>
    <class kind="class">IMP::atom::Mass</class>
    <class kind="class">IMP::atom::Mol2Selector</class>
    <class kind="class">IMP::atom::MolecularDynamics</class>
    <class kind="class">IMP::atom::Molecule</class>
    <class kind="class">IMP::atom::NonAlternativePDBSelector</class>
    <class kind="class">IMP::atom::NonHydrogenMol2Selector</class>
    <class kind="class">IMP::atom::NonHydrogenPDBSelector</class>
    <class kind="class">IMP::atom::NonWaterNonHydrogenPDBSelector</class>
    <class kind="class">IMP::atom::NonWaterPDBSelector</class>
    <class kind="class">IMP::atom::NotPDBSelector</class>
    <class kind="class">IMP::atom::NPDBSelector</class>
    <class kind="class">IMP::atom::OrientedSoapPairScore</class>
    <class kind="class">IMP::atom::OrPDBSelector</class>
    <class kind="class">IMP::atom::PDBRecord</class>
    <class kind="class">IMP::atom::PDBSelector</class>
    <class kind="class">IMP::atom::PPDBSelector</class>
    <class kind="class">IMP::atom::ProteinLigandAtomPairScore</class>
    <class kind="class">IMP::atom::ProteinLigandRestraint</class>
    <class kind="class">IMP::atom::RemoveRigidMotionOptimizerState</class>
    <class kind="class">IMP::atom::RemoveTranslationOptimizerState</class>
    <class kind="class">IMP::atom::Representation</class>
    <class kind="class">IMP::atom::Residue</class>
    <class kind="class">IMP::atom::ResidueType</class>
    <class kind="class">IMP::atom::ResidueTypePDBSelector</class>
    <class kind="class">IMP::atom::RigidBodyDiffusion</class>
    <class kind="class">IMP::atom::SameResiduePairFilter</class>
    <class kind="class">IMP::atom::SecondaryStructureResidue</class>
    <class kind="class">IMP::atom::Selection</class>
    <class kind="class">IMP::atom::SelectionGeometry</class>
    <class kind="class">IMP::atom::Simulator</class>
    <class kind="class">IMP::atom::SmoothingFunction</class>
    <class kind="class">IMP::atom::SoapPairFilter</class>
    <class kind="class">IMP::atom::State</class>
    <class kind="class">IMP::atom::StereochemistryPairFilter</class>
    <class kind="class">IMP::atom::StructureSource</class>
    <class kind="class">IMP::atom::TAMDCentroid</class>
    <class kind="class">IMP::atom::TAMDParticle</class>
    <class kind="class">IMP::atom::VelocityScalingOptimizerState</class>
    <class kind="class">IMP::atom::WaterPDBSelector</class>
    <class kind="class">IMP::atom::WritePDBOptimizerState</class>
    <class kind="class">IMP::atom::XorPDBSelector</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AngleSingletonScore &gt; &gt;</type>
      <name>AngleSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3781207e6f4e06c17fee7d675b8722a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AngleSingletonScore &gt; &gt;</type>
      <name>AngleSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a941da35b55a8212342384e0e28921e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; AtomType &gt;</type>
      <name>AtomTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa9508a06c406ba18afe3312d33384318</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BerendsenThermostatOptimizerState &gt; &gt;</type>
      <name>BerendsenThermostatOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a774a168400f1dbead3ca9769a7ac4dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BerendsenThermostatOptimizerState &gt; &gt;</type>
      <name>BerendsenThermostatOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5809551d48be0fc81a9cd66551ca4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondedPairFilter &gt; &gt;</type>
      <name>BondedPairFilters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af4dbdd86f7132fd0ad6cff521f6d5654</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondedPairFilter &gt; &gt;</type>
      <name>BondedPairFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5f0d861ac1d00c810187779e9c2619b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondEndpointsRefiner &gt; &gt;</type>
      <name>BondEndpointsRefiners</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9c24e2eb00bf9e5f632f2ebecb6a82b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondEndpointsRefiner &gt; &gt;</type>
      <name>BondEndpointsRefinersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2a1d98c3e5602b47cf28cd59a48ffe56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondPairContainer &gt; &gt;</type>
      <name>BondPairContainers</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aba3eef5a64b7179db51682f0ab9e4da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondPairContainer &gt; &gt;</type>
      <name>BondPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a949f18a82b270a785328e1612800de4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondSingletonScore &gt; &gt;</type>
      <name>BondSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afdf802e05d9f77026b44ed1f13027b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondSingletonScore &gt; &gt;</type>
      <name>BondSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6e04a84744ddc9db0b6a4bfae06de276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ChainType &gt;</type>
      <name>ChainTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8d114daa6b6f3f037d897c75b4098593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMAngle &gt;</type>
      <name>CHARMMAngles</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af0d43e79b453208ace07301c37afd913</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMAtomTopology &gt;</type>
      <name>CHARMMAtomTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af6f743a211d1fc5c29d3c3850a2fab20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBondEndpoint &gt;</type>
      <name>CHARMMBondEndpoints</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5bf8f931680568d918d3b94ecbe4cf99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBondParameters &gt;</type>
      <name>CHARMMBondParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af481b30cc3db20fceb70a0a5a3a117cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMBond &gt;</type>
      <name>CHARMMBonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8c11162408638705ce39905ba7ba1051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMDihedralParameters &gt;</type>
      <name>CHARMMDihedralParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a428ee3c1393001178bcb26d146d0e46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMDihedral &gt;</type>
      <name>CHARMMDihedrals</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abaa63821b46d509610cc38ea2c9e1b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMIdealResidueTopology &gt; &gt;</type>
      <name>CHARMMIdealResidueTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aafea5f281a5685c770d64557c9ea51eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMIdealResidueTopology &gt; &gt;</type>
      <name>CHARMMIdealResidueTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a621b297d670e1f541f65d73ff20e9077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CHARMMInternalCoordinate &gt;</type>
      <name>CHARMMInternalCoordinates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b4d7f993d9c5b592fdaa553662e74eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMParameters &gt; &gt;</type>
      <name>CHARMMParametersList</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab2ac400dd87af91dad6f2f15d4333c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMParameters &gt; &gt;</type>
      <name>CHARMMParametersListTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a29661c07982e76ea0761d58f02e73fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMPatch &gt; &gt;</type>
      <name>CHARMMPatches</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae874c014ac0b1b686345dc146e781d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMPatch &gt; &gt;</type>
      <name>CHARMMPatchesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9535a374fa40484b37efa87ea053cfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMResidueTopology &gt; &gt;</type>
      <name>CHARMMResidueTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae9eb283b8437503c1cc6b33765fc25a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMResidueTopology &gt; &gt;</type>
      <name>CHARMMResidueTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa5a2af7839a7b7d2dc7194ccf75e913c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMResidueTopologyBase &gt; &gt;</type>
      <name>CHARMMResidueTopologyBases</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a660c22cf47ce2baab841c9069f607fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMResidueTopologyBase &gt; &gt;</type>
      <name>CHARMMResidueTopologyBasesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a66674dde7eb6f57ca3039a2649fbb595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMSegmentTopology &gt; &gt;</type>
      <name>CHARMMSegmentTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad91086863d8f4be8da592f9d51ba4bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMSegmentTopology &gt; &gt;</type>
      <name>CHARMMSegmentTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab53b96f0e53b6ad75e326e42b4f92112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CHARMMTopology &gt; &gt;</type>
      <name>CHARMMTopologies</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4445668753dd56e233e90be3cc1c6569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CHARMMTopology &gt; &gt;</type>
      <name>CHARMMTopologiesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a801fffabe7cdbaaf7056173ae6a66e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CoulombPairScore &gt; &gt;</type>
      <name>CoulombPairScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abc885b84f61aee2dc63925c23514854f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CoulombPairScore &gt; &gt;</type>
      <name>CoulombPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae5b9d6ca353d9449ac1ef483ac59bbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CoverBond &gt; &gt;</type>
      <name>CoverBonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>affa4a73e96f9ecc4f6fab4ae9198b03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CoverBond &gt; &gt;</type>
      <name>CoverBondsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af9211f52101a4e5f1559f652fc53d303</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DihedralSingletonScore &gt; &gt;</type>
      <name>DihedralSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7019f9c6083f10036a030f4917bc5317</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DihedralSingletonScore &gt; &gt;</type>
      <name>DihedralSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a53a8248ddb5a1dd4d709b89b49a61d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>HierarchyTree</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa3cf11b922ce77ffe681ea6f911f369c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ImproperSingletonScore &gt; &gt;</type>
      <name>ImproperSingletonScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa667ae470e0ee0765d67e539f85c1941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ImproperSingletonScore &gt; &gt;</type>
      <name>ImproperSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3d23d0d37e9b80fc6b2c5c3b6380f03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LangevinThermostatOptimizerState &gt; &gt;</type>
      <name>LangevinThermostatOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a39e0cfc822c496c7b1bfed4935f2c1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LangevinThermostatOptimizerState &gt; &gt;</type>
      <name>LangevinThermostatOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad1da6fe55c3bad2afc051793515ac151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LennardJonesPairScore &gt; &gt;</type>
      <name>LennardJonesPairScores</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a50a1d1995905bb6ed18f93f5ed169164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LennardJonesPairScore &gt; &gt;</type>
      <name>LennardJonesPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac2f62db05f4ed27693403c0b54e94879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; PDBRecord &gt;</type>
      <name>PDBRecords</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abfee0a877234c3013f490ce13c0981b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PDBSelector &gt; &gt;</type>
      <name>PDBSelectors</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a38154066027dce69633e6db9ccabbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PDBSelector &gt; &gt;</type>
      <name>PDBSelectorsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5617d7f857fee01a006b8aab52ed7e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RemoveRigidMotionOptimizerState &gt; &gt;</type>
      <name>RemoveRigidMotionOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2aa77d4465b33ede42a25f4008ca7463</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RemoveRigidMotionOptimizerState &gt; &gt;</type>
      <name>RemoveRigidMotionOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7d37da69e26a76f2e35194f654e423bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RemoveTranslationOptimizerState &gt; &gt;</type>
      <name>RemoveTranslationOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1e0cafffc69c4040dc10f3df4f8580c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RemoveTranslationOptimizerState &gt; &gt;</type>
      <name>RemoveTranslationOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5b513668a8b35e285bef0f9b283fe69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ResidueType &gt;</type>
      <name>ResidueTypes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6ead334bcfeeaf084199bf9c0900cd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Selection &gt;</type>
      <name>Selections</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a882869b6f363351eaeb94ec460fd19fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Simulator &gt; &gt;</type>
      <name>Simulators</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4fed21937b797f6789b397fb0ce44c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Simulator &gt; &gt;</type>
      <name>SimulatorsTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac08f9ff2b2827e3cc820b6fb945d5de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; VelocityScalingOptimizerState &gt; &gt;</type>
      <name>VelocityScalingOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aad9e3197039651cc9679b86215efa519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; VelocityScalingOptimizerState &gt; &gt;</type>
      <name>VelocityScalingOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>acf7f10f1c9392c3b0875054e435f3726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Element</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a611e6343bbcfccda53cc687bd1b23845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GetByType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abbe974bcb01d2f1dc86b33fd48a76fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RepresentationType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3f3acf356cf798fb64f25487b952baed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AtomType</type>
      <name>add_atom_type</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a02a38fbf0485b7d9642be56a9ee6bdc1</anchor>
      <arglist>(std::string name, Element e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_bonds</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0b3af7559bf1bed6ecdfe98701fab423</anchor>
      <arglist>(Hierarchy d, const ForceFieldParameters *ffp=get_all_atom_CHARMM_parameters())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_radii</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad6e74dd86fdc8480090199a6cdc8bf55</anchor>
      <arglist>(Hierarchy d, const ForceFieldParameters *ffp=get_all_atom_CHARMM_parameters(), FloatKey radius_key=FloatKey(&quot;radius&quot;))</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gad928d4afc3de5646070a1a55499772d3</anchor>
      <arglist>(Bonded a, Bonded b, Int t)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga1c817f9827d6115fe10530ca349098fa</anchor>
      <arglist>(Bonded a, Bonded b, Bond o)</arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_compatible_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a70ac55d293e6851c67b45d7fd55a3163</anchor>
      <arglist>(Hierarchy h, Hierarchy reference)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adb6ec371e048f639a51292a67268f432</anchor>
      <arglist>(const Selections &amp;s, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a76ad13aa02ece8e2a110250b4be878b7</anchor>
      <arglist>(const Selections &amp;s, double x0, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>core::XYZR</type>
      <name>create_cover</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aed5950befd1610327f1bc9bc737de49f</anchor>
      <arglist>(const Selection &amp;s, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>create_custom_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga4434a119a32491177223b0fe0d6f7d6d</anchor>
      <arglist>(Bonded a, Bonded b, Float length, Float stiffness=-1)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_distance_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>abc59e05e0e702438730b01f225858438</anchor>
      <arglist>(const Selection &amp;n0, const Selection &amp;n1, double x0, double k, std::string name=&quot;Distance%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a64f18ad8ce0534736253b21f84c7c308</anchor>
      <arglist>(const Hierarchies &amp;hs, double resolution=-1)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af115fdd772a04d5e4f775825a56b61d9</anchor>
      <arglist>(const Selections &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_internal_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2e83759163a5032a2f429eae3e86f0cd</anchor>
      <arglist>(const Selection &amp;s, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_internal_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aced8686a48e1011e90376a302cc3155d</anchor>
      <arglist>(const Selection &amp;s, double x0, double k, std::string name=&quot;Connectivity%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aaa55b95e08377207f065cbab8bec4399</anchor>
      <arglist>(Model *m, std::string name, double target_radius, int number_of_residues, int first_residue_index=0, double volume=-1)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0d69cdcf058b017505e1b490054d48ff</anchor>
      <arglist>(Model *m, std::string name, double target_radius, const Ints domain_boundaries)</arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b72819ad85249bfe290fe31b4084e9e</anchor>
      <arglist>(const Hierarchies &amp;h, std::string name=std::string(&quot;created rigid body&quot;))</arglist>
    </member>
    <member kind="function">
      <type>IMP::core::RigidBody</type>
      <name>create_rigid_body</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a40da5b3553d98acf020078b4e435b12a</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_assembly_from_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1ec0bdeff49fc6221a7c4e370ba68279</anchor>
      <arglist>(Hierarchy h, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_simplified_from_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad36632c4fe1304975ff1afce38816295</anchor>
      <arglist>(Hierarchy h, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>ga53d105256db430c876b1a83c5a2786a4</anchor>
      <arglist>(Bond b)</arglist>
    </member>
    <member kind="function">
      <type>CHARMMParameters *</type>
      <name>get_all_atom_CHARMM_parameters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7150f310d5f5da0275933bfbe4c68d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Atom</type>
      <name>get_atom</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a899927712a6b9ae00aa8875407f5311a</anchor>
      <arglist>(Residue rd, AtomType at)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_atom_type_exists</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa58a2e5af4c746151822c5188873f7fb</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>Bond</type>
      <name>get_bond</name>
      <anchorfile>group__bond.html</anchorfile>
      <anchor>gaf75358e1a709b3b9cf2153bf741b5efa</anchor>
      <arglist>(Bonded a, Bonded b)</arglist>
    </member>
    <member kind="function">
      <type>Chain</type>
      <name>get_chain</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a13fb268fe2be9e83bbd9a1a2197499ef</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_chain_id</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a46482205ec4626a8fb4800a6bce46af7</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_charmm_untyped_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8f2e62640647e36570c22b0328283a9c</anchor>
      <arglist>(Hierarchy hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; AtomTypes &gt;</type>
      <name>get_chi_dihedral_atom_types</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad62901c76275a45e34aed68c76548508</anchor>
      <arglist>(ResidueType rt)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Atoms &gt;</type>
      <name>get_chi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a30ce58af4f3485274c3c59c7170d6698</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexQuads</type>
      <name>get_chi_dihedral_particle_indexes</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a49d8d008661379b8938d7bfbd324b262</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_component_placement_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>acf2a8c9e18db10d978cbdb97c654eaf4</anchor>
      <arglist>(const core::XYZs &amp;ref1, const core::XYZs &amp;ref2, const core::XYZs &amp;mdl1, const core::XYZs &amp;mdl2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_copy_index</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa9d8e71ec12f5e1011ed0f457c70ec3a</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_angle</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac7f0983a123dcfd53bab15db3adf8ab6</anchor>
      <arglist>(double D, double dtfs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5985e0551db622b63f81cc9281dd3cf8</anchor>
      <arglist>(const algebra::Vector3Ds &amp;displacements, double dt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0b49ba26ea4fafcad1571f4d1db470c8</anchor>
      <arglist>(const algebra::Vector3Ds &amp;displacements, const Floats &amp;dts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_length</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adb8bfb501a65ca39fcc92e4bab41e27c</anchor>
      <arglist>(double D, double t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_length</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a54369282f293a823d4ebba467d133625</anchor>
      <arglist>(double D, double force, double t, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a10cb65062ed7027cea07ce598cbbd175</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7200d7f08e640bd3f416811320bd2f92</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m0, const Vector3DsOrXYZs1 &amp;m1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_drmsd_Q</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac5a79a2737e93db96838fe761b55fdf2</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m0, const Vector3DsOrXYZs1 &amp;m1, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_einstein_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afc84132665014b5c1d83874d94e65135</anchor>
      <arglist>(double r, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_einstein_rotational_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8a2038514bb5ec1cf54e5ee890e6f853</anchor>
      <arglist>(double r, double temp=-1)</arglist>
    </member>
    <member kind="function">
      <type>CHARMMParameters *</type>
      <name>get_heavy_atom_CHARMM_parameters</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4ab4248f452a6a9ccf43447d83f3e685</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HierarchyTree</type>
      <name>get_hierarchy_tree</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3ad3ffc63b7488509170066bcd021c4c</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_kd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab1a4ec2a67584faf97431ee40db0c9bf</anchor>
      <arglist>(double na, double nb, double nab, double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_kt</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab38f2fa7b34299a330209cc19b9f0527</anchor>
      <arglist>(double T)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_leaves</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>af5b0cc808be9672d3996baeb2f9210fd</anchor>
      <arglist>(const Selection &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a7236ea7f2911d16543c5af18f46f0f5c</anchor>
      <arglist>(ResidueType c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mass</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae122a232c9f291d3f5f4d218c06652e4</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_time_step_estimate</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0e5dbe5aa039ab94bb0bdd9cb18bf91e</anchor>
      <arglist>(BrownianDynamics *bd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_molarity</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a310e584e334797dece24865da5311a67</anchor>
      <arglist>(double n, double volume)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_molecule_name</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3e2c48e16f6245ccf46936fe4ed5837b</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_native_overlap</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab21a3707f5810f3df642052aea0e7f73</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_next_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2cadcc607aa4c1f8b1ec4c0c8d493312</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_omega_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a5ceb85645196ab77765e0ffad9866330</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_one_letter_code</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6bf9912d67e4c9d6a134930015a928de</anchor>
      <arglist>(ResidueType c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_pairwise_rmsd_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac1ac30470fc07d7436876b1e1f7accab</anchor>
      <arglist>(const core::XYZs &amp;ref1, const core::XYZs &amp;ref2, const core::XYZs &amp;mdl1, const core::XYZs &amp;mdl2)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_phi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6ef3ab3e84fd5ab0e83ce40fdc675455</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>get_placement_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad664639ebfb7a53a52704685bbe1a803</anchor>
      <arglist>(const core::XYZs &amp;source, const core::XYZs &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_previous_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad329e5c66a8de2f49304492c5a690d90</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>Atoms</type>
      <name>get_psi_dihedral_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1c15e940e47a1a8f5872029fcb93c601</anchor>
      <arglist>(Residue rd)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4dca993f5bd4a70bb5c5cbd09176819f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, bool weighted=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8ac4a06cec8ed51c3f992851dbaf25b8</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Representation</type>
      <name>get_representation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a48aba7ec117050a9a4d05f11266fa56d</anchor>
      <arglist>(Hierarchy h, bool nothrow=false)</arglist>
    </member>
    <member kind="function">
      <type>Residue</type>
      <name>get_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1b9a562a6a9548c3e85047d8fe53183d</anchor>
      <arglist>(Atom d, bool nothrow=false)</arglist>
    </member>
    <member kind="function">
      <type>ResidueType</type>
      <name>get_residue_type</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4069a6db716b4d4a269df0aed8db5287</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_resolution</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a4a85cddf744fd42b22bd994ff4449484</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_resolution</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a0413486542eba96a7d75081dff43a096</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rigid_bodies_drms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a58aebc295a42228173c884b97b9cb582</anchor>
      <arglist>(const Vector3DsOrXYZs0 &amp;m1, const Vector3DsOrXYZs1 &amp;m2, const IMP::IntRanges &amp;ranges)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa8c6ee981db76d88d7661bb4dd6fb63b</anchor>
      <arglist>(const core::XYZs &amp;s0, const core::XYZs &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a9793120929ce62d48d46e06575e19721</anchor>
      <arglist>(const Selection &amp;s0, const Selection &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6548fc0fb1b2329ba9bb38511610953c</anchor>
      <arglist>(const IMP::algebra::Transformation3D &amp;tr, const core::XYZs &amp;s0, const core::XYZs &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rmsd_transforming_first</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a603f2b73d6e22b3a9128e0398bc6e082</anchor>
      <arglist>(const algebra::Transformation3D &amp;tr, const Selection &amp;s0, const Selection &amp;s1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rotational_diffusion_coefficient</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a50abb962d1335771930636f7ba21eec9</anchor>
      <arglist>(const algebra::Rotation3Ds &amp;orientations, double dt)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_secondary_structure_match_score</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a3164dab692507ddc3602d0a179f642c6</anchor>
      <arglist>(SecondaryStructureResidue ssr1, SecondaryStructureResidue ssr2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_state_index</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a230e74d4b499e3e9ada75e78e93c1af8</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_surface_area</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1ffa9eaea1cc4ecd2d9e3a10b2dd50b2</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a72ceba6f0fb3a05221086170a55f4d46</anchor>
      <arglist>(const Selection &amp;s1, const Selection &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ada8d754330898011ea1435fa0e693136</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2efb72426efcdea0d7566faa78d793ae</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector(), bool select_first_model=true)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>read_multimodel_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a8dd513ff4e39c4c40c56e11f2d23da94</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector())</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>read_multimodel_pdb_or_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2befbe269f1b12d6ccfd31fff5d4673</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector())</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>read_pdb_or_mmcif</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afa75d21223f20565d1cc585ec7ebc9af</anchor>
      <arglist>(TextInput input, Model *model, PDBSelector *selector=get_default_pdb_selector(), bool select_first_model=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_charmm_untyped_atoms</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab986bb0421e989ecdf45675e06e143fd</anchor>
      <arglist>(Hierarchy hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_approximation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a6eb0ed1c738a5d6b223b3628b09533f6</anchor>
      <arglist>(Particle *h, const ParticlesTemp &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_approximation</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a86c2aff722129fb074c5e32484dd31aa</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>SecondaryStructureResidue</type>
      <name>setup_coarse_secondary_structure_residue</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a26d5bf29f960fc1cc1816a3d9fae4da5</anchor>
      <arglist>(const Particles &amp;ssr_ps, Model *mdl, bool winner_takes_all_per_res=false)</arglist>
    </member>
    <member kind="function">
      <type>SecondaryStructureResidues</type>
      <name>setup_coarse_secondary_structure_residues</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a886a95c9c35244e6120f8484f501bdb9</anchor>
      <arglist>(const Particles &amp;ssr_ps, Model *mdl, int coarse_factor, int start_res_num, bool winner_takes_all_per_res=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_with_representations</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac52c25104f859e6b56e168c3fc1e4307</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adf218eed76f556ada452b525acd835ee</anchor>
      <arglist>(Hierarchy h, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_CA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2f312cc4e3aa5febaad48402fc159d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_N</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab4bfd46e74935ae8dd65cab7a9200de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const AtomType</type>
      <name>AT_UNKNOWN</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>afcefa4f848ed0a61a61c1252c933fa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DNA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aa39170558ade9ac48ba3b94b8161af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DPolypeptide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab6dbd6ee946499eaff703bb7793656d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>DPolysaccharide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adec46a8b5cc98b9916f72edab2129c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ResidueType</type>
      <name>GLY</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>aea45f47684f4d3f1dad7dd1d5f7e7afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>LPolypeptide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a529767a238ec55d47044f0ba5d1f72c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>LPolysaccharide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ab19006ac46d5997994f8df82317aa091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Polydeoxyribonucleotide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ae2086774982c178a64fcf8a799838c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Polyribonucleotide</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>adf163b714b8264d370f734ce412b518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>Protein</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1919544ecbb7c05f31ee4512a6d3a940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>RNA</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ad11beec11ed3d037be4a2943d5cd9f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ResidueType</type>
      <name>UNK</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>ac14880d5a13db9545031a99ba1003314</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ChainType</type>
      <name>UnknownChainType</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a2a14c889d613e67e902f303e33c6cfc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a15fda28b4a86c217efd2bb29d532fe0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a1f8c2eddeaa9a0aa20a3205ddd604cba</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1atom.html</anchorfile>
      <anchor>a90e587fba9cafbfe2b3fd81e21e191d2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1atom" title="pdb_check">pdb_check_bin</docanchor>
    <docanchor file="namespaceIMP_1_1atom" title="ligand_score">ligand_score_bin</docanchor>
    <docanchor file="namespaceIMP_1_1atom" title="ligand_score_multiple">ligand_score_multiple_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AllMol2Selector</name>
    <filename>classIMP_1_1atom_1_1AllMol2Selector.html</filename>
    <base>IMP::atom::Mol2Selector</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AllPDBSelector</name>
    <filename>classIMP_1_1atom_1_1AllPDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1AllPDBSelector.html</anchorfile>
      <anchor>a9bde983732efb5f8ded4e928fb7bd607</anchor>
      <arglist>(const PDBRecord &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1AllPDBSelector.html</anchorfile>
      <anchor>a8bc71eab92de2570e774cdfd772db30b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AndPDBSelector</name>
    <filename>classIMP_1_1atom_1_1AndPDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1AndPDBSelector.html</anchorfile>
      <anchor>aae01adba6ef611f3d560541fe82ec510</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1AndPDBSelector.html</anchorfile>
      <anchor>aedf27e500c2c398d5946431bdb96723b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Angle</name>
    <filename>classIMP_1_1atom_1_1Angle.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Float</type>
      <name>get_ideal</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>a5511c523c64b21b4251e38d04a45410e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>a2764b1dbd93398f3df9330a01bf83057</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>a0f5e9acc5964fa6f3db07f968abb6c75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ideal</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>ab71d5cd45ab2f9fdf4e21498f9e28c08</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>a37f5869ebbfaedaae3b50aeba6e622c9</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>ade4c44561dcf44eaadbef64701a51e05</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Angle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>ac05c3945ed23762560f6d065d2626981</anchor>
      <arglist>(Model *m, ParticleIndex pi, core::XYZ a, core::XYZ b, core::XYZ c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Angle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Angle.html</anchorfile>
      <anchor>a17d8aa0a63057ee10bdea7d5df10e8a7</anchor>
      <arglist>(IMP::ParticleAdaptor pa, core::XYZ a, core::XYZ b, core::XYZ c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AngleSingletonScore</name>
    <filename>classIMP_1_1atom_1_1AngleSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>AngleSingletonScore</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>a025212d2429602e2f25e91de4806bf2c</anchor>
      <arglist>(UnaryFunction *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>ad3c77f86001dc8e22746d4847eb42dee</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>a50b26377f2e213571f8c6f215ab12b1a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>a20a1bdbc9960f8f2e22a91e610d69f72</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>a8221a20805f2d437ecb46201f7caa8b4</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>acefb5ce6f2e495b64bdc39a2670a475e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>ab43005c2c92b31cf21e44f47c6cf8c84</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1AngleSingletonScore.html</anchorfile>
      <anchor>acb64ab9ca16a761b691e7044c9185400</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AngularVelocity</name>
    <filename>classIMP_1_1atom_1_1AngularVelocity.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Atom</name>
    <filename>classIMP_1_1atom_1_1Atom.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>Element</type>
      <name>get_element</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>affaf1589a88068db917390967d4d40b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_atom_type</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>a8dfcc4758811f77db0c3cac0dc0ed992</anchor>
      <arglist>(AtomType t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a78ccfdfc874d47c91f61004c2a0fc3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a776a2d762c4245a3aa0da74e0b51cf09</anchor>
      <arglist>(IMP::core::Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_child</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a6a8c2cba388bf79adef66c28a7c78a57</anchor>
      <arglist>(Hierarchy o)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_child</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a4c26db6d0879ccf5d7fc72c30e9ec54e</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_children</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>ad21bb9279754451fbe57bdebd170faf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>C</type>
      <name>get_children</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>ab15b4c587737b92c3a0adb572ad102ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_valid</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a36d01ff9c8f7c45d62e38c58557bfd8d</anchor>
      <arglist>(bool print_info=false) const </arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_parent</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a3fa6740c3fcbf678ce64fb1db22a832e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_child_index</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>a15ee9904d7093e46190d82de10ea3aed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_parent</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>ac2fb4759f8f6c9b38e1a07f1e7fb5578</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>a85674bedb99e0a3e6248b08329e17d0c</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Atom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>a8673b3453596560cdbe50d3dbf4815a0</anchor>
      <arglist>(Model *m, ParticleIndex pi, Atom other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Atom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>a19755ddf59764ee0ef0934fa6d5527f3</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Atom other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Atom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>ae77d0503f22ce6b6902900807ee92829</anchor>
      <arglist>(Model *m, ParticleIndex pi, AtomType atom_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Atom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>ae6bddaeb0a8fd370d66c5a00414bcbf9</anchor>
      <arglist>(IMP::ParticleAdaptor pa, AtomType atom_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a0f4e91a8ede90a5ed7c9b6d944b44169</anchor>
      <arglist>(Model *m, ParticleIndex p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IMP::core::HierarchyTraits &amp;</type>
      <name>get_traits</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>ab99b617e046d339ee51649f3eeb218e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hierarchy</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a56ea228dde7abf072de82f4d9c82b629</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor children=ParticleIndexesAdaptor())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TriggerKey</type>
      <name>get_changed_key</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>a1db83edb8c9bffdbe42b30bacb15b849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HierarchyTraits &amp;</type>
      <name>get_default_traits</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>aba2834d7467a9a41e0ba54d7f09044c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>adc0113e58530d49717664c8e668e26ee</anchor>
      <arglist>(Model *, ParticleIndex, HierarchyTraits=Hierarchy::get_default_traits())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hierarchy</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>a4cce2b68f4e46377b8f09d39813bef54</anchor>
      <arglist>(Model *m, ParticleIndex pi, DecoratorTraits tr=get_default_decorator_traits())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hierarchy</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Hierarchy.html</anchorfile>
      <anchor>a0f07a9befe64a751b3bb0422696b3e17</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexes children, DecoratorTraits tr=get_default_decorator_traits())</arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_input_index</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>a81236a5bc29b7dd8f466df313c262395</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_input_index</name>
      <anchorfile>classIMP_1_1atom_1_1Atom.html</anchorfile>
      <anchor>aa9a01751ea17948ca5cf1646b37d2488</anchor>
      <arglist>(Int t)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_clone</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>ad75a34753bf156665572134c16cec886</anchor>
      <arglist>(Hierarchy d)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_clone_one</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>abbbefbfaf89bcb6b38a4ec0378c9766a</anchor>
      <arglist>(Hierarchy d)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_fragment</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>aea222a9dc8798d5ac1bcc492b73e72dd</anchor>
      <arglist>(const Hierarchies &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a6b0f7ef3e58cd7e8ebca949c2478e6d6</anchor>
      <arglist>(Hierarchy d)</arglist>
    </member>
    <member kind="function">
      <type>algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a0b2a97a5d1d9906dd31d60a8ba588e5a</anchor>
      <arglist>(const Hierarchy &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3D</type>
      <name>get_bounding_sphere</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a9ab80a6441e9d05b4779b90aff226012</anchor>
      <arglist>(const Hierarchy &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_by_type</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a95fbed1f1a06037900159c8dc6767b35</anchor>
      <arglist>(Hierarchy mhd, GetByType t)</arglist>
    </member>
    <member kind="function">
      <type>Bonds</type>
      <name>get_internal_bonds</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a234db3ebe46ca02a1f2742c535ab3180</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_heterogen</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>ab9cd7eaeb2f192503ebbe0c0b04e4cde</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_leaves</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a88d34e2044a5fbfbb25069331da1b527</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_leaves</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>aa8687c81bbcdd0a54c247d9b6b4a2821</anchor>
      <arglist>(const Hierarchies &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_residue</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a86187ce8981c3d096033da90bbbdd0af</anchor>
      <arglist>(Hierarchy mhd, unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_root</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>aa1160975ada3565969069b9709de38b0</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1atom_1_1Hierarchy.html</anchorfile>
      <anchor>a5dea58cb3af1bb760fbd42ade7a9ce3e</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ATOMPDBSelector</name>
    <filename>classIMP_1_1atom_1_1ATOMPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1ATOMPDBSelector.html</anchorfile>
      <anchor>a7cc284e411ebbac88f7ecc1e4cda102d</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1ATOMPDBSelector.html</anchorfile>
      <anchor>a9030c17872ae35157c221906f6ebd80c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AtomType</name>
    <filename>classIMP_1_1atom_1_1AtomType.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::AtomTypePDBSelector</name>
    <filename>classIMP_1_1atom_1_1AtomTypePDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1AtomTypePDBSelector.html</anchorfile>
      <anchor>a3985474391999802c8ce1bd4ddcd8dfb</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1AtomTypePDBSelector.html</anchorfile>
      <anchor>a55ade5f60487d81812788b3d4dcf772a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BackbonePDBSelector</name>
    <filename>classIMP_1_1atom_1_1BackbonePDBSelector.html</filename>
    <base>IMP::atom::NonWaterNonHydrogenPDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1BackbonePDBSelector.html</anchorfile>
      <anchor>aaf3d65ca8126a3d95ff51cdda3446f35</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BackbonePDBSelector.html</anchorfile>
      <anchor>a9e68a3717e0ce5cac1965a6cd08275b7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BerendsenThermostatOptimizerState</name>
    <filename>classIMP_1_1atom_1_1BerendsenThermostatOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BerendsenThermostatOptimizerState.html</anchorfile>
      <anchor>a4711270d062cf949787d7db1c052f21e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescale_velocities</name>
      <anchorfile>classIMP_1_1atom_1_1BerendsenThermostatOptimizerState.html</anchorfile>
      <anchor>a95a41825e53438d5e08085bc8cd21576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1atom_1_1BerendsenThermostatOptimizerState.html</anchorfile>
      <anchor>a255b5e7e2f091cdcd819cf73039c0ec7</anchor>
      <arglist>(const Particles &amp;pis)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1BerendsenThermostatOptimizerState.html</anchorfile>
      <anchor>add15a5c0721c35bdaf80a78af2b163c6</anchor>
      <arglist>(unsigned int) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Bond</name>
    <filename>classIMP_1_1atom_1_1Bond.html</filename>
    <base>IMP::Decorator</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>a1dc5abe880d595a8c922e3f407eefae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Bonded</type>
      <name>get_bonded</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>a8a5ba84484e72d168d03b0ab4c50c77e</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_length</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>aeeb0dabf9175952963ea3b8ead82cced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_order</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>ab3f97416a81de43d3886a5b72bba0f65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>a18c36f0ddbab07a59a0ece43ecc203c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_type</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>ae1623a7106640582b8ae9bd34858e8b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_length</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>a77d3d3b85dda83f1afb9b7db0c55072d</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_order</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>af019e8d0d6b88064a505a5c93ca36380</anchor>
      <arglist>(Int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>add69ec360fc733f479edaf8d311d378d</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_type</name>
      <anchorfile>classIMP_1_1atom_1_1Bond.html</anchorfile>
      <anchor>a1dc13fcd04b9402335626c7e92de0a27</anchor>
      <arglist>(Int t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Bonded</name>
    <filename>classIMP_1_1atom_1_1Bonded.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Bond</type>
      <name>get_bond</name>
      <anchorfile>classIMP_1_1atom_1_1Bonded.html</anchorfile>
      <anchor>ac6814fc8a4b9c0f53afe43fe02b1ea0b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Bonded</type>
      <name>get_bonded</name>
      <anchorfile>classIMP_1_1atom_1_1Bonded.html</anchorfile>
      <anchor>a3c4e2968dfd4bd247f4661d874d63496</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Bonded</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Bonded.html</anchorfile>
      <anchor>ac867bddf7a6ae514918d98ef780f49df</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Bonded</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Bonded.html</anchorfile>
      <anchor>a48b39e583b48f1dd403a80d6aac5e2f1</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondedPairFilter</name>
    <filename>classIMP_1_1atom_1_1BondedPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function">
      <type></type>
      <name>BondedPairFilter</name>
      <anchorfile>classIMP_1_1atom_1_1BondedPairFilter.html</anchorfile>
      <anchor>ae2c3c59f85a7f4e06a1c91ea059b1852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1BondedPairFilter.html</anchorfile>
      <anchor>ac42c463591f9162ce6e68f1f38788aee</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1atom_1_1BondedPairFilter.html</anchorfile>
      <anchor>ae713c578b7517a6c7e1ea33024c8ff30</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondedPairFilter.html</anchorfile>
      <anchor>abef2a7853eccff57a0188ab0ae502df7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondEndpointsRefiner</name>
    <filename>classIMP_1_1atom_1_1BondEndpointsRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function">
      <type></type>
      <name>BondEndpointsRefiner</name>
      <anchorfile>classIMP_1_1atom_1_1BondEndpointsRefiner.html</anchorfile>
      <anchor>aa625c3f62488ae676c3fdda262fbe29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1BondEndpointsRefiner.html</anchorfile>
      <anchor>ab20e3d1b79f7cb80bc96229db9e339de</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1atom_1_1BondEndpointsRefiner.html</anchorfile>
      <anchor>af76f6543594e6dbe9b275baedf7341e5</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1atom_1_1BondEndpointsRefiner.html</anchorfile>
      <anchor>a6b9ea8e922099c435e8cc872ceab7557</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondEndpointsRefiner.html</anchorfile>
      <anchor>a2558c81dc27aa82469bc59f41fdddb23</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondGeometry</name>
    <filename>classIMP_1_1atom_1_1BondGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondGeometry.html</anchorfile>
      <anchor>aa8247ddfae28098c0fd2d9701cd07df6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1Geometry.html</anchorfile>
      <anchor>a22a32bd87fdb84d5a10b34c51830f506</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondGraph</name>
    <filename>classIMP_1_1atom_1_1BondGraph.html</filename>
    <member kind="function">
      <type></type>
      <name>BondGraph</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>a93e77475a24d5f08f9568e11befa2224</anchor>
      <arglist>(Hierarchy bd)</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>VertexFloatPropertyMap</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>ab2d41e59803ea71394a211e3104fc84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>VertexIntPropertyMap</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>ac227ce09595f80030220796874307c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>VertexVertexPropertyMap</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>a4c3c82ca5f46c85f1aa1f36dcc157f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>EdgeFloatPropertyMap</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>a5409b190929a730e5dfc84de841b67e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>EdgeIntPropertyMap</name>
      <anchorfile>classIMP_1_1atom_1_1BondGraph.html</anchorfile>
      <anchor>ac86a57087e720e3c1616653cf3e5aac2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondPairContainer</name>
    <filename>classIMP_1_1atom_1_1BondPairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>BondPairContainer</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>a29746aefa377d639d76290e766cde29a</anchor>
      <arglist>(SingletonContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>a8ca4831a943712774231501a18788fa3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>ada22e8d1ead0a1a6c7097389c8de0107</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>a5df02755ceefde9f8ec4514045e8711f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>a1f8ba301b38aa4385e8bbc1d44fc7906</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondPairContainer.html</anchorfile>
      <anchor>a972f9797588f1113586d77e36df90d2a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondsGeometry</name>
    <filename>classIMP_1_1atom_1_1BondsGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1atom_1_1BondsGeometry.html</anchorfile>
      <anchor>a38a89047dd71cd932a5f8131b32e5eaf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondsGeometry.html</anchorfile>
      <anchor>aafd91c8215178c7b7991370cfec198bf</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BondSingletonScore</name>
    <filename>classIMP_1_1atom_1_1BondSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>BondSingletonScore</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>abaa89a38a7990656cce91dde514fbdda</anchor>
      <arglist>(UnaryFunction *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a1e6889c671ab0791ac7819ee53ae2d9f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a03e2cd27bece14ec1780893ec638b042</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a07e6cfe9a82fe4ea150d5bf594358478</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a1f74b4908102f2a83734a08ff298bd5b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a96dbebcd98dab3fef64cbfa2b382fa30</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a0d70615288f4289e94252ad24e455dd7</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BondSingletonScore.html</anchorfile>
      <anchor>a34d06d7c28474a417543ee01c1ecedb0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BrownianDynamics</name>
    <filename>classIMP_1_1atom_1_1BrownianDynamics.html</filename>
    <base>IMP::atom::Simulator</base>
    <member kind="function">
      <type></type>
      <name>BrownianDynamics</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>abebe1768377662ed6c45c79220aec587</anchor>
      <arglist>(Model *m, std::string name=&quot;BrownianDynamics%1%&quot;, double wave_factor=1.0, unsigned int random_pool_size=10000)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a59748d75325cfcc0cd96a7bde16f2501</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_move</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a8b34e9cf8dab562f6d9b9ee036bf3c76</anchor>
      <arglist>(double ms_in_A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_stochastic_runge_kutta</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>ab36892d5c884b21cee8d9d2bd257e148</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Simulator</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a943393d0227b741cdc7f235c113db2dc</anchor>
      <arglist>(Model *m, std::string name=&quot;Simulator %1%&quot;, double wave_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_current_time</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>ab86bf924b88f5ac0fb6c6e7763eb4f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_simulation_particle_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a924853b2f3567b3acebea871cbeadd7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_simulation_particles</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a62a921c063c2f41bed110af9985a1b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_temperature</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a075d51db70c43e9cd563f0b6b16b4da6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_current_time</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a33b44fc9ff302bf1eb72285af7f4d56f</anchor>
      <arglist>(double ct)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_temperature</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a984c3a893b59d08c90ec54e121b50aa0</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>simulate</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a4af8472f64f7c1abbe0ee0b88ff98c6e</anchor>
      <arglist>(double time_in_fs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>simulate_wave</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>aed6f1ca13980490bbd071a7070e96176</anchor>
      <arglist>(double time_in_fs, double max_time_step_factor=10.0, double base=1.5)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_time_step</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a06f365bb4967a534891ff2666ee41708</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_time_step</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>ad3e7af0f32e6431de5f198dd6ce12daf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_advance_chunk</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a48bb410933daba74bc10c097320ea7cb</anchor>
      <arglist>(double dtfs, double ikt, const ParticleIndexes &amp;ps, unsigned int begin, unsigned int end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>ab6fd1a23209d5ae56f2727c82279295f</anchor>
      <arglist>(const ParticleIndexes &amp;sc, double dt_fs) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>algebra::Vector3D const &amp;</type>
      <name>get_force</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a1e4b59cfd0bec12fbd06c9f485ebee1e</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>algebra::Vector3Ds const &amp;</type>
      <name>get_forces</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>acd965203a6a5a4c0deefaebef3445f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_is_simulation_particle</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>abdeb885bc91a975fdbcd2ba19de85944</anchor>
      <arglist>(ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_is_srk</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>ab217377c95af87b2fab9cc8c75f9d13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>get_max_step</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a1777e586b65950cb6a343cbca40659a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>get_sample</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a18a715ab5181a8418d6789249f0b29a6</anchor>
      <arglist>(double sigma)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_random_pool</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a3d113f7c9bdd708bea69d2d60017132d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_force</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>af752b3bf0037197a6ee0f8508e0d2c4f</anchor>
      <arglist>(unsigned int i, algebra::Vector3D const &amp;f)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamics.html</anchorfile>
      <anchor>a442359bea48d738c9993867d3a720f30</anchor>
      <arglist>(const ParticleIndexes &amp;ps) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a18e3a5304536fae637bffa7f05a17f12</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_simulate</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a4c0017c87942e9e391cf1c6357db7020</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_simulate_wave</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a87e3e2537407120954c3bc0635e12906</anchor>
      <arglist>(double time_in_fs, double max_time_step_factor=10.0, double base=1.5)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::BrownianDynamicsTAMD</name>
    <filename>classIMP_1_1atom_1_1BrownianDynamicsTAMD.html</filename>
    <base>IMP::atom::BrownianDynamics</base>
    <member kind="function">
      <type></type>
      <name>BrownianDynamicsTAMD</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamicsTAMD.html</anchorfile>
      <anchor>a132d62c6c7f2a19b8a34a28be6591f8f</anchor>
      <arglist>(Model *m, std::string name=&quot;BrownianDynamicsTAMD%1%&quot;, double wave_factor=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_advance_chunk</name>
      <anchorfile>classIMP_1_1atom_1_1BrownianDynamicsTAMD.html</anchorfile>
      <anchor>a3e00a398c6379b19755e285870c8caa0</anchor>
      <arglist>(double dtfs, double ikt, const ParticleIndexes &amp;ps, unsigned int begin, unsigned int end) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CAAngleRestraint</name>
    <filename>classIMP_1_1atom_1_1CAAngleRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CAAngleRestraint</name>
      <anchorfile>classIMP_1_1atom_1_1CAAngleRestraint.html</anchorfile>
      <anchor>af83e92f9462a7527e13ffa74f7a03211</anchor>
      <arglist>(Model *m, ParticleIndexAdaptor p1, ParticleIndexAdaptor p2, ParticleIndexAdaptor p3, Floats phi0, Floats score)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1CAAngleRestraint.html</anchorfile>
      <anchor>ad20275cfa8344447431fcbe197493da9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CAAngleRestraint.html</anchorfile>
      <anchor>a7ef9c66f36f61174214d3f41a945b114</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1atom_1_1CAAngleRestraint.html</anchorfile>
      <anchor>a698cfcf8ee9c389fd1ea9a78edb58347</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CADihedralRestraint</name>
    <filename>classIMP_1_1atom_1_1CADihedralRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CADihedralRestraint</name>
      <anchorfile>classIMP_1_1atom_1_1CADihedralRestraint.html</anchorfile>
      <anchor>a54eb14f1925d6914c24a212dfbad0364</anchor>
      <arglist>(Model *m, ParticleIndexAdaptor p1, ParticleIndexAdaptor p2, ParticleIndexAdaptor p3, ParticleIndexAdaptor p4, ParticleIndexAdaptor p5, Floats phi0, Floats phi1, Floats score)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1CADihedralRestraint.html</anchorfile>
      <anchor>a6f97825065af1fb76bfbcc66f1a2ee48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CADihedralRestraint.html</anchorfile>
      <anchor>a29554dab5ffb793509b188a1f0b8d390</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1atom_1_1CADihedralRestraint.html</anchorfile>
      <anchor>af26b1bdb98dd5016a73bfeba2c4d7b6e</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CAlphaPDBSelector</name>
    <filename>classIMP_1_1atom_1_1CAlphaPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1CAlphaPDBSelector.html</anchorfile>
      <anchor>a718e1bb5c1622e18feeef37d9afd52ef</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CAlphaPDBSelector.html</anchorfile>
      <anchor>a141a7787a2fe1da090a0ad6ee24b9a1a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CBetaPDBSelector</name>
    <filename>classIMP_1_1atom_1_1CBetaPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1CBetaPDBSelector.html</anchorfile>
      <anchor>ad171727f28ceaa84ea1de2cf289c2a85</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CBetaPDBSelector.html</anchorfile>
      <anchor>a58cb0796262e88f695bf27dd7c90b112</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CenterOfMass</name>
    <filename>classIMP_1_1atom_1_1CenterOfMass.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static CenterOfMass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CenterOfMass.html</anchorfile>
      <anchor>af645b19c442b1e76ad1c4aacda45e81d</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CenterOfMass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CenterOfMass.html</anchorfile>
      <anchor>abb9e90bc8fa7641d313efc5f4d4d0007</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CenterOfMass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CenterOfMass.html</anchorfile>
      <anchor>a05b61bbc3ccc220788567089208071bf</anchor>
      <arglist>(Model *m, ParticleIndex pi, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CenterOfMass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CenterOfMass.html</anchorfile>
      <anchor>a7860b1329b505ca42e5fed2358c8c7ab</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>teardown_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CenterOfMass.html</anchorfile>
      <anchor>a7a1789c85c3f0d71008c1a5d4c4fe914</anchor>
      <arglist>(CenterOfMass com)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Chain</name>
    <filename>classIMP_1_1atom_1_1Chain.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>ChainType</type>
      <name>get_chain_type</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a4f4cd1aeab43eb3bc0959670616bae8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_id</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a41ccafd5bd41c1c8a66a0ed25f66ae51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_sequence</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>ac029214173517ba52f682afe58636d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_sequence_offset</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>aadd9f833aaf52e33ff37563d3c508bab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uniprot_accession</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a3e0ee23c381cbc98b5926b5f837d7a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chain_type</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a909409d14e1fd0c5e9e66858b9091cfc</anchor>
      <arglist>(ChainType t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a2d207ea406b9a49f38787ad75b853f58</anchor>
      <arglist>(std::string c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sequence</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a202dcba374fb040c302bea20eb864fca</anchor>
      <arglist>(std::string sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sequence_offset</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a033ea34aa9677ad2860cea08f26c42d7</anchor>
      <arglist>(int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uniprot_accession</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>ae27fef0c261bd52ca762667c8666bbc0</anchor>
      <arglist>(std::string accession)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseIntKey</type>
      <name>get_chain_type_key</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a1aba98e61a4fd182b33f31d57c53cba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseStringKey</type>
      <name>get_id_key</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a99c87b5ac3da8b6c1ee33703b6d161ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseStringKey</type>
      <name>get_sequence_key</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>ae9059e5140da5c39d335e8f37c70d7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseIntKey</type>
      <name>get_sequence_offset_key</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a70f217b8ea4fcb5ee7d3c9f0da2bfabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SparseStringKey</type>
      <name>get_uniprot_accession_key</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a002b69db18932a16baf2b1948ced7d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a07e5b5a1bfa7e0c8ac52799bec365e30</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a492ae12573ab53631b3322c0b07388b1</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>ade50cc0def80bf718f86eb89c2a9f53f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, char id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a6336a07dd312f7c56db369121e73ae81</anchor>
      <arglist>(Model *m, ParticleIndex pi, char id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a1a39ce6772b2575cbe7cf3478c504f1e</anchor>
      <arglist>(Model *m, ParticleIndex pi, Chain other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Chain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Chain.html</anchorfile>
      <anchor>a83c2f2c4f3fa7a0a69d165700a2c26e1</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Chain other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ChainPDBSelector</name>
    <filename>classIMP_1_1atom_1_1ChainPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type></type>
      <name>ChainPDBSelector</name>
      <anchorfile>classIMP_1_1atom_1_1ChainPDBSelector.html</anchorfile>
      <anchor>ae9b9c7fd6910ce13b2f3f30c108343d8</anchor>
      <arglist>(Strings chains, std::string name=&quot;ChainPDBSelector%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1ChainPDBSelector.html</anchorfile>
      <anchor>a06be013c7142480f5acce4fed87d9165</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1ChainPDBSelector.html</anchorfile>
      <anchor>abc52914f1e44438c3868b434fa750d4b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ChainType</name>
    <filename>classIMP_1_1atom_1_1ChainType.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Charged</name>
    <filename>classIMP_1_1atom_1_1Charged.html</filename>
    <base>IMP::core::XYZ</base>
    <member kind="function">
      <type>Float</type>
      <name>get_charge</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>ad203531ebac9d4a7363a760205a088b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_charge</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>afd1619d6bb8d5b68484866ddeb1f0a5b</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivative</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a5edb761cc74ee6af00e59a67e92a6824</anchor>
      <arglist>(int i, Float v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a1488584100ac298c608bd5df7bd128b7</anchor>
      <arglist>(const algebra::Vector3D &amp;v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_coordinate</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>aeac3db05b105771395cb2804f776bbad</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a7a499090b26bcd43982ec0c42dfa6d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_coordinates_are_optimized</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>ad41381d6a1836024215e57963561011d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_derivative</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a3f91fdf28ba4fbef870702f09c4834d9</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a2520f19357f82eb041add119b4041cd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_vector_to</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>abdf4dcafcd415cddf90e0b7565f89f62</anchor>
      <arglist>(const XYZ &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_x</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a92a3abff44d156efb3b1374907af3ea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_y</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>aa7d51695a4a0c84977c85e174e6ae347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_z</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a94bf5c602978b106484d74a3f988b02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinate</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>aca38448130d5ab8bc3c0dfade1e560c0</anchor>
      <arglist>(unsigned int i, Float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a63b1e6ce12afaf3662a641bb1f5c4cbf</anchor>
      <arglist>(const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinates_are_optimized</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>ae3293e3b0833c6adae6902acd471f031</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_x</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a4780af20d3ea3e14ccdc1f57d55fddb7</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_y</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a2b6cb82336c20c0249315c7eafcee3be</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_z</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a5525a109e0fd4c3e4f2761a0152c1834</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>a0b8c7594ffec4a6db7b3cedf163cac98</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Charged</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>adb5ce2ba7901a433614953e24551e988</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float charge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Charged</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>a971711256a09256bcd41352da02036c8</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float charge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Charged</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>a95980772fc84fe747b0b3565ed866967</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D v, Float charge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Charged</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Charged.html</anchorfile>
      <anchor>a031ba65f4e81801e283a8b78d2e480a9</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D v, Float charge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FloatKeys &amp;</type>
      <name>get_xyz_keys</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>ad98f200f6bc85d7eb47d4818b853c0e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZ</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a0b8f68f0622a3076e17cb1ccbe773a53</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZ</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>ac78d4427211401f07c317207a1e740c1</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZ</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a32b3dcc08f430fc0403441b3ac1ac87f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZ</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZ.html</anchorfile>
      <anchor>a55c3249309694fa15ee83e09541ca5f8</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMAtom</name>
    <filename>classIMP_1_1atom_1_1CHARMMAtom.html</filename>
    <base>IMP::atom::Atom</base>
    <member kind="function">
      <type>String</type>
      <name>get_charmm_type</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMAtom.html</anchorfile>
      <anchor>a9d71012e93e36585bdc26636cad98497</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_charmm_type</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMAtom.html</anchorfile>
      <anchor>a1a3c1b0a8eaf9cf0ad93995a357e907c</anchor>
      <arglist>(String t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMAtom.html</anchorfile>
      <anchor>a829c0cb6c1884d248760a85166da49b3</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CHARMMAtom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMAtom.html</anchorfile>
      <anchor>a52d7b1b61cf3bd6ceb719f5c32e482e0</anchor>
      <arglist>(IMP::ParticleAdaptor pa, String charmm_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CHARMMAtom</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMAtom.html</anchorfile>
      <anchor>abe9de32622eb206706e744ad97412084</anchor>
      <arglist>(Model *m, ParticleIndex pi, String charmm_type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMAtomTopology</name>
    <filename>classIMP_1_1atom_1_1CHARMMAtomTopology.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMBondEndpoint</name>
    <filename>classIMP_1_1atom_1_1CHARMMBondEndpoint.html</filename>
    <member kind="function">
      <type>Atom</type>
      <name>get_atom</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMBondEndpoint.html</anchorfile>
      <anchor>a5271a836eccdc72f7763d32a0af46573</anchor>
      <arglist>(const CHARMMResidueTopology *current_residue, const CHARMMResidueTopology *previous_residue, const CHARMMResidueTopology *next_residue, const std::map&lt; const CHARMMResidueTopology *, Hierarchy &gt; &amp;resmap) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::atom::CHARMMBondParameters</name>
    <filename>structIMP_1_1atom_1_1CHARMMBondParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMConnection</name>
    <filename>classIMP_1_1atom_1_1CHARMMConnection.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type>Atoms</type>
      <name>get_atoms</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMConnection.html</anchorfile>
      <anchor>adf29f3ca8131dfa961d939a35ce4af60</anchor>
      <arglist>(const CHARMMResidueTopology *current_residue, const CHARMMResidueTopology *previous_residue, const CHARMMResidueTopology *next_residue, const std::map&lt; const CHARMMResidueTopology *, Hierarchy &gt; &amp;resmap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains_atom</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMConnection.html</anchorfile>
      <anchor>aa38b45a3ffef7bcfdc12899f02eb4f0f</anchor>
      <arglist>(std::string name) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::atom::CHARMMDihedralParameters</name>
    <filename>structIMP_1_1atom_1_1CHARMMDihedralParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMIdealResidueTopology</name>
    <filename>classIMP_1_1atom_1_1CHARMMIdealResidueTopology.html</filename>
    <base>IMP::atom::CHARMMResidueTopologyBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMIdealResidueTopology.html</anchorfile>
      <anchor>a1641996294b127530e6cd03f459dde0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_atom</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMIdealResidueTopology.html</anchorfile>
      <anchor>ac470276c79e0953c224b1d4e90a0e9b1</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMInternalCoordinate</name>
    <filename>classIMP_1_1atom_1_1CHARMMInternalCoordinate.html</filename>
    <base>CHARMMConnection&lt; 4 &gt;</base>
    <member kind="function">
      <type>Atoms</type>
      <name>get_atoms</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMConnection.html</anchorfile>
      <anchor>adf29f3ca8131dfa961d939a35ce4af60</anchor>
      <arglist>(const CHARMMResidueTopology *current_residue, const CHARMMResidueTopology *previous_residue, const CHARMMResidueTopology *next_residue, const std::map&lt; const CHARMMResidueTopology *, Hierarchy &gt; &amp;resmap) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains_atom</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMConnection.html</anchorfile>
      <anchor>aa38b45a3ffef7bcfdc12899f02eb4f0f</anchor>
      <arglist>(std::string name) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMParameters</name>
    <filename>classIMP_1_1atom_1_1CHARMMParameters.html</filename>
    <base>IMP::atom::ForceFieldParameters</base>
    <member kind="function">
      <type></type>
      <name>CHARMMParameters</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>ad3268fabf7026f20fdb6c99c0d6c8be8</anchor>
      <arglist>(TextInput topology_file_name, TextInput par_file_name=TextInput(), bool translate_names_to_pdb=false)</arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>create_angles</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a0605f8d59691de7afd2436348dfdc991</anchor>
      <arglist>(Particles bonds) const </arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>create_dihedrals</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a7aafc32e901ac77cb2b68a944945f8cd</anchor>
      <arglist>(Particles bonds) const </arglist>
    </member>
    <member kind="function">
      <type>CHARMMTopology *</type>
      <name>create_topology</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>aab56534fc18ba3715778af3f2aea8073</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>const CHARMMBondParameters &amp;</type>
      <name>get_angle_parameters</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a4866b0ab75fdbb9cc3b894096d056a6f</anchor>
      <arglist>(std::string type1, std::string type2, std::string type3) const </arglist>
    </member>
    <member kind="function">
      <type>const CHARMMBondParameters &amp;</type>
      <name>get_bond_parameters</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>af748c898844d8b5e7055d9fbe65ce276</anchor>
      <arglist>(std::string type1, std::string type2) const </arglist>
    </member>
    <member kind="function">
      <type>CHARMMDihedralParametersList</type>
      <name>get_dihedral_parameters</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a313a13a9c30c41fab65c9ffc94d7751b</anchor>
      <arglist>(std::string type1, std::string type2, std::string type3, std::string type4) const </arglist>
    </member>
    <member kind="function">
      <type>const CHARMMDihedralParameters &amp;</type>
      <name>get_improper_parameters</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a3f615c0b8bced9abce1dfec41f72e32f</anchor>
      <arglist>(std::string type1, std::string type2, std::string type3, std::string type4) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMParameters.html</anchorfile>
      <anchor>a16b862167ea91ff9599638d989462087</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_bonds</name>
      <anchorfile>classIMP_1_1atom_1_1ForceFieldParameters.html</anchorfile>
      <anchor>a8ec3c7e77ae87b988c803bfc2f375772</anchor>
      <arglist>(Hierarchy mhd) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_radii</name>
      <anchorfile>classIMP_1_1atom_1_1ForceFieldParameters.html</anchorfile>
      <anchor>ad37b61f76545a6e4e6aa67783bfe7f1b</anchor>
      <arglist>(Hierarchy mhd, double scale=1.0, FloatKey radius_key=FloatKey(&quot;radius&quot;)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_well_depths</name>
      <anchorfile>classIMP_1_1atom_1_1ForceFieldParameters.html</anchorfile>
      <anchor>a797d6ab508017979fb7d5ab6dbeae578</anchor>
      <arglist>(Hierarchy mhd) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_epsilon</name>
      <anchorfile>classIMP_1_1atom_1_1ForceFieldParameters.html</anchorfile>
      <anchor>a7ab2b4cd229510811991b7e5b72760a0</anchor>
      <arglist>(Atom atom) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1atom_1_1ForceFieldParameters.html</anchorfile>
      <anchor>aa18ecbbff837742ea4cf8ae2c1e144f6</anchor>
      <arglist>(Atom atom) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMPatch</name>
    <filename>classIMP_1_1atom_1_1CHARMMPatch.html</filename>
    <base>IMP::atom::CHARMMResidueTopologyBase</base>
    <member kind="function">
      <type></type>
      <name>CHARMMPatch</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMPatch.html</anchorfile>
      <anchor>a9e32f2ac849ad8edcfc0fd8d5ace02e6</anchor>
      <arglist>(std::string type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMPatch.html</anchorfile>
      <anchor>a3e11ae77d0d6eade9acbe77caf143b92</anchor>
      <arglist>(CHARMMResidueTopology *res) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMPatch.html</anchorfile>
      <anchor>ac0f0e4636e87cb7aa2dc2da9de0fca2d</anchor>
      <arglist>(CHARMMResidueTopology *res1, CHARMMResidueTopology *res2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMPatch.html</anchorfile>
      <anchor>a714a9bbecb6a43e58d26bed5e4152fc3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMResidueTopology</name>
    <filename>classIMP_1_1atom_1_1CHARMMResidueTopology.html</filename>
    <base>IMP::atom::CHARMMIdealResidueTopology</base>
    <member kind="function">
      <type></type>
      <name>CHARMMResidueTopology</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMResidueTopology.html</anchorfile>
      <anchor>acd586e0463d6dddd9399956945c4e5cc</anchor>
      <arglist>(ResidueType type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CHARMMResidueTopology</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMResidueTopology.html</anchorfile>
      <anchor>adf36f0b3ed6504c273e75a78dd024e70</anchor>
      <arglist>(CHARMMIdealResidueTopology *ideal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMResidueTopology.html</anchorfile>
      <anchor>a668d1a4db113166fd8d2a16105f0a073</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMResidueTopologyBase</name>
    <filename>classIMP_1_1atom_1_1CHARMMResidueTopologyBase.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMResidueTopologyBase.html</anchorfile>
      <anchor>aa24eab2dac7f6775be376088fc1a0ab8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMSegmentTopology</name>
    <filename>classIMP_1_1atom_1_1CHARMMSegmentTopology.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>apply_default_patches</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMSegmentTopology.html</anchorfile>
      <anchor>a61807dec0e56f4a375bc9e6b6f62d574</anchor>
      <arglist>(const CHARMMParameters *ff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMSegmentTopology.html</anchorfile>
      <anchor>addf51458afe95fcba0a5dcad6ed7fdd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>residues</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMSegmentTopology.html</anchorfile>
      <anchor>a0a806e71a09fd6309bc70e753fc505b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMStereochemistryRestraint</name>
    <filename>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CHARMMStereochemistryRestraint</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>ae55a4983c41e935a811d933ba32a60c8</anchor>
      <arglist>(Hierarchy h, CHARMMTopology *topology, ParticlesTemp limit_to_these_particles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>a0cd7c21a05ec8ba717c6f3df7960e82e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>StereochemistryPairFilter *</type>
      <name>get_full_pair_filter</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>ae0b7827cf358f1b32252b217af963637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StereochemistryPairFilter *</type>
      <name>get_pair_filter</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>a96a84aff0d2d9ea0401ae5cfb15c561f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>ad9669e39e743dc27a0ad7b8b8f349a0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMStereochemistryRestraint.html</anchorfile>
      <anchor>a97344b26ad3e462640f73bc18ca10e20</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CHARMMTopology</name>
    <filename>classIMP_1_1atom_1_1CHARMMTopology.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>add_atom_types</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>aa7c8c6a2a0e48500776a56be1029a7a8</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>add_bonds</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a403b30e23e492dc1da0514bd8f5dd149</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_charges</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>aeba76e2f28c02ab70dc1a4b2148e02e4</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_coordinates</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a4018c73156fe2bdd6257cd861b9acf16</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>add_dihedrals</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>af33d6daa29a776882987d0ee4c4c7507</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>add_impropers</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a8093b89059a159c3c31f4d583843aa36</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_missing_atoms</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>ae9806eee2eb64e7742e679c0a3217fe3</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_sequence</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a366fcc29f1badc1c7d59f0654ba8ae9e</anchor>
      <arglist>(std::string sequence)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_default_patches</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>adaf27f7e7d51494181bac427bb2d9add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>create_hierarchy</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a3d3e69d8d1d90294c5cedd6c0f33ca2c</anchor>
      <arglist>(Model *model) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a57fb211fbd26b5c82b58827515071f69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_hierarchy</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a1aef3017da939dbaec3a4f88ab5853bd</anchor>
      <arglist>(Hierarchy hierarchy) const </arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>segments</name>
      <anchorfile>classIMP_1_1atom_1_1CHARMMTopology.html</anchorfile>
      <anchor>a86f89b235a3e69fc51ffee2b9e1d343f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Copy</name>
    <filename>classIMP_1_1atom_1_1Copy.html</filename>
    <base>IMP::atom::Molecule</base>
    <member kind="function" static="yes">
      <type>static Copy</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Copy.html</anchorfile>
      <anchor>a8c73c9318f588816caae8e805afa1cb0</anchor>
      <arglist>(Model *m, ParticleIndex pi, Int number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Copy</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Copy.html</anchorfile>
      <anchor>a20efdc7696c33facc3afa285ecdb517a</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Int number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Molecule</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Molecule.html</anchorfile>
      <anchor>ace192fc31a17e97929f1949e361361a5</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Molecule</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Molecule.html</anchorfile>
      <anchor>a9a912c3fcb8d6342c8981c02e9fcddc7</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Molecule</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Molecule.html</anchorfile>
      <anchor>aae69a4fd98b352878b7c4922bb79767f</anchor>
      <arglist>(Model *m, ParticleIndex pi, Molecule other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Molecule</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Molecule.html</anchorfile>
      <anchor>a53db57e350a92e258a5ea710a9c66c46</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Molecule other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CoulombPairScore</name>
    <filename>classIMP_1_1atom_1_1CoulombPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>a5c4dc60463e2e1cea238aa181bf7c663</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>ac554ff72cca4bc0de6ec2a1c20355a70</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>a88d477fafccffdc9987c782fe559524f</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>a629c48eeef5363f6ff8fc48b916870d3</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>ac4a3fbda4d2de34b29965e7798ada9e1</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>a2e3a0b3c091a84c04796d68dbfa50ee2</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CoulombPairScore.html</anchorfile>
      <anchor>a05dd6e490181c3b784925651bd81dc70</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CoverBond</name>
    <filename>classIMP_1_1atom_1_1CoverBond.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1atom_1_1CoverBond.html</anchorfile>
      <anchor>a97707aebc9bfb856935c9566a2c5e785</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1CoverBond.html</anchorfile>
      <anchor>a115a6ca0766c97c1f215cdeb2cb4433f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1CoverBond.html</anchorfile>
      <anchor>a9c91ed56fafaf0fb54236a4bfc2a7215</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1atom_1_1CoverBond.html</anchorfile>
      <anchor>afebe67c02a9a6cf98c99bf0834b9b03a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CoverBond.html</anchorfile>
      <anchor>a4925de49cab27cbfb4f42c9eb2e6eb5c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::CPDBSelector</name>
    <filename>classIMP_1_1atom_1_1CPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1CPDBSelector.html</anchorfile>
      <anchor>a3f114a1e6c24c78d25ee284c3d920deb</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1CPDBSelector.html</anchorfile>
      <anchor>a3872a37dd93def75335ff3c6add58e2e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Diffusion</name>
    <filename>classIMP_1_1atom_1_1Diffusion.html</filename>
    <base>IMP::core::XYZ</base>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>acab235318add3d98669e12b5bd562af5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a7d24dceb15c5be85954824861c156cdc</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_diffusion_coefficient_key</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a60026f6ceddf28c84a2a840bce685bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>aae806b0c1469e7548bc7b13868675b41</anchor>
      <arglist>(Model *m, ParticleIndex p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a0e3785a33c33251b7e61aa8cca9a6caa</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float D)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a40959289e2ad022478caaebac5516477</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float D)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>ac6c7ca090143132139da1bc21398f3c7</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D v, Float D)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a8b514700fd4a4024491d5ddca3755618</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D v, Float D)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a25edd856dcbfe27bb6d3cbf197b30c66</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Diffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Diffusion.html</anchorfile>
      <anchor>a88b14a99695e62f4ff865850f12f3ab4</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Dihedral</name>
    <filename>classIMP_1_1atom_1_1Dihedral.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Float</type>
      <name>get_ideal</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a1716b7fdc089b625fac5fe2fd50228cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_multiplicity</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>aef6d38e95369e40ed75e8569f4d69a92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a67118254e85dc8d4e78447fac259516e</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a4487c44ec7f0de581285811450a8f149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ideal</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a8b8956589e3be3e0c442a645f95a924a</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multiplicity</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a02799581c6373a37e870e12fc4b8b83a</anchor>
      <arglist>(Int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stiffness</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>a9c3ffebb145056ad42d7a6e33e8d3ff5</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dihedral</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>aaac67bd8794d274653adce93501dca6c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, core::XYZ a, core::XYZ b, core::XYZ c, core::XYZ d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dihedral</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Dihedral.html</anchorfile>
      <anchor>aba8bf926754ed9a62e899e93f951b96c</anchor>
      <arglist>(Model *m, ParticleIndex pi, core::XYZ a, core::XYZ b, core::XYZ c, core::XYZ d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::DihedralSingletonScore</name>
    <filename>classIMP_1_1atom_1_1DihedralSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>acf9a7631502e0c4d216ae90ffd504f42</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>aed153b655133a54147d57525139d2fab</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>ab11abfa7a952b5eb6097d873293d9616</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>a70ce65cfe59b478b2afa8ad3f202ccd1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>a1233d0a5547543d1359e7669b19cbb98</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>a8d40db2ecf5eddb5701ba4d5a7fc25ba</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1DihedralSingletonScore.html</anchorfile>
      <anchor>a27ebdc261f0c7a206875e6a929111cd4</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Domain</name>
    <filename>classIMP_1_1atom_1_1Domain.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>IntRange</type>
      <name>get_index_range</name>
      <anchorfile>classIMP_1_1atom_1_1Domain.html</anchorfile>
      <anchor>aa9bbe6e5287146d30569cdc20b3982ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Domain.html</anchorfile>
      <anchor>af7ac157cfb506e8ffb2d94311721aa09</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Domain other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Domain.html</anchorfile>
      <anchor>a3a0129647c98c031a50340344fc708f2</anchor>
      <arglist>(Model *m, ParticleIndex pi, Domain other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Domain.html</anchorfile>
      <anchor>aaeac693d6899512eb3b9e944c3e725f6</anchor>
      <arglist>(IMP::ParticleAdaptor pa, IntRange residues)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Domain</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Domain.html</anchorfile>
      <anchor>a5b65bdc3b41b2bd8be044f9b1181179b</anchor>
      <arglist>(Model *m, ParticleIndex pi, IntRange residues)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::DopePairScore</name>
    <filename>classIMP_1_1atom_1_1DopePairScore.html</filename>
    <base>DistancePairScore&lt; score_functor::Dope &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>score_functor::Dope &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1a67f29a44377c6d45ee0c9e14fcf2be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ElementTable</name>
    <filename>classIMP_1_1atom_1_1ElementTable.html</filename>
    <member kind="function">
      <type>Element</type>
      <name>get_element</name>
      <anchorfile>classIMP_1_1atom_1_1ElementTable.html</anchorfile>
      <anchor>ac129a7da234a87e17a746483939e6b3e</anchor>
      <arglist>(const std::string &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_mass</name>
      <anchorfile>classIMP_1_1atom_1_1ElementTable.html</anchorfile>
      <anchor>aad8d9d3ca4721bd02ed19e9dc0a39923</anchor>
      <arglist>(Element e) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classIMP_1_1atom_1_1ElementTable.html</anchorfile>
      <anchor>af4df79ca8540b1549518e55073471cba</anchor>
      <arglist>(Element e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::EzRestraint</name>
    <filename>classIMP_1_1atom_1_1EzRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1EzRestraint.html</anchorfile>
      <anchor>a1cfb4a581eb882607a210f63ee4f4f19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1EzRestraint.html</anchorfile>
      <anchor>a2635cf3007587374ff81ae11f2d5aa66</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1atom_1_1EzRestraint.html</anchorfile>
      <anchor>a32757b81fe8865ec4afa8e0c22bd3ff7</anchor>
      <arglist>(DerivativeAccumulator *da) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ForceFieldParameters</name>
    <filename>classIMP_1_1atom_1_1ForceFieldParameters.html</filename>
    <base>IMP::Object</base>
    <class kind="class">IMP::atom::ForceFieldParameters::Bond</class>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ForceFieldParameters::Bond</name>
    <filename>classIMP_1_1atom_1_1ForceFieldParameters_1_1Bond.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ForceSwitch</name>
    <filename>classIMP_1_1atom_1_1ForceSwitch.html</filename>
    <base>IMP::atom::SmoothingFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1ForceSwitch.html</anchorfile>
      <anchor>a2ce2594f0553727e1dde640999f462cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1atom_1_1ForceSwitch.html</anchorfile>
      <anchor>a8f3063c24c1ce745388ff27de9e87054</anchor>
      <arglist>(double score, double distance) const override</arglist>
    </member>
    <member kind="function">
      <type>DerivativePair</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1atom_1_1ForceSwitch.html</anchorfile>
      <anchor>a9a2df94fd082b88d5ed57be4ba714f20</anchor>
      <arglist>(double score, double deriv, double distance) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Fragment</name>
    <filename>classIMP_1_1atom_1_1Fragment.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>bool</type>
      <name>get_contains_any_sorted_residue</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>afba26fb2d94c4fcc621fb48ee3570b5f</anchor>
      <arglist>(const Ints &amp;rinds) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains_residue</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>aac805e0b5e159b88d2a867973a6b6e34</anchor>
      <arglist>(int rindex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>ab3bb8282300c555478616fa9bdd96788</anchor>
      <arglist>(Ints o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>a337e229a5f80fbf81e2b2cdf2cb31d7b</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>abb3a0ce46df3dd4c46a27ffc678dc78d</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>a51312f05a7e6f3637e687541fbe4852d</anchor>
      <arglist>(Model *m, ParticleIndex pi, Fragment other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>abd1e359b8a8fe0538103a32c5e744ce3</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Fragment other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>ae0d090acdd339e0b89cc2f54d8bf2cf2</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Ints residue_indexes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fragment</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Fragment.html</anchorfile>
      <anchor>ab4aeeb70f31211becace2e0b5f8185be</anchor>
      <arglist>(Model *m, ParticleIndex pi, Ints residue_indexes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::HelixRestraint</name>
    <filename>classIMP_1_1atom_1_1HelixRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1HelixRestraint.html</anchorfile>
      <anchor>a3c6c0d59a14281b0a4a3851485603b8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_bonds</name>
      <anchorfile>classIMP_1_1atom_1_1HelixRestraint.html</anchorfile>
      <anchor>a41c5aebef11445a71adba7de221525a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_dihedrals</name>
      <anchorfile>classIMP_1_1atom_1_1HelixRestraint.html</anchorfile>
      <anchor>a5c52d979ee6ef04cdd0c493f566c0bc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1HelixRestraint.html</anchorfile>
      <anchor>abd639e3953e5cdd7564678d7ba9e7205</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1atom_1_1HelixRestraint.html</anchorfile>
      <anchor>ad85806c3237b2f106c47ed7d724a16ca</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::HierarchiesGeometry</name>
    <filename>classIMP_1_1atom_1_1HierarchiesGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1atom_1_1HierarchiesGeometry.html</anchorfile>
      <anchor>ab631f5f8265aaf44c34dc4ac982ba6c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1HierarchiesGeometry.html</anchorfile>
      <anchor>ae0f99e132e30e4570da194581e9af16a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Hierarchy</name>
    <filename>classIMP_1_1atom_1_1Hierarchy.html</filename>
    <base>IMP::core::Hierarchy</base>
    <docanchor file="classIMP_1_1atom_1_1Hierarchy" title="Tree Basics">tree_basics</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::atom::HierarchyGeometry</name>
    <filename>classIMP_1_1atom_1_1HierarchyGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1atom_1_1HierarchyGeometry.html</anchorfile>
      <anchor>ae0aa7e3444f17492210a5fc2002162d4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1HierarchyGeometry.html</anchorfile>
      <anchor>a141991f6445a80433ba8bc8047d8319f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::HydrogenPDBSelector</name>
    <filename>classIMP_1_1atom_1_1HydrogenPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1HydrogenPDBSelector.html</anchorfile>
      <anchor>a303acf9d22e2b7bb7a8eb11c72b828e3</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1HydrogenPDBSelector.html</anchorfile>
      <anchor>a10745b17b15e2b4269a82fb0d7192034</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ImproperSingletonScore</name>
    <filename>classIMP_1_1atom_1_1ImproperSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>ImproperSingletonScore</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>a0dd47b6f1b201fff0dc338e0f6fc18c5</anchor>
      <arglist>(UnaryFunction *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>ae4d80d35901c462a1393878c4014973d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>a106032a52dd65d752479447924e34268</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>a16a32a3af17c2be53c3dd274ba5a89a4</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>ad8712df2b6c73f6168fd57922d149fcd</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>ac62a53ded22e073e757cae29e5a630b1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>a17831b5e5132d0921f4f37f0a1ed55a9</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1ImproperSingletonScore.html</anchorfile>
      <anchor>a57481a650b6a1b92aec993f58d35d385</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::LangevinThermostatOptimizerState</name>
    <filename>classIMP_1_1atom_1_1LangevinThermostatOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1LangevinThermostatOptimizerState.html</anchorfile>
      <anchor>a68a1ab9ffe98c29919969d8c7278d43a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescale_velocities</name>
      <anchorfile>classIMP_1_1atom_1_1LangevinThermostatOptimizerState.html</anchorfile>
      <anchor>a041a044a312f8276d3718b9dfc0d50bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1atom_1_1LangevinThermostatOptimizerState.html</anchorfile>
      <anchor>a9fe023e16134a6aac7f62de3210ba139</anchor>
      <arglist>(const Particles &amp;pis)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1LangevinThermostatOptimizerState.html</anchorfile>
      <anchor>a0932986e3e026730740b9604946085ee</anchor>
      <arglist>(unsigned int) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::LennardJones</name>
    <filename>classIMP_1_1atom_1_1LennardJones.html</filename>
    <base>IMP::core::XYZR</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_radius_derivative</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a553d9c8fb026a64e0ebe314db0729dd3</anchor>
      <arglist>(double v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Sphere3D &amp;</type>
      <name>get_sphere</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a13071d4b91e734ebb4992bbe04f071f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sphere</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a71a927d537713ec2c44d0f5af5510172</anchor>
      <arglist>(const algebra::Sphere3D &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJones.html</anchorfile>
      <anchor>a1c55b5ebd73527af84b31be2c8e7f012</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LennardJones</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJones.html</anchorfile>
      <anchor>a851493748bc6faceacc22fb778cc1f74</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LennardJones</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJones.html</anchorfile>
      <anchor>ac37550fd4cfdf388851c55ae21fcc249</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LennardJones</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJones.html</anchorfile>
      <anchor>abce39f0dd97e7c13f9e614bbcec0852a</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float well_depth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LennardJones</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJones.html</anchorfile>
      <anchor>a94fb9e0c9eeb99562203b1cf6e326929</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float well_depth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>ad57d9400bc1e93292e927dfc208f62fb</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_radius_key</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a2d0424ee441a02850438d66ba2be7c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a2972fe8c69de14cce2a4261f52c635a1</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>ae7fde5a611ede0831d8230356a6ad34d</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>af8286a027e59710bd5f26099a0986196</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a4c60eba2dc7581429ebb119a0b918131</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a918f7247568b4dd55613fb66c25d2bee</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Sphere3D ball)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1XYZR.html</anchorfile>
      <anchor>a4c297dfccc564490ba9315f65b56a25b</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Sphere3D ball)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::LennardJonesPairScore</name>
    <filename>classIMP_1_1atom_1_1LennardJonesPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>aa5c77e4f4166fed072be23b44729e071</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>a71137b463ceb1665289b68997d636338</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>ae8bb285e9e3d424dd3afbfb40cf57a65</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>ad62d918227b6ed9c20d684e5b5454bd9</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>a8c232806186e7dc117d9fe0a83b13cf2</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>a9c64199bd4b43b9b19da729d851acad4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1LennardJonesPairScore.html</anchorfile>
      <anchor>ab6ed1d60c65025eb0cb4eb8404887d6d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::LinearVelocity</name>
    <filename>classIMP_1_1atom_1_1LinearVelocity.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::LoopStatisticalPairScore</name>
    <filename>classIMP_1_1atom_1_1LoopStatisticalPairScore.html</filename>
    <base>DistancePairScore&lt; score_functor::LoopStatistical &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>score_functor::LoopStatistical &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1a67f29a44377c6d45ee0c9e14fcf2be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Mass</name>
    <filename>classIMP_1_1atom_1_1Mass.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_mass_key</name>
      <anchorfile>classIMP_1_1atom_1_1Mass.html</anchorfile>
      <anchor>ac9c64b9290de1253b54f8511b69770ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Mass.html</anchorfile>
      <anchor>a5757986c617da8a3cb213859d3bd1550</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float mass)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Mass.html</anchorfile>
      <anchor>a37c36c11794dfd6fd8e8e0d0f30cdbfd</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float mass)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Mass.html</anchorfile>
      <anchor>a87a46b56fe6fab7402f2d4655bc0b04c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Mass other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mass</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Mass.html</anchorfile>
      <anchor>a4b111729975b621a095fe54baa1b0e52</anchor>
      <arglist>(Model *m, ParticleIndex pi, Mass other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Mol2Selector</name>
    <filename>classIMP_1_1atom_1_1Mol2Selector.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::MolecularDynamics</name>
    <filename>classIMP_1_1atom_1_1MolecularDynamics.html</filename>
    <base>IMP::atom::Simulator</base>
    <member kind="function">
      <type></type>
      <name>MolecularDynamics</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>ac1328f727f3aec4b73dc4231eca79dbc</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign_velocities</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a386b0527d56cebb38e64bd5e5e5a84ee</anchor>
      <arglist>(Float temperature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a6abc73d60afb45973e6a26ff85de71a8</anchor>
      <arglist>(const ParticleIndexes &amp;sc, double dt) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_is_simulation_particle</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>aa4524d18e354ad3908c575b9a449c29b</anchor>
      <arglist>(ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>get_kinetic_energy</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a41c8f1b9166af16ab423f07658ccb11b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_kinetic_temperature</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a60b5e65edc5f91ee2a78e12a9648fae0</anchor>
      <arglist>(Float ekinetic) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a43bf305498c71fc9f23231aabfae723f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_velocity_cap</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a1669840db3ed8c46c89174fd9f5f7de1</anchor>
      <arglist>(Float velocity_cap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>aeef1dc362436e33cf5bc8e08b0c4ab40</anchor>
      <arglist>(const ParticleIndexes &amp;ps) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cap_velocity_component</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a3a3aac0b8555d54e8013696d5059df96</anchor>
      <arglist>(Float &amp;vel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate_coordinates</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>ab8ecae703fc70f75db37f1428e928f73</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate_velocities</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>a754fe04e1c1dad0b675cf811f0ebdcbb</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>degrees_of_freedom_</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>ab1dc9e238be975c029469e3bfd887317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Float</type>
      <name>velocity_cap_</name>
      <anchorfile>classIMP_1_1atom_1_1MolecularDynamics.html</anchorfile>
      <anchor>ab655d279fe662e4fce269ca3b3d8a7dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Molecule</name>
    <filename>classIMP_1_1atom_1_1Molecule.html</filename>
    <base>IMP::atom::Hierarchy</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NonAlternativePDBSelector</name>
    <filename>classIMP_1_1atom_1_1NonAlternativePDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NonAlternativePDBSelector.html</anchorfile>
      <anchor>ae563c58845b8f28f0d95ff81d851dac7</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NonAlternativePDBSelector.html</anchorfile>
      <anchor>afc5d92e1a5bacd2f16edd11f95b7258a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NonHydrogenMol2Selector</name>
    <filename>classIMP_1_1atom_1_1NonHydrogenMol2Selector.html</filename>
    <base>IMP::atom::Mol2Selector</base>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NonHydrogenPDBSelector</name>
    <filename>classIMP_1_1atom_1_1NonHydrogenPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NonHydrogenPDBSelector.html</anchorfile>
      <anchor>acec094b7414b89c1300a73dcbc329719</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NonHydrogenPDBSelector.html</anchorfile>
      <anchor>a2c68badf35586e4363a2ab8a5823a4a8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NonWaterNonHydrogenPDBSelector</name>
    <filename>classIMP_1_1atom_1_1NonWaterNonHydrogenPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NonWaterNonHydrogenPDBSelector.html</anchorfile>
      <anchor>ae61d543e9e79fa60b1e54ce14621b8b8</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NonWaterNonHydrogenPDBSelector.html</anchorfile>
      <anchor>a99b626391cde6e1e4ccfd685ab2878b9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NonWaterPDBSelector</name>
    <filename>classIMP_1_1atom_1_1NonWaterPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NonWaterPDBSelector.html</anchorfile>
      <anchor>a39eeb9539d5366175486d27a12961a55</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NonWaterPDBSelector.html</anchorfile>
      <anchor>a4bce63a26b48fbb9cfdf26bd8a4a5342</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NotPDBSelector</name>
    <filename>classIMP_1_1atom_1_1NotPDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NotPDBSelector.html</anchorfile>
      <anchor>ad87100ccf8ce1986b6cff11cf2d8b29e</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NotPDBSelector.html</anchorfile>
      <anchor>a6677c2db194718035bc8d4a1625a57d0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::NPDBSelector</name>
    <filename>classIMP_1_1atom_1_1NPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1NPDBSelector.html</anchorfile>
      <anchor>af2f96c28c8b24a46005e07815ec22bcf</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1NPDBSelector.html</anchorfile>
      <anchor>a82912364ae2d344239586989d20355e2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::OrientedSoapPairScore</name>
    <filename>classIMP_1_1atom_1_1OrientedSoapPairScore.html</filename>
    <base>DistancePairScoreWithCache&lt; score_functor::OrientedSoap &gt;</base>
    <member kind="function">
      <type>SoapPairFilter *</type>
      <name>get_pair_filter</name>
      <anchorfile>classIMP_1_1atom_1_1OrientedSoapPairScore.html</anchorfile>
      <anchor>a675428737e77f20be5bba87c8996d900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a7c23a56c32a8c083952dc8a66b8d4c1b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a1de7d8754b21c165b5fe57e304682160</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>ac7362fc5bec2a3dcc0bd153ce9f07df2</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a5a64b1fbc830b64388119fe59f28c39e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a35f76fb8f35de5af8c90e5163da578d5</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const override</arglist>
    </member>
    <member kind="function">
      <type>score_functor::OrientedSoap &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a491a59fb1f2dab4e265018ee980cc28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a2a04b780c2867aa2d842a8650999a730</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::OrPDBSelector</name>
    <filename>classIMP_1_1atom_1_1OrPDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1OrPDBSelector.html</anchorfile>
      <anchor>ae77d6f372314605fd3a2e8ee7912cb5a</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1OrPDBSelector.html</anchorfile>
      <anchor>a3862f7d8cf8f31853b7d6525f70e161d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::PDBRecord</name>
    <filename>classIMP_1_1atom_1_1PDBRecord.html</filename>
    <base>IMP::Value</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_alt_loc_indicator</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>ad7283069c6bafc667e47669023ec334a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_chain_id</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>a6c2f14ca52a322f195a8159243f58709</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_element</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>a88448ff5d5c397544a57206151fbd024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_atom</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>afe37623b3276fbd23e39dcfd2f548221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_padded_atom_name</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>ad3010220afc7d3594c00fcc749585c78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_residue_name</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>aeeb9144f29d19fdd2a02db8015799b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_trimmed_atom_name</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>a7aea3c2a5b7f88dbcda3150172d1019a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_keywords</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>a1cd836a3fcd3855ebdddcd3dce9e69a3</anchor>
      <arglist>(internal::CifKeyword &amp;group, internal::CifKeyword &amp;element, internal::CifKeyword &amp;atom_name, internal::CifKeyword &amp;alt_loc_id, internal::CifKeyword &amp;residue_name, internal::CifKeyword &amp;auth_chain, internal::CifKeyword &amp;chain, internal::CifKeyword &amp;auth_seq_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line</name>
      <anchorfile>classIMP_1_1atom_1_1PDBRecord.html</anchorfile>
      <anchor>a1ee2caeceb0b509a4d29a20b674a8333</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::PDBSelector</name>
    <filename>classIMP_1_1atom_1_1PDBSelector.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1PDBSelector.html</anchorfile>
      <anchor>a7a0ae9c3e35443d3b3a57ecdb15a1177</anchor>
      <arglist>(const PDBRecord &amp;record) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::PPDBSelector</name>
    <filename>classIMP_1_1atom_1_1PPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1PPDBSelector.html</anchorfile>
      <anchor>a9ff3fef8cfe6876b29843d9761bcfd8f</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1PPDBSelector.html</anchorfile>
      <anchor>a4b2725b3bad9a4688a1264dbab333d9d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ProteinLigandAtomPairScore</name>
    <filename>classIMP_1_1atom_1_1ProteinLigandAtomPairScore.html</filename>
    <base>StatisticalPairScore&lt; ProteinLigandType, true, false &gt;</base>
    <member kind="function">
      <type></type>
      <name>StatisticalPairScore</name>
      <anchorfile>classIMP_1_1core_1_1StatisticalPairScore.html</anchorfile>
      <anchor>a44e0c53a5108a702a14749ba813303da</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatisticalPairScore</name>
      <anchorfile>classIMP_1_1core_1_1StatisticalPairScore.html</anchorfile>
      <anchor>aec58d0b096b9c8e80a6bde0dfeeb286e</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>score_functor::Statistical&lt; ProteinLigandType, BIPARTITE, INTERPOLATE, false &gt; &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1a67f29a44377c6d45ee0c9e14fcf2be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ProteinLigandRestraint</name>
    <filename>classIMP_1_1atom_1_1ProteinLigandRestraint.html</filename>
    <base>IMP::container::PairsRestraint</base>
    <member kind="function">
      <type></type>
      <name>PairsRestraint</name>
      <anchorfile>classIMP_1_1container_1_1PairsRestraint.html</anchorfile>
      <anchor>a537b01ba86efb40dd99bb270cf197054</anchor>
      <arglist>(PairScore *ss, PairContainerAdaptor pc, std::string name=&quot;PairsRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PairsRestraint.html</anchorfile>
      <anchor>aad692e22e778db3892d82c723b992d27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PairsRestraint.html</anchorfile>
      <anchor>ad15a32d447ab05d2ae425e70f24a2465</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1PairsRestraint.html</anchorfile>
      <anchor>ab1d8f6f04efea2b56c6ed160e791102b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::RemoveRigidMotionOptimizerState</name>
    <filename>classIMP_1_1atom_1_1RemoveRigidMotionOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveRigidMotionOptimizerState.html</anchorfile>
      <anchor>ab44d646a5416b3ed0f239c574e76ed8e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_rigid_motion</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveRigidMotionOptimizerState.html</anchorfile>
      <anchor>aaec4222acb09b25c9804095983e4df3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveRigidMotionOptimizerState.html</anchorfile>
      <anchor>ab8a93cc8210611c95b2378ef9ff35e6f</anchor>
      <arglist>(const Particles &amp;pis)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveRigidMotionOptimizerState.html</anchorfile>
      <anchor>a5c6fcc8be00fb9414d05f990f58c8dba</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::RemoveTranslationOptimizerState</name>
    <filename>classIMP_1_1atom_1_1RemoveTranslationOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveTranslationOptimizerState.html</anchorfile>
      <anchor>a89445cb6edfe932bb855dfd90a78f01a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_translation</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveTranslationOptimizerState.html</anchorfile>
      <anchor>a0724a3db18996f7886c26fcbcb7667db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveTranslationOptimizerState.html</anchorfile>
      <anchor>adc7fc75835bdc0cd9bf1013a9f940280</anchor>
      <arglist>(const Particles &amp;pis)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1RemoveTranslationOptimizerState.html</anchorfile>
      <anchor>a9baf79c48fb7ce17ebc8b1abccce5395</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Representation</name>
    <filename>classIMP_1_1atom_1_1Representation.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>void</type>
      <name>add_representation</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a497d5d3f19d928884b03edd16fbab99e</anchor>
      <arglist>(ParticleIndexAdaptor rep, RepresentationType type=BALLS, double resolution=-1)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_representation</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>af2cb8658482ff38369223b34bbb70d64</anchor>
      <arglist>(double resolution, RepresentationType type=BALLS)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_representations</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>ab31fd97c8a0dda88abe16f0744c17d6a</anchor>
      <arglist>(RepresentationType type=BALLS)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_resolutions</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a1b96c33fc98250a2d260e1c957dcb89c</anchor>
      <arglist>(RepresentationType type=BALLS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_representation</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a34c82c9da8203b70518b44260d5bef6d</anchor>
      <arglist>(ParticleIndexAdaptor rep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_parents</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a2f15848fe64f29e91158080265b8b3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a76f87d9a914ba926d45f6cfc4914daf5</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>ab81427610a3cbd3ece06865f87aeebc2</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a6cc5ba59d9368c4318d042ae181158a0</anchor>
      <arglist>(Model *m, ParticleIndex pi, double resolution)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a068b43980eeac360524ab737999e5539</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double resolution)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a841dbf09f7b35495a2611e57b423cf46</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Representation other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Representation</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Representation.html</anchorfile>
      <anchor>a4d969beb1d0fef460d6c8b10ad894838</anchor>
      <arglist>(Model *m, ParticleIndex pi, Representation other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Residue</name>
    <filename>classIMP_1_1atom_1_1Residue.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>Int</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a478359861034b614e1cda03768806fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_index</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>ab9d88dc476ae4d567fa041d7999b9b07</anchor>
      <arglist>(Int t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_type</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>aa47d3e8ac5a0f07fc67eea29c60b2792</anchor>
      <arglist>(ResidueType t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TriggerKey</type>
      <name>get_type_changed_key</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a2726f46f72240abafc440f013b609bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>aa8472267328ddc075dba74e16e71900b</anchor>
      <arglist>(Model *m, ParticleIndex pi, ResidueType t, int index, int insertion_code)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>aea91aaba26fc6ea760b049773023d484</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ResidueType t, int index, int insertion_code)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a301e9b56ab80581166b286745560443a</anchor>
      <arglist>(Model *m, ParticleIndex pi, ResidueType t, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a08896e883624f8b7472f2a121ec77e3c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ResidueType t, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>ae6e37096c8b7bf5da10bf712ef93623a</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ResidueType t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a85df62736aed4cce5b488a36fb78adb5</anchor>
      <arglist>(Model *m, ParticleIndex pi, ResidueType t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>a9c559fdff64ef234dc191d4f49b8f94d</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Residue other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Residue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Residue.html</anchorfile>
      <anchor>ace3fac09ee49d5c1c13f4dde0d291783</anchor>
      <arglist>(Model *m, ParticleIndex pi, Residue other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ResidueType</name>
    <filename>classIMP_1_1atom_1_1ResidueType.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::atom::ResidueTypePDBSelector</name>
    <filename>classIMP_1_1atom_1_1ResidueTypePDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1ResidueTypePDBSelector.html</anchorfile>
      <anchor>a14b29a90c06c10d401577586bfabe234</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1ResidueTypePDBSelector.html</anchorfile>
      <anchor>a691599e8942f56405d5e29971d20e0ed</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::RigidBodyDiffusion</name>
    <filename>classIMP_1_1atom_1_1RigidBodyDiffusion.html</filename>
    <base>IMP::atom::Diffusion</base>
    <member kind="function">
      <type>double</type>
      <name>get_rotational_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>ab89e95b410de46fc0337ef183adcbebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rotational_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>a6d1aa8146e071a29736ea39c559be22a</anchor>
      <arglist>(double d) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>a3adc826e5c74e6117cef6272c11d7169</anchor>
      <arglist>(Model *m, ParticleIndex p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_rotational_diffusion_coefficient_key</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>a3b69ebfc20e190b049d5d23c951c3d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBodyDiffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>a0a3992fd48ae9e49202072809fe966b8</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBodyDiffusion</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1RigidBodyDiffusion.html</anchorfile>
      <anchor>a69475a1440fb159cd565aec4d0d623e0</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::SameResiduePairFilter</name>
    <filename>classIMP_1_1atom_1_1SameResiduePairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1SameResiduePairFilter.html</anchorfile>
      <anchor>a88d26af5eeb73e4515aa70f50dfe4fcc</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1atom_1_1SameResiduePairFilter.html</anchorfile>
      <anchor>a30f313036f9fda0ec4a7757768a2e302</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1SameResiduePairFilter.html</anchorfile>
      <anchor>a6e9a27135568a9d6ea92ee431075b5b6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::SecondaryStructureResidue</name>
    <filename>classIMP_1_1atom_1_1SecondaryStructureResidue.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Floats</type>
      <name>get_all_probabilities</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>af293fe294bb13cc1b0e10d1d9d156cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_prob_coil</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>abc68e42183bf945797135760a3b997e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_prob_helix</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>a65867fff2c3ab6cd4e71aee67b60a753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_prob_strand</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>af3b9f7f94e71cd19f39580c827327614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prob_coil</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>afdd0f5f162048ad3458b22cbda525397</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prob_helix</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>ac5a0e7d9712a2928bd76224a7627b44e</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prob_strand</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>aadd733f8bbb4748f208a47a126950dc7</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>aeb40fdc799b2e3b1f499cb1f09f3f8f8</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SecondaryStructureResidue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>a092634d858d51527158116ce92a8036e</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float prob_helix, Float prob_strand, Float prob_coil)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SecondaryStructureResidue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>a61bf918d96f0302c6030b00a16150d19</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float prob_helix, Float prob_strand, Float prob_coil)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SecondaryStructureResidue</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1SecondaryStructureResidue.html</anchorfile>
      <anchor>aea26f9048af0cd495d711e7a5c842673</anchor>
      <arglist>(Particle *res_p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Selection</name>
    <filename>classIMP_1_1atom_1_1Selection.html</filename>
    <base>IMP::InputAdaptor</base>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a1aa9fab76bf21cfdab1e7b25751a094a</anchor>
      <arglist>(Hierarchy hierarchy=None, Hierarchies hierarchies=[], Strings molecules=[], Ints residue_indexes=[], Strings chain_ids=[], AtomTypes atom_types=[], ResidueTypes residue_types=[], Strings domains=[], double resolution=0, RepresentationType representation_type=IMP.atom.BALLS, std::string molecule=None, int residue_index=None, std::string chain_id=None, AtomType atom_type=None, ResidueType residue_type=None, Ints hierarchy_types=None, Element element=None, Terminus terminus=None, std::string domain=None, core::ParticleType particle_type=None, core::ParticleTypes particle_types=[], int copy_index=-1, Ints copy_indexes=[], int state_index=-1, Ints state_indexes=[])</arglist>
    </member>
    <member kind="function">
      <type>Selection</type>
      <name>create_clone</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ab6e1290b1f07537af66b8438e9423447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Hierarchies</type>
      <name>get_hierarchies</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>afe161e06395cbac13aa681457cad1a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_selected_particle_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>aaacb47f72e389270dd6217399580480b</anchor>
      <arglist>(bool with_representation=true) const </arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_selected_particles</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>abab4978f28c318d2e05e61c8441de4e5</anchor>
      <arglist>(bool with_representation=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_atom_type</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>aa8af1e705fed866dd406011e8e6b2937</anchor>
      <arglist>(AtomType types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_atom_types</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a85ca4478d665699faececb094244823a</anchor>
      <arglist>(AtomTypes types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chain_id</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a3cedf82d5bf40822bc4a820013312fc6</anchor>
      <arglist>(std::string c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chain_ids</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>acdbbb7ee43426d18d25e8156f4c4a102</anchor>
      <arglist>(Strings chains)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_copy_index</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a0c05ce602cf890b36c27215f0457faf0</anchor>
      <arglist>(unsigned int copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_copy_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a2b1abb1ec178f5a03ad209a411e36c50</anchor>
      <arglist>(Ints copies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_difference</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a79306b9477cdce20dc3589eb1b5040bf</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ab5a57597317ebe803b8cc1fc41aef83a</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domains</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a2efbaacbb23fc9c88afcc840128b5e78</anchor>
      <arglist>(Strings names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_element</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a3309e6a6b180936dbe4dac4945491697</anchor>
      <arglist>(Element e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_hierarchy_types</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>aa2a947c2b84478de28b099b88924ff44</anchor>
      <arglist>(Ints types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_intersection</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ab230edcc56bbc2163dcb2d8bb1a822f2</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_molecule</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ae96dcf41ae1e3ba865b24563ad41b7ba</anchor>
      <arglist>(std::string mol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_molecules</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a979e892be89833c278010bc5cade2a25</anchor>
      <arglist>(Strings mols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle_type</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>aa2896c10f6a3bcc197e413bd09403e25</anchor>
      <arglist>(core::ParticleType t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle_types</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ad4e08f8d592e7dc667ce43a3c156be9b</anchor>
      <arglist>(core::ParticleTypes t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_representation_type</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>adf525bd37d826a5103a9f845d8389d0a</anchor>
      <arglist>(RepresentationType t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_index</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a5345606a59eb2a0fde0b01e59db2137d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>afb5e6f7bfef6e93e4011b37a05f2caff</anchor>
      <arglist>(Ints indexes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_type</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a68024499c221b617df3ee27d6460b4d6</anchor>
      <arglist>(ResidueType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_types</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>abd1a9d5fbda36779cf7ab7b8ba1a58af</anchor>
      <arglist>(ResidueTypes types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_resolution</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a45b96d8418e4d70aaa9e3288faecf1e8</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_state_index</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>add150ee8ebf300196dc5c0aa169a9096</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_state_indexes</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>ae9b296352da61f058a02aa11037e19ab</anchor>
      <arglist>(Ints states)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_symmetric_difference</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>adab4f65a622a2a377c6805ac3341049c</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_terminus</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a04ccdbbc4b29e285546aa9c91e60b274</anchor>
      <arglist>(Terminus t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_union</name>
      <anchorfile>classIMP_1_1atom_1_1Selection.html</anchorfile>
      <anchor>a63be78e2118e882d1fb047b20b085368</anchor>
      <arglist>(const Selection &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::SelectionGeometry</name>
    <filename>classIMP_1_1atom_1_1SelectionGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1atom_1_1SelectionGeometry.html</anchorfile>
      <anchor>a2240ffcea507148e27cc643c3ae2bf33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1SelectionGeometry.html</anchorfile>
      <anchor>a0f9fb05eb9f263666b0262ddddf47dd2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::Simulator</name>
    <filename>classIMP_1_1atom_1_1Simulator.html</filename>
    <base>IMP::Optimizer</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>abcaab2f1616305dc3654245bcf67472a</anchor>
      <arglist>(const ParticleIndexes &amp;sc, double dt)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>get_is_simulation_particle</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>ad634a90f4e8ed1851bc25ef7c96a2cc7</anchor>
      <arglist>(ParticleIndex p) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>a2b6f2117677bbbe1bf114a8e50fe6f1b</anchor>
      <arglist>(const ParticleIndexes &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1atom_1_1Simulator.html</anchorfile>
      <anchor>afad9d7ff56eaebeb56fd11790a1593d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::SmoothingFunction</name>
    <filename>classIMP_1_1atom_1_1SmoothingFunction.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1atom_1_1SmoothingFunction.html</anchorfile>
      <anchor>aeb7f7d4d06819e01c1d325a65d4acae2</anchor>
      <arglist>(double score, double distance) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DerivativePair</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1atom_1_1SmoothingFunction.html</anchorfile>
      <anchor>aa2ddf8bfe388b06354c56c962d3e0eb1</anchor>
      <arglist>(double score, double deriv, double distance) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::SoapPairFilter</name>
    <filename>classIMP_1_1atom_1_1SoapPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1SoapPairFilter.html</anchorfile>
      <anchor>ae40ead5f2d5b4600ab340e5722753994</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1atom_1_1SoapPairFilter.html</anchorfile>
      <anchor>a0157c9b90ebe6992b8c448c11338aebc</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1SoapPairFilter.html</anchorfile>
      <anchor>a706725399dacf424ef6de245846acfa1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::State</name>
    <filename>classIMP_1_1atom_1_1State.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function" static="yes">
      <type>static State</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1State.html</anchorfile>
      <anchor>a03f86cac6084d551031fcfa272a48f66</anchor>
      <arglist>(IMP::ParticleAdaptor pa, unsigned int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static State</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1State.html</anchorfile>
      <anchor>a0a51d7b2bbd064658727d38e57b7bd1b</anchor>
      <arglist>(Model *m, ParticleIndex pi, unsigned int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static State</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1State.html</anchorfile>
      <anchor>a7ab84b565ba352fa722735edc0db873f</anchor>
      <arglist>(Model *m, ParticleIndex pi, State other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static State</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1State.html</anchorfile>
      <anchor>a206f34ae39850d759e718200ccc35f8e</anchor>
      <arglist>(IMP::ParticleAdaptor pa, State other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::StereochemistryPairFilter</name>
    <filename>classIMP_1_1atom_1_1StereochemistryPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1StereochemistryPairFilter.html</anchorfile>
      <anchor>a5189bd1a5876e2b4dcb5a980672e40a6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1atom_1_1StereochemistryPairFilter.html</anchorfile>
      <anchor>a8432f13631637b7df13a917c48f8874e</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1StereochemistryPairFilter.html</anchorfile>
      <anchor>a5b65309e5f6b88589ecaada4632295c2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::StructureSource</name>
    <filename>classIMP_1_1atom_1_1StructureSource.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_source_chain_id</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>afe0c660096576f6525752570d65ccdf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_source_id</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>acdcbe37a1fac15368d790af35e9033b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_chain_id</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>a237324f6cd5805323579e84e23c04746</anchor>
      <arglist>(std::string source_chain_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_id</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>a52f88075c6d4e03880b269040065404c</anchor>
      <arglist>(std::string source_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureSource</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>abd4ead56962d212686113d174898c9b6</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string source_id, std::string source_chain_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureSource</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1StructureSource.html</anchorfile>
      <anchor>a1d45e96d03ff8d5446553497818202bd</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string source_id, std::string source_chain_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::TAMDCentroid</name>
    <filename>classIMP_1_1atom_1_1TAMDCentroid.html</filename>
    <base>IMP::core::Centroid</base>
    <member kind="function" static="yes">
      <type>static TAMDCentroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDCentroid.html</anchorfile>
      <anchor>a0798b30e5e80229807b08bbdcd8502a6</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDCentroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDCentroid.html</anchorfile>
      <anchor>a401b39dc58678d1960b6767d7328463c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDCentroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDCentroid.html</anchorfile>
      <anchor>afb8fd3568091ed55121b653a390a3c45</anchor>
      <arglist>(Model *m, ParticleIndex pi, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDCentroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDCentroid.html</anchorfile>
      <anchor>ab1ba7b5fde2624f005631e0fbd2fb2fc</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Centroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Centroid.html</anchorfile>
      <anchor>a71dff4dacdc4651833dcb63ed8eb5cab</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Centroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Centroid.html</anchorfile>
      <anchor>a533b86af3d87e81c676e50f5651f52b1</anchor>
      <arglist>(Model *m, ParticleIndex pi, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Centroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Centroid.html</anchorfile>
      <anchor>aead8e0c785a7cc0e9ad18e1fb6391733</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Centroid</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Centroid.html</anchorfile>
      <anchor>a25fd05c17e081907c3059e5522c4db0e</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor members)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::TAMDParticle</name>
    <filename>classIMP_1_1atom_1_1TAMDParticle.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>double</type>
      <name>get_friction_scale_factor</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>afb5c7d4a19c5b39437377d50f5636ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_reference_particle_index</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a97e6d08ead733de1f2d17b252b8f1ad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_temperature_scale_factor</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a038fd1f32c0889c63508e3a6e63186e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_friction_scale_factor</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a7e47a94a6d1d30f92139c29e00b490e7</anchor>
      <arglist>(float tsf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_temperature_scale_factor</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a5ed9cc786c5be28b99e3ee36cf1b4c01</anchor>
      <arglist>(float tsf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_coordinates_from_ref</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>ac39d96ea3198a5703a0b40254dd552f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_friction_scale_factor_key</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a94e4d0f5c7c4627ebb309f551dfbb3e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a104b28c62f4a2ad6a9a6834e2e76a8d0</anchor>
      <arglist>(Model *m, ParticleIndex p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleIndexKey</type>
      <name>get_reference_particle_index_key</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a45277b4b20381e4fa88bb9690b95635d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_temperature_scale_factor_key</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a215241cdfc9cd902e6f9f45aa85f5bdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDParticle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a33955f9318b82c7502ac2e3261846c5f</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndex pi_ref, Float tsf, Float fsf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDParticle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a6cf72235c32b3575299182c2f3299db1</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndex pi_ref, Float tsf, Float fsf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDParticle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>acd4a1f68a13134872c27ab0ae85b9267</anchor>
      <arglist>(Model *m, ParticleIndex pi, Particle *p_ref, Float tsf, Float fsf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAMDParticle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1atom_1_1TAMDParticle.html</anchorfile>
      <anchor>a35e3a2c3b7658f1d93ad5518e4090adf</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Particle *p_ref, Float tsf, Float fsf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::VelocityScalingOptimizerState</name>
    <filename>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</anchorfile>
      <anchor>aab31f8971091d973c66fedcbab32a00e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescale_velocities</name>
      <anchorfile>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</anchorfile>
      <anchor>aea0fb9f99d76871847e13acc7b7fce6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</anchorfile>
      <anchor>a042d1b4e6716cd86bd519e06253d3857</anchor>
      <arglist>(const Particles &amp;pis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_temperature</name>
      <anchorfile>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</anchorfile>
      <anchor>a42764202bbfd2e8046624f6bb76c0b21</anchor>
      <arglist>(Float temperature)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1VelocityScalingOptimizerState.html</anchorfile>
      <anchor>a528825b0689f5ffefc70bfe7eb22d66d</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::WaterPDBSelector</name>
    <filename>classIMP_1_1atom_1_1WaterPDBSelector.html</filename>
    <base>IMP::atom::NonAlternativePDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1WaterPDBSelector.html</anchorfile>
      <anchor>a3f550f5f0ebc45fc90800be3c9fe4fa7</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1WaterPDBSelector.html</anchorfile>
      <anchor>abe0b0fdf0a6505a6abb8df512c547104</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::WritePDBOptimizerState</name>
    <filename>classIMP_1_1atom_1_1WritePDBOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1WritePDBOptimizerState.html</anchorfile>
      <anchor>a11196ae6bfb7ea838791155f0c88222f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1atom_1_1WritePDBOptimizerState.html</anchorfile>
      <anchor>abb724afe306766790ff0460ef18d2d05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1atom_1_1WritePDBOptimizerState.html</anchorfile>
      <anchor>a596ba16ad089ea7f94b7ca18cd5fec95</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::atom::XorPDBSelector</name>
    <filename>classIMP_1_1atom_1_1XorPDBSelector.html</filename>
    <base>IMP::atom::PDBSelector</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_selected</name>
      <anchorfile>classIMP_1_1atom_1_1XorPDBSelector.html</anchorfile>
      <anchor>af016ba4f85a06d79ac3f27b13128a249</anchor>
      <arglist>(const PDBRecord &amp;record) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1atom_1_1XorPDBSelector.html</anchorfile>
      <anchor>ad29f0eee7834d5c5d9bf152c82cf52c1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::bayesianem</name>
    <filename>namespaceIMP_1_1bayesianem.html</filename>
    <class kind="class">IMP::bayesianem::GaussianEMRestraint</class>
    <member kind="function">
      <type>DensityGrid</type>
      <name>get_grid</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>af6d8a571066636cd36d4e067ad1a8dac</anchor>
      <arglist>(IMP::em::DensityMap *in)</arglist>
    </member>
    <member kind="function">
      <type>IMP::algebra::Transformation3D</type>
      <name>get_transformation_aligning_first_to_second</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>a2b1cbbee53f6277e776c525a0ea8ff09</anchor>
      <arglist>(const IMP::atom::Selection &amp;s1, const IMP::atom::Selection &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>a0eb6428c24896b81dd5d39c186b8c127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>a17e26391ea1b5894e00e2b792b10850e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1bayesianem.html</anchorfile>
      <anchor>a90b4cfcb4ffa4ed1e86d5fef50f86f28</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::bayesianem::GaussianEMRestraint</name>
    <filename>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>GaussianEMRestraint</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a7fdad0e2f2f2e3d08cc98f0157f296dc</anchor>
      <arglist>(Model *mdl, ParticleIndexes model_ps, ParticleIndexes density_ps, ParticleIndex global_sigma, Float model_cutoff_dist, Float density_cutoff_dist, Float slope, bool update_model=true, bool backbone_slope=false, std::string name=&quot;GaussianEMRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_initial_scores</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a813690fd3607395292d03f2e9cd1fd2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a69005b535b3cf7287d56dd3abcb7fcb0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_dynamic_info</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>afbafe5bdaa3205edbb03c3fdefc206b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a34168f463611b34da440e92c64c863a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_slope</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>ab6c84a749ece49e21089b87b8211cce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>aeed5ab1e782178dcc5060f9750ae5b42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a1be3304855ff269a9646bc8b79476724</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_density_filename</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>ac549f590747e7d4ee1224f4f1289dd7a</anchor>
      <arglist>(std::string density_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slope</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a186e12ba28824425b80be6a7f5ddae89</anchor>
      <arglist>(Float s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1bayesianem_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a3890d0c84083446aaca99f94c3abc9cf</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::bayesianem::restraint::GaussianEMRestraintWrapper</name>
    <filename>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a7daa6c2da8f07167a0f8d402e5b2c4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_target_density_to_hierarchy</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a221c28318f1be598942a568a62298cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>center_model_on_target_density</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>ab32d54800f4409738886b4f135b227c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>center_on_target_density</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a5def7949fb98d81b31fffcd22e96b5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>center_target_density_on_model</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>abd14233fa2f842e647976146e52e1457</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>center_target_density_on_origin</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>ab8f9cb5e4dda082f650a33cc3e868672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_center_of_mass</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a10b983524432829ebf1ac9fb6a4d4d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_density_as_hierarchy</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a457680c111b50604cd36e71845c4ea12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_weight</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>affa322d5b5048077b7c79b8d898f5f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_target_gmm_to_mrc</name>
      <anchorfile>classIMP_1_1bayesianem_1_1restraint_1_1GaussianEMRestraintWrapper.html</anchorfile>
      <anchor>a3a3b2f2e077c5d569ba598d4b8764245</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::benchmark</name>
    <filename>namespaceIMP_1_1benchmark.html</filename>
    <class kind="class">IMP::benchmark::Profiler</class>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>namespaceIMP_1_1benchmark.html</anchorfile>
      <anchor>a03336ed99faca58b56f1037c0bb01de8</anchor>
      <arglist>(std::string benchmark, std::string algorithm, double time, double check)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1benchmark.html</anchorfile>
      <anchor>a0b349d69beb64b28925165f938ed5380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1benchmark.html</anchorfile>
      <anchor>a33993c967ed32eaf0e8e2ced6111800f</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1benchmark.html</anchorfile>
      <anchor>a38d2442357a287810f05a574114c593d</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::benchmark::Profiler</name>
    <filename>classIMP_1_1benchmark_1_1Profiler.html</filename>
    <base>IMP::RAII</base>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>classIMP_1_1benchmark_1_1Profiler.html</anchorfile>
      <anchor>a7ecc75797646a8e88eee2e01ad19aee3</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1benchmark_1_1Profiler.html</anchorfile>
      <anchor>aa410a8c2040e2b97d71fd9216145ea3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1benchmark_1_1Profiler.html</anchorfile>
      <anchor>a88b2f0344d687e7634dc0129bf35a073</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::cgal</name>
    <filename>namespaceIMP_1_1cgal.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1cgal.html</anchorfile>
      <anchor>a547e2a954b76814ca4fb1114f083d20b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1cgal.html</anchorfile>
      <anchor>a5b187cff3a5149d28cc445bc984a66e6</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1cgal.html</anchorfile>
      <anchor>a6d399263770085944cb5131acefc11a1</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1cgal" title="CGAL">CGAL</docanchor>
  </compound>
  <compound kind="namespace">
    <name>IMP::cnmultifit</name>
    <filename>namespaceIMP_1_1cnmultifit.html</filename>
    <class kind="class">IMP::cnmultifit::AlignSymmetric</class>
    <class kind="class">IMP::cnmultifit::CnSymmAxisDetector</class>
    <class kind="class">IMP::cnmultifit::MolCnSymmAxisDetector</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; AlignSymmetric &gt;</type>
      <name>AlignSymmetrics</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a177ce1d54e6e7c85e4b2f9eb4b4f2652</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CnSymmAxisDetector &gt;</type>
      <name>CnSymmAxisDetectors</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a4997abca587b8f9910e4728b5aa88d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; MolCnSymmAxisDetector &gt;</type>
      <name>MolCnSymmAxisDetectors</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a89bcaef432859cebafcdee8bdbdcf654</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cn_symm_score</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a957e7710eb8a161975d25f3549824df8</anchor>
      <arglist>(atom::Hierarchies mhs, const algebra::Vector3D &amp;center, const algebra::Vector3D &amp;direction, int symm_deg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_all_fitting</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a7b47b0bbc4f3260cde8572faf24b7187</anchor>
      <arglist>(const std::string param_filename, const std::string chimera_filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>fit_cn_assembly</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a6067aedfd378547038d133f84bb820e3</anchor>
      <arglist>(atom::Hierarchies mhs, int dn_symm_deg, em::DensityMap *dmap, float threshold, const AlignSymmetric &amp;aligner, bool sample_translation=false, bool fine_rotational_sampling=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_cn_rmsd</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a6955cc359b815de543af54b62dcaf87d</anchor>
      <arglist>(atom::Hierarchies mh1, atom::Hierarchies mh2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a360fe091270e0805001fea246b4f9041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>a86ef4857a4f6d8b60994efdf87a3f373</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1cnmultifit.html</anchorfile>
      <anchor>ae72c7b0f962f21c00380f077ac802773</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1cnmultifit" title="cnmultifit: command line tool ">cnmultifit_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::cnmultifit::AlignSymmetric</name>
    <filename>classIMP_1_1cnmultifit_1_1AlignSymmetric.html</filename>
    <member kind="function">
      <type></type>
      <name>AlignSymmetric</name>
      <anchorfile>classIMP_1_1cnmultifit_1_1AlignSymmetric.html</anchorfile>
      <anchor>afcbb4fa0d636862512fb346809db119a</anchor>
      <arglist>(em::DensityMap *dmap, float threshold, int cn_symm_deg)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3Ds</type>
      <name>get_symm_axis_alignments_from_model_to_density</name>
      <anchorfile>classIMP_1_1cnmultifit_1_1AlignSymmetric.html</anchorfile>
      <anchor>af93bae09db2484418fa09368248b1a4a</anchor>
      <arglist>(atom::Hierarchies mhs, bool sample_translation, bool fine_rotation_sampling=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>score_alignment</name>
      <anchorfile>classIMP_1_1cnmultifit_1_1AlignSymmetric.html</anchorfile>
      <anchor>ab72d66d8b1e06812715b6949a5abcb1f</anchor>
      <arglist>(atom::Hierarchies mhs, float max_allowed_diff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::cnmultifit::CnSymmAxisDetector</name>
    <filename>classIMP_1_1cnmultifit_1_1CnSymmAxisDetector.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::cnmultifit::MolCnSymmAxisDetector</name>
    <filename>classIMP_1_1cnmultifit_1_1MolCnSymmAxisDetector.html</filename>
    <member kind="function">
      <type>float</type>
      <name>calc_symm_score</name>
      <anchorfile>classIMP_1_1cnmultifit_1_1MolCnSymmAxisDetector.html</anchorfile>
      <anchor>afcf9609b220439ced5b49681e8f9d9b9</anchor>
      <arglist>(int symm_axis_ind) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::container</name>
    <filename>namespaceIMP_1_1container.html</filename>
    <class kind="class">IMP::container::AllBipartitePairContainer</class>
    <class kind="class">IMP::container::AllPairContainer</class>
    <class kind="class">IMP::container::CloseBipartitePairContainer</class>
    <class kind="class">IMP::container::ClosePairContainer</class>
    <class kind="class">IMP::container::ConnectingPairContainer</class>
    <class kind="class">IMP::container::ConsecutivePairContainer</class>
    <class kind="class">IMP::container::ConsecutivePairFilter</class>
    <class kind="class">IMP::container::DistributePairsScoreState</class>
    <class kind="class">IMP::container::DistributeQuadsScoreState</class>
    <class kind="class">IMP::container::DistributeSingletonsScoreState</class>
    <class kind="class">IMP::container::DistributeTripletsScoreState</class>
    <class kind="class">IMP::container::DynamicListPairContainer</class>
    <class kind="class">IMP::container::DynamicListQuadContainer</class>
    <class kind="class">IMP::container::DynamicListSingletonContainer</class>
    <class kind="class">IMP::container::DynamicListTripletContainer</class>
    <class kind="class">IMP::container::EventPairsOptimizerState</class>
    <class kind="class">IMP::container::EventQuadsOptimizerState</class>
    <class kind="class">IMP::container::EventSingletonsOptimizerState</class>
    <class kind="class">IMP::container::EventTripletsOptimizerState</class>
    <class kind="class">IMP::container::ExclusiveConsecutivePairContainer</class>
    <class kind="class">IMP::container::ExclusiveConsecutivePairFilter</class>
    <class kind="class">IMP::container::InContainerPairFilter</class>
    <class kind="class">IMP::container::InContainerQuadFilter</class>
    <class kind="class">IMP::container::InContainerSingletonFilter</class>
    <class kind="class">IMP::container::InContainerTripletFilter</class>
    <class kind="class">IMP::container::ListPairContainer</class>
    <class kind="class">IMP::container::ListQuadContainer</class>
    <class kind="class">IMP::container::ListSingletonContainer</class>
    <class kind="class">IMP::container::ListTripletContainer</class>
    <class kind="class">IMP::container::MinimumPairRestraint</class>
    <class kind="class">IMP::container::MinimumPairScore</class>
    <class kind="class">IMP::container::MinimumQuadRestraint</class>
    <class kind="class">IMP::container::MinimumQuadScore</class>
    <class kind="class">IMP::container::MinimumSingletonRestraint</class>
    <class kind="class">IMP::container::MinimumSingletonScore</class>
    <class kind="class">IMP::container::MinimumTripletRestraint</class>
    <class kind="class">IMP::container::MinimumTripletScore</class>
    <class kind="class">IMP::container::PairContainerSet</class>
    <class kind="class">IMP::container::PairContainerStatistics</class>
    <class kind="class">IMP::container::PairsConstraint</class>
    <class kind="class">IMP::container::PairsOptimizerState</class>
    <class kind="class">IMP::container::PairsRestraint</class>
    <class kind="class">IMP::container::PredicatePairsRestraint</class>
    <class kind="class">IMP::container::PredicateQuadsRestraint</class>
    <class kind="class">IMP::container::PredicateSingletonsRestraint</class>
    <class kind="class">IMP::container::PredicateTripletsRestraint</class>
    <class kind="class">IMP::container::QuadContainerSet</class>
    <class kind="class">IMP::container::QuadContainerStatistics</class>
    <class kind="class">IMP::container::QuadsConstraint</class>
    <class kind="class">IMP::container::QuadsOptimizerState</class>
    <class kind="class">IMP::container::QuadsRestraint</class>
    <class kind="class">IMP::container::SingletonContainerSet</class>
    <class kind="class">IMP::container::SingletonContainerStatistics</class>
    <class kind="class">IMP::container::SingletonsConstraint</class>
    <class kind="class">IMP::container::SingletonsOptimizerState</class>
    <class kind="class">IMP::container::SingletonsRestraint</class>
    <class kind="class">IMP::container::TripletContainerSet</class>
    <class kind="class">IMP::container::TripletContainerStatistics</class>
    <class kind="class">IMP::container::TripletsConstraint</class>
    <class kind="class">IMP::container::TripletsOptimizerState</class>
    <class kind="class">IMP::container::TripletsRestraint</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AllBipartitePairContainer &gt; &gt;</type>
      <name>AllBipartitePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab761781244b1ebd5d74353c713690db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AllBipartitePairContainer &gt; &gt;</type>
      <name>AllBipartitePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a17ff3bd4406299bc873b413b9c20d52d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AllPairContainer &gt; &gt;</type>
      <name>AllPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a76a6c8982bed2236c7f99e7451c745f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AllPairContainer &gt; &gt;</type>
      <name>AllPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aacad5b2d3a0593e544fd63ef8d2e575c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ClosePairContainer &gt; &gt;</type>
      <name>ClosePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>adc910776e48140f0c8250f6fc1405541</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ClosePairContainer &gt; &gt;</type>
      <name>ClosePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a9726bdac46baac6b428fde142a83c3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConnectingPairContainer &gt; &gt;</type>
      <name>ConnectingPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>abb8498caf7d99832c03382c2a71707bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConnectingPairContainer &gt; &gt;</type>
      <name>ConnectingPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a99c0bcf836fee3e3774b4dd6214dd32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ConsecutivePairContainer &gt; &gt;</type>
      <name>ConsecutivePairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac476738b57684f9ed14377f2a02882ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ConsecutivePairContainer &gt; &gt;</type>
      <name>ConsecutivePairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aab17dbbce3997259c801e677db632d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListPairContainer &gt; &gt;</type>
      <name>DynamicListPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aca17385402577cc3f2bd80911dd6622e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListPairContainer &gt; &gt;</type>
      <name>DynamicListPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a4fc19efa171d275fa4f4b4fcefe39eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListQuadContainer &gt; &gt;</type>
      <name>DynamicListQuadContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>afdcb14ea535a35713eadd099878a9e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListQuadContainer &gt; &gt;</type>
      <name>DynamicListQuadContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>af710a11e6927a0c33b79722ca2c56b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListSingletonContainer &gt; &gt;</type>
      <name>DynamicListSingletonContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a2548467b9cac5b0dc4971494ef10b133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListSingletonContainer &gt; &gt;</type>
      <name>DynamicListSingletonContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a9fb7a07cbaf63f556bf9f6a14e8ddb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DynamicListTripletContainer &gt; &gt;</type>
      <name>DynamicListTripletContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a46cdb098d0fe719380842b2278d25950</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DynamicListTripletContainer &gt; &gt;</type>
      <name>DynamicListTripletContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad8df1d1a51677248bd8afc6a25d24ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerPairFilter &gt; &gt;</type>
      <name>InContainerPairFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aefaf9d3fbf6f7601312045ec092821fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerPairFilter &gt; &gt;</type>
      <name>InContainerPairFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a982609bff1f4dcfcd1632afc01e19b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerQuadFilter &gt; &gt;</type>
      <name>InContainerQuadFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a5c0ecbd253fb6d4fe34741d4dd56233c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerQuadFilter &gt; &gt;</type>
      <name>InContainerQuadFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a1502800049f9782f6cbd08e963c9b2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerSingletonFilter &gt; &gt;</type>
      <name>InContainerSingletonFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a1af135b084ba2a1a27429d750e14e289</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerSingletonFilter &gt; &gt;</type>
      <name>InContainerSingletonFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a536ea093c66fc356c54c2d710a9aff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; InContainerTripletFilter &gt; &gt;</type>
      <name>InContainerTripletFilters</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a6b4b5d8d02702ec1bd27bbcd27034b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; InContainerTripletFilter &gt; &gt;</type>
      <name>InContainerTripletFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a2f2055344a31fad01166e301260973cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListPairContainer &gt; &gt;</type>
      <name>ListPairContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0bfc33c66df65fb3fb2a95f2732e0eb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListPairContainer &gt; &gt;</type>
      <name>ListPairContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a315e0202a6ea9ca6d918434802b61780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListQuadContainer &gt; &gt;</type>
      <name>ListQuadContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ace3d4ddd1edc022d7635626856fdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListQuadContainer &gt; &gt;</type>
      <name>ListQuadContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aa4cc42f995b38ccd05ed8d6f2bc405a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListSingletonContainer &gt; &gt;</type>
      <name>ListSingletonContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0c960d6625149ebd5485e75a2c8fa864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListSingletonContainer &gt; &gt;</type>
      <name>ListSingletonContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aa020c60ae56aaa6d9afd3ac99821c4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListTripletContainer &gt; &gt;</type>
      <name>ListTripletContainers</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab44dfacb41c080d6bc341abd0a1dbd0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListTripletContainer &gt; &gt;</type>
      <name>ListTripletContainersTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a38713b691ed1153f284f644fc5cd003a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumPairScore &gt; &gt;</type>
      <name>MinimumPairScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>adf6f030c4f9b738ad6ce681dc67b39a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumPairScore &gt; &gt;</type>
      <name>MinimumPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad5e7afb27da4bc6bf8487ca945b24f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumQuadScore &gt; &gt;</type>
      <name>MinimumQuadScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a05c08253cdc39e2ae53a9bded3136992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumQuadScore &gt; &gt;</type>
      <name>MinimumQuadScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab7a49850be02fcb015cfdef3545ff68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumSingletonScore &gt; &gt;</type>
      <name>MinimumSingletonScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a67d411ba2f1bdee42a3a747824200f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumSingletonScore &gt; &gt;</type>
      <name>MinimumSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac1741328096dd0c9db98e2fddbd417fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumTripletScore &gt; &gt;</type>
      <name>MinimumTripletScores</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a23598555ef98c7182bfc7055a1341bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumTripletScore &gt; &gt;</type>
      <name>MinimumTripletScoresTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a02aa4ff791824c1faf60363594a8ce1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsConstraint &gt; &gt;</type>
      <name>PairsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ad9a3218e50c6822678826da336c988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsConstraint &gt; &gt;</type>
      <name>PairsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a80d0f23edb63bf732e65faad9a6dfce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsOptimizerState &gt; &gt;</type>
      <name>PairsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac631f2dc21f829aee9b0b7243628cae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsOptimizerState &gt; &gt;</type>
      <name>PairsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a55baab82bcba09e5c54d7b44289fdfa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairsRestraint &gt; &gt;</type>
      <name>PairsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab6a99a2e056d910c1690256462186671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairsRestraint &gt; &gt;</type>
      <name>PairsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a8d401477694732f814c6d2c47e8049b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsConstraint &gt; &gt;</type>
      <name>QuadsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ab35b4ba081af0a8999d7b9388b9e3d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsConstraint &gt; &gt;</type>
      <name>QuadsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a8ff5943009e553ef39da0a83851dd156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsOptimizerState &gt; &gt;</type>
      <name>QuadsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7c6785a04e123df0491d06fc27dc5121</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsOptimizerState &gt; &gt;</type>
      <name>QuadsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0b8b7ee781a7bc8d0f68c632a58c6766</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; QuadsRestraint &gt; &gt;</type>
      <name>QuadsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a56c2b74fe12ee30eb803a75606e2411c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; QuadsRestraint &gt; &gt;</type>
      <name>QuadsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad87ecf1cb87c8cd2f26115f9fb737782</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsConstraint &gt; &gt;</type>
      <name>SingletonsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a69184cac135b1d6d069af401d7cee774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsConstraint &gt; &gt;</type>
      <name>SingletonsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a44f8d9385e928f4d3dc443eb2032f247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsOptimizerState &gt; &gt;</type>
      <name>SingletonsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a18122427917eb217b95fb3dd357da7e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsOptimizerState &gt; &gt;</type>
      <name>SingletonsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7dec1a3499bc08f2bec251174b569360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SingletonsRestraint &gt; &gt;</type>
      <name>SingletonsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a6371908c5084ed828b6a6cbb4dd96988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SingletonsRestraint &gt; &gt;</type>
      <name>SingletonsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>afc4395004b31afccd8fe5bc40329c474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsConstraint &gt; &gt;</type>
      <name>TripletsConstraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a44ab040927300f18702d1ca5bbc9c2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsConstraint &gt; &gt;</type>
      <name>TripletsConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a74cb9a9a72868f91c3516557be05ba63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsOptimizerState &gt; &gt;</type>
      <name>TripletsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aac86e6c64651f94c12c75973726678f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsOptimizerState &gt; &gt;</type>
      <name>TripletsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a7ccad8a4528d4eb9ae4bcf13e9a0bdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TripletsRestraint &gt; &gt;</type>
      <name>TripletsRestraints</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>aefbae684bced6abf914392580cbfc08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TripletsRestraint &gt; &gt;</type>
      <name>TripletsRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a4c35a3b8c05ef10bc1682fe34769f62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Constraint *</type>
      <name>create_constraint</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a0e72bed2aebfee3bc2cf60a2a23cfa45</anchor>
      <arglist>(Before *b, After *a, Container *c, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>PairPredicate *</type>
      <name>create_in_container_filter</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a38623c7bf5f1b07e8f093aedce4f44ef</anchor>
      <arglist>(Container *c, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_restraint</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ad05b9be19e11c1364862cf8e032768e9</anchor>
      <arglist>(Score *s, Container *c, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_slack_estimate</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ac8965a95934fc142a9797c44fdc03d88</anchor>
      <arglist>(Model *m, ParticleIndexes ps, double upper_bound, double step, const RestraintsTemp &amp;restraints, bool derivatives, Optimizer *opt, ClosePairContainer *cpc)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a6b01e81f954a3c13aa22c7743fcae64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>a2c626d560d575bd96dd14d5f91c5c55d</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1container.html</anchorfile>
      <anchor>ae1846034b00a92cb9bc36b0bd055f108</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::AllBipartitePairContainer</name>
    <filename>classIMP_1_1container_1_1AllBipartitePairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1AllBipartitePairContainer.html</anchorfile>
      <anchor>a263c5adddb9245f40bed85c794e49511</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllBipartitePairContainer.html</anchorfile>
      <anchor>a9f7a29ec5c98621808b0f3b95d7e97ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllBipartitePairContainer.html</anchorfile>
      <anchor>af048f680062fe233b7e830f78af1d9b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllBipartitePairContainer.html</anchorfile>
      <anchor>a382e08e04f69cc957a11a125db59a5e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1AllBipartitePairContainer.html</anchorfile>
      <anchor>a6919824d107703d71158c4e590b40979</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::AllPairContainer</name>
    <filename>classIMP_1_1container_1_1AllPairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>AllPairContainer</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>af3b744e61af8d9d982321faa2f3f1d1b</anchor>
      <arglist>(SingletonContainerAdaptor c, std::string name=&quot;AllPairContainer%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>a720b31617485b1527080ceacb43030ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>a42763a1231569ab26c101ce649e294e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>a56b2b558211c212c7695bf9bb7adc90e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>a9e5645a0d63a7ed2362cc18f0e2bb30e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1AllPairContainer.html</anchorfile>
      <anchor>a3a875947efd33e1a692c587685c55f95</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::CloseBipartitePairContainer</name>
    <filename>classIMP_1_1container_1_1CloseBipartitePairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>CloseBipartitePairContainer</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>afa0bdd7250c318333de927ea873b11c6</anchor>
      <arglist>(SingletonContainerAdaptor a, SingletonContainerAdaptor b, double distance, double slack=1, std::string name=&quot;CloseBipartitePairContainer%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>ad5bb22d6c20a9cdb3e6922d7539faaf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>aae326a7f4a274edc03713b317e99eaf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>a57ed673005f3f091b4214aca3a242107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>adb5cee1e1f9c448726a207a29ab89033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>a716be53e4501823d55fb420353b54c68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>pair_filters</name>
      <anchorfile>classIMP_1_1container_1_1CloseBipartitePairContainer.html</anchorfile>
      <anchor>ae19db8cc7396af19e46b1ecd037910c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ClosePairContainer</name>
    <filename>classIMP_1_1container_1_1ClosePairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>ClosePairContainer</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>aa7b183795bd28ab268e5e84a5ad0cd99</anchor>
      <arglist>(SingletonContainerAdaptor c, double distance_cutoff, double slack=1, std::string name=&quot;ClosePairContainer%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosePairContainer</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a19f52fd2b6c1f34261b304f5870ac9ca</anchor>
      <arglist>(SingletonContainerAdaptor c, double distance_cutoff, core::ClosePairsFinder *cpf, double slack=1, std::string name=&quot;ClosePairContainer%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a2912ffb94cbfb5984524f823b79a20f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>aacaec307a253333b49f28964e0d75cb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>af239a0a91f8a7f808058e1621f7c3beb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_full_rebuilds</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a7eedfb1d52634ea10536ea17afb3e8fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_partial_rebuilds</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a9bad58864c152d590a0ddb41dce7b1d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_update_calls</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a3339e0e4fb3dc3eeae7162f8e7c8256e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>ab67cbb6c4475c79bc21f949ac0c1f555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a2428f7f09f3231fef7ee1c26fde88934</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>pair_filters</name>
      <anchorfile>classIMP_1_1container_1_1ClosePairContainer.html</anchorfile>
      <anchor>a16378ea04d0a22cf56b92f2453849630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ConnectingPairContainer</name>
    <filename>classIMP_1_1container_1_1ConnectingPairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>ConnectingPairContainer</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>a35da194925a5f1cbf02b5ae6c86a49a5</anchor>
      <arglist>(SingletonContainer *sc, double error)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>a785e6866ef91b8a40b13029a7c02dcc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>a67dd9abbb047ffcc34ffe1b9c63deb38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>ab386889b20468cd900889274c5e18123</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>a157ee3c62b446a32f9de4c006b560f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ConnectingPairContainer.html</anchorfile>
      <anchor>a1721e1c17b5596ae45310354ddcda0b6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ConsecutivePairContainer</name>
    <filename>classIMP_1_1container_1_1ConsecutivePairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>a0d51d022015a9cff42190f549a40b6f4</anchor>
      <arglist>(F *f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>a46d245a2661ea8ebc4e97bfb80707abb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>a8486fabfae14f299e4cbe771d380b9d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>a032e74eda858527a6f84aee206e1d5d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>a27b77f184fa6392791f94bed4b3f0a40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairContainer.html</anchorfile>
      <anchor>aa8d192b014f93d5f44c0c3bc5971db20</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ConsecutivePairFilter</name>
    <filename>classIMP_1_1container_1_1ConsecutivePairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function">
      <type></type>
      <name>ConsecutivePairFilter</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairFilter.html</anchorfile>
      <anchor>a2e0d4f04b8080a9c0d77a9a0e1a68ba5</anchor>
      <arglist>(ConsecutivePairContainer *cpc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairFilter.html</anchorfile>
      <anchor>a64694402d24689d58b1eeb9e48fc4407</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairFilter.html</anchorfile>
      <anchor>aaf3a70e018529e225fa4b33b9aab3558</anchor>
      <arglist>(Model *, const ParticleIndexPair &amp;pip) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ConsecutivePairFilter.html</anchorfile>
      <anchor>ace071852674fb3183446885b02646928</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DistributePairsScoreState</name>
    <filename>classIMP_1_1container_1_1DistributePairsScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>DynamicListPairContainer *</type>
      <name>add_predicate</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>a905137252f92c0e5df1ce56f59dcc8ef</anchor>
      <arglist>(PairPredicate *predicate, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>af7ccfe3a990c3bd80995d1d7482ef19a</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>a2aea1de7f937a9ff7dd757c554b18b1e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>a49d3877301c81e7c000195417eac5ec8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>a83371c2484a64d8dba5cc505ba07eb5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DistributePairsScoreState.html</anchorfile>
      <anchor>a478e0711dc9a0082c9656586b4c73f87</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DistributeQuadsScoreState</name>
    <filename>classIMP_1_1container_1_1DistributeQuadsScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>DynamicListQuadContainer *</type>
      <name>add_predicate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>a5fd9074e32c95ec367b06b5a40fd72ab</anchor>
      <arglist>(QuadPredicate *predicate, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>aad8e61d3e168f239e7b35b84a77c973d</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>a7971007e723bcb061bbeb6d77765f1fe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>a25027b667ab943966fb80eddb9c9cdb1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>a81e665420b0647bf5a855bebe70a129d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DistributeQuadsScoreState.html</anchorfile>
      <anchor>a62a1ac3837ee57165e3ef1cd345cc4e0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DistributeSingletonsScoreState</name>
    <filename>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>DynamicListSingletonContainer *</type>
      <name>add_predicate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>aace32527df07ef4c4e84dfd4f96ac46c</anchor>
      <arglist>(SingletonPredicate *predicate, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>a6dd560f06ab8eeca90b5078a676e72e2</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>a5aff95d77afc6ae22395b25610f23da4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>a9ce26ef3a2b15440c442c900439f3c4a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>aacad623c45b112ff200ce2443f4634d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DistributeSingletonsScoreState.html</anchorfile>
      <anchor>a5ec5d3a7147d1fed9d9c88b56b2f0e98</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DistributeTripletsScoreState</name>
    <filename>classIMP_1_1container_1_1DistributeTripletsScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>DynamicListTripletContainer *</type>
      <name>add_predicate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>a73b67981a22dc16bb6dc985ff85e26ae</anchor>
      <arglist>(TripletPredicate *predicate, int value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>ac3c2a81333ef507e21dc6659396c8fb0</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>ab4622ddcc4c13c784eb0ecc6c4d95a40</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>a82d3b9053c309d4db96b7add39417dc4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>a4c727fa69a4bb93b3039c4aa534ba001</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DistributeTripletsScoreState.html</anchorfile>
      <anchor>a468847b73fca37ca5ab9acebc137eaa0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DynamicListPairContainer</name>
    <filename>classIMP_1_1container_1_1DynamicListPairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>DynamicListPairContainer</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>a6e9761b23a0132a9af1980e5e3749db9</anchor>
      <arglist>(Container *scope, std::string name=&quot;ListPairContainer %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>a503ebbc5e13cdb47012b7cf5c642107f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>a7340d80d5c31317ce9788b8b33067f37</anchor>
      <arglist>(const ParticleIndexPair &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>a63f2bac944bf2446ea6c04ae9726777e</anchor>
      <arglist>(const ParticleIndexPairs &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>a83fd89871b8c7a3c66c6eda524f134a8</anchor>
      <arglist>(ParticleIndexPairs cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListPairContainer.html</anchorfile>
      <anchor>aa8db2eb67301b462b4690d5ab820bded</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DynamicListQuadContainer</name>
    <filename>classIMP_1_1container_1_1DynamicListQuadContainer.html</filename>
    <base>IMP::QuadContainer</base>
    <member kind="function">
      <type></type>
      <name>DynamicListQuadContainer</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>af4b3b9738040d6e073879056c7553be5</anchor>
      <arglist>(Container *scope, std::string name=&quot;ListQuadContainer %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>a06c501bec30c08383e12f99200117370</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>a727e34ebe18cc054d5d22dd51617c083</anchor>
      <arglist>(const ParticleIndexQuad &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>a8026f699962bf8252e4feab0e073e763</anchor>
      <arglist>(const ParticleIndexQuads &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>a6c7380db5e5b48802893d0e8b4b2820a</anchor>
      <arglist>(ParticleIndexQuads cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListQuadContainer.html</anchorfile>
      <anchor>ab75a771102155c515435cd5e8428f214</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DynamicListSingletonContainer</name>
    <filename>classIMP_1_1container_1_1DynamicListSingletonContainer.html</filename>
    <base>IMP::SingletonContainer</base>
    <member kind="function">
      <type></type>
      <name>DynamicListSingletonContainer</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>a3492d7b9a5f380642700c2f05146efc7</anchor>
      <arglist>(Container *scope, std::string name=&quot;ListSingletonContainer %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>a069afeef43ce1f9063379275361ddb6c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>ad4a04b4aa68e690ec8a5b153410f1de7</anchor>
      <arglist>(ParticleIndex vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>ac8845bc5f91c593e0bd9e489b1d5f22b</anchor>
      <arglist>(const ParticleIndexes &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>aabbbd02197c4883608a9337caa5d45b9</anchor>
      <arglist>(ParticleIndexes cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListSingletonContainer.html</anchorfile>
      <anchor>a3da429b165b95aed53fb5672a8ac4c83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::DynamicListTripletContainer</name>
    <filename>classIMP_1_1container_1_1DynamicListTripletContainer.html</filename>
    <base>IMP::TripletContainer</base>
    <member kind="function">
      <type></type>
      <name>DynamicListTripletContainer</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>a8024d47a46737c285cf41fe8e2de5248</anchor>
      <arglist>(Container *scope, std::string name=&quot;ListTripletContainer %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>a3390516c18da2a63364dc7c3b5d35707</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>a22378aab7c4944448d6e92f4d0b06381</anchor>
      <arglist>(const ParticleIndexTriplet &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>aa39f96a6cf0e5029634fc45650990819</anchor>
      <arglist>(const ParticleIndexTriplets &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>a51d91db74779ea2e42d8ef19d5ca60fd</anchor>
      <arglist>(ParticleIndexTriplets cp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1DynamicListTripletContainer.html</anchorfile>
      <anchor>a479de52037b5d04e84f4c777054e3bc5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::EventPairsOptimizerState</name>
    <filename>classIMP_1_1container_1_1EventPairsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1EventPairsOptimizerState.html</anchorfile>
      <anchor>a5e6ea4a6538d136240094097910dc042</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1EventPairsOptimizerState.html</anchorfile>
      <anchor>a310f27c31635073a7481fa5df129657a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::EventQuadsOptimizerState</name>
    <filename>classIMP_1_1container_1_1EventQuadsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1EventQuadsOptimizerState.html</anchorfile>
      <anchor>a407f8caa645883d391ba2fcb3851d8d2</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1EventQuadsOptimizerState.html</anchorfile>
      <anchor>a8d70721101abb838e8684b03255caaff</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::EventSingletonsOptimizerState</name>
    <filename>classIMP_1_1container_1_1EventSingletonsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1EventSingletonsOptimizerState.html</anchorfile>
      <anchor>ad13729de18a519a2a7cd000486dc96d0</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1EventSingletonsOptimizerState.html</anchorfile>
      <anchor>a3198fa0278cb61bdc2d6f0c4f120ab59</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::EventTripletsOptimizerState</name>
    <filename>classIMP_1_1container_1_1EventTripletsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1EventTripletsOptimizerState.html</anchorfile>
      <anchor>aea1fa4a842b7f4839d754290d41da938</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1EventTripletsOptimizerState.html</anchorfile>
      <anchor>ae00b0a02c4781514f4eae50707cd1fae</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ExclusiveConsecutivePairContainer</name>
    <filename>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>aa340360f79db7123c2cba2d05f919093</anchor>
      <arglist>(F *f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>aee8ed59fe7f15d182ef692c968b1143c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>aeb5f32335c59c7eb4a30ef7001b4bcf5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>acb4d26b1544884753a7c23c1a3d3540b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_range_indexes</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>a58e690ec52e20b319856d76a88080983</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>a2ce7ed54e82bd4969b45e5d88c23ed5f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_destroy</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairContainer.html</anchorfile>
      <anchor>ac8bf83898aa0e8a20f03c779cc8d4f22</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ExclusiveConsecutivePairFilter</name>
    <filename>classIMP_1_1container_1_1ExclusiveConsecutivePairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairFilter.html</anchorfile>
      <anchor>af5287890f9135c4b638abad36b78d4d5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairFilter.html</anchorfile>
      <anchor>a6c3b3ec8ebc352cbaa2c55951cc90212</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ExclusiveConsecutivePairFilter.html</anchorfile>
      <anchor>a96c54908fae456885dd090090a10ecdf</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::InContainerPairFilter</name>
    <filename>classIMP_1_1container_1_1InContainerPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1InContainerPairFilter.html</anchorfile>
      <anchor>a4797bc8e9e1d1fd1ecc282d980fa555f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1InContainerPairFilter.html</anchorfile>
      <anchor>a154547ff7c3e4c02cedd872e2c1a0f18</anchor>
      <arglist>(Model *, const ParticleIndexPair &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1InContainerPairFilter.html</anchorfile>
      <anchor>a512612247ec285bf5832b8464327bc39</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::InContainerQuadFilter</name>
    <filename>classIMP_1_1container_1_1InContainerQuadFilter.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1InContainerQuadFilter.html</anchorfile>
      <anchor>a78b9fad80c41fbf3db2c5f975de31829</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1InContainerQuadFilter.html</anchorfile>
      <anchor>affc0ca62c751c062c39b4e03a02c7452</anchor>
      <arglist>(Model *, const ParticleIndexQuad &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1InContainerQuadFilter.html</anchorfile>
      <anchor>a21ee7ee5bc957f8b2cf36aaf546972b7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::InContainerSingletonFilter</name>
    <filename>classIMP_1_1container_1_1InContainerSingletonFilter.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1InContainerSingletonFilter.html</anchorfile>
      <anchor>ad82d57ddad7035c7bc010b8bddb2ba65</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1InContainerSingletonFilter.html</anchorfile>
      <anchor>acc80741678a6b4ac8c927cd26e536c31</anchor>
      <arglist>(Model *, ParticleIndex vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1InContainerSingletonFilter.html</anchorfile>
      <anchor>ab434cf92695ad1084daef1052a3351c3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::InContainerTripletFilter</name>
    <filename>classIMP_1_1container_1_1InContainerTripletFilter.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1InContainerTripletFilter.html</anchorfile>
      <anchor>ae7bb78a5a069659b0ed069bd68f14256</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1container_1_1InContainerTripletFilter.html</anchorfile>
      <anchor>a5df841f7673a0340c1d931bf07a66674</anchor>
      <arglist>(Model *, const ParticleIndexTriplet &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1InContainerTripletFilter.html</anchorfile>
      <anchor>a4415d38a5a2708bfcf2967ae4f2ee8bc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ListPairContainer</name>
    <filename>classIMP_1_1container_1_1ListPairContainer.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListPairContainer.html</anchorfile>
      <anchor>a9df2b8c7c684ebbba9bea04035562aea</anchor>
      <arglist>(const ParticleIndexPair &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListPairContainer.html</anchorfile>
      <anchor>a9df38e82352abba775fbf4ba4e12ec56</anchor>
      <arglist>(const ParticleIndexPairs &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1ListPairContainer.html</anchorfile>
      <anchor>a16b26aac5286f7dda93043d10a5385c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ListPairContainer.html</anchorfile>
      <anchor>ae2e4132e8c4fabaad2e26e4c15849589</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1ListPairContainer.html</anchorfile>
      <anchor>aee921448f8d92e4419186c9d35b507f2</anchor>
      <arglist>(ParticleIndexPairs cp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ListQuadContainer</name>
    <filename>classIMP_1_1container_1_1ListQuadContainer.html</filename>
    <base>IMP::QuadContainer</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListQuadContainer.html</anchorfile>
      <anchor>a12e7f280f7e14ed4bc246fe526057c54</anchor>
      <arglist>(const ParticleIndexQuad &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListQuadContainer.html</anchorfile>
      <anchor>abd3646e1d6e45cd963a40ed4ada235ff</anchor>
      <arglist>(const ParticleIndexQuads &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1ListQuadContainer.html</anchorfile>
      <anchor>a407f4e395cb6f5b6957d00087d573490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ListQuadContainer.html</anchorfile>
      <anchor>ad69af7d05d0dc1a57073f613ae79cf4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1ListQuadContainer.html</anchorfile>
      <anchor>afffc349e0c582e11970fd5a4ba5d12bc</anchor>
      <arglist>(ParticleIndexQuads cp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ListSingletonContainer</name>
    <filename>classIMP_1_1container_1_1ListSingletonContainer.html</filename>
    <base>IMP::SingletonContainer</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListSingletonContainer.html</anchorfile>
      <anchor>a7194825f8cc518c9d65553ddebcf6551</anchor>
      <arglist>(ParticleIndex vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListSingletonContainer.html</anchorfile>
      <anchor>a62e07f863f02e2719084e724ee41e501</anchor>
      <arglist>(const ParticleIndexes &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1ListSingletonContainer.html</anchorfile>
      <anchor>a87a1bf8cd874f38e0c7e5547b3cd2085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ListSingletonContainer.html</anchorfile>
      <anchor>aea5ca5f30fcd1ff4dd6d55a2175edcf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1ListSingletonContainer.html</anchorfile>
      <anchor>a0d1c58a0cf8fcedab37c9b7796c5a338</anchor>
      <arglist>(ParticleIndexes cp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::ListTripletContainer</name>
    <filename>classIMP_1_1container_1_1ListTripletContainer.html</filename>
    <base>IMP::TripletContainer</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListTripletContainer.html</anchorfile>
      <anchor>ad8f21b6fdd92e7a487f5346b99b6d32d</anchor>
      <arglist>(const ParticleIndexTriplet &amp;vt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1container_1_1ListTripletContainer.html</anchorfile>
      <anchor>a0506f893723cb8d833c1c3896b1d242e</anchor>
      <arglist>(const ParticleIndexTriplets &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1container_1_1ListTripletContainer.html</anchorfile>
      <anchor>ab9033f6ee0ab56523b728f420908c72e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1ListTripletContainer.html</anchorfile>
      <anchor>a88a32cf5fd31d988b79cc9a44d98a5f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classIMP_1_1container_1_1ListTripletContainer.html</anchorfile>
      <anchor>a345f7f74a9088b796190599b31ae14a5</anchor>
      <arglist>(ParticleIndexTriplets cp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumPairRestraint</name>
    <filename>classIMP_1_1container_1_1MinimumPairRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MinimumPairRestraint</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairRestraint.html</anchorfile>
      <anchor>a9eb8eb9fdfcfe383257055de264ae393</anchor>
      <arglist>(PairScore *f, PairContainerAdaptor c, unsigned int n=1, std::string name=&quot;MinimumPairRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairRestraint.html</anchorfile>
      <anchor>acd7ff237a784b0cbdacbf67e1657c8e3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairRestraint.html</anchorfile>
      <anchor>a21745843143a2df77b883f0929929d11</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairRestraint.html</anchorfile>
      <anchor>ad24c376ef93b26c0da48427e3ab61b59</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairRestraint.html</anchorfile>
      <anchor>afa3d3747e14fd41d9811e281c8f2b69e</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumPairScore</name>
    <filename>classIMP_1_1container_1_1MinimumPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>a387f5c52a28394d4f915a671f6743312</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>ab94f4912e6a67b623c909f4918ab621f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>ad112b4dbe75b6736a9c52f9943e79f02</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>a6075198333cfdef4d2cb56f37d4da9b7</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>a2618fedf52388740fed402b2cf53643c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>aba3250a8eb83bb8983741ad151009760</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>a284327f795a192d42eb4163ba0f975d1</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumPairScore.html</anchorfile>
      <anchor>ab8be7bef9aedba065d2a21a8e51b3d12</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumQuadRestraint</name>
    <filename>classIMP_1_1container_1_1MinimumQuadRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MinimumQuadRestraint</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadRestraint.html</anchorfile>
      <anchor>a5e4ef73d56f6be06820b101556f9a2d4</anchor>
      <arglist>(QuadScore *f, QuadContainerAdaptor c, unsigned int n=1, std::string name=&quot;MinimumQuadRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadRestraint.html</anchorfile>
      <anchor>a7f2790e0d987a2a8c09f09372cda6961</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadRestraint.html</anchorfile>
      <anchor>a64584d72ae4787ce0a11c0ce2856717a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadRestraint.html</anchorfile>
      <anchor>adab5224511ef16a85ddb9abcab39ddc4</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadRestraint.html</anchorfile>
      <anchor>ae1189b85c0a94f6f45e8278ca07e2ca2</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumQuadScore</name>
    <filename>classIMP_1_1container_1_1MinimumQuadScore.html</filename>
    <base>IMP::QuadScore</base>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a51054c131f17718ae228afeb4d688f22</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a56237bb4ca2b775f3c067a4719266463</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a9e5b0d8a48e82036746ca4fa823c932a</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a37a2eb97b0a78bcd9e4310015a82b37c</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;vt, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a70a70f937a6009568ac3636c83d29d8e</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a8a1081ce1feed054a87c8e7dcb5d3346</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a7dab8dbe443c7dc2287d01252dbbb916</anchor>
      <arglist>(Model *m, const ParticleIndexQuads &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumQuadScore.html</anchorfile>
      <anchor>a8762a50b51c4e7e56961f11a10e83cd6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumSingletonRestraint</name>
    <filename>classIMP_1_1container_1_1MinimumSingletonRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MinimumSingletonRestraint</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonRestraint.html</anchorfile>
      <anchor>afc6016d7b8306d113c7aac80f9fad916</anchor>
      <arglist>(SingletonScore *f, SingletonContainerAdaptor c, unsigned int n=1, std::string name=&quot;MinimumSingletonRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonRestraint.html</anchorfile>
      <anchor>a767194c48b86ba8e9be0e3a4b5b2471d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonRestraint.html</anchorfile>
      <anchor>ace4cc4a1182771083f1e94313f7d5ba3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonRestraint.html</anchorfile>
      <anchor>a37b992f313f321d9d3cdc20b0e289b9c</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonRestraint.html</anchorfile>
      <anchor>a486251269cf7cc0b2f083abef8c6c20b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumSingletonScore</name>
    <filename>classIMP_1_1container_1_1MinimumSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>ac325af49650daeed0d7bc176e3c2da30</anchor>
      <arglist>(Model *m, ParticleIndex vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>a4d03dd3b58ec0f5a80aa3dba7cd6ecf8</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>aa97feab509515f1aa20bc80d05d46d0f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>ae682ecdfdd62befb86f82496c1365127</anchor>
      <arglist>(Model *m, ParticleIndex vt, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>aaff50091b570cde86e5545d43fab2b7b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>a3ee21722936c9a1b64a9044efa6dee7a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>a379e9f9b18c1c462f3c8449fc74c5de2</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumSingletonScore.html</anchorfile>
      <anchor>a3cc214f9c00a7884ab206be03dffad29</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumTripletRestraint</name>
    <filename>classIMP_1_1container_1_1MinimumTripletRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MinimumTripletRestraint</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletRestraint.html</anchorfile>
      <anchor>ab3fe22bd709e5092001fb5475fb20162</anchor>
      <arglist>(TripletScore *f, TripletContainerAdaptor c, unsigned int n=1, std::string name=&quot;MinimumTripletRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletRestraint.html</anchorfile>
      <anchor>a4a70fef164112bb3c4e0acdc9d40f348</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletRestraint.html</anchorfile>
      <anchor>af4bfd9dc8d55daf618f1b4dccfa87192</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletRestraint.html</anchorfile>
      <anchor>ac3a3dc629d61b6dd30298ba22a7e1b1a</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletRestraint.html</anchorfile>
      <anchor>a0be3550c8769705e6471a8e8c28f1715</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::MinimumTripletScore</name>
    <filename>classIMP_1_1container_1_1MinimumTripletScore.html</filename>
    <base>IMP::TripletScore</base>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>a9c7112fb8c30eb26f6780465dd2c1fa4</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>a1f23f9959652fb67ddb351baca54ceab</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>aebdaef6c14223f9a447c3dfde6e0d433</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>a97c6eea634bfd177126e8498f47273fe</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;vt, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>a7e5edc3980307536b6dafc8004c865b8</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>a3b386d3c296e0be35ac60c3386c2b00c</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>ac64e658100873f7403f293e4fa031943</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1MinimumTripletScore.html</anchorfile>
      <anchor>aabd51d38ee165586e34badd93c5a8ec2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PairContainerSet</name>
    <filename>classIMP_1_1container_1_1PairContainerSet.html</filename>
    <base>IMP::PairContainer</base>
    <member kind="function">
      <type></type>
      <name>PairContainerSet</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>aa3227ffcf1eb25050e4807b36b31f615</anchor>
      <arglist>(Model *m, std::string name=&quot;PairContainerSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>a0e33769cedde9c1120d0cddc7ffbd60b</anchor>
      <arglist>(const M *m) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>a8bf14bca242623c31ba1db63b07370e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>a3bd84a3b4291df676bf662a7627272c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>get_indexes_in_place</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>afd59a605c22c896d00d3b19fb448a17e</anchor>
      <arglist>(ParticleIndexPairs &amp;output) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>pair_containers</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerSet.html</anchorfile>
      <anchor>a39a2e848c1b2117e19a416673db67daa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PairContainerStatistics</name>
    <filename>classIMP_1_1container_1_1PairContainerStatistics.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>a1a59037b5178460a1a3d383b0c843798</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>a9971f3b7bec51867584a8885ee2fc3b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>a023b0613cd2211dbf084f17f1a796235</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>a617e7c1f5c2c2c798ac5c6e9f0ac6b97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>a99c22c55be6110504a9b7adc8156313d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_track_unique</name>
      <anchorfile>classIMP_1_1container_1_1PairContainerStatistics.html</anchorfile>
      <anchor>abdeca4feb824463c5a3c88ee7f5ae07c</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PairsConstraint</name>
    <filename>classIMP_1_1container_1_1PairsConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function">
      <type></type>
      <name>PairsConstraint</name>
      <anchorfile>classIMP_1_1container_1_1PairsConstraint.html</anchorfile>
      <anchor>a26a23d76b5e516905ca31cb7ae426e6a</anchor>
      <arglist>(PairModifier *before, PairModifier *after, PairContainerAdaptor c, std::string name=&quot;PairsConstraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PairsConstraint.html</anchorfile>
      <anchor>a624808749bb574a76c5263b73c40a8d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PairsConstraint.html</anchorfile>
      <anchor>abfdb1972ae6a1c7a1ce6b94b3ddd11ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1PairsConstraint.html</anchorfile>
      <anchor>acd63422124305a5f8ef4e2e118ead412</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PairsOptimizerState</name>
    <filename>classIMP_1_1container_1_1PairsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>PairsOptimizerState</name>
      <anchorfile>classIMP_1_1container_1_1PairsOptimizerState.html</anchorfile>
      <anchor>ac34edec94ea948a2010887bac5862e01</anchor>
      <arglist>(PairContainerAdaptor c, PairModifier *gf, std::string name=&quot;PairsOptimizerState %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1PairsOptimizerState.html</anchorfile>
      <anchor>ac6fbcc26bc2d6ba6aa41f12fc071101f</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PairsOptimizerState.html</anchorfile>
      <anchor>a0db91ac40ac18b54dbce4840c22c6c7a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PairsRestraint</name>
    <filename>classIMP_1_1container_1_1PairsRestraint.html</filename>
    <base>IMP::Restraint</base>
  </compound>
  <compound kind="class">
    <name>IMP::container::PredicatePairsRestraint</name>
    <filename>classIMP_1_1container_1_1PredicatePairsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>a868f80b85f29fcf07aa1eca87d394a57</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>a9035c457ba89bddc90f402c0f78adfaf</anchor>
      <arglist>(int predicate_value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>afa3e90241fd497148cf818f9f8aa1b45</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_complete</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>a9eabdec2fa689e6e176016b18cd6c3d4</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_get_inputs_ignores_individual_scores</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>aef1e033379018b195360de8b306410ed</anchor>
      <arglist>(bool is_ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>a6ba78aca8bc79b159a22b8f178911ff7</anchor>
      <arglist>(int predicate_value, PairScore *score)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unknown_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicatePairsRestraint.html</anchorfile>
      <anchor>aca389681d4a5bafd230f16cc9443bfa1</anchor>
      <arglist>(PairScore *score)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PredicateQuadsRestraint</name>
    <filename>classIMP_1_1container_1_1PredicateQuadsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>a7181b8aa799785bfa979cf04a8552e33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexQuads</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>a2ab324426e46c99d50c5fde083599230</anchor>
      <arglist>(int predicate_value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>a5c3d487f59d696fae0ecfef4f86d25d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_complete</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>aeb5d5c642ec77f9e69e55f422a42183b</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_get_inputs_ignores_individual_scores</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>aab9e01e192ad0bb6b82d256f457fbb21</anchor>
      <arglist>(bool is_ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>ac3e2a5033fdd0a6d83c6b096c38e1710</anchor>
      <arglist>(int predicate_value, QuadScore *score)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unknown_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateQuadsRestraint.html</anchorfile>
      <anchor>a96b12e640900a821b0cb10f2613430b7</anchor>
      <arglist>(QuadScore *score)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PredicateSingletonsRestraint</name>
    <filename>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>a8f3590352640f629b59ba665a36f0fbd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>afe7b9e126e74db54f3f9023a00b52009</anchor>
      <arglist>(int predicate_value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>a3335f24bebd3cf17ef17b998e655a9a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_complete</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>a631d667261925726f724f7173eafa215</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_get_inputs_ignores_individual_scores</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>aad919453626b6cbb40904a1c10267fc5</anchor>
      <arglist>(bool is_ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>a6cd441a03c4a29e87aa738f98fb3ce91</anchor>
      <arglist>(int predicate_value, SingletonScore *score)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unknown_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateSingletonsRestraint.html</anchorfile>
      <anchor>aeb4a59190b8b6035ca4f61e007e4bad0</anchor>
      <arglist>(SingletonScore *score)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::PredicateTripletsRestraint</name>
    <filename>classIMP_1_1container_1_1PredicateTripletsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>ac23c519897266eb9cbb56250fc221296</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexTriplets</type>
      <name>get_indexes</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>ae9d908987296d5274473dcb210c9a69e</anchor>
      <arglist>(int predicate_value) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>a1e4835ab03a07617bd1ccde05a57cd39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_complete</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>a3784ffe3a6e5f5d6416c4778a43c331b</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_get_inputs_ignores_individual_scores</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>aa2c1518b201fcf6becc9ee9166bd35bf</anchor>
      <arglist>(bool is_ignore)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>a6fa8b5fc0f53c9c22b67085342ad8e72</anchor>
      <arglist>(int predicate_value, TripletScore *score)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unknown_score</name>
      <anchorfile>classIMP_1_1container_1_1PredicateTripletsRestraint.html</anchorfile>
      <anchor>abb02987a9c403f856a81a45133168d39</anchor>
      <arglist>(TripletScore *score)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::QuadContainerSet</name>
    <filename>classIMP_1_1container_1_1QuadContainerSet.html</filename>
    <base>IMP::QuadContainer</base>
    <member kind="function">
      <type></type>
      <name>QuadContainerSet</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>a8238ca46daa52f533dd384cea04976ec</anchor>
      <arglist>(Model *m, std::string name=&quot;QuadContainerSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>a139799fbb662c00950e854b9b2a50bc9</anchor>
      <arglist>(const M *m) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>aef9b2be20d398e7c00ec72a867df0bac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>a881937021c94e22eae98dad41a6f520a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>get_indexes_in_place</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>ad03a196f468a9ad09068fa4d47faa411</anchor>
      <arglist>(ParticleIndexQuads &amp;output) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>quad_containers</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerSet.html</anchorfile>
      <anchor>a5744f717070c5931edf56f250ad03c6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::QuadContainerStatistics</name>
    <filename>classIMP_1_1container_1_1QuadContainerStatistics.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>af825d8eacddfe0b5fbfc452a775936d0</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>a823ea97ac42e6830b7d80c320781376b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>a5d14a7b8d22e1812d9a46dbb62304303</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>a596c09014cb8685c368a2feda1923189</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>a21115e6c22bf9f9505150660aac3612c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_track_unique</name>
      <anchorfile>classIMP_1_1container_1_1QuadContainerStatistics.html</anchorfile>
      <anchor>a313da210745424258d9db18f3ae13e61</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::QuadsConstraint</name>
    <filename>classIMP_1_1container_1_1QuadsConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function">
      <type></type>
      <name>QuadsConstraint</name>
      <anchorfile>classIMP_1_1container_1_1QuadsConstraint.html</anchorfile>
      <anchor>a93c4a08113b8ab7fa391cda89f9d672f</anchor>
      <arglist>(QuadModifier *before, QuadModifier *after, QuadContainerAdaptor c, std::string name=&quot;QuadsConstraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1QuadsConstraint.html</anchorfile>
      <anchor>abb6cb2bca3a2883afd7eec747fb0adb2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1QuadsConstraint.html</anchorfile>
      <anchor>aa02dd804c24411bdf5c2f421c54dd22f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1QuadsConstraint.html</anchorfile>
      <anchor>a90d947408dec49e123a218d54e259a3c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::QuadsOptimizerState</name>
    <filename>classIMP_1_1container_1_1QuadsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>QuadsOptimizerState</name>
      <anchorfile>classIMP_1_1container_1_1QuadsOptimizerState.html</anchorfile>
      <anchor>a657cdc918c306205a3f7274ed8efd4ac</anchor>
      <arglist>(QuadContainerAdaptor c, QuadModifier *gf, std::string name=&quot;QuadsOptimizerState %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1QuadsOptimizerState.html</anchorfile>
      <anchor>aff458d3aedd8cf21b565f8f44f8b5dc7</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1QuadsOptimizerState.html</anchorfile>
      <anchor>ada81bd2555a9c176beaf942061fc65cb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::QuadsRestraint</name>
    <filename>classIMP_1_1container_1_1QuadsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>QuadsRestraint</name>
      <anchorfile>classIMP_1_1container_1_1QuadsRestraint.html</anchorfile>
      <anchor>a1fa60ee163ed082964365e60ab6fe483</anchor>
      <arglist>(QuadScore *ss, QuadContainerAdaptor pc, std::string name=&quot;QuadsRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1QuadsRestraint.html</anchorfile>
      <anchor>a5cb0918b0c625a9494d605a2186d189e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1QuadsRestraint.html</anchorfile>
      <anchor>a58bfa88657d718a5e6295c216e7cdd90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1QuadsRestraint.html</anchorfile>
      <anchor>a65e9e9c6055568e4c95e494f5672c552</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::SingletonContainerSet</name>
    <filename>classIMP_1_1container_1_1SingletonContainerSet.html</filename>
    <base>IMP::SingletonContainer</base>
    <member kind="function">
      <type></type>
      <name>SingletonContainerSet</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>abe81ecf680f8f54ab7eb20c7c4529f39</anchor>
      <arglist>(Model *m, std::string name=&quot;SingletonContainerSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>a91911c02b765d5d66136e246371768a4</anchor>
      <arglist>(const M *m) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>a1804b70cde37afde55d61500969d6c74</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>a49fdc075e9ec79fb15fd0d38daae37e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>get_indexes_in_place</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>a5480bc449d6759b3066952dda55b2a8e</anchor>
      <arglist>(ParticleIndexes &amp;output) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>singleton_containers</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerSet.html</anchorfile>
      <anchor>a2e991c64008ead92c3dbcc0f6815c4c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::SingletonContainerStatistics</name>
    <filename>classIMP_1_1container_1_1SingletonContainerStatistics.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>a36f80e658d2145a95d26050189bd786b</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>a625dfb1481eadf7e4d1ad36888993f0e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>ae9c9350671ff6dc16ce6dd66b995e2c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>aa9ee165efdf3fd9489cdadd55ff4f941</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>adcca63ef3c7f057347b9f0d2dc27e67a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_track_unique</name>
      <anchorfile>classIMP_1_1container_1_1SingletonContainerStatistics.html</anchorfile>
      <anchor>ac3b80e81cae1afcd36a30dfea97025b0</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::SingletonsConstraint</name>
    <filename>classIMP_1_1container_1_1SingletonsConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function">
      <type></type>
      <name>SingletonsConstraint</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsConstraint.html</anchorfile>
      <anchor>a760702d2cb759a7966c3eb443234c5b6</anchor>
      <arglist>(SingletonModifier *before, SingletonModifier *after, SingletonContainerAdaptor c, std::string name=&quot;SingletonsConstraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsConstraint.html</anchorfile>
      <anchor>ab03e1c7a3bfd875425427da524361362</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsConstraint.html</anchorfile>
      <anchor>aea8c60ea1f9b5a883c99d7e74fbd5d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsConstraint.html</anchorfile>
      <anchor>ae6cd738da717d7325151b4b698084f43</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::SingletonsOptimizerState</name>
    <filename>classIMP_1_1container_1_1SingletonsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>SingletonsOptimizerState</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsOptimizerState.html</anchorfile>
      <anchor>adcee3152351b3236bdad5d08366b71f9</anchor>
      <arglist>(SingletonContainerAdaptor c, SingletonModifier *gf, std::string name=&quot;SingletonsOptimizerState %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsOptimizerState.html</anchorfile>
      <anchor>acc0d69806b414846b36d07ba6c6c383b</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsOptimizerState.html</anchorfile>
      <anchor>a374d3fa889be72bfddf6663aaa977c49</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::SingletonsRestraint</name>
    <filename>classIMP_1_1container_1_1SingletonsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>SingletonsRestraint</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsRestraint.html</anchorfile>
      <anchor>a999b26a2d8543e33cf373b469e7b84f9</anchor>
      <arglist>(SingletonScore *ss, SingletonContainerAdaptor pc, std::string name=&quot;SingletonsRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsRestraint.html</anchorfile>
      <anchor>ad18fb23e2f45effd443c9dbe9dacf20e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsRestraint.html</anchorfile>
      <anchor>a1d6662394a1a90967290c9c36c5ad42e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1SingletonsRestraint.html</anchorfile>
      <anchor>a3b2a3bff298c6b911b5de2a8a9b61944</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::TripletContainerSet</name>
    <filename>classIMP_1_1container_1_1TripletContainerSet.html</filename>
    <base>IMP::TripletContainer</base>
    <member kind="function">
      <type></type>
      <name>TripletContainerSet</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>a7bd34675ea866ab48374f62df7149f24</anchor>
      <arglist>(Model *m, std::string name=&quot;TripletContainerSet %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_generic</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>a42411cc13152ac11465da9a79b7a4a3a</anchor>
      <arglist>(const M *m) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_all_possible_indexes</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>a82aee24cf4bd1d4b404247a985b01895</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>a1b70a80d5eab7d3b0a60e39622d5756b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>get_indexes_in_place</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>af18f7be05973e4ef9258f29719017858</anchor>
      <arglist>(ParticleIndexTriplets &amp;output) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>triplet_containers</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerSet.html</anchorfile>
      <anchor>a4fb14ad6a1c042c0dca3d8dce6154dac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::TripletContainerStatistics</name>
    <filename>classIMP_1_1container_1_1TripletContainerStatistics.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>aa0818940cd7171f8052417a4eeeca7ad</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>a0741009eb19c9e2bc77e3af40140cc12</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>a318aceee74ee5a21d29208cff8dbfa73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>a3b94c1c1078c2baa7c1c5ebd9aeede2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>a0067ca67d339544db824ba159f6fcac7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_track_unique</name>
      <anchorfile>classIMP_1_1container_1_1TripletContainerStatistics.html</anchorfile>
      <anchor>a2d72515e42d71d738845ad03d3b08d46</anchor>
      <arglist>(bool tf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::TripletsConstraint</name>
    <filename>classIMP_1_1container_1_1TripletsConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function">
      <type></type>
      <name>TripletsConstraint</name>
      <anchorfile>classIMP_1_1container_1_1TripletsConstraint.html</anchorfile>
      <anchor>a0a627cc40dcc275e1abe2b162834b877</anchor>
      <arglist>(TripletModifier *before, TripletModifier *after, TripletContainerAdaptor c, std::string name=&quot;TripletsConstraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1TripletsConstraint.html</anchorfile>
      <anchor>a4d1eb74f72e59f5adb0597fe0ab7a0d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1TripletsConstraint.html</anchorfile>
      <anchor>a196713ad20cd84c1d19ea57bc071b9e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1container_1_1TripletsConstraint.html</anchorfile>
      <anchor>ae3c0c5a6388d5e78040c54e5367eb722</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::TripletsOptimizerState</name>
    <filename>classIMP_1_1container_1_1TripletsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>TripletsOptimizerState</name>
      <anchorfile>classIMP_1_1container_1_1TripletsOptimizerState.html</anchorfile>
      <anchor>af3ab8492a4f6033a1fdbadaa95981c8f</anchor>
      <arglist>(TripletContainerAdaptor c, TripletModifier *gf, std::string name=&quot;TripletsOptimizerState %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1container_1_1TripletsOptimizerState.html</anchorfile>
      <anchor>aa526dc5840fa5b4495c65bf28e211eb6</anchor>
      <arglist>(unsigned int call) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1TripletsOptimizerState.html</anchorfile>
      <anchor>a62cb8868569f8f46b416161f7509c76b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::container::TripletsRestraint</name>
    <filename>classIMP_1_1container_1_1TripletsRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>TripletsRestraint</name>
      <anchorfile>classIMP_1_1container_1_1TripletsRestraint.html</anchorfile>
      <anchor>aef8856afade7ff7d64a9a54852b150a1</anchor>
      <arglist>(TripletScore *ss, TripletContainerAdaptor pc, std::string name=&quot;TripletsRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1container_1_1TripletsRestraint.html</anchorfile>
      <anchor>ab2634d66c337e85d74312b87dcc931e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1container_1_1TripletsRestraint.html</anchorfile>
      <anchor>aaf8f24029c5e4b20d0b86a4b407cde07</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1container_1_1TripletsRestraint.html</anchorfile>
      <anchor>ad0165626b45526205c58ce4315fc4411</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::core</name>
    <filename>namespaceIMP_1_1core.html</filename>
    <class kind="class">IMP::core::AllSamePairPredicate</class>
    <class kind="class">IMP::core::AllSameQuadPredicate</class>
    <class kind="class">IMP::core::AllSameSingletonPredicate</class>
    <class kind="class">IMP::core::AllSameTripletPredicate</class>
    <class kind="class">IMP::core::AngleRestraint</class>
    <class kind="class">IMP::core::AngleTripletScore</class>
    <class kind="class">IMP::core::AttributeSingletonPredicate</class>
    <class kind="class">IMP::core::BallMover</class>
    <class kind="class">IMP::core::BinormalTerm</class>
    <class kind="class">IMP::core::BoxSweepClosePairsFinder</class>
    <class kind="class">IMP::core::Centroid</class>
    <class kind="class">IMP::core::CentroidOfRefined</class>
    <class kind="class">IMP::core::ChecksScoreState</class>
    <class kind="class">IMP::core::ChildrenRefiner</class>
    <class kind="class">IMP::core::ClosedCubicSpline</class>
    <class kind="class">IMP::core::ClosePairsFinder</class>
    <class kind="class">IMP::core::ClosePairsPairScore</class>
    <class kind="class">IMP::core::ClusterProvenance</class>
    <class kind="class">IMP::core::CoinFlipPairPredicate</class>
    <class kind="class">IMP::core::CoinFlipQuadPredicate</class>
    <class kind="class">IMP::core::CoinFlipSingletonPredicate</class>
    <class kind="class">IMP::core::CoinFlipTripletPredicate</class>
    <class kind="class">IMP::core::CombineProvenance</class>
    <class kind="class">IMP::core::ConjugateGradients</class>
    <class kind="class">IMP::core::ConnectivityRestraint</class>
    <class kind="class">IMP::core::ConstantPairPredicate</class>
    <class kind="class">IMP::core::ConstantQuadPredicate</class>
    <class kind="class">IMP::core::ConstantRestraint</class>
    <class kind="class">IMP::core::ConstantSingletonPredicate</class>
    <class kind="class">IMP::core::ConstantTripletPredicate</class>
    <class kind="class">IMP::core::Cosine</class>
    <class kind="class">IMP::core::Cover</class>
    <class kind="class">IMP::core::CoverRefined</class>
    <class kind="class">IMP::core::DataObject</class>
    <class kind="class">IMP::core::DerivativesFromRefined</class>
    <class kind="class">IMP::core::DerivativesToRefined</class>
    <class kind="class">IMP::core::DiameterRestraint</class>
    <class kind="class">IMP::core::DihedralRestraint</class>
    <class kind="class">IMP::core::Direction</class>
    <class kind="class">IMP::core::DirectionAngle</class>
    <class kind="class">IMP::core::DirectionMover</class>
    <class kind="class">IMP::core::DistancePairScore</class>
    <class kind="class">IMP::core::DistanceRestraint</class>
    <class kind="class">IMP::core::EdgePairGeometry</class>
    <class kind="class">IMP::core::EdgePairsGeometry</class>
    <class kind="class">IMP::core::ExcludedVolumeRestraint</class>
    <class kind="class">IMP::core::FilterProvenance</class>
    <class kind="class">IMP::core::FixedRefiner</class>
    <class kind="class">IMP::core::Gaussian</class>
    <class kind="class">IMP::core::GenericAttributeSingletonScore</class>
    <class kind="class">IMP::core::GenericBoundingBox3DSingletonScore</class>
    <class kind="class">IMP::core::GenericBoundingSphere3DSingletonScore</class>
    <class kind="class">IMP::core::GenericDistanceToSingletonScore</class>
    <class kind="class">IMP::core::GridClosePairsFinder</class>
    <class kind="class">IMP::core::Harmonic</class>
    <class kind="class">IMP::core::HarmonicDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicLowerBound</class>
    <class kind="class">IMP::core::HarmonicSphereDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicSurfaceDepthPairScore</class>
    <class kind="class">IMP::core::HarmonicSurfaceDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicSurfaceHeightPairScore</class>
    <class kind="class">IMP::core::HarmonicUpperBound</class>
    <class kind="class">IMP::core::HarmonicUpperBoundSphereDiameterPairScore</class>
    <class kind="class">IMP::core::HarmonicUpperBoundSphereDistancePairScore</class>
    <class kind="class">IMP::core::HarmonicWell</class>
    <class kind="class">IMP::core::Hierarchy</class>
    <class kind="struct">IMP::core::HierarchyCounter</class>
    <class kind="class">IMP::core::HierarchyTraits</class>
    <class kind="class">IMP::core::HierarchyVisitor</class>
    <class kind="class">IMP::core::InBoundingBox3DSingletonPredicate</class>
    <class kind="class">IMP::core::IsCollisionPairPredicate</class>
    <class kind="class">IMP::core::KClosePairsPairScore</class>
    <class kind="class">IMP::core::LateralSurfaceConstraint</class>
    <class kind="class">IMP::core::LeavesRefiner</class>
    <class kind="class">IMP::core::Linear</class>
    <class kind="class">IMP::core::LogNormalMover</class>
    <class kind="class">IMP::core::MCCGSampler</class>
    <class kind="class">IMP::core::MinimumRestraint</class>
    <class kind="class">IMP::core::ModifierVisitor</class>
    <class kind="class">IMP::core::MonteCarlo</class>
    <class kind="class">IMP::core::MonteCarloMover</class>
    <class kind="struct">IMP::core::MonteCarloMoverResult</class>
    <class kind="class">IMP::core::MonteCarloWithBasinHopping</class>
    <class kind="class">IMP::core::MonteCarloWithLocalOptimization</class>
    <class kind="class">IMP::core::MoveStatisticsScoreState</class>
    <class kind="class">IMP::core::MSConnectivityRestraint</class>
    <class kind="class">IMP::core::MultipleBinormalRestraint</class>
    <class kind="class">IMP::core::NearestNeighborsClosePairsFinder</class>
    <class kind="class">IMP::core::NeighborsTable</class>
    <class kind="class">IMP::core::NonRigidMember</class>
    <class kind="class">IMP::core::NormalizedSphereDistancePairScore</class>
    <class kind="class">IMP::core::NormalMover</class>
    <class kind="class">IMP::core::OpenCubicSpline</class>
    <class kind="class">IMP::core::OrderedTypePairPredicate</class>
    <class kind="class">IMP::core::OrderedTypeQuadPredicate</class>
    <class kind="class">IMP::core::OrderedTypeSingletonPredicate</class>
    <class kind="class">IMP::core::OrderedTypeTripletPredicate</class>
    <class kind="class">IMP::core::PairConstraint</class>
    <class kind="class">IMP::core::PairRestraint</class>
    <class kind="class">IMP::core::PredicateSingletonScore</class>
    <class kind="class">IMP::core::Provenance</class>
    <class kind="class">IMP::core::Provenanced</class>
    <class kind="class">IMP::core::QuadConstraint</class>
    <class kind="class">IMP::core::QuadraticClosePairsFinder</class>
    <class kind="class">IMP::core::QuadRestraint</class>
    <class kind="class">IMP::core::Reference</class>
    <class kind="class">IMP::core::RefinedPairsPairScore</class>
    <class kind="class">IMP::core::RestraintsScoringFunction</class>
    <class kind="class">IMP::core::RigidBody</class>
    <class kind="class">IMP::core::RigidBodyAnglePairScore</class>
    <class kind="class">IMP::core::RigidBodyDerivativeGeometry</class>
    <class kind="class">IMP::core::RigidBodyDerivativesGeometry</class>
    <class kind="class">IMP::core::RigidBodyDistancePairScore</class>
    <class kind="class">IMP::core::RigidBodyFrameGeometry</class>
    <class kind="class">IMP::core::RigidBodyFramesGeometry</class>
    <class kind="class">IMP::core::RigidBodyHierarchyGeometry</class>
    <class kind="class">IMP::core::RigidBodyMember</class>
    <class kind="class">IMP::core::RigidBodyMover</class>
    <class kind="class">IMP::core::RigidBodyTorque</class>
    <class kind="class">IMP::core::RigidBodyTunneler</class>
    <class kind="class">IMP::core::RigidBodyUmbrella</class>
    <class kind="class">IMP::core::RigidClosePairsFinder</class>
    <class kind="class">IMP::core::RigidMember</class>
    <class kind="class">IMP::core::SampleProvenance</class>
    <class kind="class">IMP::core::ScriptProvenance</class>
    <class kind="class">IMP::core::SerialMover</class>
    <class kind="class">IMP::core::SingletonConstraint</class>
    <class kind="class">IMP::core::SingletonRestraint</class>
    <class kind="class">IMP::core::SoftSpherePairScore</class>
    <class kind="class">IMP::core::SoftSubSurfacePairScore</class>
    <class kind="class">IMP::core::SoftSuperSurfacePairScore</class>
    <class kind="class">IMP::core::SoftwareProvenance</class>
    <class kind="class">IMP::core::SphereDistancePairScore</class>
    <class kind="class">IMP::core::SphereDistanceToSingletonScore</class>
    <class kind="class">IMP::core::StatisticalPairScore</class>
    <class kind="class">IMP::core::SteepestDescent</class>
    <class kind="class">IMP::core::StructureProvenance</class>
    <class kind="class">IMP::core::SubsetMover</class>
    <class kind="class">IMP::core::Surface</class>
    <class kind="class">IMP::core::SurfaceDepthPairScore</class>
    <class kind="class">IMP::core::SurfaceDistancePairScore</class>
    <class kind="class">IMP::core::SurfaceGeometry</class>
    <class kind="class">IMP::core::SurfaceGeometryConstraint</class>
    <class kind="class">IMP::core::SurfaceHeightPairScore</class>
    <class kind="class">IMP::core::SurfaceMover</class>
    <class kind="class">IMP::core::SurfaceSymmetryConstraint</class>
    <class kind="class">IMP::core::SurfaceTetheredChain</class>
    <class kind="class">IMP::core::TableRefiner</class>
    <class kind="class">IMP::core::Transform</class>
    <class kind="class">IMP::core::TransformationAndReflectionSymmetry</class>
    <class kind="class">IMP::core::TransformationSymmetry</class>
    <class kind="class">IMP::core::TransformationSymmetryMover</class>
    <class kind="class">IMP::core::TransformedDistancePairScore</class>
    <class kind="class">IMP::core::TripletConstraint</class>
    <class kind="class">IMP::core::TripletRestraint</class>
    <class kind="class">IMP::core::TruncatedHarmonic</class>
    <class kind="class">IMP::core::Typed</class>
    <class kind="class">IMP::core::TypedPairScore</class>
    <class kind="class">IMP::core::UnorderedTypePairPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeQuadPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeSingletonPredicate</class>
    <class kind="class">IMP::core::UnorderedTypeTripletPredicate</class>
    <class kind="class">IMP::core::VolumeRestraint</class>
    <class kind="class">IMP::core::WeightedDerivativesToRefined</class>
    <class kind="class">IMP::core::WeightedSphereDistancePairScore</class>
    <class kind="class">IMP::core::WeightedSum</class>
    <class kind="class">IMP::core::WeightedSumOfExponential</class>
    <class kind="class">IMP::core::WriteRestraintScoresOptimizerState</class>
    <class kind="class">IMP::core::XYZ</class>
    <class kind="class">IMP::core::XYZDerivativeGeometry</class>
    <class kind="class">IMP::core::XYZDerivativesGeometry</class>
    <class kind="class">IMP::core::XYZR</class>
    <class kind="class">IMP::core::XYZRGeometry</class>
    <class kind="class">IMP::core::XYZRsGeometry</class>
    <member kind="typedef">
      <type>GenericAttributeSingletonScore&lt; UnaryFunction &gt;</type>
      <name>AttributeSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa8670e511c13b327e0053d6c1e4d41e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; BinormalTerm &gt;</type>
      <name>BinormalTermList</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab4c9d84b358bb59f33034127589eaac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericBoundingBox3DSingletonScore&lt; UnaryFunction &gt;</type>
      <name>BoundingBox3DSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab2c0619500bd423c7708b180c007424c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericBoundingSphere3DSingletonScore&lt; UnaryFunction &gt;</type>
      <name>BoundingSphere3DSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a3ad985f8c117f94011a009be955d6eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistancePairScore &gt; &gt;</type>
      <name>DistancePairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25eb7dab3c03dfcce8e9c781c1969970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistancePairScore &gt; &gt;</type>
      <name>DistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a30749bde34311071a92ad69f9619960f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericDistanceToSingletonScore&lt; UnaryFunction &gt;</type>
      <name>DistanceToSingletonScore</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a79106744aa09cfd6bd7e70f98473afde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicDistancePairScore &gt; &gt;</type>
      <name>HarmonicDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a96313b3a648ded3d50fac0cd436addfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicDistancePairScore &gt; &gt;</type>
      <name>HarmonicDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a7a842201f944771e71a9e74d9ab1ba42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicUpperBoundSphereDiameterPairScore &gt; &gt;</type>
      <name>HarmonicUpperBoundSphereDiameterPairScores</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4be372bcbe2f41c89abbd257f91e887b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicUpperBoundSphereDiameterPairScore &gt; &gt;</type>
      <name>HarmonicUpperBoundSphereDiameterPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ac18d62ae5e18cadabbbd62ef9e084746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicWell &gt; &gt;</type>
      <name>HarmonicWells</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>abe93229ba2224e3c1ce903926d35d3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicWell &gt; &gt;</type>
      <name>HarmonicWellsTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad665c5936999cc49c91b91685dfb6d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; HierarchyCounter &gt;</type>
      <name>HierarchyCounters</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a2b8b593cee74e44565c406416435408d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; HierarchyTraits &gt;</type>
      <name>HierarchyTraitsList</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a64a0cdfa7381f0524af76f3d0f9bec51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; MonteCarloMoverResult &gt;</type>
      <name>MonteCarloMoverResults</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a851e038eb66e1dc2b1c417d6c1b2fee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MonteCarloMover &gt; &gt;</type>
      <name>MonteCarloMovers</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a61d4e7b3c693c1fb8101daf451599cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MonteCarloMover &gt; &gt;</type>
      <name>MonteCarloMoversTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a04412ad91d8f0be8e06930850d247c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 34897493 &gt;</type>
      <name>ParticleType</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a5f886ae0b4b72e1f435a926565e42efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ParticleType &gt;</type>
      <name>ParticleTypes</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6ec72f350cb843adfad85e11398bbdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceGeometry &gt; &gt;</type>
      <name>SurfaceGeometries</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab239e7ccf64beff87984f837e9708867</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceGeometry &gt; &gt;</type>
      <name>SurfaceGeometriesTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a47b8042ff5a42989b9c16dc00fd4386d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceGeometryConstraint &gt; &gt;</type>
      <name>SurfaceGeometryConstraints</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab1e6dcec6befdf55ba997dafbc78a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceGeometryConstraint &gt; &gt;</type>
      <name>SurfaceGeometryConstraintsTemp</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a786d774d9f3b8f1b2dd8a9baabc22ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; BOTH &gt;</type>
      <name>TruncatedHarmonicBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6ca15966812fbbe341b93c2d0d867662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; LOWER &gt;</type>
      <name>TruncatedHarmonicLowerBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a252abc8a6bb323bd047a0305923d5e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TruncatedHarmonic&lt; UPPER &gt;</type>
      <name>TruncatedHarmonicUpperBound</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a34b5eb10143f75cf67fb8de298cfdd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_imp_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a614e91656f122f5212205b07650c22dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25de2b4c4ee9212c60a8963a0df5c55e</anchor>
      <arglist>(Model *m, ParticleIndex pi, Provenance p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_rigid_body_cache_key</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a0b50565bb6f8cf373e0503b22c82fac8</anchor>
      <arglist>(ObjectKey k)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_script_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a68370020598dd1a84d655478e06fae3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_software_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aeed685f56854cf62b9186a65996e914f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_blame</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ae0adf8c625b9410b8fbcf490f7d46d9e</anchor>
      <arglist>(const RestraintsTemp &amp;rs, const ParticlesTemp &amp;ps, FloatKey attribute)</arglist>
    </member>
    <member kind="function">
      <type>display::Geometries</type>
      <name>create_blame_geometries</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aec2608fca14a0c657e461ed34b9f7317</anchor>
      <arglist>(const RestraintsTemp &amp;rs, const ParticlesTemp &amp;ps, double max=NO_MAX, std::string name=std::string())</arglist>
    </member>
    <member kind="function">
      <type>Provenance</type>
      <name>create_clone</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab7597523d0b09bc8fa288b7261cedb69</anchor>
      <arglist>(Provenance p)</arglist>
    </member>
    <member kind="function">
      <type>GenericAttributeSingletonScore&lt; UF &gt; *</type>
      <name>create_generic_attribute_singleton_score</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab12d7d89b93b817c10a3e90be70ea1b4</anchor>
      <arglist>(UF *uf, FloatKey k)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a1713078e0a0ce8c3fb525af366bb71a5</anchor>
      <arglist>(const Surface s, std::string name=std::string(&quot;SurfaceGeometry%1%&quot;))</arglist>
    </member>
    <member kind="function">
      <type>PredicateSingletonScore&lt; Predicate, Score &gt; *</type>
      <name>create_predicates_singleton_score</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a1eaf9e1c2ed00baa10dca7fc61f0169e</anchor>
      <arglist>(Predicate *pred, int val, Score *score)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>create_rigid_bodies</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa9f324c68944164bd609b55bb3ca3b44</anchor>
      <arglist>(Model *m, unsigned int n, bool no_members=false)</arglist>
    </member>
    <member kind="function">
      <type>XYZRs</type>
      <name>create_xyzr_particles</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad63b32c4f50e42d6ca6d72fa75b5cc02</anchor>
      <arglist>(Model *m, unsigned int num, Float radius, Float box_side=10)</arglist>
    </member>
    <member kind="function">
      <type>HD</type>
      <name>find_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga48885d7285d63571bbdc7035bf25d162</anchor>
      <arglist>(HD h, F f)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gadc7639d87f38fa58e15d16da9ee6b6fe</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attribute</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gae624839ef9e8df72cd594696969b804e</anchor>
      <arglist>(H h, K k, V v, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_by_attributes</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gab703f5be2ab05b43dd31df7f62698309</anchor>
      <arglist>(H h, K0 k0, V0 v0, K1 k1, V1 v1, Out out)</arglist>
    </member>
    <member kind="function">
      <type>Out</type>
      <name>gather_slice</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga2f922d6675216bea33de2292c161faef</anchor>
      <arglist>(H h, F f, Out out)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_all_descendants</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a24d4c4b06793bcadc5962885098ed400</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_all_provenance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6a8349e5563881396c7d335b40764278</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>afd0ee355a8489289443d4de259d3b71e</anchor>
      <arglist>(Direction a, Direction b)</arglist>
    </member>
    <member kind="function">
      <type>algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a0ba3b6f5fba01f4ecf8a3b8f18a311f2</anchor>
      <arglist>(const XYZRs &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_centroid</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a46250a46a10465f03487ad0670586394</anchor>
      <arglist>(const XYZs &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceGeometry *</type>
      <name>get_constrained_surface_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa4af8ca0fe605b70667023285eccf34d</anchor>
      <arglist>(const Surface s, std::string name=&quot;SurfaceGeometry%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_depth</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a75ddddcaa7bc977a250b60f266cd39ec</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_depth</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a871feee8cd80fe860602685979bbb5f2</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_dihedral</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a8586c04d2d9396490dc9cc71f7899141</anchor>
      <arglist>(XYZ a, XYZ b, XYZ c, XYZ d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad65d79ddb3c6e1db815d57f73c8f18ea</anchor>
      <arglist>(XYZR a, XYZR b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af9c67a7fc68dd22fa3f7e685ff7e77b9</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a6392a6cdb5d044f09949dd87846de2fa</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af2049fdca8aae38e86549cfdeff1d1fc</anchor>
      <arglist>(XYZ a, XYZ b)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3D</type>
      <name>get_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ac28cbff46cedec4186ab8e63a3c3b41b</anchor>
      <arglist>(const XYZs &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aca45b7f82466b871a7a2772559b2e121</anchor>
      <arglist>(const Surface &amp;s, const XYZR &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a2de8a0a4e81ff897fdf4a8741be335e1</anchor>
      <arglist>(const Surface &amp;s, const XYZ &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>algebra::ReferenceFrame3D</type>
      <name>get_initial_reference_frame</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a345d1856d74f6a0768a145c96920e04d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_internal</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a65ebb1067e86f517214ff78f111ad622</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>GenericHierarchies</type>
      <name>get_leaves</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a8743287de001c73866a23377c8bd466f</anchor>
      <arglist>(Hierarchy mhd)</arglist>
    </member>
    <member kind="function">
      <type>Hierarchy</type>
      <name>get_root</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4c078026c66398b7ae77eeb6f13ddcd0</anchor>
      <arglist>(Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_root_rigid_body</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>af5b47e4ca263d6c156fb5936223c8a29</anchor>
      <arglist>(RigidMember m)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ab188fc0fd41b9715232fe9c23b11bfdf</anchor>
      <arglist>(XYZ d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enclosing_radius</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a25735ab61a19f9813d051462afd24b2f</anchor>
      <arglist>(XYZR b, const XYZs &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enclosing_sphere</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a9f00e88e92a88b5ef349978fe737df7d</anchor>
      <arglist>(XYZR b, const XYZs &amp;v, double slack=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_geometry</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>aa284a594e40d97aa3e915a3da70a4d3d</anchor>
      <arglist>(XYZ d, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>show</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga346251f63e1305b2bd2b0599f1d8d761</anchor>
      <arglist>(Hierarchy h, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_rigid_body_hierarchy</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>ad2e0faca3653d6acca9edc09af19ef99</anchor>
      <arglist>(RigidBody rb, TextOutput out=TextOutput(std::cout))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a556f7cad1de8ed389d05b4d7acbeb4d0</anchor>
      <arglist>(XYZ a, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a4c5298df54cae6b0e4419852390281be</anchor>
      <arglist>(RigidBody a, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gaf1c5c6abcc4e68e8966a2be6793020fe</anchor>
      <arglist>(HD d, F f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_breadth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>gabbac0bce3555909b3b9e5978cb576eff</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga52cb6fb554a44d6ce8d8c997d20f2850</anchor>
      <arglist>(HD d, F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>F</type>
      <name>visit_depth_first_with_data</name>
      <anchorfile>group__hierarchy.html</anchorfile>
      <anchor>ga669953449da1f01f7ca196d9a06a0fbb</anchor>
      <arglist>(HD d, F f, typename F::result_type data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a45384e950e8eb2718f35b2547d4a8648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a47f9c4cd50de0c8fd86a78de11166f6b</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1core.html</anchorfile>
      <anchor>a737c71464db8d281c8e2d42e84eff861</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AllSamePairPredicate</name>
    <filename>classIMP_1_1core_1_1AllSamePairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AllSamePairPredicate.html</anchorfile>
      <anchor>af90fe76115d496cc08481f5f42cb03be</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1AllSamePairPredicate.html</anchorfile>
      <anchor>a2b06710489eff30bca1cfeb718f9a4ae</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AllSamePairPredicate.html</anchorfile>
      <anchor>a2045c89755ea96f273413f3af9cf1609</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AllSameQuadPredicate</name>
    <filename>classIMP_1_1core_1_1AllSameQuadPredicate.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AllSameQuadPredicate.html</anchorfile>
      <anchor>aa5df930c98a2b9bb69a31ab196fd70fa</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1AllSameQuadPredicate.html</anchorfile>
      <anchor>a39ec6c8a36a253291be0589603269668</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AllSameQuadPredicate.html</anchorfile>
      <anchor>af2108573f721058bf755299009284e8d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AllSameSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1AllSameSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AllSameSingletonPredicate.html</anchorfile>
      <anchor>aac0dd0dd176b13bf079e36b4d08447dd</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1AllSameSingletonPredicate.html</anchorfile>
      <anchor>abeb656a778eae217c7ae0a683209de63</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AllSameSingletonPredicate.html</anchorfile>
      <anchor>a985dbc66ebef32db5b166b692c4f750c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AllSameTripletPredicate</name>
    <filename>classIMP_1_1core_1_1AllSameTripletPredicate.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AllSameTripletPredicate.html</anchorfile>
      <anchor>a808d6da5a0e3964e053df36522f05e92</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1AllSameTripletPredicate.html</anchorfile>
      <anchor>a5c57e11f62da9a17c6a7baee716ff93a</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AllSameTripletPredicate.html</anchorfile>
      <anchor>a082276e7039cca8e25e738aabe555969</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AngleRestraint</name>
    <filename>classIMP_1_1core_1_1AngleRestraint.html</filename>
    <base>IMP::core::TripletRestraint</base>
    <member kind="function">
      <type></type>
      <name>AngleRestraint</name>
      <anchorfile>classIMP_1_1core_1_1AngleRestraint.html</anchorfile>
      <anchor>a8d804a5e089cdfaf9d92bca151824a75</anchor>
      <arglist>(Model *m, UnaryFunction *score_func, ParticleIndexAdaptor p1, ParticleIndexAdaptor p2, ParticleIndexAdaptor p3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AngleRestraint.html</anchorfile>
      <anchor>a0ea0ce359e847791ecb151e9b599e6df</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TripletRestraint</name>
      <anchorfile>classIMP_1_1core_1_1TripletRestraint.html</anchorfile>
      <anchor>aa12a3dcb20c18236896d7523a355dd32</anchor>
      <arglist>(Model *m, TripletScore *ss, const ParticleIndexTriplet &amp;vt, std::string name=&quot;TripletRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TripletRestraint.html</anchorfile>
      <anchor>affc2cbed6fd5ad41188b73a5c3b3064e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1TripletRestraint.html</anchorfile>
      <anchor>ab072fa0749adfe27a4e7bc671d744135</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AngleTripletScore</name>
    <filename>classIMP_1_1core_1_1AngleTripletScore.html</filename>
    <base>IMP::TripletScore</base>
    <member kind="function">
      <type></type>
      <name>AngleTripletScore</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>afdf1cc12de696eb65446e35b364cd3d1</anchor>
      <arglist>(UnaryFunction *f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>ac129bb20d29d608914cdb4a8a6d921b2</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>a8328257b3d66f92942c86f72c928b132</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>af2afefcf2226c23e3ecaac727a2ca790</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;pi, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>a737052d40ef5dbb8b1bd06ce44cee51c</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>a70646c941465596a0c499221609f7b9b</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>abcd152b96cfe97584178a10c8e817670</anchor>
      <arglist>(Model *m, const ParticleIndexTriplets &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AngleTripletScore.html</anchorfile>
      <anchor>a60c5de78eec04b54c1a32b9db2ec8b27</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::AttributeSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1AttributeSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1AttributeSingletonPredicate.html</anchorfile>
      <anchor>ad11e7024334b5552c82e6de5b329b791</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1AttributeSingletonPredicate.html</anchorfile>
      <anchor>ac0f8d8f3ad1823933f9531ac28c45716</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1AttributeSingletonPredicate.html</anchorfile>
      <anchor>a3f8bfe6c31fa7c39a058b9f574ea4f17</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::BallMover</name>
    <filename>classIMP_1_1core_1_1BallMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>BallMover</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>aba575eff507b693445bb822e6ef3f4c7</anchor>
      <arglist>(Model *m, ParticleIndex pi, const FloatKeys &amp;vars, double radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallMover</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a249dada0527cfd197143e9544a06a89f</anchor>
      <arglist>(Model *m, ParticleIndex pi, double radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallMover</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a5fe39f69bfb134ac69897ce58d82d9e1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis, const FloatKeys &amp;vars, Float radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallMover</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a69d2b6affbca13893654613949fa91a1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis, Float radius)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a826e1e2850dda7ddb668fe7403f61371</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>ae95f698cb0107d7d3d8c18da29232c07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MonteCarloMoverResult</type>
      <name>propose</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>a1d26d9a0f69e959d4bc8e2a7511c4683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reject</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>ab0dafa32b7e3a8aaff395572930bbbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a74d604b7a1ea10668761ef2fde3d6a85</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>afda95da2456096bfc9afefc5a0d7553e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1BallMover.html</anchorfile>
      <anchor>a7fbf801b5fb4f572d1cc541f1cb163b3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_accept</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>aa8e97296461f1b14f1043bcc94a48b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>a46ab345306c785c4ae98884d6c1f8c0e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::BinormalTerm</name>
    <filename>classIMP_1_1core_1_1BinormalTerm.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::core::BoxSweepClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1BoxSweepClosePairsFinder.html</filename>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1BoxSweepClosePairsFinder.html</anchorfile>
      <anchor>a43e1164122f0cfdf33fc03c3167a2c16</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1BoxSweepClosePairsFinder.html</anchorfile>
      <anchor>a7e50052403fc8bd525d96efccf17485c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1BoxSweepClosePairsFinder.html</anchorfile>
      <anchor>ad627ab5fa4d9f653c3b0b3d980f10a9c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1BoxSweepClosePairsFinder.html</anchorfile>
      <anchor>aaee4e470b8b6fea0b7612faf9b5a69b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>pair_filters</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsFinder.html</anchorfile>
      <anchor>a7f88f07e16091e3162c6e502990bd708</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Centroid</name>
    <filename>classIMP_1_1core_1_1Centroid.html</filename>
    <base>IMP::core::XYZ</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::CentroidOfRefined</name>
    <filename>classIMP_1_1core_1_1CentroidOfRefined.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>CentroidOfRefined</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>a68dc0bfe69a80b4f64c8dc16071f0ce4</anchor>
      <arglist>(Refiner *r, FloatKey weight=FloatKey(), FloatKeys ks=XYZ::get_xyz_keys())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>a4113392aa0e87fdc676be7f7ff41ed49</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>ac217a8e2e9785afa75e36671ba1ee8d1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>a2d17e803485e2c8366ef07cab411f2d0</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>afc5a50ed67ba18d938d8af2595163ccc</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CentroidOfRefined.html</anchorfile>
      <anchor>a1ea3434021e782b8fdd7f9b62a7c086c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ChecksScoreState</name>
    <filename>classIMP_1_1core_1_1ChecksScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ChecksScoreState.html</anchorfile>
      <anchor>a0342cba3b2d9d29bbf841d70bcd61c5e</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ChecksScoreState.html</anchorfile>
      <anchor>a3bc544c2aa1d4901a9d5f3542755d327</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ChecksScoreState.html</anchorfile>
      <anchor>a510dd8d40dd56241c7d38fdd04c0f5f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1ChecksScoreState.html</anchorfile>
      <anchor>a6191cf5bf6a34d83292a340925bd6fcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ChecksScoreState.html</anchorfile>
      <anchor>ad03ecf077a44d72fac8e32f2ca1941d5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ChildrenRefiner</name>
    <filename>classIMP_1_1core_1_1ChildrenRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function">
      <type></type>
      <name>ChildrenRefiner</name>
      <anchorfile>classIMP_1_1core_1_1ChildrenRefiner.html</anchorfile>
      <anchor>ac93f559610e5324ee059430e86e4b7c0</anchor>
      <arglist>(HierarchyTraits tr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ChildrenRefiner.html</anchorfile>
      <anchor>a8a598ab7ff2b89e13c3c5bb7615444b5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1core_1_1ChildrenRefiner.html</anchorfile>
      <anchor>a776c488f45d11e0b3732cf8fc90c0a94</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1core_1_1ChildrenRefiner.html</anchorfile>
      <anchor>abccfb2e3525a3f3c71087af49a6aeb4d</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ChildrenRefiner.html</anchorfile>
      <anchor>ace419b81338ce37c8d2ebd3c46f69ccc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ClosedCubicSpline</name>
    <filename>classIMP_1_1core_1_1ClosedCubicSpline.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>ClosedCubicSpline</name>
      <anchorfile>classIMP_1_1core_1_1ClosedCubicSpline.html</anchorfile>
      <anchor>af8606ecbbd634a0174157df73aeb3b2c</anchor>
      <arglist>(const Floats &amp;values, double minrange, double spacing)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ClosedCubicSpline.html</anchorfile>
      <anchor>a09df1fab2c05a32e6ff9af7fcfc3e6e6</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1ClosedCubicSpline.html</anchorfile>
      <anchor>ab05b3f85cf59a6b0e8415799bfe57b63</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ClosedCubicSpline.html</anchorfile>
      <anchor>a405f78e6e5bd904eff982596b823b87f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1ClosePairsFinder.html</filename>
    <base>IMP::ParticleInputs</base>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsFinder.html</anchorfile>
      <anchor>a496d0a48861b5eda84f2860df60eafb6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsFinder.html</anchorfile>
      <anchor>a4d6d67a76a843aa3d03276ffc1e8a909</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ClosePairsPairScore</name>
    <filename>classIMP_1_1core_1_1ClosePairsPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>ClosePairsPairScore</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>aa14e8e87a96d8e1bb5388301e89c8553</anchor>
      <arglist>(PairScore *f, Refiner *r, Float max_distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>afca44f9378615453554c08c73a9d1a53</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>a7319f78b7650859f2397c9552eae5cef</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt, DerivativeAccumulator *da, double max) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>afc7958f3df394c9a515e2dc2c0187941</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>a4af61826a268e7e9c122e6bbf7b1d986</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>ab1f268f47bb4d00ccef088316ca30a9a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>abbabc0f0708a15de79d1d6290f5b084a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>a13e1d9f2afe5e108e2066c73ec534505</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ClosePairsPairScore.html</anchorfile>
      <anchor>a7fd079b974cfb23f6c1518cf34409a2d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ClusterProvenance</name>
    <filename>classIMP_1_1core_1_1ClusterProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a70f00c8bef6177fe5038d97b2b5f68dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_members</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a0e18cd768c46e1528207ea8f8d1db778</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_precision</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>acb8a7e278151428b83ab4d78f22c268a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_density</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a9a2f17ac2f4465e350ca485c9f286deb</anchor>
      <arglist>(std::string density) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_members</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a84c90d7c87ed8c9d245136dbc72f3c93</anchor>
      <arglist>(int members) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_precision</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a709e77c679c9eb16afac8ce146de8426</anchor>
      <arglist>(double precision) const </arglist>
    </member>
    <member kind="function">
      <type>Provenance</type>
      <name>get_previous</name>
      <anchorfile>classIMP_1_1core_1_1Provenance.html</anchorfile>
      <anchor>a015c8c87998debcdbee0272e9793e42d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_previous</name>
      <anchorfile>classIMP_1_1core_1_1Provenance.html</anchorfile>
      <anchor>a9aac89f86b0c4db19c335908fd118919</anchor>
      <arglist>(Provenance p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a6fcd618833c13657f737995b6f2d3e0e</anchor>
      <arglist>(IMP::ParticleAdaptor pa, int members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>ae7791d3b41ad5eecde6850eb9b2e8e40</anchor>
      <arglist>(Model *m, ParticleIndex pi, int members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>addbd2f340c0408c64e44912f3b485781</anchor>
      <arglist>(Model *m, ParticleIndex pi, int members, double precision)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>aa29252602e26c8b37c675ab22448f344</anchor>
      <arglist>(IMP::ParticleAdaptor pa, int members, double precision)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a3e9c8cdb8f40757378436966d1e06b3c</anchor>
      <arglist>(Model *m, ParticleIndex pi, int members, double precision, std::string density)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>aa6380944d4032f5a39ddd935a4597f5f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, int members, double precision, std::string density)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a58511719fbced1a3c8bbc825e986836d</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ClusterProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClusterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ClusterProvenance.html</anchorfile>
      <anchor>a8bcfa300fc8ea8a70f93105572b0afe1</anchor>
      <arglist>(Model *m, ParticleIndex pi, ClusterProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Provenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Provenance.html</anchorfile>
      <anchor>a8d9aca624be1591b6a9dfd8d2c85f964</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Provenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Provenance.html</anchorfile>
      <anchor>a76c47d7cbd7265c7096d2243dd18cc46</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CoinFlipPairPredicate</name>
    <filename>classIMP_1_1core_1_1CoinFlipPairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipPairPredicate.html</anchorfile>
      <anchor>af2e8aa4f5b57091e3f512538d21a5864</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipPairPredicate.html</anchorfile>
      <anchor>af6a8d5ef1c8523ae9261543fd5a3505b</anchor>
      <arglist>(Model *, const ParticleIndexPair &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipPairPredicate.html</anchorfile>
      <anchor>a0d781f49e2cff9886949cd6083ef4e76</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CoinFlipQuadPredicate</name>
    <filename>classIMP_1_1core_1_1CoinFlipQuadPredicate.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipQuadPredicate.html</anchorfile>
      <anchor>a20096fbb3ad6e5c85671f5fbe5f883c5</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipQuadPredicate.html</anchorfile>
      <anchor>aa393a818898acc8fc4a53318df6ead35</anchor>
      <arglist>(Model *, const ParticleIndexQuad &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipQuadPredicate.html</anchorfile>
      <anchor>af3f2dd8155fb7f9b2fe5637f667062df</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CoinFlipSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1CoinFlipSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipSingletonPredicate.html</anchorfile>
      <anchor>a03d77df71860978ba45daaeff1a32d79</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipSingletonPredicate.html</anchorfile>
      <anchor>acf80879ff62482c2d755dc21e19d72b3</anchor>
      <arglist>(Model *, ParticleIndex) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipSingletonPredicate.html</anchorfile>
      <anchor>addee88d742fc838a44249fc77f2e1726</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CoinFlipTripletPredicate</name>
    <filename>classIMP_1_1core_1_1CoinFlipTripletPredicate.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipTripletPredicate.html</anchorfile>
      <anchor>a7216a6e452f7e76408060911aefd71bd</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipTripletPredicate.html</anchorfile>
      <anchor>a1ded7dea4334f06ebdfd64a6ef3d046f</anchor>
      <arglist>(Model *, const ParticleIndexTriplet &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CoinFlipTripletPredicate.html</anchorfile>
      <anchor>a11c82a62110494a113a8d805d065801c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CombineProvenance</name>
    <filename>classIMP_1_1core_1_1CombineProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>a7d5e9a6988af3bee67f98d0419c94b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_runs</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>a4d9e22e14265f5901d59a4f6f4e1fdf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>abd5cf3e1a197248e95d8d30b65464e9e</anchor>
      <arglist>(int frames) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_runs</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>a69daac8889885008b74e31bb164bad51</anchor>
      <arglist>(int runs) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombineProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>aabbca68b96cabd237a38d20d5e148d07</anchor>
      <arglist>(IMP::ParticleAdaptor pa, int runs, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombineProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>afe1e1ec321f847898b30e1cc6a87233b</anchor>
      <arglist>(Model *m, ParticleIndex pi, int runs, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombineProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>a6e3146d332826da64f5eb803b327d018</anchor>
      <arglist>(IMP::ParticleAdaptor pa, CombineProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CombineProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1CombineProvenance.html</anchorfile>
      <anchor>a03cf92b0778a2a99ecfe40102e480b2b</anchor>
      <arglist>(Model *m, ParticleIndex pi, CombineProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConjugateGradients</name>
    <filename>classIMP_1_1core_1_1ConjugateGradients.html</filename>
    <base>IMP::AttributeOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1core_1_1ConjugateGradients.html</anchorfile>
      <anchor>a1f2d32cf8a9d46fdfcd18ce66d937591</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConjugateGradients.html</anchorfile>
      <anchor>a0dfb8d0269b3d64d69c51314bc592e2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_gradient_threshold</name>
      <anchorfile>classIMP_1_1core_1_1ConjugateGradients.html</anchorfile>
      <anchor>a34dc6e93e506b3c0c6a4bee0fd2ce083</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_change</name>
      <anchorfile>classIMP_1_1core_1_1ConjugateGradients.html</anchorfile>
      <anchor>a87348ed65f643bc03d0beab7782a9537</anchor>
      <arglist>(Float t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConnectivityRestraint</name>
    <filename>classIMP_1_1core_1_1ConnectivityRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ConnectivityRestraint</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ab3f9acf18ba9cb254034c8f9ae1ddd1f</anchor>
      <arglist>(PairScore *ps, SingletonContainerAdaptor sc)</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a2816bae822e978eb20038a3c36ff848c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ae867b98668b74c1474a382d50bae3ded</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_connected_index_pairs</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a3fb0aca29f2ce807f2b0ad52882ed691</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PairScore *</type>
      <name>get_pair_score</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ab32c76d5aceb791d65f5da9564d294c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a04f6c872430cc6a105b29971814b8a89</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a2816d35237a910aab6e87642d43475e5</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConstantPairPredicate</name>
    <filename>classIMP_1_1core_1_1ConstantPairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConstantPairPredicate.html</anchorfile>
      <anchor>aa95e8599a055eaf5f8334527b5fc09fa</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1ConstantPairPredicate.html</anchorfile>
      <anchor>aee82e81983d7ca44de78dea401d053db</anchor>
      <arglist>(Model *, const ParticleIndexPair &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConstantPairPredicate.html</anchorfile>
      <anchor>af6bd094d78eaa98332f549b9fad3aba8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConstantQuadPredicate</name>
    <filename>classIMP_1_1core_1_1ConstantQuadPredicate.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConstantQuadPredicate.html</anchorfile>
      <anchor>a7aa921996a342b94bbf4c3b67b5e1472</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1ConstantQuadPredicate.html</anchorfile>
      <anchor>a6dea1c7a13ef57bcafe0670ddf098adb</anchor>
      <arglist>(Model *, const ParticleIndexQuad &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConstantQuadPredicate.html</anchorfile>
      <anchor>ac6e82a3b3af08b6e43072f42289ce725</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConstantRestraint</name>
    <filename>classIMP_1_1core_1_1ConstantRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ConstantRestraint</name>
      <anchorfile>classIMP_1_1core_1_1ConstantRestraint.html</anchorfile>
      <anchor>aa2aa7b206e738f3c03ff754f0303c8d9</anchor>
      <arglist>(Model *m, Float v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConstantRestraint.html</anchorfile>
      <anchor>ab33d4a1ec6432bf4f350942878174751</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConstantRestraint.html</anchorfile>
      <anchor>ae541fa3946f584a30d99b040c80987d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ConstantRestraint.html</anchorfile>
      <anchor>a73d85e1a455fd96c464462358ba7085b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConstantSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1ConstantSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConstantSingletonPredicate.html</anchorfile>
      <anchor>a80e966d00099688b5f9a01ccd1595c7c</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1ConstantSingletonPredicate.html</anchorfile>
      <anchor>ab4ff5eca8098d5631e92a8b7bd6afab0</anchor>
      <arglist>(Model *, ParticleIndex) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConstantSingletonPredicate.html</anchorfile>
      <anchor>a360a262b46bac600bc988d2742c34834</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ConstantTripletPredicate</name>
    <filename>classIMP_1_1core_1_1ConstantTripletPredicate.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ConstantTripletPredicate.html</anchorfile>
      <anchor>a700f772d65e232b75b5f1b5dacb7d527</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1ConstantTripletPredicate.html</anchorfile>
      <anchor>a3d44a640cbff0f225bdb565172455a33</anchor>
      <arglist>(Model *, const ParticleIndexTriplet &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ConstantTripletPredicate.html</anchorfile>
      <anchor>a5e3dc53bc881aec0de98cc6904d0458d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Cosine</name>
    <filename>classIMP_1_1core_1_1Cosine.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>Cosine</name>
      <anchorfile>classIMP_1_1core_1_1Cosine.html</anchorfile>
      <anchor>a49445251c32199d600c66928fda19817</anchor>
      <arglist>(Float force_constant, int periodicity, Float phase)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1Cosine.html</anchorfile>
      <anchor>a675e33b4078a22d542eb82112dc7a129</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Cosine.html</anchorfile>
      <anchor>af31d092f228a5995670cb1b2d53a1ca3</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1Cosine.html</anchorfile>
      <anchor>a26a102c4ec7a56cecf78ce1a8fe04001</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Cover</name>
    <filename>classIMP_1_1core_1_1Cover.html</filename>
    <base>IMP::core::XYZR</base>
    <member kind="function" static="yes">
      <type>static Cover</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Cover.html</anchorfile>
      <anchor>a645deb661b5a3cb58951bec80c25d38b</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cover</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Cover.html</anchorfile>
      <anchor>a673af3098e2e4c0f054a2a750d50f977</anchor>
      <arglist>(Model *m, ParticleIndex pi, Refiner *refiner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cover</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Cover.html</anchorfile>
      <anchor>a2ffc3b9b8ad6de417af9a329862e2216</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexesAdaptor members)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cover</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Cover.html</anchorfile>
      <anchor>a18b4345f9d9ea754ab7d5dd909e1d85a</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor members)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::CoverRefined</name>
    <filename>classIMP_1_1core_1_1CoverRefined.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>CoverRefined</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a45b7edfe7946a02e25dffc8c14b5663a</anchor>
      <arglist>(Refiner *ref, Float slack=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a49d6e22665e9d36656051ba9801161bc</anchor>
      <arglist>(Model *m, ParticleIndex a) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a80b9309092e4540d8619c815a8477081</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a17fb83d9ddc74d8dbbd733d5f262fff5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>ab10b1d0996db19da06ff014b2b6e5390</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a31dae7b2c84905622ac509b12d6fb6b7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slack</name>
      <anchorfile>classIMP_1_1core_1_1CoverRefined.html</anchorfile>
      <anchor>a3980e2fbd953be962573272c4814ce03</anchor>
      <arglist>(Float slack)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DataObject</name>
    <filename>classIMP_1_1core_1_1DataObject.html</filename>
    <templarg></templarg>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::DerivativesFromRefined</name>
    <filename>classIMP_1_1core_1_1DerivativesFromRefined.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>DerivativesFromRefined</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>a8000da2c305d871cdab633cbd148dd9f</anchor>
      <arglist>(Refiner *r, FloatKeys ks=XYZ::get_xyz_keys())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>a4f783d5b35ae14df5681112a475e64c4</anchor>
      <arglist>(Model *m, ParticleIndex a) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>a28761350f3847d171aceb595033e2785</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>a4d5a59d2d6ffce80f3d4df87c879a25d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>ad1f9cfe6dea0f03977d7a185cef99890</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesFromRefined.html</anchorfile>
      <anchor>a944c5fdde1cb212d1a0bc15ef7999dc1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DerivativesToRefined</name>
    <filename>classIMP_1_1core_1_1DerivativesToRefined.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>DerivativesToRefined</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>a9924217fcda26cf50f5f7562671fa725</anchor>
      <arglist>(Refiner *r, FloatKeys ks=XYZ::get_xyz_keys())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>a8febc2d2c52c4f87895fe2698286aba2</anchor>
      <arglist>(Model *m, ParticleIndex a) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>ad1a5c530dd2bc96b8cff6ac330874b68</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>a99f014c544d23514c1638e425b120110</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>aacc24e1604d88f2b3e053b90971d59b8</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DerivativesToRefined.html</anchorfile>
      <anchor>ab9416814b36e8897ad88ee48eb9ba669</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DiameterRestraint</name>
    <filename>classIMP_1_1core_1_1DiameterRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DiameterRestraint</name>
      <anchorfile>classIMP_1_1core_1_1DiameterRestraint.html</anchorfile>
      <anchor>a686dadc8304340cc099efc0e6d725841</anchor>
      <arglist>(UnaryFunction *f, SingletonContainer *sc, Float diameter)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DiameterRestraint.html</anchorfile>
      <anchor>a7418c9bab7ad7b0e58007cd5f478755c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DiameterRestraint.html</anchorfile>
      <anchor>a87137d4ed9009b6d51392a8c9773caea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1DiameterRestraint.html</anchorfile>
      <anchor>a8647ed2c72a04cbe009257e230dd72bd</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DihedralRestraint</name>
    <filename>classIMP_1_1core_1_1DihedralRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DihedralRestraint</name>
      <anchorfile>classIMP_1_1core_1_1DihedralRestraint.html</anchorfile>
      <anchor>a44a074b10c84117cf6f05bbec9348026</anchor>
      <arglist>(Model *m, UnaryFunction *score_func, ParticleIndexAdaptor p1, ParticleIndexAdaptor p2, ParticleIndexAdaptor p3, ParticleIndexAdaptor p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DihedralRestraint.html</anchorfile>
      <anchor>ab0b74a29d1501af1a0a14c4ea3049a04</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DihedralRestraint.html</anchorfile>
      <anchor>ab89d061135684e4f91880790ee12163c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1DihedralRestraint.html</anchorfile>
      <anchor>a9e096cd603e007fb34e09bec61b2e109</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Direction</name>
    <filename>classIMP_1_1core_1_1Direction.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_direction_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>ab7b6e17001f735bb4d272842eab34edf</anchor>
      <arglist>(int i, Float v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_direction_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a36d0385a6ecb80ad27503530d60ca8b6</anchor>
      <arglist>(const algebra::Vector3D &amp;v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_direction</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a577b7cc84f52685c502e1e36db46d30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_direction_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a91a56c27977455b0b43bbcf0cca99388</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_direction_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a4399b36a0bebc47af0275556db8d181a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_direction_is_optimized</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a7a0ad535489d5c0cb1fe65b6b88f6c78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reflect</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a07b53551231864ea050eacb8d5ee4b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_direction</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a6b32c37eb71afd8f484fd69de1648b21</anchor>
      <arglist>(const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_direction_is_optimized</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>aedf4d5c06857bb524894940c4ec65728</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_direction_key</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a1fef3034c7417edcbd91f6fbab099b35</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a9471177e07d27b49a458afccb8dc051a</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Direction</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a5daafe8c45336693253ed1b12a2f544b</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Direction</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Direction.html</anchorfile>
      <anchor>a4d99b93b94de25af8fb72841a6c4e919</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DirectionAngle</name>
    <filename>classIMP_1_1core_1_1DirectionAngle.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_angle_derivative</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>ac3624eaedc2cfc66aac72c7cfe5fae24</anchor>
      <arglist>(Float v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_angle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a9e085685419090f629b002a84459faac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_angle_derivative</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a5265cdb80f0788a8f36937d7f3954229</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_particle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a12550055e316228476033a05aa042037</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_particle_index</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a2dd252efc0331772e5e81449505252fb</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_angle_key</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>ab58bce6ee62c3b5b60ac07ac57690238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a4fea00872ac8e064f1d2c68578759575</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleIndexKey</type>
      <name>get_particle_key</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a7a3b04fa1400ca7ee23f9eb99bf30558</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectionAngle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>ab6690f325dd3fdd9bb126d8c6afd31af</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexPair ds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectionAngle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>ab4b663ebcf8e6fc6ea05bfe4787fd360</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexPair ds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectionAngle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>a237b38371936220cd3c3ca1785cc091f</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexAdaptor d0, ParticleIndexAdaptor d1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectionAngle</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1DirectionAngle.html</anchorfile>
      <anchor>ae8ebaf8c4ee5a1793b1bd42af368efd4</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexAdaptor d0, ParticleIndexAdaptor d1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DirectionMover</name>
    <filename>classIMP_1_1core_1_1DirectionMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type>Direction</type>
      <name>get_direction</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a17b729e668ba035e43d643070d3138bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_maximum_rotation</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a554c2e1b3507220b5fd46a1d93c56737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_reflect_probability</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>ab666712e8e0b4b7e4156e03aff45e4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a67f8d1e4a71162c69849e3a5d1ebac53</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_rotation</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a0ef3ec4295bf82511ae4912a1be72439</anchor>
      <arglist>(Float mr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reflect_probability</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>afc833fc7eda92adffc8e6ae62520e0fd</anchor>
      <arglist>(Float rp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a29d91cf566864032bcab657ddf60fde3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a5b49e6b4fc3ce529a9c1c6c46e2cd7c4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1DirectionMover.html</anchorfile>
      <anchor>a8ca2a822615560958e0fa50fd8085388</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DistancePairScore</name>
    <filename>classIMP_1_1core_1_1DistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1DistancePairScore.html</anchorfile>
      <anchor>a71740d22e71f6d713b37c5690f83b9a6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f69d849e2cd4451c580669d57b08a23</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1DistancePairScore.html</anchorfile>
      <anchor>aa04e6eb6643d0b4abbe37cf1db1a6106</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::DistanceRestraint</name>
    <filename>classIMP_1_1core_1_1DistanceRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DistanceRestraint</name>
      <anchorfile>classIMP_1_1core_1_1DistanceRestraint.html</anchorfile>
      <anchor>ad9a7eb6292db99b8df339ea289202632</anchor>
      <arglist>(Model *m, UnaryFunction *score_func, ParticleIndexAdaptor a, ParticleIndexAdaptor b, std::string name=&quot;DistanceRestraint %1%&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::EdgePairGeometry</name>
    <filename>classIMP_1_1core_1_1EdgePairGeometry.html</filename>
    <base>IMP::display::PairGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1EdgePairGeometry.html</anchorfile>
      <anchor>a96b3294dc124fedca9d0542b54d34522</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1EdgePairGeometry.html</anchorfile>
      <anchor>aca90f6a05e23796898337c71a09af079</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::EdgePairsGeometry</name>
    <filename>classIMP_1_1core_1_1EdgePairsGeometry.html</filename>
    <base>IMP::display::PairsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1EdgePairsGeometry.html</anchorfile>
      <anchor>a6a5d807ec6c1be25d8af9d17adc8ef86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1EdgePairsGeometry.html</anchorfile>
      <anchor>ac8add77f0c667e2a872a326186545243</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ExcludedVolumeRestraint</name>
    <filename>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ExcludedVolumeRestraint</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>aafdb5271265f58bdc71b60dacc22387b</anchor>
      <arglist>(SingletonContainerAdaptor sc, double k=1, double slack=10, std::string name=&quot;ExcludedVolumeRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_caches</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>a028c60fd336f2c43900b077b154fd886</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>a115624b689b68bc86e76773792b02807</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_decomposition</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>a6f9b48adf4984d0bea0d70ea4bcf3745</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>ab644e5c81a9ab23781499df6c647065d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>afc65a22721ede4863036b1f8bb2f1f88</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>a06b28094f800aba38af826f4e60690b9</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>pair_filters</name>
      <anchorfile>classIMP_1_1core_1_1ExcludedVolumeRestraint.html</anchorfile>
      <anchor>adf960a670699cdd8ba31fd7df6834678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::FilterProvenance</name>
    <filename>classIMP_1_1core_1_1FilterProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_method</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a6558c2f3d15cbb18198d4da7911c9059</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a665be1e8c598c1a28a7adfb8798ace7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_threshold</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>adf078de054f7a2052e61feef1f12c11c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_method</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a5eaeef71f6a46ad9e63addbc67c74f17</anchor>
      <arglist>(std::string method) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>aef4fc785883121c1fabf2cc53049d3f5</anchor>
      <arglist>(int frames) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_threshold</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a92c31c75a9acf3f75078c6d954b1f11d</anchor>
      <arglist>(double threshold) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FilterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a5d380f53debdeb6dd8a3d9a9917467fc</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string method, double threshold, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FilterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a3b9bb1273235755c9210e3e404b3eaa0</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string method, double threshold, int frames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FilterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a36dbeda7b2b26cb1fb50b85eb2597ef9</anchor>
      <arglist>(IMP::ParticleAdaptor pa, FilterProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FilterProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1FilterProvenance.html</anchorfile>
      <anchor>a22a1ef6b2b9d09e5f0e3892787974995</anchor>
      <arglist>(Model *m, ParticleIndex pi, FilterProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::FixedRefiner</name>
    <filename>classIMP_1_1core_1_1FixedRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function">
      <type></type>
      <name>FixedRefiner</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a3bb442e598984ba0e8560ce196706dd1</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedRefiner</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a71409c5169fd02437048f3a65057b912</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a347f66489dfe7ecc4ce138e57693b1cd</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>adeed40e844a93fcb230ab5b264aa9378</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a032bf5815adb4b876220eab17db0bb6a</anchor>
      <arglist>(Particle *p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes</type>
      <name>get_refined_indexes</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a7a3282cd0b2ecdcc6c3cbdcf02953986</anchor>
      <arglist>(Model *m, ParticleIndex) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexes const &amp;</type>
      <name>get_refined_indexes_by_ref</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a6f5f1258501bedda8ce309bdf7d91359</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1FixedRefiner.html</anchorfile>
      <anchor>a047634a9b796356e021900f421c24060</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Gaussian</name>
    <filename>classIMP_1_1core_1_1Gaussian.html</filename>
    <base>IMP::core::RigidBody</base>
    <member kind="function">
      <type>algebra::Gaussian3D</type>
      <name>get_gaussian</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a0a35e7a5ed9a37fb6fd122c350f5f5e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>get_global_covariance</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a1fd1ffbf80abed2e206df8ec7cbc8660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix3d</type>
      <name>get_local_covariance</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>ad39139215b41803115f1330401274fb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_variances</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a60d2e9e8aaa1c75be57b6d329e0d9c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_gaussian</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a9c7aaccfc3793025edac3d2eaa275b71</anchor>
      <arglist>(const algebra::Gaussian3D &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_global_covariance</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a30adb94d31a756294075afcb087c4a34</anchor>
      <arglist>(Eigen::Matrix3d covar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_covariance</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>ac4c3f1d05fc9b249c549d61d10eec6bf</anchor>
      <arglist>(const Eigen::Vector3d covar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variances</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>ae1b963a20a84884dd50aec2b215d5322</anchor>
      <arglist>(const algebra::Vector3D v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_global_covariance</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a6927e49e3bf3b015ed30d75d70f74b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_member</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ab1f022c6ae1db3d76af81fdc1b15f18b</anchor>
      <arglist>(ParticleIndexAdaptor p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_non_rigid_member</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ad6afb8be1ab840d31c0e7a6b5fcda4a4</anchor>
      <arglist>(ParticleIndexAdaptor p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>aabf0d8453abcc3f28d4bf79c4d4992bd</anchor>
      <arglist>(const algebra::Vector3D &amp;local_derivative, const algebra::Vector3D &amp;local_location, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a91be8fde5bc2268a05b278e4b09ffd14</anchor>
      <arglist>(const algebra::Vector3D &amp;local_derivative, const algebra::Vector3D &amp;global_derivative, const algebra::Vector3D &amp;local_location, const algebra::Rotation3D &amp;rot_local_to_global, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>adb1dbd74e7b5480c0827d699aac15be2</anchor>
      <arglist>(const algebra::Vector4D &amp;other_qderiv, const algebra::Rotation3D &amp;rot_other_to_local, const algebra::Rotation3D &amp;rot_local_to_global, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a3f7f96649672956c8a6a310a73d27246</anchor>
      <arglist>(const algebra::Vector4D &amp;qderiv, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_torque</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>aaa97333f82d88a313b50f49c8dc27282</anchor>
      <arglist>(const algebra::Vector3D &amp;torque_local, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndexes &amp;</type>
      <name>get_body_member_particle_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ae409738df900de261fbf6a8b4f7b55e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a974050a21886d67a3627c57a056a4242</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_coordinates_are_optimized</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>aed5972a76982f506a97571c66572bef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_member_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ac4ca78b1b154b54eeebe62e22b2425a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ParticleIndexes &amp;</type>
      <name>get_member_particle_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a04cbb350db3ffa071668c236772e66be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::algebra::ReferenceFrame3D</type>
      <name>get_reference_frame</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ac13846a110676d06ea4baaa5530f4a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::algebra::Rotation3D</type>
      <name>get_rotation</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ac1209d4693e1c8e612865d923e269e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorD&lt; 4 &gt;</type>
      <name>get_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>aa571733d4c574e3874777daef1f10d86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_torque</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a5113ee4808da2d41dd1cb23e6f09db99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_rotation</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>abdff03f43baa40b269004b1a87af9d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pull_back_body_member_adjoints</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>acd363de11c4b00cffe8168e4a24e98ab</anchor>
      <arglist>(ParticleIndex pi, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pull_back_body_member_adjoints</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>aed2dde23e30fbcf168f174798fa911d1</anchor>
      <arglist>(ParticleIndex pi, const algebra::Transformation3D &amp;TA, algebra::Transformation3D &amp;TB, algebra::Transformation3DAdjoint &amp;DTC, algebra::Transformation3DAdjoint &amp;DTA, algebra::Transformation3DAdjoint &amp;DTB, algebra::Vector3D &amp;betatorque, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pull_back_member_adjoints</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a60c0f68f45958e090c6144b9b59e434c</anchor>
      <arglist>(ParticleIndex pi, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pull_back_member_adjoints</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a76e5fbad51df6a7b03992147afa7951d</anchor>
      <arglist>(ParticleIndex pi, const algebra::Transformation3D &amp;T, algebra::Vector3D &amp;x, algebra::Vector3D &amp;Dy, algebra::Vector3D &amp;Dx, algebra::Transformation3DAdjoint &amp;DT, algebra::Vector3D &amp;xtorque, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pull_back_members_adjoints</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a9dcdf464d9fda38db8d3acb760e4f814</anchor>
      <arglist>(DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_member</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a94e644bf1e22f2257c095782c51dd994</anchor>
      <arglist>(ParticleIndexAdaptor p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinates_are_optimized</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a5b8937771b79790b1ee7e2000640e65f</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_rigid_member</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a16ccccf833e35d68003022c595f5247d</anchor>
      <arglist>(ParticleIndex pi, bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reference_frame</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a9f4a8f119d07286c0b233f98c2a5eab8</anchor>
      <arglist>(const IMP::algebra::ReferenceFrame3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reference_frame_from_members</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>acbf04739a3fa421072a81395e7e6090e</anchor>
      <arglist>(const ParticleIndexes &amp;members)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reference_frame_lazy</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a16aa0a44a153cc3efe7e7fb54191248e</anchor>
      <arglist>(const IMP::algebra::ReferenceFrame3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_members</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a11a13ca0f77cf349c8c871e8eeec96ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Gaussian</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>afd9cbab37963307598d28ebf3ab613b4</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Gaussian</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>ad4baf110be41f88988589ab34445b929</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Gaussian</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a0b69d1b1dbe516bac468d716d1373427</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Gaussian3D g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Gaussian</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Gaussian.html</anchorfile>
      <anchor>a67bd0085609920225b030817fb2f9079</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Gaussian3D g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a2c3bdc68d1e8c39070bb9e995c713b06</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKeys</type>
      <name>get_rotation_keys</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a047d586349302fb4caa21836c078aaf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBody</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a45be73e21f44d6246a31a1285aa1e6cf</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexesAdaptor ps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBody</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>ade7dc68a77c0397fd7bc1711e8d85c7c</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexesAdaptor ps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBody</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a004eb894648f584c24039040b9c1b7d3</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::ReferenceFrame3D rf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RigidBody</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a500ea9f86fa983526bff173076a42677</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::ReferenceFrame3D rf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>teardown_particle</name>
      <anchorfile>classIMP_1_1core_1_1RigidBody.html</anchorfile>
      <anchor>a31cf63db783589db090984512e76bc09</anchor>
      <arglist>(RigidBody rb)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::GenericAttributeSingletonScore</name>
    <filename>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</filename>
    <templarg>UF</templarg>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>GenericAttributeSingletonScore</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a809328fce3bd2cfb06d00431c6ff26fe</anchor>
      <arglist>(UF *f, FloatKey k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a1eb8c3f490156d6d62a4de403c097f4e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>aa7b30a6bbce315c31e52bfaa51be4ea3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a479c49b7cd7eb575e351a0cbaf369b68</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a6c3e00a3980f185db477b5a74632e98b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>ac7f5fbfe3b2584ba743063738206cb54</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a5be8cc3cc824ab4956f01de72b1a74db</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>UF *</type>
      <name>get_unary_function</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>ab9d1d9ff20900a6d33d737e67bb3db31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a4add52896ed146541e3861de31f26ecc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::GenericBoundingBox3DSingletonScore</name>
    <filename>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</filename>
    <templarg></templarg>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>GenericBoundingBox3DSingletonScore</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a4c822d5e5d8b3895b3f820b6cad91f42</anchor>
      <arglist>(UF *f, const algebra::BoundingBoxD&lt; 3 &gt; &amp;bb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a5d45f539625f4e666d527b20d799a4ca</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a412428ffcefb1edcd6f95798efd073d7</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a2225d9853e562ef9ca7163c3a51249fd</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a28bec8e29a0c72dd7fbd84cbb15f6488</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>aa52b0d468d16ae9d96fd99ea9bc4d7a7</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a28820272491f7f056c3aaecbac1eb332</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingBox3DSingletonScore.html</anchorfile>
      <anchor>a1af1ad06f964d8153d29bea5be4493c3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::GenericBoundingSphere3DSingletonScore</name>
    <filename>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</filename>
    <templarg></templarg>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a6c981fb109b270ba7b9028502312bf29</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a730aaaa36b390218ecb4a1d761fb0f87</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a768f93b39138a155b59b0272a1bca319</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>ac7d2ebb1de4b939369ff75439e0a975b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a10ad61dafb1d7510711d5820a2719907</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a096addc5cd4e6e0a287de9edb61c3530</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GenericBoundingSphere3DSingletonScore.html</anchorfile>
      <anchor>a2eafae038fa09ce1d25b3dc5dfa3a25e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::GenericDistanceToSingletonScore</name>
    <filename>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</filename>
    <templarg></templarg>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>ae033d5574b196267f2de8306f88281e6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>a3f2fdc9dc7fff4b37210f4e3f2e87e42</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>aa6720d414307ec03f4deb68f9aaa3841</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>aa2b091f620e800ab804c1f0f966a3098</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>aad37e153dfa9a37f81037b9f68ad6983</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>a9d2eff7f77f6dd9a0ddee232b50531cc</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GenericDistanceToSingletonScore.html</anchorfile>
      <anchor>a8f801980562376c37fac09dce6a1125a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::GridClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1GridClosePairsFinder.html</filename>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1GridClosePairsFinder.html</anchorfile>
      <anchor>a85a9c36fe3552127a724e41690bfe3d7</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1GridClosePairsFinder.html</anchorfile>
      <anchor>acda3c32a3215689b5f06f25611e5999d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1GridClosePairsFinder.html</anchorfile>
      <anchor>a1582d4ecc223a5e240b66086590a9ca0</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GridClosePairsFinder.html</anchorfile>
      <anchor>af082c2359c726e2381b1f19a5923dc18</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Harmonic</name>
    <filename>classIMP_1_1core_1_1Harmonic.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>Harmonic</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>a6dd71a368ea9182da1582c5e5dfbf29d</anchor>
      <arglist>(Float mean, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>ab86acac11fc6587094186e25f6a35a72</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>af3499dd170edf7d0da80511ee3db0d6e</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_k</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>a6ec2da8036ce3ab740d97c03895751cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_mean</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>ada961123970f4bf81700a699292a23b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>aa649fd86144ce3aafeab32f6dffbb453</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>a5021be58b31fc4ce3350707df42b438f</anchor>
      <arglist>(Float k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mean</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>a32c7052e555e7fb18e0e5c0bbd58f1f9</anchor>
      <arglist>(Float mean)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Float</type>
      <name>get_k_from_standard_deviation</name>
      <anchorfile>classIMP_1_1core_1_1Harmonic.html</anchorfile>
      <anchor>a34646455a8a2e301f2895d99a525b914</anchor>
      <arglist>(Float sd, Float t=297.15)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicDistancePairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicDistancePairScore.html</anchorfile>
      <anchor>a3d33f3730fc301345d93c0fedd0b00f1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicDistancePairScore.html</anchorfile>
      <anchor>aed2d6296770d0a56bc4cb4dd538bb885</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicDistancePairScore.html</anchorfile>
      <anchor>a68beedb901567c5021e4dfec26f66c97</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicLowerBound</name>
    <filename>classIMP_1_1core_1_1HarmonicLowerBound.html</filename>
    <base>IMP::core::Harmonic</base>
    <member kind="function">
      <type></type>
      <name>HarmonicLowerBound</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicLowerBound.html</anchorfile>
      <anchor>a460a9abed037efb975e249d271c590ab</anchor>
      <arglist>(Float mean, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicLowerBound.html</anchorfile>
      <anchor>a5aabd6095912a6f90669734590fa392a</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicLowerBound.html</anchorfile>
      <anchor>acb21bf1724151242ede97e3113d57aba</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicLowerBound.html</anchorfile>
      <anchor>aba357b2404e5350b41227629011dcf2f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicSphereDistancePairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicSphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSphereDistancePairScore.html</anchorfile>
      <anchor>a9e64ce0f0e463bf72a8661322970f427</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSphereDistancePairScore.html</anchorfile>
      <anchor>ae9466826ffafba100c7270bdca3d8fe0</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSphereDistancePairScore.html</anchorfile>
      <anchor>a64c7da07d35fb4d70e83f31ccb95a00d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicSurfaceDepthPairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicSurfaceDepthPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDepthPairScore.html</anchorfile>
      <anchor>a84ce885b9ade9ced58630ece76f471a5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDepthPairScore.html</anchorfile>
      <anchor>a5df05ea8490df6d61ca1d805a1468c2d</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDepthPairScore.html</anchorfile>
      <anchor>a5c8afebd948c11fb198b987f37444d2f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicSurfaceDistancePairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicSurfaceDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDistancePairScore.html</anchorfile>
      <anchor>a08b7de59b8cc20f2ce6f747a9a426940</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDistancePairScore.html</anchorfile>
      <anchor>ab76420cbb54f896753104866c355dc11</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceDistancePairScore.html</anchorfile>
      <anchor>a9ef5eb6dcd15de9fb6787949fd70fabb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicSurfaceHeightPairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicSurfaceHeightPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceHeightPairScore.html</anchorfile>
      <anchor>a7d66b89f7b9bc581122f896b8cd862e9</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceHeightPairScore.html</anchorfile>
      <anchor>a556f8d81f4bb461b2f5a21752cca7e89</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicSurfaceHeightPairScore.html</anchorfile>
      <anchor>a6edc47301a017785fb59ec7739346833</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicUpperBound</name>
    <filename>classIMP_1_1core_1_1HarmonicUpperBound.html</filename>
    <base>IMP::core::Harmonic</base>
    <member kind="function">
      <type></type>
      <name>HarmonicUpperBound</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBound.html</anchorfile>
      <anchor>a74090b255b26c877ec6a679fe8728932</anchor>
      <arglist>(Float mean, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBound.html</anchorfile>
      <anchor>a4d806ac05f2f5c2f18d4a47917cdd4b5</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBound.html</anchorfile>
      <anchor>a62486487395b8d8477fc3c0fb900b180</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBound.html</anchorfile>
      <anchor>ad393e8d01cffc3ebfae6f831b908f9be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicUpperBoundSphereDiameterPairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>a1ea2eac2f8e9232ea56a50f7370f053a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>a033939020a4e25d3fa946cd61e4d577a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>a0c17319d2881a760f05026cca7b886c7</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>ada423a11c4f2daeada53b50bd6e89145</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>ad2870286791f9b0d3106c06e2b90c12a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>a9ba8c472f2335e43cec48b4ba02f55ec</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDiameterPairScore.html</anchorfile>
      <anchor>a2966c83adf43116eaa53c6295176a6c5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicUpperBoundSphereDistancePairScore</name>
    <filename>classIMP_1_1core_1_1HarmonicUpperBoundSphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDistancePairScore.html</anchorfile>
      <anchor>a8e888903699575378f138ebda44e382d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDistancePairScore.html</anchorfile>
      <anchor>a6a007323ee38e5736fdcbb5bbe8f0161</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicUpperBoundSphereDistancePairScore.html</anchorfile>
      <anchor>aef92f1baf06d57350f132ad48ca4284f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HarmonicWell</name>
    <filename>classIMP_1_1core_1_1HarmonicWell.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>HarmonicWell</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicWell.html</anchorfile>
      <anchor>a658142a0679fe55c3c4eab4edcde2179</anchor>
      <arglist>(const FloatRange &amp;well, double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicWell.html</anchorfile>
      <anchor>a06fe1348a60dd498818cdaa54968c8c4</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicWell.html</anchorfile>
      <anchor>a3ce6e8a1a5fbd8dd2a02cb090d718c56</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1HarmonicWell.html</anchorfile>
      <anchor>abe23fc54376fe31700b9f35a8243bb86</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Hierarchy</name>
    <filename>classIMP_1_1core_1_1Hierarchy.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="struct">
    <name>IMP::core::HierarchyCounter</name>
    <filename>structIMP_1_1core_1_1HierarchyCounter.html</filename>
    <base>IMP::core::HierarchyVisitor</base>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_count</name>
      <anchorfile>structIMP_1_1core_1_1HierarchyCounter.html</anchorfile>
      <anchor>ab3fe47fe5e3e6b022392f5f4c9af40ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structIMP_1_1core_1_1HierarchyCounter.html</anchorfile>
      <anchor>ac2991102ff7aeb8f13664a9dbf255909</anchor>
      <arglist>(Hierarchy) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HierarchyTraits</name>
    <filename>classIMP_1_1core_1_1HierarchyTraits.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyTraits</name>
      <anchorfile>classIMP_1_1core_1_1HierarchyTraits.html</anchorfile>
      <anchor>aa53cdaf7d829b1cb8e549d548eee21d6</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::HierarchyVisitor</name>
    <filename>classIMP_1_1core_1_1HierarchyVisitor.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1core_1_1HierarchyVisitor.html</anchorfile>
      <anchor>aa45442c4bff64f5fea3fcc547783f412</anchor>
      <arglist>(Hierarchy p)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::InBoundingBox3DSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1InBoundingBox3DSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1InBoundingBox3DSingletonPredicate.html</anchorfile>
      <anchor>a0cf9ae42bb5aaa70a6fee3ee30fd38fb</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1InBoundingBox3DSingletonPredicate.html</anchorfile>
      <anchor>af1fa998b7aba964daef92b52eaf5631f</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1InBoundingBox3DSingletonPredicate.html</anchorfile>
      <anchor>a3fced30f670011ab2b3addda888829d5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::IsCollisionPairPredicate</name>
    <filename>classIMP_1_1core_1_1IsCollisionPairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1IsCollisionPairPredicate.html</anchorfile>
      <anchor>abf232658aeda2c34e76e05fc9130b959</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1IsCollisionPairPredicate.html</anchorfile>
      <anchor>ac0c8d83d2846af25de38595ab642bdfb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1IsCollisionPairPredicate.html</anchorfile>
      <anchor>a0d6133d87ab96f5ca2e715b85a3eadaa</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::KClosePairsPairScore</name>
    <filename>classIMP_1_1core_1_1KClosePairsPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>KClosePairsPairScore</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>a2a23964f1fa3d3f05bd6d9504d071880</anchor>
      <arglist>(PairScore *f, Refiner *r, int k=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>ac1950a3c2c6526859c64e19438eeda83</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_if_good_index</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>a2d4eb8ccaeeb542a34c944edc92284a2</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;vt, DerivativeAccumulator *da, double max) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>a7f76cf21a5606c60ba25c3c7a31e6158</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>a4cfd75c192fa655942e24c77ea233bec</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>ae966554465f471c87b5f6168fc0e60fd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>af016f6da6a63fee37e29cd70ead07077</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>ab51116d3e64e268a7900586066e52aac</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1KClosePairsPairScore.html</anchorfile>
      <anchor>a9b548fd16f0d5bf6b20f4f2ff77fdc98</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::LateralSurfaceConstraint</name>
    <filename>classIMP_1_1core_1_1LateralSurfaceConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1LateralSurfaceConstraint.html</anchorfile>
      <anchor>af133cb7abb386a8ebdd6d756f22e90db</anchor>
      <arglist>(DerivativeAccumulator *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1LateralSurfaceConstraint.html</anchorfile>
      <anchor>abe8987d7602fd70deb76f193ff4b4d24</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1LateralSurfaceConstraint.html</anchorfile>
      <anchor>a6afae043482f4bcb13f94241a5de5a69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1LateralSurfaceConstraint.html</anchorfile>
      <anchor>a8b311c3a7479c28fbaa9f71312bb7211</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1LateralSurfaceConstraint.html</anchorfile>
      <anchor>afca9bc35048c05d1812984a5f4ba201d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::LeavesRefiner</name>
    <filename>classIMP_1_1core_1_1LeavesRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function">
      <type></type>
      <name>LeavesRefiner</name>
      <anchorfile>classIMP_1_1core_1_1LeavesRefiner.html</anchorfile>
      <anchor>ab054bc5b90fd5c7a2906d93f39e7b412</anchor>
      <arglist>(HierarchyTraits tr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1LeavesRefiner.html</anchorfile>
      <anchor>a0427cc48cf6ddcc20599547acc102ab5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1core_1_1LeavesRefiner.html</anchorfile>
      <anchor>aa6b13dfa70802d2950bac4558b492e6e</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1core_1_1LeavesRefiner.html</anchorfile>
      <anchor>a7cbc3d2ac175308b5525a211506743f9</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1LeavesRefiner.html</anchorfile>
      <anchor>a1c8abc973f8c5357078a77bf5a9518a9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Linear</name>
    <filename>classIMP_1_1core_1_1Linear.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classIMP_1_1core_1_1Linear.html</anchorfile>
      <anchor>a78a9e64c8b406624650f3e84c35f28b9</anchor>
      <arglist>(double offset, double slope)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1Linear.html</anchorfile>
      <anchor>a871d628f33482feef1eed0c7a8f70524</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Linear.html</anchorfile>
      <anchor>ae10e1d1aaf589d05ffa83bb6829af0d9</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1Linear.html</anchorfile>
      <anchor>a7cac48120c4e69622ddae0ed43fe0880</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::LogNormalMover</name>
    <filename>classIMP_1_1core_1_1LogNormalMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>LogNormalMover</name>
      <anchorfile>classIMP_1_1core_1_1LogNormalMover.html</anchorfile>
      <anchor>a35eac23d670b0f85a39f792746c9063e</anchor>
      <arglist>(Model *m, ParticleIndex pi, double stddev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1LogNormalMover.html</anchorfile>
      <anchor>a450beaf15b9e8012ff3dfa88e8accaa7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1LogNormalMover.html</anchorfile>
      <anchor>af83b12a9a5196f37fe356c8a439bab4f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1LogNormalMover.html</anchorfile>
      <anchor>a07d3435dc4114ddf30d27a295baa71c2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1LogNormalMover.html</anchorfile>
      <anchor>a3ab084ff7c4b5928c39021f89c60f9b7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MCCGSampler</name>
    <filename>classIMP_1_1core_1_1MCCGSampler.html</filename>
    <base>IMP::Sampler</base>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>ad2439bf720e48f108c5250f2ad6fd84c</anchor>
      <arglist>(const algebra::BoundingBoxD&lt; 3 &gt; &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_refining</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a3ad5f593362818b3b8115f36e9bc1111</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_optimizer</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>aa307180bc674357cb82b6ecdd2904889</anchor>
      <arglist>(Optimizer *opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_monte_carlo_step_size</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a807e92f1b80c71db3185e60a80ab215e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_monte_carlo_step_size</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a68f2dc4a1fd0737415579b28155d4b45</anchor>
      <arglist>(FloatKey k, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_save_rejected_configurations</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>ab072521e8f3f9cdb7e2f69a921874c4e</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_attempts</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a32911e9615d0d3b413059135b2abcece</anchor>
      <arglist>(unsigned int att)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_monte_carlo_steps</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a0b61900968fd91f2b4192234f4d444fd</anchor>
      <arglist>(unsigned int cg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_conjugate_gradient_steps</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>a46645900c681c70f6ac00a19a22cecca</anchor>
      <arglist>(unsigned int cg)</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>optimizer_states</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>abcfc96768cbfb9af8fea719f83e159d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MCCGSampler.html</anchorfile>
      <anchor>ac3396625a0d1c9678dc4d8800b80f301</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MinimumRestraint</name>
    <filename>classIMP_1_1core_1_1MinimumRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MinimumRestraint</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>ad35e1d095a69d53f3a2c406a7b916e79</anchor>
      <arglist>(unsigned int num, const Restraints &amp;rs=Restraints(), std::string name=&quot;MinimumRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_caches</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>a0f05d07a263d63f863c9f9fd9ed46895</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>a838d7ec2ca1ec6ee5c220aedc1f158ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>a2c325d655bf25b1be46be2c9f9c4b55c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>a6173f88ca18d1bb7642c533e5f0a80ce</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>restraints</name>
      <anchorfile>classIMP_1_1core_1_1MinimumRestraint.html</anchorfile>
      <anchor>a5b36b73003cba6edf50e4929b0d77c45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ModifierVisitor</name>
    <filename>classIMP_1_1core_1_1ModifierVisitor.html</filename>
    <base>IMP::core::HierarchyVisitor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1core_1_1ModifierVisitor.html</anchorfile>
      <anchor>a6c09b9489b02c97c2b782f04ffabcd72</anchor>
      <arglist>(Hierarchy p) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MonteCarlo</name>
    <filename>classIMP_1_1core_1_1MonteCarlo.html</filename>
    <base>IMP::Optimizer</base>
    <member kind="function">
      <type>double</type>
      <name>get_best_accepted_energy</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a50ba901232129b77c29b3eff15937329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_accepted_energy</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a6d621aab95d1fef3468b54d77440d3fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score_threshold</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>aa681e9d15bef97b363e7a5e5de01da12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>ac508d54a76462d3c723e09fe873e3e12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_difference</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>adb13f82b2543c9f5c09ac440d6e2b88a</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_return_best</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>aedac094e374ec65b5b60a263e5875847</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score_moved</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a52520614f8b9a2b01c7f768f4f660a82</anchor>
      <arglist>(bool mv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_score_threshold</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a5a0db9e185ad86c22a767f69c6cc04c8</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>do_accept_or_reject_move</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>ae1caf7d706a65125df22814b3183d1f8</anchor>
      <arglist>(double score, double last, const MonteCarloMoverResult &amp;moved)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>abb9a82c5053692ce80be1a5436020152</anchor>
      <arglist>(const ParticleIndexes &amp;moved, bool force_full_score) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a7e72850ff322709df282c8039cce6102</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a8200b8a18a7f4897cd951bfe26084055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParticleIndexes</type>
      <name>get_movable_particles</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a81a1ed94226894a4d44315e85b860c76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_downward_steps</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a6379320d2f3514b266c1f5cc0f73dca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_upward_steps</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a4a042a1bfd36a427555380fcd358c857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_proposed_steps</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a250490918e3f711fa4eab605139ed613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_accepted_steps</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>ada7a6d9650f7f2cf4ffa18fb3e8d53e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>movers</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarlo.html</anchorfile>
      <anchor>a34fc5ee6f9f1405993f209a9fbdf79e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MonteCarloMover</name>
    <filename>classIMP_1_1core_1_1MonteCarloMover.html</filename>
    <base>IMP::ModelObject</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>aaa085c84202a79006eef5e1387ab0315</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloMover.html</anchorfile>
      <anchor>aba96371b6d10690911a7a9c8c40943e3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::core::MonteCarloMoverResult</name>
    <filename>structIMP_1_1core_1_1MonteCarloMoverResult.html</filename>
    <base>IMP::Value</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::MonteCarloWithBasinHopping</name>
    <filename>classIMP_1_1core_1_1MonteCarloWithBasinHopping.html</filename>
    <base>IMP::core::MonteCarloWithLocalOptimization</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloWithBasinHopping.html</anchorfile>
      <anchor>a7412ce72eb40736d72d0c74bdb4243d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloWithBasinHopping.html</anchorfile>
      <anchor>abac1c51125776f0f938cf81caddab71d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MonteCarloWithLocalOptimization</name>
    <filename>classIMP_1_1core_1_1MonteCarloWithLocalOptimization.html</filename>
    <base>IMP::core::MonteCarlo</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloWithLocalOptimization.html</anchorfile>
      <anchor>aa1f6b62c17ae9943179c549ceb83f900</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1core_1_1MonteCarloWithLocalOptimization.html</anchorfile>
      <anchor>a5277d49ebbe12a5210b23672d4f96ee7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MoveStatisticsScoreState</name>
    <filename>classIMP_1_1core_1_1MoveStatisticsScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MoveStatisticsScoreState.html</anchorfile>
      <anchor>a47e9c986dea0de90bebd83ccc3900637</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MoveStatisticsScoreState.html</anchorfile>
      <anchor>a24ade23538f1146bdb82eddb59de8df3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1MoveStatisticsScoreState.html</anchorfile>
      <anchor>a1d244496e59712eb5e1d16e123b2c52b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1MoveStatisticsScoreState.html</anchorfile>
      <anchor>a457414d6213fb49cbe30a450229d6e61</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MoveStatisticsScoreState.html</anchorfile>
      <anchor>a44b32ba695142bd8d47880b1d2fa0dfd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MSConnectivityRestraint</name>
    <filename>classIMP_1_1core_1_1MSConnectivityRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MSConnectivityRestraint</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>a5615f33fd0a9e8554834467ee315bc76</anchor>
      <arglist>(Model *m, PairScore *ps, double eps=0.1)</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>do_create_current_decomposition</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>a8b0cf58ff525c7ac778799d2410b46e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>a4e7c0e6987e0d791a625acc353174f6f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticlePairsTemp</type>
      <name>get_connected_pairs</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>aeff5f05f8033e9a136043e4dc5ed1047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PairScore *</type>
      <name>get_pair_score</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>adbb8bd7d4b45c8f7ce115788afd16b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>a6d1ea94a30275176399ba894cb0c4cc2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MSConnectivityRestraint.html</anchorfile>
      <anchor>ac8626333924979b7ea80b922c8566e7d</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::MultipleBinormalRestraint</name>
    <filename>classIMP_1_1core_1_1MultipleBinormalRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MultipleBinormalRestraint</name>
      <anchorfile>classIMP_1_1core_1_1MultipleBinormalRestraint.html</anchorfile>
      <anchor>a43897a672f1efc428b5b196f788c281d</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;q1, const ParticleIndexQuad &amp;q2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_term</name>
      <anchorfile>classIMP_1_1core_1_1MultipleBinormalRestraint.html</anchorfile>
      <anchor>a5d2e581b729662bc10e2dad4bc688203</anchor>
      <arglist>(const BinormalTerm &amp;term)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1MultipleBinormalRestraint.html</anchorfile>
      <anchor>a8b82e6412d704b997e69e7b6edce72d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1MultipleBinormalRestraint.html</anchorfile>
      <anchor>ae70053b941e286eba4342a6012305c08</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1MultipleBinormalRestraint.html</anchorfile>
      <anchor>a62681d6ed43630df6360190007fd03bd</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::NearestNeighborsClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1NearestNeighborsClosePairsFinder.html</filename>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1NearestNeighborsClosePairsFinder.html</anchorfile>
      <anchor>a49795fb8a4a00e6c66afd4dcf4eed137</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1NearestNeighborsClosePairsFinder.html</anchorfile>
      <anchor>a7990166d66a69586e64b973246a640d6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1NearestNeighborsClosePairsFinder.html</anchorfile>
      <anchor>a2413193c216272361419b7e6b7bae533</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1NearestNeighborsClosePairsFinder.html</anchorfile>
      <anchor>a4f3b4d320dfcb0277fb7cddc09fc2e3d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::NeighborsTable</name>
    <filename>classIMP_1_1core_1_1NeighborsTable.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>const ParticleIndexes &amp;</type>
      <name>get_neighbors</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>a1c9e3ba91c37fe4efb7df9c090679343</anchor>
      <arglist>(ParticleIndex pi) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>ab49acfb8eecb1e9844d0e52cfa4cb575</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>ad03971bee1b586818a5a9a89d45a97e5</anchor>
      <arglist>(DerivativeAccumulator *) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>a9466d34259546d4dddcfb8c25f6816d3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>ab4808a685da2b29d092bef684a6e0c7c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1NeighborsTable.html</anchorfile>
      <anchor>a2e963a586c7bd15b3bc38e06559440b7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::NonRigidMember</name>
    <filename>classIMP_1_1core_1_1NonRigidMember.html</filename>
    <base>IMP::core::RigidBodyMember</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_internal_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>a0b843a7a7e6fbe1b51a589b77fcd428d</anchor>
      <arglist>(const algebra::Vector3D &amp;deriv_parent, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_internal_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>ade46fb3f9d4031dc92a335054d6cbd50</anchor>
      <arglist>(const algebra::Vector4D &amp;local_qderiv, const algebra::Rotation3D &amp;rot_local_to_parent, const algebra::Rotation3D &amp;rot_parent_to_global, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_internal_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>a7c01f488fa45822097892a7abf929858</anchor>
      <arglist>(const algebra::Vector4D &amp;qderiv, DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_internal_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>a59c45dabeccc68564227d7a2bba0be87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector4D</type>
      <name>get_internal_rotational_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>ae361a24e9a766d5920e1653e69083bd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const algebra::Vector3D &amp;</type>
      <name>get_internal_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>afcca0880220815eaeda997316e73bfeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_internal_transformation</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>a1b2de56684ac4d70d7bf185f037e5a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>a327b14353810257ab92fcd2ea5187c28</anchor>
      <arglist>(const algebra::Vector3D &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_internal_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>a38cd1eed49f3424ea43360c7d5fd9ebf</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_internal_transformation</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>a20d2d7d753660ff877180065eacfdad8</anchor>
      <arglist>(const algebra::Transformation3D &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1NonRigidMember.html</anchorfile>
      <anchor>ae058289281714a601e2350e9f3f34a8d</anchor>
      <arglist>(Model *m, ParticleIndex p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMember.html</anchorfile>
      <anchor>ad07bb2a3ac4655c35961f69e80ce450a</anchor>
      <arglist>(Model *m, ParticleIndexAdaptor p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::NormalizedSphereDistancePairScore</name>
    <filename>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>a9434c2fa349396c16fae42e20f55a893</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>a4f7cf784c7b989bcf8802c13471923fd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>ae898f75201bd65fdebbe2898832640ad</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>a586ec0ff8bd5858b2c741256ee181953</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>a262beb27fb444ffa99ccb06efa525e93</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>ad659b5d8368fadc36bcf8e7475a0196e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1NormalizedSphereDistancePairScore.html</anchorfile>
      <anchor>a762cf5853d8969a6ba230c86985d46f1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::NormalMover</name>
    <filename>classIMP_1_1core_1_1NormalMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>NormalMover</name>
      <anchorfile>classIMP_1_1core_1_1NormalMover.html</anchorfile>
      <anchor>a48919b12b38b05c12484599efa2ba5b4</anchor>
      <arglist>(Model *m, ParticleIndex pi, double stddev)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1NormalMover.html</anchorfile>
      <anchor>a4778d8a4171946f3c737971183feed26</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1NormalMover.html</anchorfile>
      <anchor>a55cfac132acd061836fb088a3459103c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1NormalMover.html</anchorfile>
      <anchor>a9b66e1efe5d8854a15f285c425cd3f6e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1NormalMover.html</anchorfile>
      <anchor>a698eee4eadce74bd1d149e76298ae231</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::OpenCubicSpline</name>
    <filename>classIMP_1_1core_1_1OpenCubicSpline.html</filename>
    <base>ScoreUnaryFunction&lt; score_functor::OpenCubicSpline &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a3214a0834690e50e804cd821ea6e27eb</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a42797ecd8ab59e271f1ce1463b37789b</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a06593c61dd70c347f2250188c7b8418d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::OrderedTypePairPredicate</name>
    <filename>classIMP_1_1core_1_1OrderedTypePairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>a4cdd78c19ba575d124f5b4916ba6dd69</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>a5162fff7c8b704586a3a1237c4223005</anchor>
      <arglist>(const core::ParticleTypes &amp;types)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>aa7e047da94b8bd0c3ef3e5bd47c344ab</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>a0a2a693c8fa8a35abff0d04270c628eb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>a922f3b8f4244bd18157fe4df50abebf8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypePairPredicate.html</anchorfile>
      <anchor>aacd0610f609a0a368d76ec248046c9cd</anchor>
      <arglist>(Model *m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::OrderedTypeQuadPredicate</name>
    <filename>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>a21cf7c96f0f49fcb158c3acaf8093868</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>af49353071fdc72c8bf43104866c95ea4</anchor>
      <arglist>(const core::ParticleTypes &amp;types)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>a6dd21354976bdf9caff9e8bdc311b604</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>aef8918a3d678580abf25e2c52adb123d</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>af24d388f986df36b48d0e49c9db77b58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeQuadPredicate.html</anchorfile>
      <anchor>a72fa6315d0d93d728cedbd743fb775cd</anchor>
      <arglist>(Model *m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::OrderedTypeSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a59650a64f97f6c97de81a507eaa3502b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a58ea479ea42abb2ec865f71f105f6fc9</anchor>
      <arglist>(const core::ParticleTypes &amp;types)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>aa4a598638103fb041eb12e48518922a2</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>ac3592182910c406d29188a3b74d595d7</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a334d8736b03caf2db23f1c354a9a3abb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a93ca6fe2f37c2ce6d6749862436b4389</anchor>
      <arglist>(Model *m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::OrderedTypeTripletPredicate</name>
    <filename>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>a69ab5e403c015386e44d950aa5f13f20</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>ab715319bdd4d21b8385106135e7ca375</anchor>
      <arglist>(const core::ParticleTypes &amp;types)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>abeefcbb311c25386a2390b7d4a066730</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>a2a498a6ee2c5d3ee8cefdbf333a2567a</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>a012956e9d2d70f741dcb9367970d48ba</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup_for_get_value_index_in_batch</name>
      <anchorfile>classIMP_1_1core_1_1OrderedTypeTripletPredicate.html</anchorfile>
      <anchor>a3fef6067798656db85c70e170c9fc874</anchor>
      <arglist>(Model *m) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::PairConstraint</name>
    <filename>classIMP_1_1core_1_1PairConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1PairConstraint.html</anchorfile>
      <anchor>a6192d0300e74162d5187d91686c4cb48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1PairConstraint.html</anchorfile>
      <anchor>a7dc6b47c589fe48f476ab4e5f99a8cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1PairConstraint.html</anchorfile>
      <anchor>a3e15166a16d333b8298a833a49ef5391</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::PairRestraint</name>
    <filename>classIMP_1_1core_1_1PairRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>PairRestraint</name>
      <anchorfile>classIMP_1_1core_1_1PairRestraint.html</anchorfile>
      <anchor>a4153733cf2c74d9c87a379a631ff194f</anchor>
      <arglist>(Model *m, PairScore *ss, const ParticleIndexPair &amp;vt, std::string name=&quot;PairRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1PairRestraint.html</anchorfile>
      <anchor>afef8bc56c661c096345aa1518d1e055f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1PairRestraint.html</anchorfile>
      <anchor>a84cda4424585c80d0cfbf211fe5160c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1PairRestraint.html</anchorfile>
      <anchor>a7a8085fa3a66010e2c4159f9c5caa707</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::PredicateSingletonScore</name>
    <filename>classIMP_1_1core_1_1PredicateSingletonScore.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>a46e698aa82f95afeb2e23c5543b4db4f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>a4ddf2892b917d772c2a450fe76e6cb2e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>a7797205da4a8bdc0b1ba8af198124ad5</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>aa6a078243b42bc1361a6db2048b70005</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>a57422fe6b3b37f6f8d13127df7ce1bd6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>aeb5082ce7758d906005c6ce98fad8200</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1PredicateSingletonScore.html</anchorfile>
      <anchor>a937e540a5f2ff9c5f05d540f13a4893d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Provenance</name>
    <filename>classIMP_1_1core_1_1Provenance.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::Provenanced</name>
    <filename>classIMP_1_1core_1_1Provenanced.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Provenanced</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Provenanced.html</anchorfile>
      <anchor>ad673bbc3c3472dc1a27217940fd719cd</anchor>
      <arglist>(Model *m, ParticleIndex pi, Provenance p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Provenanced</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Provenanced.html</anchorfile>
      <anchor>a975e54d208981493f518a3c27ef5003a</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Provenance p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::QuadConstraint</name>
    <filename>classIMP_1_1core_1_1QuadConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1QuadConstraint.html</anchorfile>
      <anchor>a785df8031afa0f6d0db8bfcfc73990ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1QuadConstraint.html</anchorfile>
      <anchor>a197cf4b414a40e6788a0b13ba9c09dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1QuadConstraint.html</anchorfile>
      <anchor>a6281280c3c41d823b42b2da27060d7e6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::QuadraticClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</filename>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>a74862796d00bda5f6056228e4f63d247</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_close_and_filtered</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>aceb8fc137d4a06bcc35d11d0a0da0342</anchor>
      <arglist>(Particle *a, Particle *b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_close_and_filtered</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>a5c4410e03d4bebb38c337c3d44803f46</anchor>
      <arglist>(Model *m, ParticleIndex a, ParticleIndex b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>a2030ff2b625cc2883c9b36bfdf3a6f35</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>aa4ad497c66af38b23c80a874ab488dd5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1QuadraticClosePairsFinder.html</anchorfile>
      <anchor>acd9da2a086300d9ee37262b5cbd2a600</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::QuadRestraint</name>
    <filename>classIMP_1_1core_1_1QuadRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>QuadRestraint</name>
      <anchorfile>classIMP_1_1core_1_1QuadRestraint.html</anchorfile>
      <anchor>a613d76a32ec344886a02b1039100b8bd</anchor>
      <arglist>(Model *m, QuadScore *ss, const ParticleIndexQuad &amp;vt, std::string name=&quot;QuadRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1QuadRestraint.html</anchorfile>
      <anchor>af9cc15fcf9e57324d3846e207d282f6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1QuadRestraint.html</anchorfile>
      <anchor>af907eb4f6f102beeb5719c67991775ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1QuadRestraint.html</anchorfile>
      <anchor>af1dd15f17f01c856bad994391e8e5db3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Reference</name>
    <filename>classIMP_1_1core_1_1Reference.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Reference</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Reference.html</anchorfile>
      <anchor>a83dc213faa437f37384eeabfa4923883</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndexAdaptor reference)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Reference</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Reference.html</anchorfile>
      <anchor>a71b485271947fe268a60fe762642fb87</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndexAdaptor reference)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RefinedPairsPairScore</name>
    <filename>classIMP_1_1core_1_1RefinedPairsPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>RefinedPairsPairScore</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>adb30d6b0d713e0b78829e7da0685335d</anchor>
      <arglist>(Refiner *r, PairScore *f)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>a0021236803679b4356b3b26e11147498</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>a0f522a8aa71fbffaff33b51a322552cb</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>ae96f044c192f67887958b6c71cf5f006</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>ac4a8391002ebf342cc1db07eb0253d21</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>adbc394d4dd7c8e62fe898d0b5ee12b7a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>a6684df945be208ecee8d62e153e4f567</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RefinedPairsPairScore.html</anchorfile>
      <anchor>ac17297cd323aafba4b203106f2c05e25</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RestraintsScoringFunction</name>
    <filename>classIMP_1_1core_1_1RestraintsScoringFunction.html</filename>
    <base>IMP::ScoringFunction</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBody</name>
    <filename>classIMP_1_1core_1_1RigidBody.html</filename>
    <base>IMP::core::XYZ</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyAnglePairScore</name>
    <filename>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a35a2c1b41001f4e1ce958bf6d0e587c4</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a8f56691edbd0f5e42eaa64e3ce7e9c96</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>af0f50f4dbd0fc74cdec4b8ad23f51b71</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a324d95f5ccf68d06ebe2549d0f3c5038</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a8e1b2080b0e775e98f8fcc6d016ebd4c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a08b638dc06ce5d8d4710741bd1de8071</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyAnglePairScore.html</anchorfile>
      <anchor>a44ceb3c6e04d35e73c0db95235bb2964</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyDerivativeGeometry</name>
    <filename>classIMP_1_1core_1_1RigidBodyDerivativeGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyDerivativeGeometry.html</anchorfile>
      <anchor>a8c7c6999ec2ff8d4bea0796c84d9828a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyDerivativesGeometry</name>
    <filename>classIMP_1_1core_1_1RigidBodyDerivativesGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyDerivativesGeometry.html</anchorfile>
      <anchor>ab0b5d91eacd0b2c9bdc4020f9df2bc44</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyDerivativesGeometry.html</anchorfile>
      <anchor>a8548bbdceccaa870c3b5c9a8abf33d31</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyDistancePairScore</name>
    <filename>classIMP_1_1core_1_1RigidBodyDistancePairScore.html</filename>
    <base>IMP::core::KClosePairsPairScore</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyDistancePairScore</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyDistancePairScore.html</anchorfile>
      <anchor>a4975b55d39c224707d50b2a3e187b30f</anchor>
      <arglist>(PairScore *ps, Refiner *r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyFrameGeometry</name>
    <filename>classIMP_1_1core_1_1RigidBodyFrameGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyFrameGeometry.html</anchorfile>
      <anchor>a7f1b099e00eaef27475000e119acf5aa</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyFramesGeometry</name>
    <filename>classIMP_1_1core_1_1RigidBodyFramesGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyFramesGeometry.html</anchorfile>
      <anchor>a8733155b4d3c13d2c8ae1d82a0c424b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyFramesGeometry.html</anchorfile>
      <anchor>af602c54b8f1fb6f4bb2e6b365936900b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyHierarchyGeometry</name>
    <filename>classIMP_1_1core_1_1RigidBodyHierarchyGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyHierarchyGeometry.html</anchorfile>
      <anchor>a3b3301c7f7af28d4510f7b2b3a2b744b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyHierarchyGeometry.html</anchorfile>
      <anchor>a70dbbe0d391ff16da919bf56e3497ff4</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyMember</name>
    <filename>classIMP_1_1core_1_1RigidBodyMember.html</filename>
    <base>IMP::core::XYZ</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyMover</name>
    <filename>classIMP_1_1core_1_1RigidBodyMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyMover</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMover.html</anchorfile>
      <anchor>aef82d10c3d7545ee752299349416c9df</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float max_translation, Float max_rotation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMover.html</anchorfile>
      <anchor>ad56111744317e19e52e7b4c6b555f513</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMover.html</anchorfile>
      <anchor>a73ecce736a46d2d1838711985511fca3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMover.html</anchorfile>
      <anchor>a62771295c97181354c12641f0ce56286</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyMover.html</anchorfile>
      <anchor>a35d270b27f4698d3b47e6d802b85156d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyTorque</name>
    <filename>classIMP_1_1core_1_1RigidBodyTorque.html</filename>
    <base>IMP::display::SegmentGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1SegmentGeometry.html</anchorfile>
      <anchor>a109240e4e4553e2b6396c5c71927cf2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1SegmentGeometry.html</anchorfile>
      <anchor>aa3363fc6c13db3bc70973f5329f021d2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyTunneler</name>
    <filename>classIMP_1_1core_1_1RigidBodyTunneler.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyTunneler</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a6d5bd6f5ed7628145e23ba52f193b68d</anchor>
      <arglist>(Model *m, ParticleIndexes pis, ParticleIndex ref, double k, double move_probability=1.)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_point</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>ae77f380c1a78ecffa96a733c9d5f2c8c</anchor>
      <arglist>(Floats fl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a5764ac5d59b3d36094112623258a3165</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_stats</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>ab6b8f5b6999d24b796259bf6c035b3e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Floats</type>
      <name>get_reduced_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a0249396bb7c1312e424bfaa52c5bd7b3</anchor>
      <arglist>(Model *m, ParticleIndex target, ParticleIndex ref)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Floats</type>
      <name>get_reduced_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>aeb453ede39ea46d34a10f173b4629d1d</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_reduced_coordinates</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a486d1fee01f3e690b7f8600cc3cc76ec</anchor>
      <arglist>(Model *m, ParticleIndex target, ParticleIndex ref, Floats coords)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>acc3e744e844a9204d0768cfa6da649e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a73ac11c6a09157918a7fc9b6b24df21e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyTunneler.html</anchorfile>
      <anchor>a28059432f078c2dbc7cdcdeed00cd608</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidBodyUmbrella</name>
    <filename>classIMP_1_1core_1_1RigidBodyUmbrella.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyUmbrella</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyUmbrella.html</anchorfile>
      <anchor>ad54133eab532a0214b24b073c1c3863b</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndex ref, Floats x0, double alpha, double k, std::string name=&quot;RigidBodyUmbrella %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidBodyUmbrella</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyUmbrella.html</anchorfile>
      <anchor>a2beb7d289351a35418914dfe3d58802d</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndex ref, double lambda, Floats x1, Floats x2, double alpha, double k, std::string name=&quot;RigidBodyUmbrella %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyUmbrella.html</anchorfile>
      <anchor>a11c8d8b515321524b074dbb6768e7171</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyUmbrella.html</anchorfile>
      <anchor>a75972f241b66fda9feab6378ddcf1075</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1RigidBodyUmbrella.html</anchorfile>
      <anchor>af078611e5502ff44cd0e27dbf6bd48aa</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidClosePairsFinder</name>
    <filename>classIMP_1_1core_1_1RigidClosePairsFinder.html</filename>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1RigidClosePairsFinder.html</anchorfile>
      <anchor>aeaac6b7d658a750eb12a77669bde2e31</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1RigidClosePairsFinder.html</anchorfile>
      <anchor>a64466874b9e2f4782a6e75b66c2bfa24</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1core_1_1RigidClosePairsFinder.html</anchorfile>
      <anchor>a5a64854ab7aee7c5826c53a28b07d1c0</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1RigidClosePairsFinder.html</anchorfile>
      <anchor>af7c263cacf63630775054bf620456d58</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::RigidMember</name>
    <filename>classIMP_1_1core_1_1RigidMember.html</filename>
    <base>IMP::core::RigidBodyMember</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1RigidMember.html</anchorfile>
      <anchor>a2db92354804a38e5ea63fdbe7f9c5f85</anchor>
      <arglist>(Model *m, ParticleIndexAdaptor p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SampleProvenance</name>
    <filename>classIMP_1_1core_1_1SampleProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_method</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a984cb0982e07a9b47ecb78169b33f495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>ab84026926fc1381e05afc96d2a0054ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_iterations</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a1ae31b2488a72cb7b9c32cd9137dbaba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_replicas</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a16bea462683c4f05fd93067e0451199c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_method</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>aa2b393e1870a9016e93f7da97afa20b9</anchor>
      <arglist>(std::string method) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_frames</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>afa14ccf32e2267eeb057b9b20a8b0d8f</anchor>
      <arglist>(int frames) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_iterations</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a5e7dd1b274670566d7755cd65927801b</anchor>
      <arglist>(int iterations) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_replicas</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>aed2e8b5fa6568f3ee9886690a1059daf</anchor>
      <arglist>(int replicas) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>ac9f2f1b32dd4fc7353f9e58aef555134</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string method, int frames, int iterations, int replicas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a9e4d57ea67f0b701fcaf1391d1c2dbd1</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string method, int frames, int iterations, int replicas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a6b60b02aecf3d234a9cf7124986dcc54</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string method, int frames, int iterations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>ae58bc3939e285eb5d78ff427010e228c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string method, int frames, int iterations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>a178dbb7a6a1acf8893c4a273a76c81d1</anchor>
      <arglist>(IMP::ParticleAdaptor pa, SampleProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SampleProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SampleProvenance.html</anchorfile>
      <anchor>af02b0b8650e58bf9aae34b7b61557283</anchor>
      <arglist>(Model *m, ParticleIndex pi, SampleProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::ScriptProvenance</name>
    <filename>classIMP_1_1core_1_1ScriptProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a3b9633a48d3b822fc9d140f5cab7db3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_filename</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a915c9ad21a6eadf66fd06bdbefe4e986</anchor>
      <arglist>(std::string filename) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScriptProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a626325de0e441b9cebb7855633c1307b</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScriptProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a5fbee0521c2214e2580ef2d1ef3f5929</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScriptProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a720500fc75ca95d5db25545a2e790a40</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ScriptProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScriptProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1ScriptProvenance.html</anchorfile>
      <anchor>a248401f9e74c426ff1b66c0c724da23a</anchor>
      <arglist>(Model *m, ParticleIndex pi, ScriptProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SerialMover</name>
    <filename>classIMP_1_1core_1_1SerialMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>SerialMover</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>a266d91eb9bc571e97f7135c671cb1da9</anchor>
      <arglist>(const MonteCarloMoversTemp &amp;mvs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>aca7b1a6b6d49fa12df24890f1cbb6fd6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_accept</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>a47058c742d5f98359951f20cc82352be</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>a4a6fb325bf8c642aeed7b75739a094a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>ac4a02e3778fd850a306e601bef69ce3d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1SerialMover.html</anchorfile>
      <anchor>ad9543ebfff98cdd5fb61d41da4d59311</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SingletonConstraint</name>
    <filename>classIMP_1_1core_1_1SingletonConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SingletonConstraint.html</anchorfile>
      <anchor>ab115551d27b3d326d98ce63f891e9468</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SingletonConstraint.html</anchorfile>
      <anchor>a4ed496dc4a85d294ea673121293eacad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1SingletonConstraint.html</anchorfile>
      <anchor>a03b274675877f2df107df4e4c697d40e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SingletonRestraint</name>
    <filename>classIMP_1_1core_1_1SingletonRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>SingletonRestraint</name>
      <anchorfile>classIMP_1_1core_1_1SingletonRestraint.html</anchorfile>
      <anchor>ae3d07f96fc76707658b5ddea1fd14088</anchor>
      <arglist>(Model *m, SingletonScore *ss, ParticleIndex vt, std::string name=&quot;SingletonRestraint %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SingletonRestraint.html</anchorfile>
      <anchor>a27d752b4b67de2c72d3f8469a040cc3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SingletonRestraint.html</anchorfile>
      <anchor>a5db661fd24f4fa1f76503c4f1837e9e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1SingletonRestraint.html</anchorfile>
      <anchor>a5d682d72bca5443f4d4499a880def61d</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SoftSpherePairScore</name>
    <filename>classIMP_1_1core_1_1SoftSpherePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SoftSpherePairScore.html</anchorfile>
      <anchor>a5f5eb4558e2a0b6f9fafb1574e6ae62b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SoftSpherePairScore.html</anchorfile>
      <anchor>a4072dd6c5bf8f0863c60a450bc9b943d</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SoftSpherePairScore.html</anchorfile>
      <anchor>a11e82edbb8c56764e73767905d04f7ad</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SoftSubSurfacePairScore</name>
    <filename>classIMP_1_1core_1_1SoftSubSurfacePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SoftSubSurfacePairScore.html</anchorfile>
      <anchor>a923193c212bb65aefb1ea02c98ae8799</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SoftSubSurfacePairScore.html</anchorfile>
      <anchor>a38120e0273c77f9a47a77ddedd41fe64</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SoftSubSurfacePairScore.html</anchorfile>
      <anchor>a822fc07ea4d8c52e8e15570c5f53af38</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SoftSuperSurfacePairScore</name>
    <filename>classIMP_1_1core_1_1SoftSuperSurfacePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SoftSuperSurfacePairScore.html</anchorfile>
      <anchor>acfff4e0bcfef2635948f624495b344eb</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SoftSuperSurfacePairScore.html</anchorfile>
      <anchor>af9bf50705ca303d95ae729e374b46699</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SoftSuperSurfacePairScore.html</anchorfile>
      <anchor>aaae29f0862260f2c70f69aa1333d4aff</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SoftwareProvenance</name>
    <filename>classIMP_1_1core_1_1SoftwareProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_location</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>acc8b6d30fe5553a2fee5ea1227a27609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_software_name</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a6e30856da9fbd63ef61cc6ba38cdb586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_version</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a33af6f3ef5e6f3be6dea05a8eadd3188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_location</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>aaf85a2e2fb700d0e9e2e179d5e2edfaa</anchor>
      <arglist>(std::string location) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_software_name</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a4b229b4ab295f3de0b135498112fff54</anchor>
      <arglist>(std::string name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_version</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>af652c54679e2e8cf9c5db80fcc133368</anchor>
      <arglist>(std::string version) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoftwareProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a7e594d1afc2a39053e0e5a9bf3c5b43f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string name, std::string version, std::string location)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoftwareProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a2740e3e81caed401cc58f05df2e1a238</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string name, std::string version, std::string location)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoftwareProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a2d54fbf32f195a5c26a4ed8f3a613720</anchor>
      <arglist>(IMP::ParticleAdaptor pa, SoftwareProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoftwareProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1SoftwareProvenance.html</anchorfile>
      <anchor>a3f5dd1f507dd6187510c00565573593a</anchor>
      <arglist>(Model *m, ParticleIndex pi, SoftwareProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SphereDistancePairScore</name>
    <filename>classIMP_1_1core_1_1SphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistancePairScore.html</anchorfile>
      <anchor>ab2a08064eec499d0471fc2a917ca433c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistancePairScore.html</anchorfile>
      <anchor>a3e39ff56be09a4dbe371e69a0442ce1b</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistancePairScore.html</anchorfile>
      <anchor>a5448b4334f35992c0a2c25a2f209749b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SphereDistanceToSingletonScore</name>
    <filename>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>ae553891f5736ff9c80dedf6e353aad6e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>a3ae7307866411bd96129da4aec072319</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>aa54f87b65f4004db41059766858cfb3e</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>aac2303bcc1f1a623e3c2180576c16ba9</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>a50788e0f7cc3ea905d9a9abd12c03f57</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>acfc9e6a137bad78ee841ae5c47699c01</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SphereDistanceToSingletonScore.html</anchorfile>
      <anchor>a609b2f1ae75371e1273bbc0202e0f4ef</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::StatisticalPairScore</name>
    <filename>classIMP_1_1core_1_1StatisticalPairScore.html</filename>
    <templarg>Key</templarg>
    <templarg>BIPARTITE</templarg>
    <templarg>INTERPOLATE</templarg>
    <templarg>SPARSE</templarg>
    <base>DistancePairScore&lt; score_functor::Statistical&lt; Key, BIPARTITE, INTERPOLATE, SPARSE &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>StatisticalPairScore</name>
      <anchorfile>classIMP_1_1core_1_1StatisticalPairScore.html</anchorfile>
      <anchor>a44e0c53a5108a702a14749ba813303da</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StatisticalPairScore</name>
      <anchorfile>classIMP_1_1core_1_1StatisticalPairScore.html</anchorfile>
      <anchor>aec58d0b096b9c8e80a6bde0dfeeb286e</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>score_functor::Statistical&lt; Key, BIPARTITE, INTERPOLATE, SPARSE &gt; &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1a67f29a44377c6d45ee0c9e14fcf2be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SteepestDescent</name>
    <filename>classIMP_1_1core_1_1SteepestDescent.html</filename>
    <base>IMP::AttributeOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1core_1_1SteepestDescent.html</anchorfile>
      <anchor>a6c244cc5589b157343e78fb4dd81da7e</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SteepestDescent.html</anchorfile>
      <anchor>a6c7d6d51a6e517499e781952ec1cef78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_step_size</name>
      <anchorfile>classIMP_1_1core_1_1SteepestDescent.html</anchorfile>
      <anchor>a5a6be5c69d00ce9ff8b83d75620d1797</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_step_size</name>
      <anchorfile>classIMP_1_1core_1_1SteepestDescent.html</anchorfile>
      <anchor>aaa0de4e7207b9abbdf27730cb82784d6</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_threshold</name>
      <anchorfile>classIMP_1_1core_1_1SteepestDescent.html</anchorfile>
      <anchor>a5bf95d4c9397756dcab9c87f123cf73e</anchor>
      <arglist>(Float t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::StructureProvenance</name>
    <filename>classIMP_1_1core_1_1StructureProvenance.html</filename>
    <base>IMP::core::Provenance</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_chain_id</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a7ed3734fae7d0d1c5dce954fc98c03c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a7e61dde70181cb2ded2b2157230aa437</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_residue_offset</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>aefbde1af8f4e412ea8f43e3ad7c77ae8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_chain_id</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a8fcd3744cc93f3242f23b2a202aae496</anchor>
      <arglist>(std::string chain_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_filename</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a4db8438b9e9bd74995e0a2ee5992e37e</anchor>
      <arglist>(std::string filename) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_residue_offset</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a577c58b50cded1cc2ef9f9051b850283</anchor>
      <arglist>(int residue_offset) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>abe84c4f8061427510ebbe5bc4761f9fa</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string filename, std::string chain_id, int residue_offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>aa95e692760b11064d53ef4cf4358a87c</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string filename, std::string chain_id, int residue_offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a27ee0875bac2c8755df775a837213d23</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string filename, std::string chain_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>a992e115c0685aaa29b4dc27c5a8d02c7</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string filename, std::string chain_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>ac758f523bea1201de4d1b0f96331fb37</anchor>
      <arglist>(IMP::ParticleAdaptor pa, StructureProvenance o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureProvenance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1StructureProvenance.html</anchorfile>
      <anchor>aaf11a4f9558d13560cbc87ea306ebf8a</anchor>
      <arglist>(Model *m, ParticleIndex pi, StructureProvenance o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SubsetMover</name>
    <filename>classIMP_1_1core_1_1SubsetMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>SubsetMover</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>a452d81df3853400b958c0e26b1fb0dca</anchor>
      <arglist>(const MonteCarloMoversTemp &amp;mvs, unsigned int n)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>af4cdffc0967af09b2abf4cadabe08c97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_accept</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>a7fd591b79d0eaefc37bc080a941f7738</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>a64e779e2d6b11496dcd04d79b8c5d784</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>a385fdb14f008c29ac4834c1cbdea33cc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1SubsetMover.html</anchorfile>
      <anchor>a6f87ec1acb0e7d14de2492bcb23ba3b1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Surface</name>
    <filename>classIMP_1_1core_1_1Surface.html</filename>
    <base>IMP::core::XYZ</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_normal_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a398d93300deff2fbab3bd05d86a9ca7c</anchor>
      <arglist>(int i, Float v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_normal_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a187fbaf20fc11eb0aeac50c585670040</anchor>
      <arglist>(const algebra::Vector3D &amp;v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_depth</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a3dce1dd6c093b85ff0835bcdce4e214f</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_to</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>aaaead6d8fd65110307825d0b0d6a969b</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_to_center</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a16e427846d6d51a75a1fea714ea282d7</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_height</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>acc3c018b53ba2e358c6c486be1178e33</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_normal</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a27d504a2cfe16cd6b4f8af8348ca90e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_normal_derivative</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>ad5efafa8710f64ebb2b20be2bb45f349</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_normal_derivatives</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a20cad69f18cab7f7f25b99ac5995f9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_normal_is_optimized</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>afab6bd2a3053b6e2c22fb9ca68b0a2f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_normal_x</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>afe2841a40abfae7fa71630cbc5a57a94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_normal_y</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a0144dc1bff69e2db0a32d7a8739779cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_normal_z</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>abb095a9ce943e5d627630de26e9c667b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Plane3D</type>
      <name>get_plane</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a47fd9412666171438d2dd25e9c7e4e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::ReferenceFrame3D</type>
      <name>get_reference_frame</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>ac41c7cc9e54d559a3f6235b91b91a2d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reflect</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>ab6e88f852aba63bca7b8db38865d9e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_normal</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a409313fa6443923c7adb4d2d1a180ebd</anchor>
      <arglist>(const algebra::Vector3D &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_normal_is_optimized</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a50ab3781d95c9ebfc7fba92906027bbe</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_normal_x</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>abe621ddb115d5307dfe4a03696bcc06c</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_normal_y</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a03316db4ae414ce997516b08721530e5</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_normal_z</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>ad8f6eaccb691460de990699fd3cdbea2</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reference_frame</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a9233fc3470e1ddf45699ee96c1699867</anchor>
      <arglist>(const algebra::ReferenceFrame3D &amp;rf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a174dd642bb1e9be15f6556e9d8778a3b</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a3edff8afcb062c7d3239dbb04f28ae97</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>abe8433079e5a76903106a2ced2dd0aa7</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a353d17efbba58c5667408f1692cb51ed</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::ReferenceFrame3D rf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a72a0ed69bd2ab51b3d11d95a126dd65b</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::ReferenceFrame3D rf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>aa1dadcaf371ed3a2fe46f3e0e6895ca3</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D center)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>add65d020138b1f36ab5500de75730b46</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D center)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>aaf1c408984ac409151d5df944e3de185</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D center, algebra::Vector3D normal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Surface.html</anchorfile>
      <anchor>a04863c0756eaa91980149e00f1dc343f</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D center, algebra::Vector3D normal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceDepthPairScore</name>
    <filename>classIMP_1_1core_1_1SurfaceDepthPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDepthPairScore.html</anchorfile>
      <anchor>a1c5a266cdb812a34f55a5d594b30a8d2</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDepthPairScore.html</anchorfile>
      <anchor>a42d7a6cad5ff2b4b340dea84c0f9eb53</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDepthPairScore.html</anchorfile>
      <anchor>ad3ec5697dac543d3f43c8454afa996ee</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceDistancePairScore</name>
    <filename>classIMP_1_1core_1_1SurfaceDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a5d6885ecdcc1fd802d8f4fd4d8ee4371</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a613fdbe4aca8f1e004982b3982fffb35</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a0565c8a9d4576100fcfd082bd18d0281</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceGeometry</name>
    <filename>classIMP_1_1core_1_1SurfaceGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometry.html</anchorfile>
      <anchor>a0b359eec980ce0f636706da4d2555dbd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometry.html</anchorfile>
      <anchor>a77e8341fc9ed66b1a70d5a72bd3af930</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceGeometryConstraint</name>
    <filename>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</anchorfile>
      <anchor>aec9e51adaa71ff830d3dc53dc01297bb</anchor>
      <arglist>(DerivativeAccumulator *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</anchorfile>
      <anchor>a3394434e1a5b9f87fdc5327b9f0497a2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</anchorfile>
      <anchor>a48ef5ddeab1402d86bf0ff27cfbd0e24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</anchorfile>
      <anchor>a2015d2f5e32653e1e0ee3bad9df35b76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceGeometryConstraint.html</anchorfile>
      <anchor>af8efa4270601e35c3a2d80e0d562e360</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceHeightPairScore</name>
    <filename>classIMP_1_1core_1_1SurfaceHeightPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceHeightPairScore.html</anchorfile>
      <anchor>a413546b9b83a8f9de4a1e77021ea6146</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceHeightPairScore.html</anchorfile>
      <anchor>aa1bb4ff369d3080ebc3f47875ed9b163</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceHeightPairScore.html</anchorfile>
      <anchor>a2e5417046142a5e25ac670d8e768ca4f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceMover</name>
    <filename>classIMP_1_1core_1_1SurfaceMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type>Float</type>
      <name>get_maximum_rotation</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a6bd47743861a740bab46431dbb1e38b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_maximum_translation</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a66dcc9f3e7894725406e66958e17cf12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_reflect_probability</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>ae4722f96d43a1f4af5a0dd3e23c263d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>get_surface</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>ae7f0f384e0206c26800aaa0dbc763ba3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a90808498e543af315be2575b095d1a55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_rotation</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>ab1b2203da892d5fd82292ddf9cde0298</anchor>
      <arglist>(Float mr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_translation</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a5a7a0a74f99be3e0bf1d671ebd9c9ab1</anchor>
      <arglist>(Float mt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reflect_probability</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>aa965f8d8f13412818ee6e554b3831490</anchor>
      <arglist>(Float rp)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a767869c65e583e5ad7577ba2dc84f577</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>ad52eb861e175a68613ce1d54bbccf03b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceMover.html</anchorfile>
      <anchor>a2b5465bb0638253a5f03227a49a1461d</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceSymmetryConstraint</name>
    <filename>classIMP_1_1core_1_1SurfaceSymmetryConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function">
      <type></type>
      <name>SurfaceSymmetryConstraint</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceSymmetryConstraint.html</anchorfile>
      <anchor>acbe9fa76e03fcefd9219014f79411c39</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;ss, const ParticleIndexPair &amp;rbs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceSymmetryConstraint.html</anchorfile>
      <anchor>ad91a8b18801fd29f5440112d7ab3e5d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceSymmetryConstraint.html</anchorfile>
      <anchor>a5e6f7aec2c3e50cf330106f59eb70b6b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceSymmetryConstraint.html</anchorfile>
      <anchor>a1cb82d5d22f7cd7bb551bd9c9b0eb435</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::SurfaceTetheredChain</name>
    <filename>classIMP_1_1core_1_1SurfaceTetheredChain.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>a739d84c566adba899ab51c504338ce9c</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>a22113073f965540555d24228807b3a08</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_distance</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>af02053fc9121025da97653cdcbfeaedf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_at_minimum</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>aa2c53e22273bcc8532cc0107dec9bb70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_link_length</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>a9be71f5abe85a7190e46d2541c314028</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_link_number</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>ab399db1e1187402296358cff8a16e155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>aaded762c06d29f39d9b431a50dd587cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link_length</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>aa6ddcbc5c65726bb25f64f53198bdc97</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link_number</name>
      <anchorfile>classIMP_1_1core_1_1SurfaceTetheredChain.html</anchorfile>
      <anchor>a001f9d60b26c28d23eee3b4e2e088751</anchor>
      <arglist>(int N)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TableRefiner</name>
    <filename>classIMP_1_1core_1_1TableRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function">
      <type></type>
      <name>TableRefiner</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>affacee0a4b14d378b3fe17d46f6dde77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_particle</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>afcfaf9a69ca5747a1a0d887bdcec9ebf</anchor>
      <arglist>(Particle *p, const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>a19652914309714d93b5bc9fd7fa7204c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>ab4329f156ca49a9af027894f7f6f7d88</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>a2ccef93c340c87078fc8d96397afa219</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>a7434d8f91c298a0a800c158fd102afcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_particle</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>a7bedc730004885f8147f9b239994b313</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle</name>
      <anchorfile>classIMP_1_1core_1_1TableRefiner.html</anchorfile>
      <anchor>a1b5c10798a6f72040ebf6b9e70b0bfd7</anchor>
      <arglist>(Particle *p, const ParticlesTemp &amp;ps)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Transform</name>
    <filename>classIMP_1_1core_1_1Transform.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>a82c43f463be9cd6645ebad7030c7a3a1</anchor>
      <arglist>(const algebra::Transformation3D &amp;t, bool ignore_non_xyz=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>a82ea88ae2d2ebacfa5954da9acb5359d</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>ab65d05b71ddf057f1751a6446cc565b8</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>a981b743b37290a31b81a74b4048fd4c3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>ac2d14e3d483e8a2e6a0193605a14b763</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1Transform.html</anchorfile>
      <anchor>acf5e7941f8a06e93c0ed99d3bba52e56</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TransformationAndReflectionSymmetry</name>
    <filename>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>TransformationAndReflectionSymmetry</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a9dabd7d0f4cdaeeed13f806dbe89a09c</anchor>
      <arglist>(const algebra::Transformation3D &amp;t, const algebra::Reflection3D &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a1a924e0ac8e5fb9576c2e19422ccc17f</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a2238827c826d2e70741cd4e75bd48b7c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a323177fb3d2902b6657865c9d6098a8f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a7237988df20c47d502ca92e2840e1a1e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TransformationAndReflectionSymmetry.html</anchorfile>
      <anchor>a1c28ee89e7438613b16bae476261d12b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TransformationSymmetry</name>
    <filename>classIMP_1_1core_1_1TransformationSymmetry.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>TransformationSymmetry</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a1d253ea2704fc7d13430962c7ae9b90a</anchor>
      <arglist>(const algebra::Transformation3D &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformationSymmetry</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a428eb3971a08e33ee2b2cd9cf18ef29f</anchor>
      <arglist>(ParticleIndex rb_pi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a6011243de1bc061dba8ccce2fe6fd8d5</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>ae488801956612cc53cb88608b87f6e00</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a66011c92dabc6c41a3f53a4227b2f369</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a848ceb18f999dcc36549950909e39383</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>aa96761970b195bb89037ae198180e61d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_transformation</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a0dffda61b5cba0755a6b4841b6f5e593</anchor>
      <arglist>(algebra::Transformation3D t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TransformationSymmetryMover</name>
    <filename>classIMP_1_1core_1_1TransformationSymmetryMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetryMover.html</anchorfile>
      <anchor>adb43d3b58a0d29de849d0895afb7227d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetryMover.html</anchorfile>
      <anchor>ac9374c36802fecbf7d827b9356b0edd1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetryMover.html</anchorfile>
      <anchor>af7e3f392c8c457ef9e8d6c3c76997b4c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1core_1_1TransformationSymmetryMover.html</anchorfile>
      <anchor>a31781ad0ee990fd7c419676412598763</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TransformedDistancePairScore</name>
    <filename>classIMP_1_1core_1_1TransformedDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>ac4d765b8ff0ef50ae5ad325c849079f5</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>a552398514888ceb1491a1adb60e63be9</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>aaa4f3d6399b4d5426e952e6c2972a9a3</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>a060f300d62e8ccc4dde0efc3b25a057b</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>a3352ad5799305cf6f394325ea2a5da1a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>a4406f1e440992785491978130ba396a6</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>aff4c0c7e0769020f978a097afc5da2cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_transformation</name>
      <anchorfile>classIMP_1_1core_1_1TransformedDistancePairScore.html</anchorfile>
      <anchor>aef34c0fb45006291f5f984f1d4e84669</anchor>
      <arglist>(const algebra::Transformation3D &amp;rot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TripletConstraint</name>
    <filename>classIMP_1_1core_1_1TripletConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TripletConstraint.html</anchorfile>
      <anchor>a060ab80d9e52d5b2d959a0c09a86d0f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TripletConstraint.html</anchorfile>
      <anchor>aaf3d5aebcfb2611d33188650fa7632f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1TripletConstraint.html</anchorfile>
      <anchor>adaff18550a5c597cc3868d6cc319de4c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TripletRestraint</name>
    <filename>classIMP_1_1core_1_1TripletRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TripletRestraint.html</anchorfile>
      <anchor>ad2f64ca1321aa5e597e64089fb2e23c1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TruncatedHarmonic</name>
    <filename>classIMP_1_1core_1_1TruncatedHarmonic.html</filename>
    <templarg>DIRECTION</templarg>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>TruncatedHarmonic</name>
      <anchorfile>classIMP_1_1core_1_1TruncatedHarmonic.html</anchorfile>
      <anchor>aeb558426c32dbf24f5bbc1314ccc721d</anchor>
      <arglist>(Float center, Float k, Float threshold, Float limit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TruncatedHarmonic</name>
      <anchorfile>classIMP_1_1core_1_1TruncatedHarmonic.html</anchorfile>
      <anchor>ae0a2f4ac0d3d0a41c84ba72e348a3f3e</anchor>
      <arglist>(Float center, Float k, Float threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1TruncatedHarmonic.html</anchorfile>
      <anchor>adeafb127a45563de522302b91343e674</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1TruncatedHarmonic.html</anchorfile>
      <anchor>a7558689fe92eb2451a48f250805d804d</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TruncatedHarmonic.html</anchorfile>
      <anchor>a39bc8e92149bf161f532e91e35be49d4</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::Typed</name>
    <filename>classIMP_1_1core_1_1Typed.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Typed</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Typed.html</anchorfile>
      <anchor>abe2ff709d939e3c09abd4160022a9779</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleType t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Typed</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1core_1_1Typed.html</anchorfile>
      <anchor>a39616e4ceda219518cf1808c6a332957</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleType t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::TypedPairScore</name>
    <filename>classIMP_1_1core_1_1TypedPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>TypedPairScore</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>aa07ea4dffe3dfdc95b0a7114f7d1e6af</anchor>
      <arglist>(IntKey typekey, bool allow_invalid_types=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>a71e861046d5a19f9dba7f49c72f5c39b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>ae4de058da64164db224691e3020f5050</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>a79103e6e9c494292d0c1f43465b1994b</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>aed7488d750da7bb7830035510225cbc7</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>a34fd6b4cdb57c5e6326110fbe0fcd4a4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>a4f0ee1605d2c51d6a46e7267b5e8e695</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>a8d75924232bf6d6c8fdad83fb9acba18</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pair_score</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>aa22066494d15fcbe1255a04634f09d50</anchor>
      <arglist>(PairScore *ps, Int atype, Int btype)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_particle_type</name>
      <anchorfile>classIMP_1_1core_1_1TypedPairScore.html</anchorfile>
      <anchor>aae80b4cb6e0a0d6f240d60e2c5da48b8</anchor>
      <arglist>(Particle *) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::UnorderedTypePairPredicate</name>
    <filename>classIMP_1_1core_1_1UnorderedTypePairPredicate.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypePairPredicate.html</anchorfile>
      <anchor>a4a337a0b1e4cfc87f048c46f62ec829f</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypePairPredicate.html</anchorfile>
      <anchor>ac0c8d199196eda940c7a475cf7626b04</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypePairPredicate.html</anchorfile>
      <anchor>a12d9da2dd084d45317f4e8f1ce128fc1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::UnorderedTypeQuadPredicate</name>
    <filename>classIMP_1_1core_1_1UnorderedTypeQuadPredicate.html</filename>
    <base>IMP::QuadPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeQuadPredicate.html</anchorfile>
      <anchor>a8fa76d528ba7a2a2699f216203e4f0a1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeQuadPredicate.html</anchorfile>
      <anchor>a26e716a33a30cfe7fb2ea59c7f12fd82</anchor>
      <arglist>(Model *m, const ParticleIndexQuad &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeQuadPredicate.html</anchorfile>
      <anchor>af7c0bf0e09343177a52e5202e206bef2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::UnorderedTypeSingletonPredicate</name>
    <filename>classIMP_1_1core_1_1UnorderedTypeSingletonPredicate.html</filename>
    <base>IMP::SingletonPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeSingletonPredicate.html</anchorfile>
      <anchor>af3f95164c7c7cf7d8a4698bd49f72618</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a7d6f5104047bb9e9656b3ea2032b2b14</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeSingletonPredicate.html</anchorfile>
      <anchor>a3819b931338457b30f97a7f88af1ec76</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::UnorderedTypeTripletPredicate</name>
    <filename>classIMP_1_1core_1_1UnorderedTypeTripletPredicate.html</filename>
    <base>IMP::TripletPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeTripletPredicate.html</anchorfile>
      <anchor>a8d6f77f7ee89c21e95cf69b39ae7632a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeTripletPredicate.html</anchorfile>
      <anchor>a217f5f3160627ea8192cb567f22cd967</anchor>
      <arglist>(Model *m, const ParticleIndexTriplet &amp;pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1UnorderedTypeTripletPredicate.html</anchorfile>
      <anchor>a908ab43001c12ab48e0e97df246d9fad</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::VolumeRestraint</name>
    <filename>classIMP_1_1core_1_1VolumeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1VolumeRestraint.html</anchorfile>
      <anchor>a933338f16491d38a7b0f8fa09f9cd2cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1VolumeRestraint.html</anchorfile>
      <anchor>aaf4b4dbfccda4d19f2da7ae4629fad0c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1core_1_1VolumeRestraint.html</anchorfile>
      <anchor>a909073b5268d53a4ec0b7f18454d7a63</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::WeightedDerivativesToRefined</name>
    <filename>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>WeightedDerivativesToRefined</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>ae94d358573870e97b5527e9454ccdcea</anchor>
      <arglist>(Refiner *r, FloatKey w=FloatKey(), FloatKeys keys=XYZ::get_xyz_keys())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>a4c50af59c0c7e828f89965928326ab0f</anchor>
      <arglist>(Model *m, ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>a192cc05fd331840396945e0f70e14f6c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>a1d9ad658274ac4b00b9d3de96d54c64d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>afcec79ce37ec0a822fd8830057827f2e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1WeightedDerivativesToRefined.html</anchorfile>
      <anchor>a23ac53e59d63bb5d11f09696b2dcb03d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::WeightedSphereDistancePairScore</name>
    <filename>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>a7814d7a61800c48912d6c50c151d2688</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>acc24e97bd4d21ab0aac99560ccd9141d</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>a950796ec280115d85d35d3d424e73a4a</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>a17fe5595c007e36b9caea655d0f0244c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>a0c9cbf4e3e59a4ef191f4818c1e0d60b</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>a955e0042915eaa1e1d41b28349e14bf4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSphereDistancePairScore.html</anchorfile>
      <anchor>af7bec48a3c44ffaadb174bf7afecd7d7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::WeightedSum</name>
    <filename>classIMP_1_1core_1_1WeightedSum.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>WeightedSum</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>ab53acc5d6ca97afcb405f4f97e748305</anchor>
      <arglist>(UnaryFunctions funcs, Floats weights)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>a47c683c237e490c0b2ceded47f58a3ad</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>aa72429466f0b0b4e614c07201fae0f1c</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function">
      <type>UnaryFunction *</type>
      <name>get_function</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>a37c6825d7d6a7a1a78710d05cf0421ef</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_function_number</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>af50b80a7750ce9af610b07347a35750e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>ae97231726e71370335892f4fe48ffc83</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>a7cc5d3f61351b9f7fbd4cd6d75206935</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_weights</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>a29e17b044d1ed5effb57fd6a39a9cc23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weights</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSum.html</anchorfile>
      <anchor>a832ea72d0f8c8ab757308274d656cb60</anchor>
      <arglist>(Floats weights)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::WeightedSumOfExponential</name>
    <filename>classIMP_1_1core_1_1WeightedSumOfExponential.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>WeightedSumOfExponential</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>ae9984426acf63479a6521c73c04a5d93</anchor>
      <arglist>(UnaryFunctions funcs, Floats weights, Float denom=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>a2f7f286db98ae8721da1fc46c28b50a1</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>a2e254b6b6e6f47c82788e578bee54a16</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_denominator</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>acc70422bea237d856354143e3e209015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnaryFunction *</type>
      <name>get_function</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>ad00abf7d65d6ce742da73b478ec0dd49</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_function_number</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>afcd3087121fbed8df40f1ec98774cedc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>ab8f5824a3fc236042ffc12c0ebfde346</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>a6df84dd6fae1b5a288d521ee386494b2</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_weights</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>a430f2037cc8944a6858fd7d897e9e6ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_denominator</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>ade13fcc833deb2755e1190d3443c361d</anchor>
      <arglist>(double denom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weights</name>
      <anchorfile>classIMP_1_1core_1_1WeightedSumOfExponential.html</anchorfile>
      <anchor>aa01bf369807abe9cd3108ae9b80d21e7</anchor>
      <arglist>(Floats weights)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::WriteRestraintScoresOptimizerState</name>
    <filename>classIMP_1_1core_1_1WriteRestraintScoresOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1WriteRestraintScoresOptimizerState.html</anchorfile>
      <anchor>af4f09dc3d0a2508fb69eb373906830c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1core_1_1WriteRestraintScoresOptimizerState.html</anchorfile>
      <anchor>a11ef51fda8638e9fa6b2ca878df0f174</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZ</name>
    <filename>classIMP_1_1core_1_1XYZ.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZDerivativeGeometry</name>
    <filename>classIMP_1_1core_1_1XYZDerivativeGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1XYZDerivativeGeometry.html</anchorfile>
      <anchor>a01cc72eadd6ad637f0a012e17c2654e6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZDerivativesGeometry</name>
    <filename>classIMP_1_1core_1_1XYZDerivativesGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1XYZDerivativesGeometry.html</anchorfile>
      <anchor>a819b30822d65440c466e70c2dc4c23e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1XYZDerivativesGeometry.html</anchorfile>
      <anchor>a9b3df6901016aa27bb81e37a83ed9d66</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZR</name>
    <filename>classIMP_1_1core_1_1XYZR.html</filename>
    <base>IMP::core::XYZ</base>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZRGeometry</name>
    <filename>classIMP_1_1core_1_1XYZRGeometry.html</filename>
    <base>IMP::display::SingletonGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1XYZRGeometry.html</anchorfile>
      <anchor>ae63154553a16fc4ca7ade8fc502475cb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::core::XYZRsGeometry</name>
    <filename>classIMP_1_1core_1_1XYZRsGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function">
      <type>display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1core_1_1XYZRsGeometry.html</anchorfile>
      <anchor>a195152d3d42fa3d41bda79e948fea3de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1XYZRsGeometry.html</anchorfile>
      <anchor>ac416a1db8be8fa6d8a9489c2fe91b6fd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::display</name>
    <filename>namespaceIMP_1_1display.html</filename>
    <class kind="class">IMP::display::BoundingBoxGeometry</class>
    <class kind="class">IMP::display::Color</class>
    <class kind="class">IMP::display::Colored</class>
    <class kind="class">IMP::display::CylinderGeometry</class>
    <class kind="class">IMP::display::EllipsoidGeometry</class>
    <class kind="class">IMP::display::FilterGeometry</class>
    <class kind="class">IMP::display::Geometry</class>
    <class kind="class">IMP::display::GeometryProcessor</class>
    <class kind="class">IMP::display::GeometrySet</class>
    <class kind="class">IMP::display::IsosurfaceGeometry</class>
    <class kind="class">IMP::display::LabelGeometry</class>
    <class kind="class">IMP::display::PairGeometry</class>
    <class kind="class">IMP::display::PairsGeometry</class>
    <class kind="class">IMP::display::PivyWriter</class>
    <class kind="class">IMP::display::PlaneGeometry</class>
    <class kind="class">IMP::display::PointGeometry</class>
    <class kind="class">IMP::display::PolygonGeometry</class>
    <class kind="class">IMP::display::PymolWriter</class>
    <class kind="class">IMP::display::ReferenceFrameGeometry</class>
    <class kind="class">IMP::display::RestraintGeometry</class>
    <class kind="class">IMP::display::RestraintSetGeometry</class>
    <class kind="class">IMP::display::SegmentGeometry</class>
    <class kind="class">IMP::display::SingletonGeometry</class>
    <class kind="class">IMP::display::SingletonsGeometry</class>
    <class kind="class">IMP::display::SkinSurfaceGeometry</class>
    <class kind="class">IMP::display::SphereGeometry</class>
    <class kind="class">IMP::display::SurfaceMeshGeometry</class>
    <class kind="class">IMP::display::TextWriter</class>
    <class kind="class">IMP::display::TriangleGeometry</class>
    <class kind="class">IMP::display::WriteOptimizerState</class>
    <class kind="class">IMP::display::Writer</class>
    <class kind="class">IMP::display::WriterAdaptor</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; Color &gt;</type>
      <name>Colors</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7e55766fd29b9ed3a4f56f8a8e0ca070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Geometry &gt; &gt;</type>
      <name>Geometries</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a6da2ba16b22efe0c6c676c1ece993355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Geometry &gt; &gt;</type>
      <name>GeometriesTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae68ea7eb0a76aac1dc2ff684739c64e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TextWriter &gt; &gt;</type>
      <name>TextWriters</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a4b8d9702b5e612a25902b329061d5fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TextWriter &gt; &gt;</type>
      <name>TextWritersTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>aa152cdd65458f06e7173d7d0558f3e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; WriterAdaptor &gt;</type>
      <name>WriterAdaptors</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a62242d77a7ab9b5bdfa8221418570658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Writer &gt; &gt;</type>
      <name>Writers</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae968d0eeee18d12dce65f5673e5a9fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Writer &gt; &gt;</type>
      <name>WritersTemp</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a76cf2e7480dd0664a1a389137f5ce38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SphereGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ad9d90b0ae0f1f0c079a9f3b4a11d1d77</anchor>
      <arglist>(const algebra::Sphere3D &amp;t, std::string name=&quot;algebra::Sphere3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>CylinderGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a418acde3993b51a25f3ba4311f4c9b74</anchor>
      <arglist>(const algebra::Cylinder3D &amp;t, std::string name=&quot;algebra::Cylinder3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>EllipsoidGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>acbb9389b216a0e7f8c4d9794075ccbf8</anchor>
      <arglist>(const algebra::Ellipsoid3D &amp;t, std::string name=&quot;algebra::Ellipsoid3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PointGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ae2f3fba6f3395b1bb19444ba9907314f</anchor>
      <arglist>(const algebra::Vector3D &amp;t, std::string name=&quot;algebra::Vector3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>SegmentGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a071ef8e162f88294b235de620e423d2c</anchor>
      <arglist>(const algebra::Segment3D &amp;t, std::string name=&quot;algebra::Segment3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>PolygonGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>aa60c5d366f71d009a94cb7911503ab3d</anchor>
      <arglist>(const algebra::Vector3Ds &amp;t, std::string name=&quot;algebra::Vector3Ds&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>TriangleGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a54a071369efd0709c091051cd6355e67</anchor>
      <arglist>(const algebra::Triangle3D &amp;t, std::string name=&quot;algebra::Triangle3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>BoundingBoxGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a788545ff045770aea75e72b5568aba1d</anchor>
      <arglist>(const algebra::BoundingBoxD&lt; 3 &gt; &amp;t, std::string name=&quot;algebra::BoundingBoxD&lt;3&gt;&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ReferenceFrameGeometry *</type>
      <name>create_geometry</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7e059bdeb2a7290b1260cab6923bdd29</anchor>
      <arglist>(const algebra::ReferenceFrame3D &amp;t, std::string name=&quot;algebra::ReferenceFrame3D&quot;+&quot;%1&quot;&quot;%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Writer *</type>
      <name>create_writer</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a55414a3681ffd79c126fabdbf13abb2d</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_display_color</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a7139e3c2ffdf998ca304a7f01e6e237e</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>get_interpolated_rgb</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>ada2a3156a15dd0217840bfc8675724d8</anchor>
      <arglist>(const Color &amp;a, const Color &amp;b, double f)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_linear_color_map_value</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>af2fb3a798a826b59ab3fb354fe165f69</anchor>
      <arglist>(double min, double max, double value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a16f90da59643be92efed0e85fed64610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a3785913d02da8cd3dd031f651be25ed2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1display.html</anchorfile>
      <anchor>a332eadfc98ab921960178c5a4685389a</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::BoundingBoxGeometry</name>
    <filename>classIMP_1_1display_1_1BoundingBoxGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1BoundingBoxGeometry.html</anchorfile>
      <anchor>a5d55c1353e3e13d96fe425fc59e25b37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1BoundingBoxGeometry.html</anchorfile>
      <anchor>aea29210f485ea140c006eb3a82e718a0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::Color</name>
    <filename>classIMP_1_1display_1_1Color.html</filename>
    <base>IMP::Value</base>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classIMP_1_1display_1_1Color.html</anchorfile>
      <anchor>aabbf8e07b4265b4cae804457eaada0af</anchor>
      <arglist>(double r, double g, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classIMP_1_1display_1_1Color.html</anchorfile>
      <anchor>acb105c24397adb39f2c4dbd9e7078055</anchor>
      <arglist>(It b, It e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::Colored</name>
    <filename>classIMP_1_1display_1_1Colored.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Colored</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1display_1_1Colored.html</anchorfile>
      <anchor>a1f682cba5427be0068b38d6c126da974</anchor>
      <arglist>(Model *m, ParticleIndex pi, Color color)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Colored</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1display_1_1Colored.html</anchorfile>
      <anchor>aba3bd220eae85bc31513237dafc78649</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Color color)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::CylinderGeometry</name>
    <filename>classIMP_1_1display_1_1CylinderGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1CylinderGeometry.html</anchorfile>
      <anchor>ab711dc3be0a555b3a16af19ebc80860b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1CylinderGeometry.html</anchorfile>
      <anchor>af38a1ebf06b08686acfbaf630b9bba41</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::EllipsoidGeometry</name>
    <filename>classIMP_1_1display_1_1EllipsoidGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1EllipsoidGeometry.html</anchorfile>
      <anchor>adc40d5b1b683b59fedea2d38a6ff78c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1EllipsoidGeometry.html</anchorfile>
      <anchor>a5d783e287415a263c07f921d2623a271</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::FilterGeometry</name>
    <filename>classIMP_1_1display_1_1FilterGeometry.html</filename>
    <base>IMP::display::GeometryProcessor</base>
    <base>IMP::display::Geometry</base>
    <member kind="function">
      <type></type>
      <name>FilterGeometry</name>
      <anchorfile>classIMP_1_1display_1_1FilterGeometry.html</anchorfile>
      <anchor>a48ddb9438d24ddbc71317779b7010caa</anchor>
      <arglist>(const algebra::Plane3D &amp;p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1FilterGeometry.html</anchorfile>
      <anchor>a95cf7be494089c23c2a6458d68c7a77a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1FilterGeometry.html</anchorfile>
      <anchor>abf88d821f89b7ec4d6dab6417c9e9488</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::Geometry</name>
    <filename>classIMP_1_1display_1_1Geometry.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::GeometryProcessor</name>
    <filename>classIMP_1_1display_1_1GeometryProcessor.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::display::GeometrySet</name>
    <filename>classIMP_1_1display_1_1GeometrySet.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1GeometrySet.html</anchorfile>
      <anchor>a186f861c15323743934c78460debad5f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1GeometrySet.html</anchorfile>
      <anchor>a16436b6e60c1dd71866171cb7de7a178</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::IsosurfaceGeometry</name>
    <filename>classIMP_1_1display_1_1IsosurfaceGeometry.html</filename>
    <base>IMP::display::SurfaceMeshGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1SurfaceMeshGeometry.html</anchorfile>
      <anchor>acdd1b216b9e77b19a0a111cf16358d65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1SurfaceMeshGeometry.html</anchorfile>
      <anchor>a0edad036b29e4074ec29e3cfe5c51450</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::LabelGeometry</name>
    <filename>classIMP_1_1display_1_1LabelGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1LabelGeometry.html</anchorfile>
      <anchor>a7d380a60e969dbd18166eb8811c405aa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1LabelGeometry.html</anchorfile>
      <anchor>a86607c74e4e87e1a8a176404c08dacfb</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::PairGeometry</name>
    <filename>classIMP_1_1display_1_1PairGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::PairsGeometry</name>
    <filename>classIMP_1_1display_1_1PairsGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::PivyWriter</name>
    <filename>classIMP_1_1display_1_1PivyWriter.html</filename>
    <base>IMP::display::Writer</base>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1display_1_1PivyWriter.html</anchorfile>
      <anchor>a12026a287318303e8c2659b67d56bae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Writer</name>
      <anchorfile>classIMP_1_1display_1_1Writer.html</anchorfile>
      <anchor>a05054913f8e7b9aae7d8d8da32b8888b</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Writer</name>
      <anchorfile>classIMP_1_1display_1_1Writer.html</anchorfile>
      <anchor>ae6ab4535f77e4de2881754497241eb76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_close</name>
      <anchorfile>classIMP_1_1display_1_1Writer.html</anchorfile>
      <anchor>a09d5ad09c9b66cffdb596d7658b3854e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>do_open</name>
      <anchorfile>classIMP_1_1display_1_1Writer.html</anchorfile>
      <anchor>aad3e16b7bfd25240894c3eb871c03ba6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_set_frame</name>
      <anchorfile>classIMP_1_1display_1_1Writer.html</anchorfile>
      <anchor>a40d10cd9fd4cc483118a67787a8ea16c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::PlaneGeometry</name>
    <filename>classIMP_1_1display_1_1PlaneGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1PlaneGeometry.html</anchorfile>
      <anchor>a071883fe453f3a2dc319273b38499550</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1PlaneGeometry.html</anchorfile>
      <anchor>a6b329da548c0d95e884735391be01693</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::PointGeometry</name>
    <filename>classIMP_1_1display_1_1PointGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1PointGeometry.html</anchorfile>
      <anchor>aa7a33eb2fa2f320f022a9fc836997c05</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1PointGeometry.html</anchorfile>
      <anchor>a42464075e7d2c6f91689ad90dfe7dce1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::PolygonGeometry</name>
    <filename>classIMP_1_1display_1_1PolygonGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1PolygonGeometry.html</anchorfile>
      <anchor>aff7ca3e80d3673a931c69100bfe46692</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1PolygonGeometry.html</anchorfile>
      <anchor>a74b2a6b9d315decd2bce40f015fe58c9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::PymolWriter</name>
    <filename>classIMP_1_1display_1_1PymolWriter.html</filename>
    <base>IMP::display::TextWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1PymolWriter.html</anchorfile>
      <anchor>aee0912e007c16e3cd692979deaf41d42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextWriter</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>ad5b09bf8ae667c97b3e89a41a18ecf3d</anchor>
      <arglist>(TextOutput fn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextWriter</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>a4f81d68f0228874e3d0ed574ac74cd6b</anchor>
      <arglist>(std::string name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TextWriter</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>a94dffc73ab24f82077a208b2548643b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_file_name</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>a90bf33ad397fb54720a00da089c4ac45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_close</name>
      <anchorfile>classIMP_1_1display_1_1PymolWriter.html</anchorfile>
      <anchor>ab11733f74bebcb41484b597e56f3a576</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_destroy</name>
      <anchorfile>classIMP_1_1display_1_1PymolWriter.html</anchorfile>
      <anchor>a5f1f018ecf97dabe542f9ca8f9e49a02</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_open</name>
      <anchorfile>classIMP_1_1display_1_1PymolWriter.html</anchorfile>
      <anchor>a108cbb4f19449f0acb89d0c7b94d4ea4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::ostream &amp;</type>
      <name>get_stream</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>abf3e34a64045624edb87d6b72fd65205</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::ReferenceFrameGeometry</name>
    <filename>classIMP_1_1display_1_1ReferenceFrameGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1ReferenceFrameGeometry.html</anchorfile>
      <anchor>aee3fc0878a0e36cfec7f9aa10f2fa81c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1ReferenceFrameGeometry.html</anchorfile>
      <anchor>afaea72e3f57a2ba033e4b98ab29d9bcd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::RestraintGeometry</name>
    <filename>classIMP_1_1display_1_1RestraintGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1RestraintGeometry.html</anchorfile>
      <anchor>a3154142b1bb4968378e7ab7b58e34a19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1RestraintGeometry.html</anchorfile>
      <anchor>a8a2f943f7870b4b52dc41300e2faba6b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::RestraintSetGeometry</name>
    <filename>classIMP_1_1display_1_1RestraintSetGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1RestraintSetGeometry.html</anchorfile>
      <anchor>a09ed5f5813a1d715997b9165d2ce1e0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1RestraintSetGeometry.html</anchorfile>
      <anchor>a8af53063398d296e9709801d2d385cdd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::SegmentGeometry</name>
    <filename>classIMP_1_1display_1_1SegmentGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::SingletonGeometry</name>
    <filename>classIMP_1_1display_1_1SingletonGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::SingletonsGeometry</name>
    <filename>classIMP_1_1display_1_1SingletonsGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::SkinSurfaceGeometry</name>
    <filename>classIMP_1_1display_1_1SkinSurfaceGeometry.html</filename>
    <base>IMP::display::SurfaceMeshGeometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::SphereGeometry</name>
    <filename>classIMP_1_1display_1_1SphereGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1SphereGeometry.html</anchorfile>
      <anchor>a159e24352672886d542da21304d03c34</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1SphereGeometry.html</anchorfile>
      <anchor>a2d6e3bf351cc9fd9fe0b5c2f402616a9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::SurfaceMeshGeometry</name>
    <filename>classIMP_1_1display_1_1SurfaceMeshGeometry.html</filename>
    <base>IMP::display::Geometry</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::TextWriter</name>
    <filename>classIMP_1_1display_1_1TextWriter.html</filename>
    <base>IMP::display::Writer</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_set_frame</name>
      <anchorfile>classIMP_1_1display_1_1TextWriter.html</anchorfile>
      <anchor>a07c1b739e3cbf7ce7b4d1201cca5e5e3</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::TriangleGeometry</name>
    <filename>classIMP_1_1display_1_1TriangleGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1display_1_1TriangleGeometry.html</anchorfile>
      <anchor>a925c95862ebf55e8f23b1ab5b58f9eb6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1TriangleGeometry.html</anchorfile>
      <anchor>a4436bc755393ea934c5d02121c940da9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::WriteOptimizerState</name>
    <filename>classIMP_1_1display_1_1WriteOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1display_1_1WriteOptimizerState.html</anchorfile>
      <anchor>a6127ea0530dfc571c516002fc2b8a2c6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>geometries</name>
      <anchorfile>classIMP_1_1display_1_1WriteOptimizerState.html</anchorfile>
      <anchor>a7cd095350d9392e1f5214566514ec9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1display_1_1WriteOptimizerState.html</anchorfile>
      <anchor>a646b14ee830f71defc8417b923f1fd36</anchor>
      <arglist>(unsigned int) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::display::Writer</name>
    <filename>classIMP_1_1display_1_1Writer.html</filename>
    <base>IMP::display::GeometryProcessor</base>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::display::WriterAdaptor</name>
    <filename>classIMP_1_1display_1_1WriterAdaptor.html</filename>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="namespace">
    <name>IMP::domino</name>
    <filename>namespaceIMP_1_1domino.html</filename>
    <class kind="class">IMP::domino::Assignment</class>
    <class kind="class">IMP::domino::AssignmentContainer</class>
    <class kind="class">IMP::domino::AssignmentsTable</class>
    <class kind="class">IMP::domino::BranchAndBoundAssignmentsTable</class>
    <class kind="class">IMP::domino::BranchAndBoundSampler</class>
    <class kind="class">IMP::domino::CappedAssignmentContainer</class>
    <class kind="class">IMP::domino::CompoundStates</class>
    <class kind="class">IMP::domino::DependencyScoreState</class>
    <class kind="class">IMP::domino::DiscreteSampler</class>
    <class kind="class">IMP::domino::DisjointSetsSubsetFilterTable</class>
    <class kind="class">IMP::domino::DominoSampler</class>
    <class kind="class">IMP::domino::EqualitySubsetFilterTable</class>
    <class kind="class">IMP::domino::EquivalenceAndExclusionSubsetFilterTable</class>
    <class kind="class">IMP::domino::EquivalenceSubsetFilterTable</class>
    <class kind="class">IMP::domino::ExclusionSubsetFilterTable</class>
    <class kind="class">IMP::domino::HeapAssignmentContainer</class>
    <class kind="class">IMP::domino::IndexStates</class>
    <class kind="class">IMP::domino::ListAssignmentContainer</class>
    <class kind="class">IMP::domino::ListAssignmentsTable</class>
    <class kind="class">IMP::domino::ListSubsetFilterTable</class>
    <class kind="class">IMP::domino::MinimumRestraintScoreSubsetFilterTable</class>
    <class kind="class">IMP::domino::NestedRigidBodyStates</class>
    <class kind="class">IMP::domino::Order</class>
    <class kind="class">IMP::domino::PackedAssignmentContainer</class>
    <class kind="class">IMP::domino::PairListSubsetFilterTable</class>
    <class kind="class">IMP::domino::ParticlesAdaptor</class>
    <class kind="class">IMP::domino::ParticleStates</class>
    <class kind="class">IMP::domino::ParticleStatesTable</class>
    <class kind="class">IMP::domino::PermutationStates</class>
    <class kind="class">IMP::domino::ProbabilisticSubsetFilterTable</class>
    <class kind="class">IMP::domino::RangeViewAssignmentContainer</class>
    <class kind="class">IMP::domino::ReadAssignmentContainer</class>
    <class kind="class">IMP::domino::ReadHDF5AssignmentContainer</class>
    <class kind="class">IMP::domino::RecursiveAssignmentsTable</class>
    <class kind="class">IMP::domino::RecursiveStates</class>
    <class kind="class">IMP::domino::RestraintCache</class>
    <class kind="class">IMP::domino::RestraintScoreSubsetFilterTable</class>
    <class kind="class">IMP::domino::RigidBodyStates</class>
    <class kind="class">IMP::domino::SampleAssignmentContainer</class>
    <class kind="class">IMP::domino::SimpleAssignmentsTable</class>
    <class kind="class">IMP::domino::Slice</class>
    <class kind="class">IMP::domino::Subset</class>
    <class kind="class">IMP::domino::SubsetFilter</class>
    <class kind="class">IMP::domino::SubsetFilterTable</class>
    <class kind="class">IMP::domino::WriteAssignmentContainer</class>
    <class kind="class">IMP::domino::WriteHDF5AssignmentContainer</class>
    <class kind="class">IMP::domino::XYZStates</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AssignmentContainer &gt; &gt;</type>
      <name>AssignmentContainers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a6cfca68865188cc1d2e53b33c52e9af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AssignmentContainer &gt; &gt;</type>
      <name>AssignmentContainersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>adf0811b02a04625cd377a12e53fa0b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Assignment &gt;</type>
      <name>Assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aafae17b45c6d2fe87c2bef10853d98ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AssignmentsTable &gt; &gt;</type>
      <name>AssignmentsTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a28315e6ca9b2b1236a0b635d620118ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AssignmentsTable &gt; &gt;</type>
      <name>AssignmentsTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ae6aa74f5ce4756f94bf4d6e75344d47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BranchAndBoundSampler &gt; &gt;</type>
      <name>BranchAndBoundSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>affa641b60a18ca2289c3923d9a217e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BranchAndBoundSampler &gt; &gt;</type>
      <name>BranchAndBoundSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>adc6b77ae6ddc0090e52be8bbbce75176</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DiscreteSampler &gt; &gt;</type>
      <name>DiscreteSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ad92d5b7dfbc625af4436de8a9dc585a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DiscreteSampler &gt; &gt;</type>
      <name>DiscreteSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a35777189531c452f0780f11cfffcd4b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DominoSampler &gt; &gt;</type>
      <name>DominoSamplers</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a715ac162fc5158ca0895de2e06444933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DominoSampler &gt; &gt;</type>
      <name>DominoSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab561bd4281a3294ac523ac39925a8910</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EqualitySubsetFilterTable &gt; &gt;</type>
      <name>EqualitySubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aadfc0557d83b44cfe3f59d1ce6152c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EqualitySubsetFilterTable &gt; &gt;</type>
      <name>EqualitySubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a7d3f9a43cf2c55b8e6930b9f36874506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EquivalenceAndExclusionSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceAndExclusionSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aa76efcdf89055bbdd8aa941daa003169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EquivalenceAndExclusionSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceAndExclusionSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a8ae320e16de25bc9c0690c4365125707</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EquivalenceSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab67bda5bd3c2e3d8ca40681f6e409796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EquivalenceSubsetFilterTable &gt; &gt;</type>
      <name>EquivalenceSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a060f83a3232b169a9dcd13f7f9cf9660</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ExclusionSubsetFilterTable &gt; &gt;</type>
      <name>ExclusionSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>afaa8e7addc6ded747b8dbaa601934b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ExclusionSubsetFilterTable &gt; &gt;</type>
      <name>ExclusionSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a8832019607f1602f711e0ada37ee28a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>InteractionGraph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a1b3e02fbad93dad74459f871a1bb0dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ListSubsetFilterTable &gt; &gt;</type>
      <name>ListSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aef134c322be708367b347ef3e08c6439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ListSubsetFilterTable &gt; &gt;</type>
      <name>ListSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3821749f040b5c070171f00c6d4c06a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MinimumRestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>MinimumRestraintScoreSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a60a525009d7f2cb77fa2d2d552e05f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MinimumRestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>MinimumRestraintScoreSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a23fb3c45423ca909605594707d6a2faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Order &gt;</type>
      <name>Orders</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aebede1f90b715917e8a7cdef41bacb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PairListSubsetFilterTable &gt; &gt;</type>
      <name>PairListSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0a9ebb805a72c557c4481ec09aab8bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PairListSubsetFilterTable &gt; &gt;</type>
      <name>PairListSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a355b39d20269fad4129e381c39a1c316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleStates &gt; &gt;</type>
      <name>ParticleStatesList</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aea29d31fdfe95447a36f6f0e11f71868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleStates &gt; &gt;</type>
      <name>ParticleStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0e2bfcae35009b44f66a171abcfac5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleStatesTable &gt; &gt;</type>
      <name>ParticleStatesTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aee95feec6e317d6a4e8a4440ca4137cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleStatesTable &gt; &gt;</type>
      <name>ParticleStatesTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a80e95d3c26a2153b46c28262a018f9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>RestraintScoreSubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>afcd7d1fe94aec4a8ab6b789675ff3491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RestraintScoreSubsetFilterTable &gt; &gt;</type>
      <name>RestraintScoreSubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a82eb3da79770425986ea95ecfa5dddf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Slice &gt;</type>
      <name>Slices</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a6e79a85dc061abb0566b643745adb6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SubsetFilter &gt; &gt;</type>
      <name>SubsetFilters</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ad37158e525386e6eebdc98fd90440ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SubsetFilter &gt; &gt;</type>
      <name>SubsetFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aedd44a20f4816cc0bbb1dc1dd926ade3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SubsetFilterTable &gt; &gt;</type>
      <name>SubsetFilterTables</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a350dd16b16823a214a8863310023ed03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SubsetFilterTable &gt; &gt;</type>
      <name>SubsetFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ae2d67db3607ca47b9ec0e8a2c79ddaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::graph</type>
      <name>SubsetGraph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a74be81f3536006c91216322e4af87a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Subset &gt;</type>
      <name>Subsets</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a016238d59f38a3c1bfa667f9b7a8139e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_if_smaller_than</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3a112fd41a97e8e93dbff8be3dfb8bb6</anchor>
      <arglist>(const Subset &amp;s, const Assignment &amp;a, const Assignment &amp;b, ParticleStatesTable *pst, const statistics::Metrics &amp;metrics, double max)</arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3247d32b900c4633e5c58cd7032d043b</anchor>
      <arglist>(const Subset &amp;s, const Assignment &amp;a, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_index</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab5fc791399c0d6c76e1bea5d4b3da6ca</anchor>
      <arglist>(const ParticlesTemp &amp;particles, const Subset &amp;subset, const Subsets &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type>SubsetGraph</type>
      <name>get_junction_tree</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>af4ecbb31cd9704335911eef3d583a754</anchor>
      <arglist>(const InteractionGraph &amp;ig)</arglist>
    </member>
    <member kind="function">
      <type>Assignment</type>
      <name>get_nearest_assignment</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>abd8a69ba2cc2b8fea2f49c99189d8711</anchor>
      <arglist>(const Subset &amp;s, const algebra::VectorKD &amp;embedding, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_order</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a0f43ef4b4efed8a9481e65694ce3fadb</anchor>
      <arglist>(const Subset &amp;s, const SubsetFilterTables &amp;sft)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_partial_index</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a4c8c50c718ab2dcabacc4b2e41aba522</anchor>
      <arglist>(const ParticlesTemp &amp;particles, const Subset &amp;subset, const Subsets &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type>ParticlePairsTemp</type>
      <name>get_possible_interactions</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>aa29c2ec35739c08db3a13ffe4ec38088</anchor>
      <arglist>(const ParticlesTemp &amp;ps, double max_distance, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>SubsetGraph</type>
      <name>get_restraint_graph</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>ab0eb2c05d5eb0c9e64fba8c85011ad01</anchor>
      <arglist>(ScoringFunctionAdaptor rs, const ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function">
      <type>Slice</type>
      <name>get_slice</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a619c0aea6816fda8b69b08cf5e57876d</anchor>
      <arglist>(Subset outer, Subset inner, const Subsets &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type>Assignments</type>
      <name>get_state_clusters</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a7b094ee7dac304dfc212772818a9ba04</anchor>
      <arglist>(const Subset &amp;subset, const Assignments &amp;states, ParticleStatesTable *pst, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>Subsets</type>
      <name>get_subsets</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a451bc898770bf9a620fa517ff74d4ef6</anchor>
      <arglist>(const SubsetGraph &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_leaf_assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a4570cce69f194985e23b710c3b5e18b4</anchor>
      <arglist>(const Subset &amp;subset, AssignmentsTable *at, AssignmentContainer *ac)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_merged_assignments</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a200c71a273844cc32fd32f6a5eafa0aa</anchor>
      <arglist>(const Subset &amp;first_subset, AssignmentContainer *first, const Subset &amp;second_subset, AssignmentContainer *second, const SubsetFilterTablesTemp &amp;filters, AssignmentContainer *ret)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_merged_assignments_random_order</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3305fe8f61d81cba57e9f6896024b263</anchor>
      <arglist>(const Subset &amp;first_subset, AssignmentContainer *first, const Subset &amp;second_subset, AssignmentContainer *second, const SubsetFilterTablesTemp &amp;filters, unsigned int maximum_tries, AssignmentContainer *ret)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a28a4d914228bb96a3aad3c01bb57beeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a3624d5a38e6a71d1e41b17e57fe836b6</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1domino.html</anchorfile>
      <anchor>a2095dc8230d6c30f29361536f7b93d31</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::Assignment</name>
    <filename>classIMP_1_1domino_1_1Assignment.html</filename>
    <base>ConstVector&lt; int &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::AssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1AssignmentContainer.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1AssignmentContainer.html</anchorfile>
      <anchor>aa0d8e3d96ae816d7a6462666ec8c0d04</anchor>
      <arglist>(unsigned int i) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::AssignmentsTable</name>
    <filename>classIMP_1_1domino_1_1AssignmentsTable.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::BranchAndBoundAssignmentsTable</name>
    <filename>classIMP_1_1domino_1_1BranchAndBoundAssignmentsTable.html</filename>
    <base>IMP::domino::AssignmentsTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1BranchAndBoundAssignmentsTable.html</anchorfile>
      <anchor>ac00a002ba6634d67393615acc8df1555</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::BranchAndBoundSampler</name>
    <filename>classIMP_1_1domino_1_1BranchAndBoundSampler.html</filename>
    <base>IMP::domino::DiscreteSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1BranchAndBoundSampler.html</anchorfile>
      <anchor>a0b1c142e1299f182f4448d5872ff954c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Assignments</type>
      <name>get_sample_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DiscreteSampler.html</anchorfile>
      <anchor>a4174eb43930468fea7d113da69c51656</anchor>
      <arglist>(const Subset &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_number_of_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DiscreteSampler.html</anchorfile>
      <anchor>a78d158c2aba7c490635e949fc234294a</anchor>
      <arglist>(unsigned int mx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle_states</name>
      <anchorfile>classIMP_1_1domino_1_1DiscreteSampler.html</anchorfile>
      <anchor>af01fe0f3283adc61bdb94b716afca5cd</anchor>
      <arglist>(Particle *p, ParticleStates *se)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restraints</name>
      <anchorfile>classIMP_1_1domino_1_1DiscreteSampler.html</anchorfile>
      <anchor>aa88d60254ee2cf156c3405437af23ee1</anchor>
      <arglist>(RestraintsAdaptor rs)</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>subset_filter_tables</name>
      <anchorfile>classIMP_1_1domino_1_1DiscreteSampler.html</anchorfile>
      <anchor>aed5d2eda883429164d051dd4f5a25df4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::CappedAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1CappedAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1CappedAssignmentContainer.html</anchorfile>
      <anchor>a30fec5a310e2e2c1b55ede0309d0b009</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1CappedAssignmentContainer.html</anchorfile>
      <anchor>a65e5f0000d6d39176de37c48b74f7cba</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::CompoundStates</name>
    <filename>classIMP_1_1domino_1_1CompoundStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1CompoundStates.html</anchorfile>
      <anchor>a27f4d825beff38d25658b1255963ba65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>classIMP_1_1domino_1_1ParticleStates.html</anchorfile>
      <anchor>a63a52136196a708abf37ac0019bb63a1</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>get_nearest_state</name>
      <anchorfile>classIMP_1_1domino_1_1ParticleStates.html</anchorfile>
      <anchor>a5916aa2b8fbfec162f8020e818a9f773</anchor>
      <arglist>(const algebra::VectorKD &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::DependencyScoreState</name>
    <filename>classIMP_1_1domino_1_1DependencyScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1DependencyScoreState.html</anchorfile>
      <anchor>acbb8a7b784a27b19b9bcd02c5e25a743</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1domino_1_1DependencyScoreState.html</anchorfile>
      <anchor>ac6870a108cba38e70caa3521dbf75647</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1domino_1_1DependencyScoreState.html</anchorfile>
      <anchor>a2eceeb32e09a853661205131bae2803c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1domino_1_1DependencyScoreState.html</anchorfile>
      <anchor>a3cf68c2feb6998bcab1a4c8fa8e8f4a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1domino_1_1DependencyScoreState.html</anchorfile>
      <anchor>a8de92cb4803f72a9047048cbb90acafa</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::DiscreteSampler</name>
    <filename>classIMP_1_1domino_1_1DiscreteSampler.html</filename>
    <base>IMP::Sampler</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::DisjointSetsSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1DisjointSetsSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1SubsetFilterTable.html</anchorfile>
      <anchor>abaa42cb0bed9f3c8fcfa4c3ac3e0162b</anchor>
      <arglist>(const Subset &amp;s, const Subsets &amp;prior_subsets) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1SubsetFilterTable.html</anchorfile>
      <anchor>ac455bb060804addf2274c8304a2aa5fd</anchor>
      <arglist>(const Subset &amp;s, const Subsets &amp;prior_subsets) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::DominoSampler</name>
    <filename>classIMP_1_1domino_1_1DominoSampler.html</filename>
    <base>IMP::domino::DiscreteSampler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a0280a26aea5ad30f6b6a283332130909</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cross_subset_filtering</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a345858fb854b0a00e562a5cd84fa2375</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_merge_tree</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a3fa84e77ae8b8319806e7eee75ffccbd</anchor>
      <arglist>(const MergeTree &amp;mt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_assignments_for_vertex</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>ad6b6ebbd23adf3966cbe1d67c32b4ee5</anchor>
      <arglist>(unsigned int tree_vertex) const </arglist>
    </member>
    <member kind="function">
      <type>Assignments</type>
      <name>get_sample_assignments_for_vertex</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a08dddff7037097c3e43476ead72c9307</anchor>
      <arglist>(unsigned int tree_vertex) const </arglist>
    </member>
    <member kind="function">
      <type>Assignments</type>
      <name>get_vertex_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>ab44a5f32f20e838c600f8eb9f5791cee</anchor>
      <arglist>(unsigned int node_index, unsigned int max_states=std::numeric_limits&lt; int &gt;::max()) const </arglist>
    </member>
    <member kind="function">
      <type>Assignments</type>
      <name>get_vertex_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>abede395fe6fc5abb408c9c3b2b24eb22</anchor>
      <arglist>(unsigned int node_index, const Assignments &amp;first, const Assignments &amp;second, unsigned int max_states=std::numeric_limits&lt; int &gt;::max()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_vertex_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a317227a05c7903a41070a939a8ee079b</anchor>
      <arglist>(unsigned int node_index, AssignmentContainer *ac, unsigned int max_states=std::numeric_limits&lt; int &gt;::max()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_vertex_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1DominoSampler.html</anchorfile>
      <anchor>a32961043b9b12602d60b6a50a1014aa8</anchor>
      <arglist>(unsigned int node_index, AssignmentContainer *first, AssignmentContainer *second, AssignmentContainer *ac, unsigned int max_states=std::numeric_limits&lt; int &gt;::max()) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::EqualitySubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1EqualitySubsetFilterTable.html</filename>
    <base>IMP::domino::DisjointSetsSubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1EqualitySubsetFilterTable.html</anchorfile>
      <anchor>a999b8886dc88e95d7f0625866f44c086</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1EqualitySubsetFilterTable.html</anchorfile>
      <anchor>aef78c6e898fd5b501286176dddb83761</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1EqualitySubsetFilterTable.html</anchorfile>
      <anchor>a2e5c7c5af60dfe0fd7187b049dda8f35</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::EquivalenceAndExclusionSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1EquivalenceAndExclusionSubsetFilterTable.html</filename>
    <base>IMP::domino::DisjointSetsSubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceAndExclusionSubsetFilterTable.html</anchorfile>
      <anchor>ad8e11b7bd6f1bb6c5b155a9529ef1d82</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceAndExclusionSubsetFilterTable.html</anchorfile>
      <anchor>aac5555f7a73f683982044b8bd2f5e489</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceAndExclusionSubsetFilterTable.html</anchorfile>
      <anchor>a453ef3ccac3fd973597a72126aff9944</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::EquivalenceSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1EquivalenceSubsetFilterTable.html</filename>
    <base>IMP::domino::DisjointSetsSubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceSubsetFilterTable.html</anchorfile>
      <anchor>afaf4a9fb8664923b0eabcb3de862b630</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceSubsetFilterTable.html</anchorfile>
      <anchor>af1a3292d922681436e7e80e3078e539e</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1EquivalenceSubsetFilterTable.html</anchorfile>
      <anchor>a645c5fadf84bca8511339919cf4f6c8f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ExclusionSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1ExclusionSubsetFilterTable.html</filename>
    <base>IMP::domino::DisjointSetsSubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1ExclusionSubsetFilterTable.html</anchorfile>
      <anchor>afef056d22f6adf21391a906f87856c24</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1ExclusionSubsetFilterTable.html</anchorfile>
      <anchor>a615f62ddb2a41e8724181b494c8ccc95</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ExclusionSubsetFilterTable.html</anchorfile>
      <anchor>a4677d4ed2c1517e1a95d342606854042</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::HeapAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1HeapAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1HeapAssignmentContainer.html</anchorfile>
      <anchor>aaa0539bb9e61357438a79e67fd0deb4c</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1HeapAssignmentContainer.html</anchorfile>
      <anchor>a611aa58e2517dc73fe0bab52911fe4b5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::IndexStates</name>
    <filename>classIMP_1_1domino_1_1IndexStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type></type>
      <name>IndexStates</name>
      <anchorfile>classIMP_1_1domino_1_1IndexStates.html</anchorfile>
      <anchor>a6830eb687329980d50db931ac69b0794</anchor>
      <arglist>(unsigned int n, IntKey k=IntKey(&quot;state&quot;))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1IndexStates.html</anchorfile>
      <anchor>a56e653212698961c6f90049d9334e33e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ListAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1ListAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1ListAssignmentContainer.html</anchorfile>
      <anchor>a54d7844045d19f57502c5af3bb43d256</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ListAssignmentContainer.html</anchorfile>
      <anchor>a92e5c39deb5ebdd9d90cf55df7309e68</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ListAssignmentsTable</name>
    <filename>classIMP_1_1domino_1_1ListAssignmentsTable.html</filename>
    <base>IMP::domino::AssignmentsTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ListAssignmentsTable.html</anchorfile>
      <anchor>ad26ed109596cd5c716efdd5f16afa7be</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1ListAssignmentsTable.html</anchorfile>
      <anchor>a15fa28a76023dd8fa328b452d2245908</anchor>
      <arglist>(const Subset &amp;s, AssignmentContainer *lsc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ListSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1ListSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1ListSubsetFilterTable.html</anchorfile>
      <anchor>a6fa55d460daba6d493df8b6aefc5b26d</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1ListSubsetFilterTable.html</anchorfile>
      <anchor>a48920d6f207daebabf6ed311fd0db0e8</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ListSubsetFilterTable.html</anchorfile>
      <anchor>aead7c604bac1a9270155b5f10fd78b42</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::MinimumRestraintScoreSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1MinimumRestraintScoreSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1MinimumRestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>a1ca4fb1e30e643e007f48c372816d98a</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1MinimumRestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>a1dce7f872d7a7e502d0503c81d116d2d</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1MinimumRestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>ae82b67e82322f9ca1bfcba1527943fb6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::NestedRigidBodyStates</name>
    <filename>classIMP_1_1domino_1_1NestedRigidBodyStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type></type>
      <name>NestedRigidBodyStates</name>
      <anchorfile>classIMP_1_1domino_1_1NestedRigidBodyStates.html</anchorfile>
      <anchor>a68719c9f3f06e88c45f1decd8ab699e0</anchor>
      <arglist>(const algebra::Transformation3Ds &amp;states, double scale=100)</arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>classIMP_1_1domino_1_1NestedRigidBodyStates.html</anchorfile>
      <anchor>aed92f776156830ada8948042b91ee639</anchor>
      <arglist>(unsigned int i) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_nearest_state</name>
      <anchorfile>classIMP_1_1domino_1_1NestedRigidBodyStates.html</anchorfile>
      <anchor>a5adb7aa357986502e98ad9936bba0efd</anchor>
      <arglist>(const algebra::VectorKD &amp;v) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1NestedRigidBodyStates.html</anchorfile>
      <anchor>ab1e3a003adc2c919b48eece0209024ce</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::Order</name>
    <filename>classIMP_1_1domino_1_1Order.html</filename>
    <base>ConstVector&lt; unsigned int &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::PackedAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1PackedAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1PackedAssignmentContainer.html</anchorfile>
      <anchor>aa8fb2986c01f0a8e2e92c71d2147e4f5</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1PackedAssignmentContainer.html</anchorfile>
      <anchor>af18d053b1724fc86a1445095d789fe88</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::PairListSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1PairListSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1PairListSubsetFilterTable.html</anchorfile>
      <anchor>ad3ac8ec08c800f563ceb0552c9338e47</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1PairListSubsetFilterTable.html</anchorfile>
      <anchor>a17b25f81495da3b10c33f9fe76756bee</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1PairListSubsetFilterTable.html</anchorfile>
      <anchor>aa2a6f3f069959b6b5b62b0e29fc21855</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ParticlesAdaptor</name>
    <filename>classIMP_1_1domino_1_1ParticlesAdaptor.html</filename>
    <base>Vector&lt; WeakPointer&lt; Particle &gt; &gt;</base>
    <base>IMP::InputAdaptor</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ParticleStates</name>
    <filename>classIMP_1_1domino_1_1ParticleStates.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ParticleStatesTable</name>
    <filename>classIMP_1_1domino_1_1ParticleStatesTable.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Subset</type>
      <name>get_subset</name>
      <anchorfile>classIMP_1_1domino_1_1ParticleStatesTable.html</anchorfile>
      <anchor>ad199188132a371bdf4d086cc82ad2735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ParticleStatesTable.html</anchorfile>
      <anchor>af8734dfdc6574db7edd6e23b3e4d9210</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle_states</name>
      <anchorfile>classIMP_1_1domino_1_1ParticleStatesTable.html</anchorfile>
      <anchor>a9ad869bd5d88c52e03c4395d8ab36e9e</anchor>
      <arglist>(Particle *p, ParticleStates *e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::PermutationStates</name>
    <filename>classIMP_1_1domino_1_1PermutationStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_inner_state</name>
      <anchorfile>classIMP_1_1domino_1_1PermutationStates.html</anchorfile>
      <anchor>a83230a40069098b990a64ac0de317310</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1PermutationStates.html</anchorfile>
      <anchor>abb7aa61a82398a8ec609be5f38585813</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ProbabilisticSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1ProbabilisticSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function">
      <type></type>
      <name>ProbabilisticSubsetFilterTable</name>
      <anchorfile>classIMP_1_1domino_1_1ProbabilisticSubsetFilterTable.html</anchorfile>
      <anchor>ab6cbafd1e3e6c10598aaa9ee4d82b14d</anchor>
      <arglist>(double p, bool leaves_only=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1ProbabilisticSubsetFilterTable.html</anchorfile>
      <anchor>abba1df8888d2bd56e4da89bbb6d3f011</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1ProbabilisticSubsetFilterTable.html</anchorfile>
      <anchor>ab1c4966fc3fa5058840da7e95dea553d</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ProbabilisticSubsetFilterTable.html</anchorfile>
      <anchor>a8088455aa8776c75ec4d8e608171e294</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RangeViewAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1RangeViewAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1RangeViewAssignmentContainer.html</anchorfile>
      <anchor>a49e5eadf897ba43302cc90f69bc3c4d7</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RangeViewAssignmentContainer.html</anchorfile>
      <anchor>a5f75653051db5c9674832b3c88a602dc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ReadAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1ReadAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1ReadAssignmentContainer.html</anchorfile>
      <anchor>aaad0cc874a4bf3fc0c49babf62ff9ec8</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ReadAssignmentContainer.html</anchorfile>
      <anchor>a9f950f81f4aaabe66a38d7497f4b594c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::ReadHDF5AssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1ReadHDF5AssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1ReadHDF5AssignmentContainer.html</anchorfile>
      <anchor>a8419f54f06e7c63d16423618816eff20</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1ReadHDF5AssignmentContainer.html</anchorfile>
      <anchor>ad1bfe7f63326f5e5872bd014c951ce8e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RecursiveAssignmentsTable</name>
    <filename>classIMP_1_1domino_1_1RecursiveAssignmentsTable.html</filename>
    <base>IMP::domino::AssignmentsTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RecursiveAssignmentsTable.html</anchorfile>
      <anchor>a7277eca2056cd5f4f001025b53791f8f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RecursiveStates</name>
    <filename>classIMP_1_1domino_1_1RecursiveStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RecursiveStates.html</anchorfile>
      <anchor>ac29a3bf098dc7244bddd3bb19e6f998f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RestraintCache</name>
    <filename>classIMP_1_1domino_1_1RestraintCache.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>add_restraints</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a7f717d32d3a03455618395539b261846</anchor>
      <arglist>(const RestraintsAdaptor &amp;rs)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_entries</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a8fa78e942ce6130d0b88ff964b488e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RestraintsTemp</type>
      <name>get_restraints</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>aaf2bd6854f707db56461daa2ba29fe12</anchor>
      <arglist>(const Subset &amp;s, const Subsets &amp;exclusions) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a900c1be619f7302ade5f53c08b86f8b8</anchor>
      <arglist>(Restraint *r, const Assignment &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a277af62358d51335e22c3c5419ced30a</anchor>
      <arglist>(Restraint *r, const Subset &amp;s, const Assignment &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Slice</type>
      <name>get_slice</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a15f1f5513308176b4eaccc9e411277f2</anchor>
      <arglist>(Restraint *r, const Subset &amp;s) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a886eba211145ea7b38913a48b918b4a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_last_score</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a7cb8d67a4032980ccdbbb2393c4a8aad</anchor>
      <arglist>(Restraint *r, const Subset &amp;s, const Assignment &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_cache</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a2997d5f930386359987e678d52e63a4b</anchor>
      <arglist>(const ParticlesTemp &amp;particle_ordering, const RestraintsTemp &amp;restraints, RMF::HDF5::Group group, unsigned int max_entries)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_restraint_information</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a2463e4515b694675e4fb8ea416a98bca</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintCache.html</anchorfile>
      <anchor>a0da592848ac567ecc342b96406bd21e4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RestraintScoreSubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1RestraintScoreSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function">
      <type></type>
      <name>RestraintScoreSubsetFilterTable</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>a27a72d5b2d3000fa72df9c45755db866</anchor>
      <arglist>(RestraintsAdaptor rs, ParticleStatesTable *pst)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>a94ab65eebb88dd4d75e6d16aeff11007</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>a605ca12686b3b5e03eb90bdd9ad9dd8e</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RestraintScoreSubsetFilterTable.html</anchorfile>
      <anchor>ad50b6c1d68356cafa1c51752102f039a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::RigidBodyStates</name>
    <filename>classIMP_1_1domino_1_1RigidBodyStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>classIMP_1_1domino_1_1RigidBodyStates.html</anchorfile>
      <anchor>a01a06e715ffb49eb26d7bdd7da9352d8</anchor>
      <arglist>(unsigned int i) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_nearest_state</name>
      <anchorfile>classIMP_1_1domino_1_1RigidBodyStates.html</anchorfile>
      <anchor>a40232b067f9af7b17c5375edd42fbdbf</anchor>
      <arglist>(const algebra::VectorKD &amp;v) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1RigidBodyStates.html</anchorfile>
      <anchor>a297fcd641df60667b4bc55342dc53778</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::SampleAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1SampleAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1SampleAssignmentContainer.html</anchorfile>
      <anchor>a8babffa63b3d9419698ab8493d911a93</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1SampleAssignmentContainer.html</anchorfile>
      <anchor>a7f7b6a7735bed5548f3bc928214c9ec5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::SimpleAssignmentsTable</name>
    <filename>classIMP_1_1domino_1_1SimpleAssignmentsTable.html</filename>
    <base>IMP::domino::AssignmentsTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1SimpleAssignmentsTable.html</anchorfile>
      <anchor>a98c54efb667b399ab14be8d685689e5e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::Slice</name>
    <filename>classIMP_1_1domino_1_1Slice.html</filename>
    <base>ConstVector&lt; unsigned int &gt;</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::Subset</name>
    <filename>classIMP_1_1domino_1_1Subset.html</filename>
    <base>ConstVector&lt; IMP::WeakPointer&lt; Particle &gt;, Particle * &gt;</base>
    <member kind="function">
      <type></type>
      <name>Subset</name>
      <anchorfile>classIMP_1_1domino_1_1Subset.html</anchorfile>
      <anchor>a2bb9c03148cb537ca42deb6ae50311c1</anchor>
      <arglist>(ParticlesTemp ps)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::SubsetFilter</name>
    <filename>classIMP_1_1domino_1_1SubsetFilter.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get_is_ok</name>
      <anchorfile>classIMP_1_1domino_1_1SubsetFilter.html</anchorfile>
      <anchor>ae6ac39cf0c88e5f67f47ab75a255252d</anchor>
      <arglist>(const Assignment &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_next_state</name>
      <anchorfile>classIMP_1_1domino_1_1SubsetFilter.html</anchorfile>
      <anchor>a98bb346a18334bae9a8028d7f99851a2</anchor>
      <arglist>(int pos, const Assignment &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::SubsetFilterTable</name>
    <filename>classIMP_1_1domino_1_1SubsetFilterTable.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::domino::WriteAssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1WriteAssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1WriteAssignmentContainer.html</anchorfile>
      <anchor>a86ed9aa97333fd510ca0ad3e064d86e2</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1WriteAssignmentContainer.html</anchorfile>
      <anchor>aa97ab46179815bf8f34fe60537d35e38</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::WriteHDF5AssignmentContainer</name>
    <filename>classIMP_1_1domino_1_1WriteHDF5AssignmentContainer.html</filename>
    <base>IMP::domino::AssignmentContainer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Ints</type>
      <name>get_particle_assignments</name>
      <anchorfile>classIMP_1_1domino_1_1WriteHDF5AssignmentContainer.html</anchorfile>
      <anchor>a82d17d32b6b6fb6765659fd79b05c33e</anchor>
      <arglist>(unsigned int index) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1WriteHDF5AssignmentContainer.html</anchorfile>
      <anchor>abc900f3eb2dae7fa7d53ba9a417307f7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::domino::XYZStates</name>
    <filename>classIMP_1_1domino_1_1XYZStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_embedding</name>
      <anchorfile>classIMP_1_1domino_1_1XYZStates.html</anchorfile>
      <anchor>acf31006ae1ecc70594721c64fa496dc6</anchor>
      <arglist>(unsigned int i) const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_nearest_state</name>
      <anchorfile>classIMP_1_1domino_1_1XYZStates.html</anchorfile>
      <anchor>a11862e085003f210367923516af8f474</anchor>
      <arglist>(const algebra::VectorKD &amp;v) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1domino_1_1XYZStates.html</anchorfile>
      <anchor>aa413cb4e08a670af7cf1bce59f95e84b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::em</name>
    <filename>namespaceIMP_1_1em.html</filename>
    <class kind="class">IMP::em::CoarseCCatIntervals</class>
    <class kind="class">IMP::em::CoarseConvolution</class>
    <class kind="class">IMP::em::DensityFillingRestraint</class>
    <class kind="class">IMP::em::DensityHeader</class>
    <class kind="class">IMP::em::DensityMap</class>
    <class kind="class">IMP::em::DistanceMask</class>
    <class kind="class">IMP::em::EMReaderWriter</class>
    <class kind="class">IMP::em::EnvelopeFitRestraint</class>
    <class kind="class">IMP::em::EnvelopePenetrationRestraint</class>
    <class kind="class">IMP::em::EnvelopeScore</class>
    <class kind="class">IMP::em::FitRestraint</class>
    <class kind="class">IMP::em::FitRestraintBayesEM3D</class>
    <class kind="class">IMP::em::FittingSolutions</class>
    <class kind="class">IMP::em::HighDensityEmbedding</class>
    <class kind="class">IMP::em::ImageHeader</class>
    <class kind="class">IMP::em::KernelParameters</class>
    <class kind="class">IMP::em::MapDistanceTransform</class>
    <class kind="class">IMP::em::MapReaderWriter</class>
    <class kind="class">IMP::em::MRCReaderWriter</class>
    <class kind="class">IMP::em::PCAAligner</class>
    <class kind="class">IMP::em::PCAFitRestraint</class>
    <class kind="class">IMP::em::RadiusDependentDistanceMask</class>
    <class kind="class">IMP::em::SampledDensityMap</class>
    <class kind="struct">IMP::em::SpiderHeader</class>
    <class kind="class">IMP::em::SpiderMapReaderWriter</class>
    <class kind="class">IMP::em::SurfaceShellDensityMap</class>
    <class kind="class">IMP::em::Voxel</class>
    <class kind="class">IMP::em::XplorReaderWriter</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DensityMap &gt; &gt;</type>
      <name>DensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a9cef4bc039e283a57da273c9e60f8d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DensityMap &gt; &gt;</type>
      <name>DensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a50b1fd8a3a7875ca859203ad89cff17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingSolutions &gt;</type>
      <name>FittingSolutionsList</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8de0e64c35e07253144afdd1c48a6cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; KernelParameters &gt;</type>
      <name>KernelParametersList</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7049cc560c7916e5ac5e9f6b597b4e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SampledDensityMap &gt; &gt;</type>
      <name>SampledDensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a35fd296933bf750cd910739f56e8d514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SampledDensityMap &gt; &gt;</type>
      <name>SampledDensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aca58fc6f766def9e223d08c545db4a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SurfaceShellDensityMap &gt; &gt;</type>
      <name>SurfaceShellDensityMaps</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3a6e4ca91c6a06603dd1d379a62bda42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SurfaceShellDensityMap &gt; &gt;</type>
      <name>SurfaceShellDensityMapsTemp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac9a5ef2e476985ca051d711116321602</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>approximate_molecular_mass</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a6e4fd1709fe2bbb486a3e70d4dfe0f27</anchor>
      <arglist>(DensityMap *m, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a97f77317e298df3b4573ca3907c66638</anchor>
      <arglist>(const DensityMap *em1, const DensityMap *em2)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>bayesem3d_get_cumulative_sum</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7c137733471276a4bec62dd3614c3849</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; double, double &gt;</type>
      <name>bayesem3d_get_cumulative_sum_with_reference</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac260890ecbfef938c627e3fecc89aacb</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>bayesem3d_get_density_from_particle</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7e08fd743778d6b18b8e759bea705454</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution, const double window_size=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; double, int &gt;</type>
      <name>bayesem3d_get_distinct_and_counts</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aea9d3382eae88ebccecf5d47768eeb72</anchor>
      <arglist>(DensityMap *em)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_em_density_squared</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0fd16ec8233e9e763b995827b7496ffd</anchor>
      <arglist>(DensityMap *em, long number_of_voxels)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_logabssumexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a57e785a4088ec5176a7b0e24b2e7ae71</anchor>
      <arglist>(double x, double y, double sx, double sy)</arglist>
    </member>
    <member kind="function">
      <type>FloatPair</type>
      <name>bayesem3d_get_logabssumprodexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a430688703dec07bcd214cbfc3bb1fa1a</anchor>
      <arglist>(double x, double y, double wx, double wy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_logsumexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa3e0e6333ca4cf0b7b4d7a974dc71f17</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_get_logsumprodexp</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a2db0fd551bae9c033cae4d8c83485799</anchor>
      <arglist>(double x, double y, double wx, double wy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bayesem3d_get_normalized_intensities</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae027b772ce1eeb542809f08605b47679</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, algebra::Vector3Ds &gt;</type>
      <name>bayesem3d_get_score_and_derivative</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a247c0133e66b108ee7d36e98cea961c9</anchor>
      <arglist>(DensityMap *em, const IMP::ParticlesTemp &amp;ps, double resolution, double sigma, const double window_size=1.0)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>bayesem3d_get_value</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>acf93458d53bb786095f8fcfc32782929</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;pt, double mass_ii, const IMP::em::KernelParameters &amp;kps)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>bayesem3d_get_value_no_deriv</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7cc0ae516db501ad39635d0066092094</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;pt, double mass_ii, const IMP::em::KernelParameters &amp;kps)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>bayesem3d_linear_interpolate</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a81f70ec8a459b19554dd3cc9501f5a66</anchor>
      <arglist>(const Floats &amp;x_data, const Floats &amp;y_data, double x, bool extrapolate)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>binarize</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a1c88424c8b24a5802ef048175e22787b</anchor>
      <arglist>(DensityMap *orig_map, float threshold, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>compute_fitting_score</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3f5170ae051deffd9fd3b3c6064f403b</anchor>
      <arglist>(const ParticlesTemp &amp;ps, DensityMap *em_map, FloatKey wei_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>compute_fitting_scores</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a4350b15571abb634d2285ce9114a5725</anchor>
      <arglist>(const ParticlesTemp &amp;ps, DensityMap *em_map, const algebra::Transformation3Ds &amp;transformations, bool fast_version=false, bool local_score=false, const FloatKey &amp;wei_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>compute_fitting_scores</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ab8beedad8915dcd1aa22b5ba75a61439</anchor>
      <arglist>(DensityMap *em_map, core::RigidBody rb, Refiner *refiner, const algebra::Transformation3Ds &amp;transformations)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>convolute</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8505c0c435a33d043c98f29ade4fc2ee</anchor>
      <arglist>(const DensityMap *m1, const DensityMap *m2)</arglist>
    </member>
    <member kind="function">
      <type>DensityHeader</type>
      <name>create_density_header</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a11f40ffc07e7b3d9dde0711015f3e97e</anchor>
      <arglist>(const algebra::BoundingBoxD&lt; 3 &gt; &amp;bb, float spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa873c569e58e5c5d66dac1c0420f3e6c</anchor>
      <arglist>(const DensityMap *other)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ad6586b38abb58a2ebc6b64b10f60f734</anchor>
      <arglist>(const algebra::BoundingBox3D &amp;bb, double spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ace9a6d63b63146fcaac428d8995ade7b</anchor>
      <arglist>(int nx, int ny, int nz, double spacing)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae63d1d8a3cfad97be2846c51d1a03203</anchor>
      <arglist>(const IMP::algebra::GridD&lt; 3, S, V, E &gt; &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>Particles</type>
      <name>density2particles</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ad7c905f64de2740109026908aaa1e952</anchor>
      <arglist>(DensityMap *dmap, Float threshold, Model *m, int step=1)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3Ds</type>
      <name>density2vectors</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a5cbea21ee3c92fa5008bea0e8a6fc612</anchor>
      <arglist>(DensityMap *dmap, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DensityHeader_to_ImageHeader</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a59459b7c51d60c2f2a3c9b6491cb1455</anchor>
      <arglist>(const DensityHeader &amp;header, ImageHeader &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>get_bounding_box</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a820db29914536321043260f19e89fca1</anchor>
      <arglist>(const DensityMap *m, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a31277ed67fe1b97b72bab4454be1e5af</anchor>
      <arglist>(const DensityMap *grid1, const DensityMap *grid2, double grid2_voxel_data_threshold, bool allow_padding=false, FloatPair norm_factors=FloatPair(0., 0.))</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_local_coefficient</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8b478cdb42f4ae609c02907320cd5be1</anchor>
      <arglist>(const DensityMap *em_map, DensityMap *model_map, double voxel_data_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_cc_score</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a29fc47f6607faab06b83b42ab6511aba</anchor>
      <arglist>(DensityMap *data, SampledDensityMap *model_map, double scalefactor, bool recalc_rms=true, bool resample=true, FloatPair norm_factors=FloatPair(0., 0.))</arglist>
    </member>
    <member kind="function">
      <type>algebra::GridD&lt; 3, algebra::DenseGridStorageD&lt; 3, float &gt;, float &gt;</type>
      <name>get_grid</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a9c72b01f6d6bbe0c84a0779fc08b809c</anchor>
      <arglist>(DensityMap *in_map)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_max_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae7eacf1de1781ba22d2169b635d87753</anchor>
      <arglist>(DensityMaps maps)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_molecular_mass_at_threshold</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a1a9e2f7c4a8e6a32405eca965626d554</anchor>
      <arglist>(DensityMap *m, Float threshold, atom::ProteinDensityReference ref=atom::HARPAZ)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_number_of_particles_outside_of_the_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a5a49f58c2b493fe460df2a1f42aed80d</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, const IMP::algebra::Transformation3D &amp;t=IMP::algebra::get_identity_transformation_3d(), float thr=0.0)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_numbers_of_particles_outside_of_the_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a55a883a182ff619b805f5bbcb5297c2e</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, const IMP::algebra::Transformation3Ds &amp;transformations, float thr=0.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_percentage_of_voxels_covered_by_particles</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a6ac62bc20e89bf2c6e8f8f6bb5cbca5a</anchor>
      <arglist>(DensityMap *dmap, const Particles &amp;ps, float smoothing_radius=3., const IMP::algebra::Transformation3D &amp;t=IMP::algebra::get_identity_transformation_3d(), float thr=0.0)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a8dfa355f085d452c5636987d4f8ab956</anchor>
      <arglist>(DensityMap *map_to_segment, int nx_start, int nx_end, int ny_start, int ny_end, int nz_start, int nz_end)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>aa92d0be9d42aa9d9b7a20796baacbf3b</anchor>
      <arglist>(DensityMap *map_to_segment, algebra::Vector3Ds vecs, float dist)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_segment_by_masking</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a94fc09c5491718e3e0e61b2c4ff04f8f</anchor>
      <arglist>(DensityMap *map_to_segment, DensityMap *mask, float mas_threshold)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_sum</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0b1f187c3b53af89037d40912cc10aef</anchor>
      <arglist>(const DensityMap *m1)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_threshold_for_approximate_mass</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7be03879088ecc74f54b40e68ba7a99c</anchor>
      <arglist>(DensityMap *m, Float desired_mass, atom::ProteinDensityReference ref=atom::HARPAZ)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_threshold_for_approximate_volume</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ac70c499fce515b0328e43e6084fe92dc</anchor>
      <arglist>(DensityMap *m, Float desired_volume)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_threshold_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a3078e4c77b9e81fa61b8222934185d1e</anchor>
      <arglist>(const DensityMap *orig_map, float threshold)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_volume_at_threshold</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a402ab2b7809cc5ce708092b3c2c1a297</anchor>
      <arglist>(DensityMap *m, Float threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ImageHeader_to_DensityHeader</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ab7f8287dfcc5d61b20445c3c683c3e12</anchor>
      <arglist>(const ImageHeader &amp;h, DensityHeader &amp;header)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>interpolate_map</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a7ca59d2a3aa688060c280efa250d80a7</anchor>
      <arglist>(DensityMap *in_map, double new_spacing)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a300a1ede18ac26749a961beca4c971e3</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;weight_key, DensityMap *dmap, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3, bool fast=true)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_around_point</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a46543f4001a8c31276003433db00f776</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;weight_key, DensityMap *dmap, const algebra::Vector3D &amp;anchor_centroid, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3, bool fast=false)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_around_points</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a729f3b19106724e0dbc8c7e98336ff64</anchor>
      <arglist>(Particle *p, Refiner *refiner, const FloatKey &amp;wei_key, DensityMap *dmap, const algebra::Vector3Ds &amp;anchor_centroids, OptimizerStates display_log, Int number_of_optimization_runs=5, Int number_of_mc_steps=10, Int number_of_cg_steps=100, Float max_translation=2., Float max_rotation=.3)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutions</type>
      <name>local_rigid_fitting_grid_search</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a2092ec68df3aaeeef8daee59353d0327</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const FloatKey &amp;wei_key, DensityMap *dmap, Int max_voxels_translation=2, Int translation_step=1, Float max_angle_in_radians=0.174, Int number_of_rotations=100)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>mask_and_norm</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>ae6c068669daa6977fb4a6e9800d79b44</anchor>
      <arglist>(em::DensityMap *dmap, em::DensityMap *mask)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>multiply</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a0337abc873be82054e0b4061912cf0dc</anchor>
      <arglist>(const DensityMap *m1, const DensityMap *m2)</arglist>
    </member>
    <member kind="function">
      <type>SampledDensityMap *</type>
      <name>particles2binarized_density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a12121a1c9d4ec3f58b959b1b8c136ecb</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float resolution, Float apix, int sig_cutoff=3, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>SampledDensityMap *</type>
      <name>particles2density</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>af47d3d5898cb50aecaf7b8cf5a40d167</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float resolution, Float apix, int sig_cutoff=3, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>SurfaceShellDensityMap *</type>
      <name>particles2surface</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a4c18a8d1e939db80e5767b8b3e9c040f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, Float apix, const FloatKey &amp;weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pca_cmm</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a88b20ce42fe6cef6823130a05776e631</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>afe56890acecf113921fafd78c9ad1af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a157e9c561e87ddf1f7c69eda3395ac7e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1em.html</anchorfile>
      <anchor>a9ed548c433f8c9b338f8a230feb549ef</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1em" title="estimate_threshold_from_molecular_mass">est_from_molec_mass_bin</docanchor>
    <docanchor file="namespaceIMP_1_1em" title="map2pca">map2pca_bin</docanchor>
    <docanchor file="namespaceIMP_1_1em" title="mol2pca">mol2pca_bin</docanchor>
    <docanchor file="namespaceIMP_1_1em" title="resample_density">resample_density_bin</docanchor>
    <docanchor file="namespaceIMP_1_1em" title="simulate_density_from_pdb">simulate_density_from_pdb_bin</docanchor>
    <docanchor file="namespaceIMP_1_1em" title="view_density_header">view_density_header_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::em::CoarseCCatIntervals</name>
    <filename>classIMP_1_1em_1_1CoarseCCatIntervals.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>std::pair&lt; double, algebra::Vector3Ds &gt;</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1em_1_1CoarseCCatIntervals.html</anchorfile>
      <anchor>a4d120a2d38fe2f32674507fada921712</anchor>
      <arglist>(DensityMap *em_map, SampledDensityMap *model_map, const algebra::Vector3Ds &amp;deriv, float scalefac, bool lderiv, unsigned long eval_interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1CoarseCCatIntervals.html</anchorfile>
      <anchor>addf19cdb6d385805c6ce50e3fedf3afb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>calls_counter_</name>
      <anchorfile>classIMP_1_1em_1_1CoarseCCatIntervals.html</anchorfile>
      <anchor>a446bb5f0a68ad53772ff5643e2d15772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>stored_cc_</name>
      <anchorfile>classIMP_1_1em_1_1CoarseCCatIntervals.html</anchorfile>
      <anchor>a3521f4a2be5469f470c89a0fa3568443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::scoped_array&lt; double &gt;</type>
      <name>stored_dvx_</name>
      <anchorfile>classIMP_1_1em_1_1CoarseCCatIntervals.html</anchorfile>
      <anchor>a47ad3bff747172937f566905338ed901</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::CoarseConvolution</name>
    <filename>classIMP_1_1em_1_1CoarseConvolution.html</filename>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>convolution</name>
      <anchorfile>classIMP_1_1em_1_1CoarseConvolution.html</anchorfile>
      <anchor>af95d23ee56098360e25659d575c7aca3</anchor>
      <arglist>(const DensityMap *em_map, DensityMap *model_map, float voxel_data_threshold, bool recalc_ccnormfac=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::DensityFillingRestraint</name>
    <filename>classIMP_1_1em_1_1DensityFillingRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DensityFillingRestraint</name>
      <anchorfile>classIMP_1_1em_1_1DensityFillingRestraint.html</anchorfile>
      <anchor>a0656eecc49cff09bae195f12553ebd95</anchor>
      <arglist>(Particles ps, DensityMap *em_map, Float threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1DensityFillingRestraint.html</anchorfile>
      <anchor>a95d70db7daf21bc571009190451e56c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1DensityFillingRestraint.html</anchorfile>
      <anchor>ae63b7fe9ac592cf3867e2cc390798d37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1DensityFillingRestraint.html</anchorfile>
      <anchor>a1160ea6b5511ff93188baca456774253</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1em_1_1DensityFillingRestraint.html</anchorfile>
      <anchor>a5e72ea1269e4178f90f912d362da2444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::DensityHeader</name>
    <filename>classIMP_1_1em_1_1DensityHeader.html</filename>
    <member kind="function">
      <type>void</type>
      <name>compute_xyz_top</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a72fc265bf670432f1c10c27af91bf09c</anchor>
      <arglist>(bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_data_type</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>acd0864968f50cc952e50fdb783febe2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_resolution</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a376cd20ac07bdef9fc43d9a099e073ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_nx</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a16c0a2cb45915d20431a80aa1017d9d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_ny</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a3a33d28c0483e16450086d4a7acc6e01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_nz</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a317ace58d5943d151d7e6d71661450c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_origin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>ae5f6fb397890afa75707627416862a9e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_resolution</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a72ede862e41371cfec2af6425fdd1b7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_spacing</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a26623b8e5e2338502427fbcc5b35e253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_top</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a28746e75c3b89659a5ce84642899dbc2</anchor>
      <arglist>(int ind) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_xorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a1d888f63228e1a78c8bb4d7584aa1809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_yorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a2178f8ada2d00112317754c5645055d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_zorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>acfa3409333b84d199d7f59442cbb56d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_top_calculated</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a801be0f1c1af94a8b2d4e16ce08a0bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_resolution</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>abe83fe956022d8c8c64855591efd4fae</anchor>
      <arglist>(float resolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_xorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a2430b469cb86e77422c432187d993e8a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_yorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a73e0e7491109cddd09170c1ab0187ca4</anchor>
      <arglist>(float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zorigin</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a056bd1caa7b5a483030c06bb89ee94bf</anchor>
      <arglist>(float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_cell_dimensions</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a8485bbb1d5264940b7b598b0189a96b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_map_dimensions</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a9779695f9501b84bb027f7c355a61c9e</anchor>
      <arglist>(int nnx, int nny, int nnz)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>comments</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a2dd6d3563a97d748d27007879aa36685</anchor>
      <arglist>[COMMENT_FIELD_NUM_OF][COMMENT_FIELD_SINGLE_SIZE]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>magic</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a9758dbb868bddbd50e18b3ba9ecd78a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mapc</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>af514335affe7414a3f9c514a80b8aa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nxstart</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>af60342173d1b32b86865f928c29ef8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nystart</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a06bba413336f5a54b104f0f399e96233</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nzstart</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a2626136010b1650d4f6d36d07cb99f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>data_type_</name>
      <anchorfile>classIMP_1_1em_1_1DensityHeader.html</anchorfile>
      <anchor>a07b9d621988b51dad49d21f64dca0ff3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::DensityMap</name>
    <filename>classIMP_1_1em_1_1DensityMap.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>DensityMap</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>abf9a162f4619e31c0a3cbc021d7cb7b0</anchor>
      <arglist>(const DensityHeader &amp;header, std::string name=&quot;DensityMap%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a0f672a08c4e0c77954f1a4aef2b01538</anchor>
      <arglist>(const DensityMap *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a353505c00bb5f3e98b05b75b2bfe6f0a</anchor>
      <arglist>(Float d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calc_all_voxel2loc</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a52b4434e9742e3aaea0d2eefa7513f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calcRMS</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a88469bd20894fbe79a8b4f86546f55ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a8fdd76efff4b4d2fe640f05fc66a3749</anchor>
      <arglist>(const DensityMap *other)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_centroid</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a316e2d53b3111b0d943017642ba6eb1e</anchor>
      <arglist>(double threshold=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_cropped</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a3cbce8f549241438b9e02fbcc5e9f47f</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_cropped</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a22a4b07290dee25e91a77157ebf4393d</anchor>
      <arglist>(Particles ps, double distance, bool inverse=false, bool keep_map_dimensions=false)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_cropped</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a152abc77a04a0eddaedca4a61643c7e4</anchor>
      <arglist>(const algebra::BoundingBox3D &amp;bb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_dim_index_by_location</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a6ec240506b09068f3c1f049ce48d8131</anchor>
      <arglist>(const algebra::Vector3D &amp;v, int ind) const </arglist>
    </member>
    <member kind="function">
      <type>const DensityHeader *</type>
      <name>get_header</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a4675217cca898418d497226772210c9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DensityHeader *</type>
      <name>get_header_writable</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>af1705e5ebf5aa3d9fc5a84c897e2ebb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_location_by_voxel</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a812df64547a5b7da4e24e7dd4b05e89f</anchor>
      <arglist>(long index) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_location_in_dim_by_voxel</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a2de1d7a3a70e2dfd4896b6d24590f5bd</anchor>
      <arglist>(long index, int dim) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_locations_string</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ad93714f199dff555b08669ca77aa9582</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_max_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ae412589be76d8a3be7c950d00c106d02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_maximum_value_in_xy_plane</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a0f3ee6c16947c7836f501840a014d6b6</anchor>
      <arglist>(int z_ind)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_maximum_value_in_xz_plane</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ab922adbe5f169a195b6624a6d3dd2e89</anchor>
      <arglist>(int y_ind)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_maximum_value_in_yz_plane</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ab424a5889e2a3617978eb18345fe58af</anchor>
      <arglist>(int x_ind)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_min_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ae54d057bfa05300d34b3d62a64f0dd9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_number_of_voxels</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a95d59f84607e7b70cc1b3dcc824f0cba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_spacing</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>adb37472459fa1b4398e5a0f4e729f179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a7a7d9601b50231d7c52880170d808737</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a8b59bb58db6f0c5adfbad064b0751873</anchor>
      <arglist>(long index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ab66058c8b7f96141130ead7add7dd371</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_voxel_by_location</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a0ccc4e511b1b164427c00a0875e72f0c</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get_voxel_by_location</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a4cc6f841d7d30d21f72281d6c42ec9f1</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_part_of_volume</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a8b1e0ddf31da0b99acc31ff9a0892d57</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_part_of_volume</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a658fca8d7421fc214ea82443c82d6aec</anchor>
      <arglist>(const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a17e758e1c4e663cb3762c1458479bfb6</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pad</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a34cba7fff0d5dbe0bc40a4f57d4e2132</anchor>
      <arglist>(int nx, int ny, int nz, float val=0.0)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>pad_margin</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a8f5c966aab9fb6fa41e89500efc7f7e3</anchor>
      <arglist>(int mrg_x, int mrg_y, int mrg_z, float val=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pick_max</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ad8b6d7f1edcab290e04d6056faf2434c</anchor>
      <arglist>(const DensityMap *other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_data</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a08d52cfea5a71dea1e076f36ac08affb</anchor>
      <arglist>(float value=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same_dimensions</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>aa1bf0fe2dd98afc7cd94e0f441ff38f2</anchor>
      <arglist>(const DensityMap *other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same_origin</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ab6f89d974d50aadf45b16f1879a01326</anchor>
      <arglist>(const DensityMap *other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same_voxel_size</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>afeca80ac2ffc08fc0769e037cca55a31</anchor>
      <arglist>(const DensityMap *other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_origin</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a26cc296c82e7ba503b2d8a7f2fde3683</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a9e295c3e2f9547f7226b1c7287187a79</anchor>
      <arglist>(long index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a88e9fb3e5cde97ffebea00cb7d265479</anchor>
      <arglist>(float x, float y, float z, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_void_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a553986bd4156ceb96861f3bf73a797eb</anchor>
      <arglist>(int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>std_normalize</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a642a0e8246adb143cd8fc9600ab3c308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_voxel_size</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ac65752a59d1c2d2bc389a0af46a61493</anchor>
      <arglist>(float new_apix)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>xyz_ind2voxel</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a6ffab2a57f7158f45d2719c18ed48e9c</anchor>
      <arglist>(int x, int y, int z) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_header</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a2040786e8a2ab1541f8385a327e2f86e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>loc_calculated_</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a20da3ff6414395132375e18534334d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::scoped_array&lt; float &gt;</type>
      <name>x_loc_</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a9c6d421f1b417e2f5b3be3a4e2935a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>aec381e89f990536e40c6d68fc3a6eebe</anchor>
      <arglist>(DensityMap *dm, const Particles &amp;pis)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a38ed273d99248a3258e9ed33676cd2d6</anchor>
      <arglist>(algebra::DenseGrid3D&lt; float &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>create_density_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>ae4349c6f32dd2bd503c4d1bc0dffbb2f</anchor>
      <arglist>(algebra::DenseGrid3D&lt; double &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_binarized_interior</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a54fa7df010fd43d4d0d13f71fa77b03d</anchor>
      <arglist>(DensityMap *dmap)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>adbf6a76c82d8de409004cc3f304d9333</anchor>
      <arglist>(const DensityMap *m, const algebra::Vector3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_resampled</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a08ef3f70aec3b1d6e01a2e72149e4902</anchor>
      <arglist>(DensityMap *input, double scaling)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_transformed</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a136741fcac5174f8af99e7aac939e9f9</anchor>
      <arglist>(const DensityMap *input, const algebra::Transformation3D &amp;tr, double threshold)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>get_transformed</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>afea835c4ddafaf25568cc64c66bcc3f1</anchor>
      <arglist>(DensityMap *input, const algebra::Transformation3D &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_transformed_into</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a8fde3a97a69c15d1dfce64e6757e369e</anchor>
      <arglist>(const DensityMap *source, const algebra::Transformation3D &amp;tr, DensityMap *into, bool calc_rms=true)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>read_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>aa7ad31965184a36215f80816a2749662</anchor>
      <arglist>(std::string filename, MapReaderWriter *reader)</arglist>
    </member>
    <member kind="function">
      <type>DensityMap *</type>
      <name>read_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a1e7a07ba713fd32af20b67ca694cc35f</anchor>
      <arglist>(std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a0301a7f2fa5fccda297495bd7fe71b9b</anchor>
      <arglist>(DensityMap *m, std::string filename, MapReaderWriter *writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_map</name>
      <anchorfile>classIMP_1_1em_1_1DensityMap.html</anchorfile>
      <anchor>a618403f050529bb7bc82752b2af3c157</anchor>
      <arglist>(DensityMap *m, std::string filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::DistanceMask</name>
    <filename>classIMP_1_1em_1_1DistanceMask.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em::EMReaderWriter</name>
    <filename>classIMP_1_1em_1_1EMReaderWriter.html</filename>
    <base>IMP::em::MapReaderWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>af6dc21993c1e8d32771f3049c968d63f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>a1000a5b684a04a8fdea879eb85ee4aae</anchor>
      <arglist>(const char *filename, float **data, DensityHeader &amp;header) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>ac7bedbc0b8c627beb4bf5c23928fd205</anchor>
      <arglist>(const char *filename, const float *data, const DensityHeader &amp;header) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read_data</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>a31c500373e17812e16ca7c9475fa8d0e</anchor>
      <arglist>(std::ifstream &amp;file, float **data, const internal::EMHeader &amp;header)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>read_header</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>aa294d5cd7bb46a35b51a3f6d8f1371b1</anchor>
      <arglist>(std::ifstream &amp;file, internal::EMHeader &amp;header)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>write_header</name>
      <anchorfile>classIMP_1_1em_1_1EMReaderWriter.html</anchorfile>
      <anchor>a6a635ef984c445af21a6a89496eca142</anchor>
      <arglist>(std::ostream &amp;s, const internal::EMHeader &amp;header)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::EnvelopeFitRestraint</name>
    <filename>classIMP_1_1em_1_1EnvelopeFitRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>EnvelopeFitRestraint</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeFitRestraint.html</anchorfile>
      <anchor>a53d60213da33d49c6c013e48d1e5b04f</anchor>
      <arglist>(Particles particles, DensityMap *em_map, double density_threshold, double penetration_threshold)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeFitRestraint.html</anchorfile>
      <anchor>ac82a256e1bb70b445197274ca2d63cae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeFitRestraint.html</anchorfile>
      <anchor>ae496bc9e4fb714926d16658d58142971</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeFitRestraint.html</anchorfile>
      <anchor>a8f20993c57c3cf3dff21dde65cc7eda2</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::EnvelopePenetrationRestraint</name>
    <filename>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>EnvelopePenetrationRestraint</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</anchorfile>
      <anchor>a7e2e5b60bd73875222e250e7a0aefa87</anchor>
      <arglist>(Particles ps, DensityMap *em_map, Float threshold)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</anchorfile>
      <anchor>a01240c43b618d8005f216a0422a4308a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</anchorfile>
      <anchor>ac833173606c9684cd1161358c434d2af</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</anchorfile>
      <anchor>a12a08117481516d0bfd92fff55888e85</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopePenetrationRestraint.html</anchorfile>
      <anchor>acc23aa96e140d95af4950eb0761a5d35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::EnvelopeScore</name>
    <filename>classIMP_1_1em_1_1EnvelopeScore.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeScore.html</anchorfile>
      <anchor>a3cba2fa6a842d5c1ec65e9be540d897b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_penetrating</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeScore.html</anchorfile>
      <anchor>ad0a27e3ae17fd44ce8fe1797bc99f695</anchor>
      <arglist>(const IMP::algebra::Vector3Ds &amp;points, float penetration_thr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_penetrating</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeScore.html</anchorfile>
      <anchor>afa6a3d84c3a17c1c6f993f7d8bb2eb05</anchor>
      <arglist>(const IMP::algebra::Vector3Ds &amp;points, const IMP::algebra::Transformation3D &amp;trans, float penetration_thr) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeScore.html</anchorfile>
      <anchor>af5c37e830a5bcc80c49a528b2ad9b622</anchor>
      <arglist>(const IMP::algebra::Vector3Ds &amp;points) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>score</name>
      <anchorfile>classIMP_1_1em_1_1EnvelopeScore.html</anchorfile>
      <anchor>a5dab57fdb2e5667acac468f5d00ab04c</anchor>
      <arglist>(const IMP::algebra::Vector3Ds &amp;points, const IMP::algebra::Transformation3D &amp;trans) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::FitRestraint</name>
    <filename>classIMP_1_1em_1_1FitRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>FitRestraint</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>a586e135631bd2bf9fea7e22988e5d23e</anchor>
      <arglist>(ParticlesTemp ps, DensityMap *em_map, FloatPair norm_factors=FloatPair(0., 0.), FloatKey weight_key=atom::Mass::get_mass_key(), float scale=1, bool use_rigid_bodies=true, KernelType kt=GAUSSIAN)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>af504639963f1498e4a143a159c45b4ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SampledDensityMap *</type>
      <name>get_model_dens_map</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>a2f978d1d053deab1b5ea26317c33d6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>aa6eb5a26a4679a82ecf65d67802206b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>ad03f70749dc95d828346d5d425fbaacf</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraint.html</anchorfile>
      <anchor>a01566ef4448d8adc55a1ea68a056cc33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::FitRestraintBayesEM3D</name>
    <filename>classIMP_1_1em_1_1FitRestraintBayesEM3D.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>FitRestraintBayesEM3D</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraintBayesEM3D.html</anchorfile>
      <anchor>a3ff6005e532b6ffc891b6e5b83c2aab2</anchor>
      <arglist>(ParticlesTemp ps, DensityMap *em_map, FloatKey weight_key=atom::Mass::get_mass_key(), bool use_rigid_bodies=true, double sigma=.1, double window_size=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraintBayesEM3D.html</anchorfile>
      <anchor>aeb2b06977fb43dff4c3d6f74296b5044</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraintBayesEM3D.html</anchorfile>
      <anchor>ac499adbb5922a3110c8b6c315c67029c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1FitRestraintBayesEM3D.html</anchorfile>
      <anchor>a0a432349e3f7a0584be434539e22cccd</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::FittingSolutions</name>
    <filename>classIMP_1_1em_1_1FittingSolutions.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_solution</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>a29fe60f4c55c1b2c278382c0a6b91dd5</anchor>
      <arglist>(const algebra::Transformation3D &amp;t, Float score)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_solutions</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>a6ab5809405eef8dbd14c875eaf8d9646</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>ab6c71df6c046a3eb94deb3d0d698476b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_transformation</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>a46b28b36a52016e65285fba309ae3d5b</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>a352dad9206bc06891bf050b04e2c3985</anchor>
      <arglist>(const algebra::Transformation3D &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classIMP_1_1em_1_1FittingSolutions.html</anchorfile>
      <anchor>ae85afe24098fc6437c243ad5303cf037</anchor>
      <arglist>(bool reverse=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::HighDensityEmbedding</name>
    <filename>classIMP_1_1em_1_1HighDensityEmbedding.html</filename>
    <base>IMP::statistics::Embedding</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1HighDensityEmbedding.html</anchorfile>
      <anchor>abbb8f17a41db4fc80c9e8a2b0913a047</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1statistics_1_1Embedding.html</anchorfile>
      <anchor>a56ec84a1139acab4254532c67e0f9c22</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_get_weight</name>
      <anchorfile>classIMP_1_1statistics_1_1Embedding.html</anchorfile>
      <anchor>a420eb546d1caa257b38abf16f5066ded</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::ImageHeader</name>
    <filename>classIMP_1_1em_1_1ImageHeader.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>img_type</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a53f1edce6d17092063d577a0da017297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a721d00bcba3e507b0be9160dfb53e08c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_fAngle1</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>aa5746c42ecbb7be6b732e6dabd3ea21a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_fFlag</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a57661de400a73b276f61ea703a16ebcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_old_rot</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a1be65ae93187cea13ccca8a5912c16e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_reversed</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a10b87cb913ad37fd560e0b57b0b7c54f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_hard</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>ab41ce9c4c0d67ae55ffa718e8e86ecb9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a9ce259abfd553aca02410a6481546566</anchor>
      <arglist>(const String filename, bool skip_type_check=false, bool force_reversed=false, bool skip_extra_checkings=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>af0b6f449cf94a70254c915a5b45c3300</anchor>
      <arglist>(std::ifstream &amp;f, bool skip_type_check=false, bool force_reversed=false, bool skip_extra_checkings=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fAngle1</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>ae7488885841e11e666a91b182e67f41e</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_header</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a534c8ea7008a1312a875ab507b22cc10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_image_type</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a429f31b9257fbab338ded103f47f6e5f</anchor>
      <arglist>(img_type im)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_old_rot</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a4ba8142f35ee20436f2452c0eb080c37</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_title</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a98142ac6e63c8c536855be1ad500ee4e</anchor>
      <arglist>(String newName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show_projection_params</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a677cf8058f6acf7ff6a6c02fec61a698</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a0364cc8c31383346ee50d7e6417d46c7</anchor>
      <arglist>(const String &amp;filename, bool force_reversed=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em_1_1ImageHeader.html</anchorfile>
      <anchor>a5976ff1fe692a9f38c8b03d3e3f2f30d</anchor>
      <arglist>(std::ofstream &amp;f, bool force_reversed=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::KernelParameters</name>
    <filename>classIMP_1_1em_1_1KernelParameters.html</filename>
    <member kind="function">
      <type>float</type>
      <name>get_inv_rsigsq</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>aa939de0664dcec867f787de27c4a61dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_lim</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>af4b2991ec9539c05a047dd2bad99a834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_rkdist</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>ada8a0366e614e1c2a4d6bca07b127205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_rkdistsq</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>a2ebb5181ec0fbbf693e37aef12047494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_rnormfac</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>ab1566935d9fbf310b8a31c18042199df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_rsig</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>a6cefa7827e20c5a540410d94da2f3c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_rsigsq</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>abefa9da1ee7b73b0b1c02cd91e278ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_sq2pi3</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>af1d11efa835c7fa17be6c53139acf8d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_timessig</name>
      <anchorfile>classIMP_1_1em_1_1KernelParameters.html</anchorfile>
      <anchor>af59e09fd80781a7829419025731ca0a2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::MapDistanceTransform</name>
    <filename>classIMP_1_1em_1_1MapDistanceTransform.html</filename>
    <base>IMP::em::DensityMap</base>
    <member kind="function">
      <type></type>
      <name>MapDistanceTransform</name>
      <anchorfile>classIMP_1_1em_1_1MapDistanceTransform.html</anchorfile>
      <anchor>a3e85e6e9693a3b1047ff17f40e906d05</anchor>
      <arglist>(IMP::em::DensityMap *map, float density_threshold, float max_distance)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_distance_from_envelope</name>
      <anchorfile>classIMP_1_1em_1_1MapDistanceTransform.html</anchorfile>
      <anchor>aa973442a32e3160d90a2ab7aaa03d537</anchor>
      <arglist>(const IMP::algebra::Vector3D &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::MapReaderWriter</name>
    <filename>classIMP_1_1em_1_1MapReaderWriter.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1MapReaderWriter.html</anchorfile>
      <anchor>a90905acb2c19f8f024b4ed67564d89cc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::MRCReaderWriter</name>
    <filename>classIMP_1_1em_1_1MRCReaderWriter.html</filename>
    <base>IMP::em::MapReaderWriter</base>
    <member kind="function">
      <type></type>
      <name>MRCReaderWriter</name>
      <anchorfile>classIMP_1_1em_1_1MRCReaderWriter.html</anchorfile>
      <anchor>ac92a409c9f80098bc9f46ddc43994f2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MRCReaderWriter</name>
      <anchorfile>classIMP_1_1em_1_1MRCReaderWriter.html</anchorfile>
      <anchor>a2acd887ed21f1f2d1efe9f1eb22d9720</anchor>
      <arglist>(std::string fn)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1MRCReaderWriter.html</anchorfile>
      <anchor>ada267e699ad9ae6dbbccb7e0bf63a484</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em_1_1MRCReaderWriter.html</anchorfile>
      <anchor>a9f94d4a8ffbbd8c80192400c9e964b60</anchor>
      <arglist>(const char *fn_in, float **data, DensityHeader &amp;head) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em_1_1MRCReaderWriter.html</anchorfile>
      <anchor>a12bb52849c33f3a50ee2dc1357189c0c</anchor>
      <arglist>(const char *fn_out, const float *data, const DensityHeader &amp;head) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::PCAAligner</name>
    <filename>classIMP_1_1em_1_1PCAAligner.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>PCAAligner</name>
      <anchorfile>classIMP_1_1em_1_1PCAAligner.html</anchorfile>
      <anchor>a983b2f7a93a890f6103b18c7cf725e00</anchor>
      <arglist>(IMP::em::DensityMap *map, float density_threshold)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3Ds</type>
      <name>align</name>
      <anchorfile>classIMP_1_1em_1_1PCAAligner.html</anchorfile>
      <anchor>aa3bd3fa457b770636e59294486ac4cac</anchor>
      <arglist>(const algebra::Vector3Ds &amp;points) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1PCAAligner.html</anchorfile>
      <anchor>a58ff89ccfa55080b82ff341b1fc4b55b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::PCAFitRestraint</name>
    <filename>classIMP_1_1em_1_1PCAFitRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>PCAFitRestraint</name>
      <anchorfile>classIMP_1_1em_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a4df8c7271acc2675c17249a9755544c3</anchor>
      <arglist>(ParticlesTemp ps, DensityMap *em_map, float threshold, float max_pca_size_diff, float max_angle_diff, float max_centroid_diff, FloatKey weight_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em_1_1PCAFitRestraint.html</anchorfile>
      <anchor>ab7e05736a312d5a0d0bc0df511f8c7c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a75c76062a0212a3234ff5616620da081</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a3ecc96dca5cf3b925b20ea0eff620588</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1em_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a3bd65d0ca51adc57afe668dc5bb85ce3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::RadiusDependentDistanceMask</name>
    <filename>classIMP_1_1em_1_1RadiusDependentDistanceMask.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em::SampledDensityMap</name>
    <filename>classIMP_1_1em_1_1SampledDensityMap.html</filename>
    <base>IMP::em::DensityMap</base>
    <member kind="function">
      <type></type>
      <name>SampledDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a0180581d1aa5b7fb6cbd4ec778b89efc</anchor>
      <arglist>(KernelType kt=GAUSSIAN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampledDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a99c7f42f73230ec27c4ab0f664b3dc95</anchor>
      <arglist>(const DensityHeader &amp;header, KernelType kt=GAUSSIAN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampledDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>accd25f0c50af28da776aa62c676491e4</anchor>
      <arglist>(const ParticlesTemp &amp;ps, double resolution, double voxel_size, IMP::FloatKey mass_key=IMP::atom::Mass::get_mass_key(), int sig_cutoff=3, KernelType kt=GAUSSIAN)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_minimum_resampled_value</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a0a6e64f6e34d406f34d74b8107de3118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a241d32f3694cbea932ff50c849f6c017</anchor>
      <arglist>(const ParticlesTemp &amp;ps, int x_margin, int y_margin, int z_margin, algebra::Vector3D shift=algebra::Vector3D(0., 0., 0.), FloatKey mass_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resample</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a18b2fa4917281cb3446f3c28d103b17f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>aec6c2d7a303fe07513772dbde2ab8756</anchor>
      <arglist>(const ParticlesTemp &amp;ps, IMP::FloatKey mass_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_resolution</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a5cbac596c238ed12df3cf82f284fbdf7</anchor>
      <arglist>(Float res)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::algebra::BoundingBoxD&lt; 3 &gt;</type>
      <name>calculate_particles_bounding_box</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a0aeeeba26e971ba0467c70a3ccdc21dc</anchor>
      <arglist>(const Particles &amp;ps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>determine_grid_size</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>a742060d8dc8879f1ab4451e4df68cd56</anchor>
      <arglist>(double resolution, double voxel_size, int sig_cutoff)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KernelParameters</type>
      <name>kernel_params_</name>
      <anchorfile>classIMP_1_1em_1_1SampledDensityMap.html</anchorfile>
      <anchor>ad5232d7d06528df054c50b68ea76ef78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::em::SpiderHeader</name>
    <filename>structIMP_1_1em_1_1SpiderHeader.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>Astart</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aa65e0e4e8dc0e445d5dc685d4e44f479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>empty</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a1b69bf0668c9e54fedd14d9791e6ae18</anchor>
      <arglist>[576]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fAngle1</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a85fcd9304c7491bf044dcab22d6fd5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fAv</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a875b20f16cf8a44a9eeb5f713999d5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fFlag</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a8cf63a5e71f33f7feb8798858a80b299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fFmax</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a447f447156ce450f5cfb5bad784bb994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fFmin</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>af36873cd7b1add638d0714428fe0a31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fIangle</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>adcbf89c89216812b3bf0513b37a34724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fIform</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>ab86ab07908ce42ef10047c5c9d2a9b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fIhist</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a867c4876ccd67dea81d0f726d0f70da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fImami</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a3ee8918ebf353dbb4e9c49ac7b08e187</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fLabbyt</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aae5791184ab0fb8edeaee7874dcfd559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fLabrec</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a738c2a32415a9fc651425959e70d0380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fLenbyt</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>ac11ffbd9a376f911955f9b099711851e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>Flip</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>acb4e1db99310de293216888c6272a1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fNcol</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a3b05408da77723c5b651f48fcdc2f70a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fNlabel</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a61adbf86648aea7f4e2c26a53315ac0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>fNothing</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aef126ff140ad85c85391aa56270cc2d9</anchor>
      <arglist>[24]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fNrec</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aaba2330a411b387f87f9dfbea052c312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fNrow</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a2ca8f50928edc4b83c62879de626452a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fNslice</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a6a44efe4f26e0e5c407acc81840a66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fPhi</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aaa266e45a7644ebca57152b821a2e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fPsi</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>ad791545f3d22cffe1019389d2ddbe126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fr1</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a28f617e100c497c1eab42606ebeebc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fScale</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>ad82e062a5761137c7bdc1d6ee07c692a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fSig</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a19e85c4357d534adeb2d0f27415dcd07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fTheta</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a4a0556f96c17d918fa6b7e133b7d6126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fXoff</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>af0902816af169033cf19f8533b1970cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fYoff</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a426902b67d2c933c38a9b5e947809903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>fZoff</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a481911cadb21b839d388c5dc74f85a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>RTflag</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a9a6b6004dfb62d99e4e7488d3e04f877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>szIDat</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a11e75770b57ff9b9cf15e017d2e702f8</anchor>
      <arglist>[12]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>szITim</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>af171ef4e76f4baf5e3a11ca14703c7a6</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>szITit</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aba751ee802487f3b4fee156a4b0a1731</anchor>
      <arglist>[160]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>Tstart</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>aeaf3610892fc88761fd9facc3dc6dbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>Weight</name>
      <anchorfile>structIMP_1_1em_1_1SpiderHeader.html</anchorfile>
      <anchor>a0f6608370bf8b9de18e330c9889915b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::SpiderMapReaderWriter</name>
    <filename>classIMP_1_1em_1_1SpiderMapReaderWriter.html</filename>
    <base>IMP::em::MapReaderWriter</base>
    <member kind="function">
      <type></type>
      <name>SpiderMapReaderWriter</name>
      <anchorfile>classIMP_1_1em_1_1SpiderMapReaderWriter.html</anchorfile>
      <anchor>a4ab73c84a83bb313d8ea54b56f315656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiderMapReaderWriter</name>
      <anchorfile>classIMP_1_1em_1_1SpiderMapReaderWriter.html</anchorfile>
      <anchor>a7e20644389966deeb8ffa2a66d7555ce</anchor>
      <arglist>(String filename, bool skip_type_check, bool force_reversed, bool skip_extra_checkings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1SpiderMapReaderWriter.html</anchorfile>
      <anchor>a28f93cad2af732a12ee72659d64a0b54</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em_1_1SpiderMapReaderWriter.html</anchorfile>
      <anchor>a7ec9d19388c7413ffd725c144971061a</anchor>
      <arglist>(const char *filename, float **data, DensityHeader &amp;header) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em_1_1SpiderMapReaderWriter.html</anchorfile>
      <anchor>ad9e323e4637858bdc84d7c19520d74e8</anchor>
      <arglist>(const char *filename, const float *data, const DensityHeader &amp;header) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::SurfaceShellDensityMap</name>
    <filename>classIMP_1_1em_1_1SurfaceShellDensityMap.html</filename>
    <base>IMP::em::SampledDensityMap</base>
    <member kind="function">
      <type></type>
      <name>SurfaceShellDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>a9e30a002d6fcdd84741411bbb70783ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceShellDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>a906367559e2670491fe3f54dca3ced4d</anchor>
      <arglist>(const DensityHeader &amp;header)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceShellDensityMap</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>adb5917f7ee47e2c1d8c78abed043d877</anchor>
      <arglist>(const ParticlesTemp &amp;ps, float voxel_size, IMP::FloatKey mass_key=IMP::atom::Mass::get_mass_key(), int num_shells=5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>binarize</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>aac5bb90ac67cb60607ffa1c6dc62d26a</anchor>
      <arglist>(float scene_val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_background_neighbor</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>a3d10041d5bf86bf57b517b6d9c447273</anchor>
      <arglist>(long voxel_ind) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resample</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>a4bd2703fd6ae8b0cc281d464a86a68ce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_surface_shell</name>
      <anchorfile>classIMP_1_1em_1_1SurfaceShellDensityMap.html</anchorfile>
      <anchor>a44c3907d5644aa785a547150756f5253</anchor>
      <arglist>(std::vector&lt; long &gt; *shell)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::Voxel</name>
    <filename>classIMP_1_1em_1_1Voxel.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Float</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1em_1_1Voxel.html</anchorfile>
      <anchor>ab8c6f6e641e9136fae5071fe5bb923af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_density</name>
      <anchorfile>classIMP_1_1em_1_1Voxel.html</anchorfile>
      <anchor>a945c393afc10223ee9ae1cd2bb52e7a7</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Voxel</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1em_1_1Voxel.html</anchorfile>
      <anchor>af56f556902db8b0ab8731eebce3c12a3</anchor>
      <arglist>(IMP::ParticleAdaptor pa, algebra::Vector3D position, Float radius, Float density)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Voxel</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1em_1_1Voxel.html</anchorfile>
      <anchor>a3131b8aa6d6fa12e1226054df4a291df</anchor>
      <arglist>(Model *m, ParticleIndex pi, algebra::Vector3D position, Float radius, Float density)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em::XplorReaderWriter</name>
    <filename>classIMP_1_1em_1_1XplorReaderWriter.html</filename>
    <base>IMP::em::MapReaderWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em_1_1XplorReaderWriter.html</anchorfile>
      <anchor>aa3d8216172fd1ef885d60ab8f451ca03</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::em2d</name>
    <filename>namespaceIMP_1_1em2d.html</filename>
    <class kind="class">IMP::em2d::AverageDistanceLinkage</class>
    <class kind="class">IMP::em2d::ChiSquaredScore</class>
    <class kind="class">IMP::em2d::ClusterSet</class>
    <class kind="class">IMP::em2d::CollisionCrossSection</class>
    <class kind="class">IMP::em2d::CompleteLinkage</class>
    <class kind="class">IMP::em2d::DistanceFilter</class>
    <class kind="class">IMP::em2d::DistanceFilterTable</class>
    <class kind="class">IMP::em2d::DummyRestraint</class>
    <class kind="class">IMP::em2d::Em2DRestraint</class>
    <class kind="class">IMP::em2d::Em2DRestraintParameters</class>
    <class kind="class">IMP::em2d::EM2DScore</class>
    <class kind="class">IMP::em2d::GridStates</class>
    <class kind="class">IMP::em2d::HasHigherCCC</class>
    <class kind="class">IMP::em2d::HasLowerScore</class>
    <class kind="class">IMP::em2d::Image</class>
    <class kind="class">IMP::em2d::ImageReaderWriter</class>
    <class kind="class">IMP::em2d::IntsOrder</class>
    <class kind="class">IMP::em2d::JPGImageReaderWriter</class>
    <class kind="class">IMP::em2d::LessPairBySecond</class>
    <class kind="class">IMP::em2d::MasksManager</class>
    <class kind="class">IMP::em2d::MatchTemplateResult</class>
    <class kind="class">IMP::em2d::MeanAbsoluteDifference</class>
    <class kind="class">IMP::em2d::ParticlesDummyRestraint</class>
    <class kind="class">IMP::em2d::PCAFitRestraint</class>
    <class kind="class">IMP::em2d::PolarResamplingParameters</class>
    <class kind="class">IMP::em2d::ProjectingOptions</class>
    <class kind="class">IMP::em2d::ProjectingParameters</class>
    <class kind="class">IMP::em2d::ProjectionFinder</class>
    <class kind="class">IMP::em2d::ProjectionMask</class>
    <class kind="class">IMP::em2d::ProjectionParameters</class>
    <class kind="class">IMP::em2d::ProjectionParametersScoreState</class>
    <class kind="class">IMP::em2d::ProjectionStates</class>
    <class kind="class">IMP::em2d::RegistrationResult</class>
    <class kind="class">IMP::em2d::RelativePositionMover</class>
    <class kind="class">IMP::em2d::RigidBodiesImageFitRestraint</class>
    <class kind="class">IMP::em2d::ScoreFunction</class>
    <class kind="class">IMP::em2d::SegmentationParameters</class>
    <class kind="class">IMP::em2d::SingleLinkage</class>
    <class kind="class">IMP::em2d::SpiderImageReaderWriter</class>
    <class kind="class">IMP::em2d::TIFFImageReaderWriter</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; AverageDistanceLinkage &gt;</type>
      <name>AverageDistanceLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac5710f6f75450826bf93e4cd60dc02d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ChiSquaredScore &gt; &gt;</type>
      <name>ChiSquaredScores</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2a1a4c1109d192ac736d26cea9f59038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ChiSquaredScore &gt; &gt;</type>
      <name>ChiSquaredScoresTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4bc70afefdcc96415ced5dd5bc52f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ClusterSet &gt;</type>
      <name>ClusterSets</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2178905ea082e5b278f6b60300aa7981</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CollisionCrossSection &gt; &gt;</type>
      <name>CollisionCrossSections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae6d211c9475a6dcb3056d88e5305005b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CollisionCrossSection &gt; &gt;</type>
      <name>CollisionCrossSectionsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aef65a4af40d204bd3397e55ed13fb417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; CompleteLinkage &gt;</type>
      <name>CompleteLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a557202cb9c59f4f51371dc46b645decf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistanceFilter &gt; &gt;</type>
      <name>DistanceFilters</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4d8f7efd491cc0c3deb9f1d10c6f1956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistanceFilter &gt; &gt;</type>
      <name>DistanceFiltersTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af02bbb63b2f72b3bea73878a5210cbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DistanceFilterTable &gt; &gt;</type>
      <name>DistanceFilterTables</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a33c0e7350ac1d9e8284429624ef2d8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DistanceFilterTable &gt; &gt;</type>
      <name>DistanceFilterTablesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3dbb30a8a45b2b1d2c4dfbfdcf8ebaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DummyRestraint &gt; &gt;</type>
      <name>DummyRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1e6e4fe7817944f1e56c85cbc09ef375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DummyRestraint &gt; &gt;</type>
      <name>DummyRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7e935d91d4527f442e7ca9c0783fb0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; Em2DRestraintParameters &gt;</type>
      <name>Em2DRestraintParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6065a628ec32b49d820dddd6ec5aeed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Em2DRestraint &gt; &gt;</type>
      <name>Em2DRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af38a60661acb131fd60ddf1f30ba9ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Em2DRestraint &gt; &gt;</type>
      <name>Em2DRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8a13a699102b9ef7af47a0fdd34d9f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; EM2DScore &gt; &gt;</type>
      <name>EM2DScores</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a46036a077f60024e34b05cc21dbd95a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; EM2DScore &gt; &gt;</type>
      <name>EM2DScoresTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6c52a2c412526f46439ddd610be4f87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GridStates &gt; &gt;</type>
      <name>GridStatesList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a178e7bf66423537894510a17bd7d5b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GridStates &gt; &gt;</type>
      <name>GridStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae53a353f79b8a9ebcb099b7b2da166fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Image &gt; &gt;</type>
      <name>Images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3b1659043d063900773f532dc6efe2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Image &gt; &gt;</type>
      <name>ImagesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a17698562eb392a282c8a38715ca28cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; MasksManager &gt;</type>
      <name>MasksManagers</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a565903e8d94899a9b2328e79635c7c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; MatchTemplateResult &gt;</type>
      <name>MatchTemplateResults</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aaf555178d08544703ff120f259a7a7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; MeanAbsoluteDifference &gt; &gt;</type>
      <name>MeanAbsoluteDifferences</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>adb24ad0996b8d112e498349146f2b678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; MeanAbsoluteDifference &gt; &gt;</type>
      <name>MeanAbsoluteDifferencesTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8605961e994eb33982464e052adc1312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticlesDummyRestraint &gt; &gt;</type>
      <name>ParticlesDummyRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8320749d2f9d54b726adf4f768fffe0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticlesDummyRestraint &gt; &gt;</type>
      <name>ParticlesDummyRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>abc2a19df0e14dd541c52b2fc7d81fda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; PolarResamplingParameters &gt;</type>
      <name>PolarResamplingParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7bf683ebcdacfcddea5349092f6c201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectingOptions &gt;</type>
      <name>ProjectingOptionsList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7668a585f311a56e5c82415c1df69d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectingParameters &gt;</type>
      <name>ProjectingParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a99f8e1680ad07e0fc4ce6df37d02ec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProjectionFinder &gt; &gt;</type>
      <name>ProjectionFinders</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6f263df26134833e66476390f2d8d8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProjectionFinder &gt; &gt;</type>
      <name>ProjectionFindersTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad739fa29c0cc7af9d113cb9c2e229dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProjectionMask &gt;</type>
      <name>ProjectionMasks</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>afc0ff98aba4fdd78cd71249092f20219</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProjectionStates &gt; &gt;</type>
      <name>ProjectionStatesList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac13b2ab3f26942b41da53232df9c571f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProjectionStates &gt; &gt;</type>
      <name>ProjectionStatesListTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af41c8627bfea7b62094bc8898fc85afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; RegistrationResult &gt;</type>
      <name>RegistrationResults</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4fafde4fee1375f68650f1c51c216e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; algebra::Transformation2D, double &gt;</type>
      <name>ResultAlign2D</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4c37119ae034ad39a0c88a08541e69b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RigidBodiesImageFitRestraint &gt; &gt;</type>
      <name>RigidBodiesImageFitRestraints</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3aa7b1492b713917576b4b64f4977e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RigidBodiesImageFitRestraint &gt; &gt;</type>
      <name>RigidBodiesImageFitRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a500c614f168f2d41b6f9d221156052d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ScoreFunction &gt; &gt;</type>
      <name>ScoreFunctions</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ab231add71dc3e8cc93e435cf01865a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ScoreFunction &gt; &gt;</type>
      <name>ScoreFunctionsTemp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a06ae4c93b481de5c2c4654091b4cf842</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SegmentationParameters &gt;</type>
      <name>SegmentationParametersList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa1373104909ba866f74a5ccaf3a03e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SingleLinkage &gt;</type>
      <name>SingleLinkages</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a54a090bdf8d4364c0af936732910f5f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; algebra::Transformation3Ds &gt;</type>
      <name>Transformation3DsList</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a21f82bc3a3443cae7bedc305742bd61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_noise</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a643bced0cc35024d64d1eddbe03e7145</anchor>
      <arglist>(cv::Mat &amp;v, double op1, double op2, const String &amp;mode=&quot;uniform&quot;, double df=3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_circular_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a913f22c4be47b182dfa1dfb33a6479cc</anchor>
      <arglist>(const cv::Mat &amp;mat, cv::Mat &amp;result, int radius, double value=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diffusion_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a35871baa292b8eba834953d29b964444</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, double beta, double pixelsize, unsigned int time_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_diffusion_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6fbd3f388210a4942c4ac54c95b88fd8</anchor>
      <arglist>(Image *input, Image *filtered, double beta, double pixelsize, int time_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7ea5c49d021043c2778ba7d492350939</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cvIntMat &amp;mask, double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_mean_outside_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a90402327da81d37eb865301ff37fbb19</anchor>
      <arglist>(Image *img, double radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_threshold</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1bcbe7aef167fec46e11f467dac93b88</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double threshold=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_variance_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aeaac875427115b4936fc0fa82847e7df</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;filtered, int kernelsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_variance_filter</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a258020f16ff0205998ee972aa2656499</anchor>
      <arglist>(Image *input, Image *filtered, int kernelsize)</arglist>
    </member>
    <member kind="function">
      <type>cvIntMat</type>
      <name>create_circular_mask</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a689dc2adae481a59415efacf4248885e</anchor>
      <arglist>(int rows, int cols, int radius)</arglist>
    </member>
    <member kind="function">
      <type>Images</type>
      <name>create_evenly_distributed_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ac7fc9ca9b6ac50bc5de57a157882766f</anchor>
      <arglist>(const ParticlesTemp &amp;ps, unsigned int n, const ProjectingOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crop</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af9e50eaa31332e8e42eb3ee0d2b8872e</anchor>
      <arglist>(Image *img, const IntPair &amp;center, int size)</arglist>
    </member>
    <member kind="function">
      <type>cv::Mat</type>
      <name>crop</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>add20c139c513a8574b98613b0e066b1f</anchor>
      <arglist>(const cv::Mat &amp;m, const IntPair &amp;center, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_combined_fill_holes_and_threshold</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8a8f56ed52d45a9c3ff177d250d60773</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double n_stddevs, double threshold=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_dilate_and_shrink_warp</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a6fbd079bf847c552512c4f5a565d7924</anchor>
      <arglist>(cv::Mat &amp;m, const cv::Mat &amp;grayscale, cv::Mat &amp;kernel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_extend_borders</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a2a8f8c860463a5845e9a9330fc4f4838</anchor>
      <arglist>(cv::Mat &amp;orig, cv::Mat &amp;dst, unsigned int pix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_fill_holes</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad9ee7a864812d20106c6c10a3db39e8f</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, double h)</arglist>
    </member>
    <member kind="function">
      <type>ClusterSet</type>
      <name>do_hierarchical_agglomerative_clustering</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a43f1323541959d81f9baccbf61818448</anchor>
      <arglist>(const FloatsList &amp;distances)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>do_labeling</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7fe9e6326cab26d23e66f1c6ee0c2053</anchor>
      <arglist>(const cvIntMat &amp;m, cvIntMat &amp;mat_to_label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_matrix_to_image_flip</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae6185037f9174693f64c885d39c8d19e</anchor>
      <arglist>(cv::Mat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_morphologic_contrast_enhancement</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa03b85b529a06d5f41855434a37620e6</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cv::Mat &amp;kernel, unsigned int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_morphologic_reconstruction</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a14c1f942df62991be91a3c02a81448c4</anchor>
      <arglist>(const cv::Mat &amp;mask, cv::Mat &amp;marker, int neighbors_mode=4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_normalize</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8ca0f5601724287c85b00fb71ddecc44</anchor>
      <arglist>(Image *im, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_normalize</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a006185fb87d9ea8b0cded91418a529ed</anchor>
      <arglist>(cv::Mat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_place</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a555960c8d2eca9a8fcb74555539827ea</anchor>
      <arglist>(cv::Mat &amp;mask, cv::Mat &amp;m, const algebra::Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_project_particles</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ab15ba9866050315bb0248dd27f0ef0bb</anchor>
      <arglist>(const ParticlesTemp &amp;ps, cv::Mat &amp;m2, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation, const ProjectingOptions &amp;options, MasksManagerPtr masks)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector2Ds</type>
      <name>do_project_vectors</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a33ff594b9223f368d44b25a7da4c349e</anchor>
      <arglist>(const algebra::Vector3Ds &amp;ps, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector2Ds</type>
      <name>do_project_vectors</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3cc89c1d22ffa4f91512f49072542be6</anchor>
      <arglist>(const algebra::Vector3Ds &amp;ps, const algebra::Rotation3D &amp;R, const algebra::Vector3D &amp;translation, const algebra::Vector3D &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_remove_small_objects</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3e269cb1521c292aa1ad0bd3494b3ca4</anchor>
      <arglist>(cvIntMat &amp;m, double percentage, int background=0, int foreground=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_resample_polar</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aad3c7e6514aadaa236e5e354ceff8856</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;resampled, const PolarResamplingParameters &amp;polar_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_resample_polar</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a1d4044443138ae1ad3c60ba33afd6e5e</anchor>
      <arglist>(Image *im1, Image *im2, const PolarResamplingParameters &amp;polar_params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_segmentation</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a90292cd68858d8e90c4e99c2826739bb</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const SegmentationParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_subtract_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a5fa6302882e4cc2ddc39262f434058e6</anchor>
      <arglist>(Image *first, Image *second, Image *result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a715222bf68d4c8f207daa87b917485d9</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a185b28584381f8d779db94c0f91f9db0</anchor>
      <arglist>(Image *im1, Image *im2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_autocorrelation2d_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ade457bcb204e0cdbc3f37c62735a95c3</anchor>
      <arglist>(const cv::Mat &amp;M, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>MatchTemplateResults</type>
      <name>get_best_template_matches</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a08c0ef4b9d87a8838e3c2ebd0cfb3b96</anchor>
      <arglist>(const cv::Mat &amp;m, const cv::Mat &amp;templ, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_complete_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af9561a34940e234bd416361bbd60a4f3</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>em2d::ResultAlign2D</type>
      <name>get_complete_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae25b0c486162ad343e3726233a5bb67b</anchor>
      <arglist>(const cv::Mat &amp;input, const cv::Mat &amp;INPUT, const cv::Mat &amp;POLAR1, cv::Mat &amp;m_to_align, const cv::Mat &amp;POLAR2, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_complete_alignment_with_centers_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a954d8f810fcee18ed744ecfa15e88ae7</anchor>
      <arglist>(const algebra::Vector2D &amp;center1, const algebra::Vector2D &amp;center2, const cv::Mat &amp;AUTOC_POLAR1, const cv::Mat &amp;AUTOC_POLAR2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a95559755452453024f32344cee0ec43f</anchor>
      <arglist>(const cv::Mat &amp;A, const cv::Mat &amp;B, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a47326ad3deacabc6aa0fc68818c453ea</anchor>
      <arglist>(Image *im1, Image *im2, Image *corr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_correlation2d_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8c8e930b89742e1e8793afaee0c828fd</anchor>
      <arglist>(const cv::Mat &amp;M1, const cv::Mat &amp;M2, cv::Mat &amp;corr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a36ce0f68b0bb199a5c0e0e32ded802a6</anchor>
      <arglist>(const cv::Mat &amp;m1, const cv::Mat &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af22f5cc59992f1a392b914e6b57a0ecc</anchor>
      <arglist>(Image *im1, Image *im2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_diffusion_filtering_partial_derivative</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a88b1ad65226409f6cb5dab864141651b</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;der, double dx, double dy, double ang)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_domes</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a7d998f2562e8bd4d005cb8a8b892b8cf</anchor>
      <arglist>(cv::Mat &amp;m, cv::Mat &amp;result, double h)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_enclosing_image_size</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae2eeaa84aab84eb5254470522964d4de</anchor>
      <arglist>(const ParticlesTemp &amp;ps, double pixel_size, unsigned int slack)</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_evenly_distributed_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a695b83c14bfca657b7c3daff86546790</anchor>
      <arglist>(unsigned int n_projections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_fft_using_optimal_size</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a62859c43c4b08d07c865cde8bf10783d</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_global_score</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a44fe26f303260f075ccda58b350fe8a0</anchor>
      <arglist>(const RegistrationResults &amp;RRs)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_histogram</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3f03d61419c7b1c2f518f32f8c0bfa9f</anchor>
      <arglist>(const cv::Mat &amp;m, int bins)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_histogram</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4f87a85f1ee35aa0a6dc6f0c859df0b0</anchor>
      <arglist>(Image *img, int bins)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad970af0573f2bacda47fba538d3267b2</anchor>
      <arglist>(const cv::Mat &amp;mat, const cvIntMat &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_morphologic_gradient</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acd68116f35c5648649d8f26d68334b9e</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;result, const cv::Mat &amp;kernel)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_overlap_percentage</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af0d042657181a579a65c4bb209405a7c</anchor>
      <arglist>(cv::Mat &amp;m1, cv::Mat &amp;m2, const IntPair &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_projection</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a060e62f5acd6d4c6dc09f1f2c7b1528b</anchor>
      <arglist>(em2d::Image *img, const ParticlesTemp &amp;ps, const RegistrationResult &amp;reg, const ProjectingOptions &amp;options, MasksManagerPtr masks=MasksManagerPtr(), String name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>em2d::Images</type>
      <name>get_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a65e066ed72e099282a5714fbd2333989</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const algebra::SphericalVector3Ds &amp;vs, int rows, int cols, const ProjectingOptions &amp;options, Strings names=Strings())</arglist>
    </member>
    <member kind="function">
      <type>em2d::Images</type>
      <name>get_projections</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aa167999977d5c4f4e0486534693a86da</anchor>
      <arglist>(const ParticlesTemp &amp;ps, const RegistrationResults &amp;registration_values, int rows, int cols, const ProjectingOptions &amp;options, Strings names=Strings())</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_random_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>afc1562d753ec9cce98213f96827df038</anchor>
      <arglist>(unsigned int n, double maximum_shift=5.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rotation_error</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a57a725bb5e94995d20b75abe96d9cfbd</anchor>
      <arglist>(const RegistrationResult &amp;rr1, const RegistrationResult &amp;rr2)</arglist>
    </member>
    <member kind="function">
      <type>em2d::ResultAlign2D</type>
      <name>get_rotational_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acd41cbc70027d6b1e2323a0fbc8c8f6f</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_rotational_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a474214ff2650f42c9343cad13ada1455</anchor>
      <arglist>(const cv::Mat &amp;POLAR1, const cv::Mat &amp;POLAR2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_shift_error</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad612906ea96b2c6f162c97b654309c7f</anchor>
      <arglist>(const RegistrationResult &amp;rr1, const RegistrationResult &amp;rr2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_spectrum</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a018f7a244a4463cd0da0111aeaedf796</anchor>
      <arglist>(const cv::Mat &amp;m, cv::Mat &amp;real, cv::Mat &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_transformed</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a0701b9da59d031b6bb82fbb493d824b1</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;transformed, const algebra::Transformation2D &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_translational_alignment</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>acc2a6e0d87808c808547926da2570f67</anchor>
      <arglist>(const cv::Mat &amp;input, cv::Mat &amp;m_to_align, bool apply=false)</arglist>
    </member>
    <member kind="function">
      <type>ResultAlign2D</type>
      <name>get_translational_alignment_no_preprocessing</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a8fd176906f67285d66aebe5ce9dfd02c</anchor>
      <arglist>(const cv::Mat &amp;M1, const cv::Mat &amp;M2)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_unique_index</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad5dd142cfbb44bbea471ab17f9d8ff77</anchor>
      <arglist>(const algebra::Rotation3D &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>Images</type>
      <name>read_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a9b93ce77266955bd99874dbb269fc87c</anchor>
      <arglist>(const Strings &amp;names, const ImageReaderWriter *rw)</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>read_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a50e128690cfb1d3ed92449a66209bfce</anchor>
      <arglist>(const String &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_images</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a3c4762ec4e3272cd645d012e24b464b3</anchor>
      <arglist>(Images images, const Strings &amp;names, const ImageReaderWriter *rw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a4d756420dcf4bb39e60b49ecf19723f4</anchor>
      <arglist>(const cv::Mat &amp;m, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>af5f65e8bea81bf71f7ffb2dae041e897</anchor>
      <arglist>(const cv::Mat_&lt; T &gt; &amp;m, std::ostream &amp;out=std::cout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_matrix</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ad5073e1f6445687bd53f91f3bd8365f0</anchor>
      <arglist>(cv::Mat &amp;m, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_registration_results</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>a84f20afc2fd870b6a3cda621af52d100</anchor>
      <arglist>(String filename, const RegistrationResults &amp;results)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_vectors_as_pdb</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>abfff1fcbd0e36d96ec44c0e5154945aa</anchor>
      <arglist>(const algebra::Vector2Ds vs, const String filename)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ALIGN2D_NO_PREPROCESSING</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aca5349ccf3fac576ea220856d97e0306</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>ae533c61e16c8c122dffd30e5bda06903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aaefaeaf42c042ff104c61709833cb355</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1em2d.html</anchorfile>
      <anchor>aabcf212fb9c1128842db5f56ae299605</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1em2d" title="OpenCV">OpenCV</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::AverageDistanceLinkage</name>
    <filename>classIMP_1_1em2d_1_1AverageDistanceLinkage.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1em2d_1_1AverageDistanceLinkage.html</anchorfile>
      <anchor>a9e4a72284ae366295907143152ca8cb1</anchor>
      <arglist>(unsigned int id1, unsigned int id2, const ClusterSet &amp;cluster_set, const FloatsList &amp;distances)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ChiSquaredScore</name>
    <filename>classIMP_1_1em2d_1_1ChiSquaredScore.html</filename>
    <base>IMP::em2d::ScoreFunction</base>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1em2d_1_1ScoreFunction.html</anchorfile>
      <anchor>a7111cef1cdadc7b3245e8621b7b46fb0</anchor>
      <arglist>(Image *image, Image *projection) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ScoreFunction.html</anchorfile>
      <anchor>aed5d5636adbe8597873ed8e782c5941d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ClusterSet</name>
    <filename>classIMP_1_1em2d_1_1ClusterSet.html</filename>
    <member kind="function">
      <type></type>
      <name>ClusterSet</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a74b80800aee9aa8c6ed2cf4539c0bf50</anchor>
      <arglist>(unsigned int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_join_clusters</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a9ec3e7d0f94307ad743ff22ade8b1412</anchor>
      <arglist>(unsigned int cluster_id1, unsigned int cluster_id2, double distance_between_clusters)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_cluster_elements</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a48cee9e6c316e7a8f5ae4fbff1593b26</anchor>
      <arglist>(unsigned int id) const </arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_cluster_formed_at_step</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a61c35134ef230ec08db8121ecbaed5b6</anchor>
      <arglist>(unsigned int step) const </arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_clusters_below_cutoff</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a2ed116502df6f9a7b611aca45400fefb</anchor>
      <arglist>(double cutoff) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_at_step</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>a6a8668a009373a03a3f39b1df7460c04</anchor>
      <arglist>(unsigned int step) const </arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_linkage_matrix</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>af14ac7a111d39b25d7d7859fc6e797fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_linkage_matrix_in_matlab_format</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>acc6b7f9f350876f7137b41bb334adf5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_steps</name>
      <anchorfile>classIMP_1_1em2d_1_1ClusterSet.html</anchorfile>
      <anchor>ad6b1bfe03046022bedcbbb3ea0828ede</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::CollisionCrossSection</name>
    <filename>classIMP_1_1em2d_1_1CollisionCrossSection.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>CollisionCrossSection</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>a391339711268e011e02b05ee00b2cce7</anchor>
      <arglist>(unsigned int n_projections, double resolution, double pixel_size, double projection_image_size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_ccs</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>a0c7c683c7c6fe1380060b843fa1b7da0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>a76c4e020f522fae45a51719605baa3ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_model_particles</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>a641e2398d4dbaeed9518116f42e6bcf8</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>afca9d0c9f30d3cc5af9340f45b4721d0</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>get_projected_area</name>
      <anchorfile>classIMP_1_1em2d_1_1CollisionCrossSection.html</anchorfile>
      <anchor>a183d00a3e1da2aeac9093ccdcc6c9091</anchor>
      <arglist>(const cv::Mat &amp;m) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::CompleteLinkage</name>
    <filename>classIMP_1_1em2d_1_1CompleteLinkage.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1em2d_1_1CompleteLinkage.html</anchorfile>
      <anchor>a63235ad1a6acdcb8e7c0b76e42279fd9</anchor>
      <arglist>(unsigned int id1, unsigned int id2, const ClusterSet &amp;cluster_set, const FloatsList &amp;distances)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::DistanceFilter</name>
    <filename>classIMP_1_1em2d_1_1DistanceFilter.html</filename>
    <base>IMP::domino::SubsetFilter</base>
    <member kind="function">
      <type></type>
      <name>DistanceFilter</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilter.html</anchorfile>
      <anchor>a0fdd72792f673c8b7d590b5abe80b3fa</anchor>
      <arglist>(const domino::Subset &amp;subset_to_act_on, const domino::Subset &amp;subset_to_restrain, domino::ParticleStatesTable *ps_table, double max_distance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_is_ok</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilter.html</anchorfile>
      <anchor>ae4a67373ecf04427965ec131ccd6c52d</anchor>
      <arglist>(const IMP::domino::Assignment &amp;assignment) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilter.html</anchorfile>
      <anchor>a3da423b3b7e3cc865fc838aa435e570d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::DistanceFilterTable</name>
    <filename>classIMP_1_1em2d_1_1DistanceFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilterTable.html</anchorfile>
      <anchor>affb26cd6abcdede141128ba3a18ef346</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilterTable.html</anchorfile>
      <anchor>a486ca77a43af6e29b51637a633e09c9d</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1DistanceFilterTable.html</anchorfile>
      <anchor>a693cad94d9eb94bb0f779f2aecb722e9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::DummyRestraint</name>
    <filename>classIMP_1_1em2d_1_1DummyRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DummyRestraint</name>
      <anchorfile>classIMP_1_1em2d_1_1DummyRestraint.html</anchorfile>
      <anchor>a8d10268f28c37978c4824eb8d59758bd</anchor>
      <arglist>(IMP::Particle *p, IMP::Particle *q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em2d_1_1DummyRestraint.html</anchorfile>
      <anchor>a66ece982be6992be0bc105d8f4045f33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1DummyRestraint.html</anchorfile>
      <anchor>a3f1bb1fcd809c828a45573f822a42d1a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1DummyRestraint.html</anchorfile>
      <anchor>aed5b347f5ee1a5b704c1cffdd38968dd</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1DummyRestraint.html</anchorfile>
      <anchor>a9f378ab4f47929cf0992802c65a7efa3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::Em2DRestraint</name>
    <filename>classIMP_1_1em2d_1_1Em2DRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>Em2DRestraint</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a3c6746ba4dd8dac106309cbc4967ed03</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>aac06bb9e255c02c5241ef7dc1d45a241</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_registration_results</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>acaf0010dcfe1d022f1ed720f3d991dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>aa9e70b3f477b256d136db1de97d61801</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coarse_registration_mode</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a07c9060b33bc57a81e271fa4d16b64c5</anchor>
      <arglist>(bool opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fast_mode</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a00e14497ec939f4f29b2ca0e52a613f1</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_images</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a9a2984c6f281fee8f5b4384980b84ddc</anchor>
      <arglist>(const em2d::Images em_images)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particles</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a4fff039bf0e2bf49c06583f83d254afa</anchor>
      <arglist>(SingletonContainer *particles_container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variance_images</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a684fffc8d113ecb1e03cb8ff8e1c6fda</anchor>
      <arglist>(const em2d::Images variance_images)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>a3351edb9bbe8eab5297df9396542effd</anchor>
      <arglist>(ScoreFunction *score_function, const Em2DRestraintParameters &amp;params)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraint.html</anchorfile>
      <anchor>aa0bd718cb78c529264cabf0f6074c5a6</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::Em2DRestraintParameters</name>
    <filename>classIMP_1_1em2d_1_1Em2DRestraintParameters.html</filename>
    <base>IMP::em2d::ProjectingParameters</base>
    <member kind="function">
      <type></type>
      <name>ProjectingParameters</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectingParameters.html</anchorfile>
      <anchor>a37a813346425ec8d8bf5936995670a65</anchor>
      <arglist>(double ps, double res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectingParameters.html</anchorfile>
      <anchor>af1c320949200dab2d6f02b26d646f961</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>n_projections</name>
      <anchorfile>classIMP_1_1em2d_1_1Em2DRestraintParameters.html</anchorfile>
      <anchor>aa00628e896494cb4ddaab3c4b57eb2bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::EM2DScore</name>
    <filename>classIMP_1_1em2d_1_1EM2DScore.html</filename>
    <base>IMP::em2d::ScoreFunction</base>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::GridStates</name>
    <filename>classIMP_1_1em2d_1_1GridStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function">
      <type></type>
      <name>GridStates</name>
      <anchorfile>classIMP_1_1em2d_1_1GridStates.html</anchorfile>
      <anchor>a27743621b5def59485508297837b719d</anchor>
      <arglist>(const algebra::Vector3Ds &amp;positions, const algebra::Rotation3Ds &amp;orientations, const String &amp;name=&quot;GridStates&quot;)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Rotation3D</type>
      <name>get_orientation</name>
      <anchorfile>classIMP_1_1em2d_1_1GridStates.html</anchorfile>
      <anchor>ac3e4528519d25658257b5f01a6bf10ce</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_position</name>
      <anchorfile>classIMP_1_1em2d_1_1GridStates.html</anchorfile>
      <anchor>a71673ac8ee8222880d6767f7b05ce983</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1GridStates.html</anchorfile>
      <anchor>a9fc4a0823ab128ed3af51450d12af5d9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::HasHigherCCC</name>
    <filename>classIMP_1_1em2d_1_1HasHigherCCC.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::HasLowerScore</name>
    <filename>classIMP_1_1em2d_1_1HasLowerScore.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::Image</name>
    <filename>classIMP_1_1em2d_1_1Image.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a9a8af54edd7f1f9cf1fd0595f60c59cf</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a051c8ca01c41487d6d638a3867854283</anchor>
      <arglist>(String filename, const ImageReaderWriter *reader)</arglist>
    </member>
    <member kind="function">
      <type>cv::Mat &amp;</type>
      <name>get_data</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a8606cf1d83b34b5526e23d9b72fb82c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>em::ImageHeader &amp;</type>
      <name>get_header</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a22c35720b110b90c7725b31926902d9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FloatRange</type>
      <name>get_min_and_max_values</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a5e4c5cd924d82804442b594e2ead9790</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>get_name</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a816b2d3f9b3a51748e4732383aacfe3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>get_type_name</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a97b7e579a75617a4dff5a9700f9f8aaa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a51ff9ad6178713656310c9e8c4a03122</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a35e5139d12526148600588080e715e29</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a3711206f3d3632ed50f56194528574d5</anchor>
      <arglist>(String filename, const ImageReaderWriter *reader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a5f9dfb860ed43f8abcb673add9c776df</anchor>
      <arglist>(const cv::Mat &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a092b6429b4c3623379a62df2aa476e3a</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>ac88ea83976612b8472113ead946ab828</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a8f60a2fc69d0e0ea1502ed2448b42376</anchor>
      <arglist>(Image *img)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>ad61f0cdf83f92ec9684e6c56ed8d7132</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>af437339ef0e6ed9ae41518b5bd67e4fa</anchor>
      <arglist>(int i, int j, double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_zeros</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>ab80318be34a1dbce26d1d9baf8dac3fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>aabe827d91dea80ff72d4be440f906f19</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_header</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>ace28c70f02e3e8ed23398cce1c409d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a0d4c7013411e8712825ea2bf38188bc5</anchor>
      <arglist>(const String &amp;filename, const ImageReaderWriter *writer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cv::Mat</type>
      <name>data_</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a574a19cd14f2a6f680dfa6e026f5b0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>em::ImageHeader</type>
      <name>header_</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a75d35a842c3c9fc1e3a986b4029268d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name_</name>
      <anchorfile>classIMP_1_1em2d_1_1Image.html</anchorfile>
      <anchor>a8c235b1458af63746ebe34c61dd7a9de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ImageReaderWriter</name>
    <filename>classIMP_1_1em2d_1_1ImageReaderWriter.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ImageReaderWriter.html</anchorfile>
      <anchor>a05c699b3c44b2ef9f8eed2801e6bc196</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::IntsOrder</name>
    <filename>classIMP_1_1em2d_1_1IntsOrder.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::JPGImageReaderWriter</name>
    <filename>classIMP_1_1em2d_1_1JPGImageReaderWriter.html</filename>
    <base>IMP::em2d::ImageReaderWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1JPGImageReaderWriter.html</anchorfile>
      <anchor>ad0e50f0647d4fd391b8f9c997fa4ef7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_from_ints</name>
      <anchorfile>classIMP_1_1em2d_1_1JPGImageReaderWriter.html</anchorfile>
      <anchor>a95f485195a522b34f9e0bc415ada673b</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, cv::Mat &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_to_ints</name>
      <anchorfile>classIMP_1_1em2d_1_1JPGImageReaderWriter.html</anchorfile>
      <anchor>a9ed60ae84e9b0ee7719df57f9aa3c8ed</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, const cv::Mat &amp;data) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::LessPairBySecond</name>
    <filename>classIMP_1_1em2d_1_1LessPairBySecond.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::MasksManager</name>
    <filename>classIMP_1_1em2d_1_1MasksManager.html</filename>
    <member kind="function">
      <type>void</type>
      <name>create_mask</name>
      <anchorfile>classIMP_1_1em2d_1_1MasksManager.html</anchorfile>
      <anchor>aac9aac043aec813a2bc0a610ed3ea145</anchor>
      <arglist>(double mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_masks</name>
      <anchorfile>classIMP_1_1em2d_1_1MasksManager.html</anchorfile>
      <anchor>aee7e062c082144a4ab54b902ec759316</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>ProjectionMaskPtr</type>
      <name>find_mask</name>
      <anchorfile>classIMP_1_1em2d_1_1MasksManager.html</anchorfile>
      <anchor>ac401212559c95374dc3ec6ba6aabed8a</anchor>
      <arglist>(double mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_kernel</name>
      <anchorfile>classIMP_1_1em2d_1_1MasksManager.html</anchorfile>
      <anchor>aafa581c34c186d75539b57f5fb4cc4b1</anchor>
      <arglist>(double resolution, double pixelsize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::MatchTemplateResult</name>
    <filename>classIMP_1_1em2d_1_1MatchTemplateResult.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::MeanAbsoluteDifference</name>
    <filename>classIMP_1_1em2d_1_1MeanAbsoluteDifference.html</filename>
    <base>IMP::em2d::ScoreFunction</base>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ParticlesDummyRestraint</name>
    <filename>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ParticlesDummyRestraint</name>
      <anchorfile>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</anchorfile>
      <anchor>a6282d6bb36aaeb6f2af32b5c03c49dc4</anchor>
      <arglist>(SingletonContainer *sc)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</anchorfile>
      <anchor>ac571051a8a6ce0218505c6b29cd06534</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</anchorfile>
      <anchor>a0e53c9de542cfaf30abc4ee93c2c4b07</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</anchorfile>
      <anchor>a124dbbaa19a0d533c8e832fce5948fb4</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1ParticlesDummyRestraint.html</anchorfile>
      <anchor>abeee1e0355765586857a1bad8003d3d3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::PCAFitRestraint</name>
    <filename>classIMP_1_1em2d_1_1PCAFitRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>PCAFitRestraint</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>af8bb9bf5130c9094ce8e6144e76c2bce</anchor>
      <arglist>(Particles particles, const std::vector&lt; std::string &gt; &amp;image_files, double pixel_size, double resolution=10.0, unsigned int projection_number=100, bool reuse_direction=false, unsigned int n_components=1, unsigned int micrographs_number=0)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a07cec0bf8a3fd15d9b715c13850b2c31</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>adac99f0dd1dbcb5308be6683b19293dd</anchor>
      <arglist>(unsigned int image_number) const </arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_dynamic_info</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a9315225ccd08ff6c6c0f745c5830d4f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a9b55cd43afbdbcad80347fff29b10152</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>algebra::Transformation3D</type>
      <name>get_transformation</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a3e2c1070df0792b34ee59339a1e83ba3</anchor>
      <arglist>(unsigned int image_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>ac89e17192b8611be035782cca5ee140a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1PCAFitRestraint.html</anchorfile>
      <anchor>a3cc18dc4fabb81f940ff1f4be5fabad1</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::PolarResamplingParameters</name>
    <filename>classIMP_1_1em2d_1_1PolarResamplingParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>PolarResamplingParameters</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a79f33971fc03f6b36ba6117f1f1edadd</anchor>
      <arglist>(unsigned int rows, unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolarResamplingParameters</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a5ba428776838e983a1d3a2aeebf4fdbc</anchor>
      <arglist>(const cv::Mat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_maps_for_resampling</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a7a9ce4c344d847058f0f6cca45631f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle_step</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a05eb45180f9081f77d613eade02104f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_ending_radius</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a25c189d57d26fc11304eacf062f1d01d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_angles</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a9ed7f33d1e101882b1438587369cc937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_rings</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a7ee6571d2dbcffd25117b067429eb780</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a99da90f7194c1db5ebc9e82f63f07cfd</anchor>
      <arglist>(unsigned int n_ring) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius_step</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a6922df2dc84f9ebf39166a082638de2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_resampling_map</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>ab4154a21508751cacd1ffa3d4c3f40b1</anchor>
      <arglist>(cv::Mat &amp;m1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_resampling_maps</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>aae3f74bfa8c654c1488df0c9f65818e0</anchor>
      <arglist>(cv::Mat &amp;m1, cv::Mat &amp;m2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_starting_radius</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a2bf765f843364613d298e74837865848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_estimated_number_of_angles</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>aa72600f51e6966b12e72d7a511f2219b</anchor>
      <arglist>(unsigned int aprox_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1em2d_1_1PolarResamplingParameters.html</anchorfile>
      <anchor>a4ca4fd05916b3bb1a3660ce9a87d53a0</anchor>
      <arglist>(unsigned int rows, unsigned int cols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectingOptions</name>
    <filename>classIMP_1_1em2d_1_1ProjectingOptions.html</filename>
    <base>IMP::em2d::ProjectingParameters</base>
    <member kind="function">
      <type></type>
      <name>ProjectingOptions</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectingOptions.html</anchorfile>
      <anchor>a74af981738e1f53dfba16095e61cf7bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectingOptions</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectingOptions.html</anchorfile>
      <anchor>a4808fe04a0864ec1cba36db81edd76cb</anchor>
      <arglist>(double ps, double res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectingOptions.html</anchorfile>
      <anchor>aacd6c1264675e83ec07f175f64fa8de3</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectingParameters</name>
    <filename>classIMP_1_1em2d_1_1ProjectingParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectionFinder</name>
    <filename>classIMP_1_1em2d_1_1ProjectionFinder.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>get_coarse_registration</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>aecbc29de7d691a79a8eaaff440ad6baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_coarse_registration_time</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>afe068f5bdd538a76cf22718a2e04efee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_complete_registration</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a6bf2e86816303b0eb4bd04d0c7cec917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_fine_registration_time</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>aceb0282c429c5e9fb1f617a4b474e88f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_global_score</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a653dd32b0620352b19d4bc6f21758126</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_preprocessing_time</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a5c9f2fa76b0ba5ddbb8c75f6a252166c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RegistrationResults</type>
      <name>get_registration_results</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>aee57c3e4e39a67d13e93c92b488340e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a3c99d56acb924c5c38c7044633600320</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fast_mode</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a177b68e1d5180244e3b8f8ada3055c7d</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_model_particles</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>af750554814ed2896d3c65bee308e36db</anchor>
      <arglist>(const ParticlesTemp &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_projections</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>ae2fd66029152065fd368461492cc6b11</anchor>
      <arglist>(const em2d::Images &amp;projections)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_save_match_images</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a5d9fe5d8cd056e216f37f8c4dcfbe5b9</anchor>
      <arglist>(bool x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_subjects</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a7dd29466d12fc84818bef5ea38d9fd90</anchor>
      <arglist>(const em2d::Images &amp;subjects)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_variance_images</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a831a5befa05d173fbfa9d667f5196874</anchor>
      <arglist>(const em2d::Images &amp;variances)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>aff42f0cb55360eba23aca76e71cc25fd</anchor>
      <arglist>(ScoreFunction *score_function, const Em2DRestraintParameters &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_preprocess_for_fast_coarse_registration</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>abb1c43a0e5e08947d9c1dd10db5e511c</anchor>
      <arglist>(const cv::Mat &amp;m, algebra::Vector2D &amp;center, cv::Mat &amp;POLAR_AUTOC)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_coarse_registrations_for_subject</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>af3e664255644a3fd5143c5b7ac8755be</anchor>
      <arglist>(unsigned int i, RegistrationResults &amp;coarse_RRs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MasksManagerPtr</type>
      <name>masks_manager_</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>a83fcc942eda44e4e08244898c6ec6d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>em2d::Images</type>
      <name>subjects_</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionFinder.html</anchorfile>
      <anchor>afcfb81baf5ac05d42a5d75f203fc2cd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectionMask</name>
    <filename>classIMP_1_1em2d_1_1ProjectionMask.html</filename>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionMask.html</anchorfile>
      <anchor>ae88f9e933554f0f64cf094e112b47f68</anchor>
      <arglist>(cv::Mat &amp;m, const algebra::Vector2D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionMask.html</anchorfile>
      <anchor>ae4919afad95b6343f92834b60ae84503</anchor>
      <arglist>(const em::KernelParameters &amp;kparams, double mass=1.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectionParameters</name>
    <filename>classIMP_1_1em2d_1_1ProjectionParameters.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>bool</type>
      <name>get_parameters_optimized</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a3c2483be72d89c33f552de11f2270768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_quaternion_1</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a472f2a8a785a3b19be63bf2fcca4840c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_quaternion_2</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>aeb6a471e1224769db8add8a82d0b0dbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_quaternion_3</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>ac95485d1884be9c79076d22457344b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_quaternion_4</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a629ba0a7cae78a0c3f6da8df89cf5164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_translation_x</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>aa66d2dfd84256645fcd3bd4c869c5070</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_translation_y</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a827693ee0989fce03f180d29d533a0d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parameters_optimized</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a08e3e1fa9157a12b665fa387b35fe729</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_proper_ranges_for_keys</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>ad305f39ddfbb50a23b486a9cb32e445f</anchor>
      <arglist>(Model *m, const algebra::Vector3D &amp;min_translation_values, const algebra::Vector3D &amp;max_translation_values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quaternion_1</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a8bee13168f1d02f0b031f70525585673</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quaternion_2</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a0ec4b73a8b7ca2bc33eabf826954fde6</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quaternion_3</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a44dfa07784474f542f02b8168f2fd4c5</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quaternion_4</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a37cfd68f2bd7903b875ae6bbeb15f99d</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_x</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>aac0ff1fc270d6a6bff2081f1a01a3ddb</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_y</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>aa77861ee08d47383712e55504662869a</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>af838db5ebb9db404be64c8e342dda934</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FloatKeys &amp;</type>
      <name>get_keys</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>aad90703c565c86a8c264542fca62a526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectionParameters</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a1564012d89842dc7c01c785bbaf92b91</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectionParameters</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParameters.html</anchorfile>
      <anchor>a7608632f3765376047d0a20deb5d0fbc</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectionParametersScoreState</name>
    <filename>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</anchorfile>
      <anchor>ac0b333d3c25eba38d160e77d2e7019dc</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</anchorfile>
      <anchor>a13147d99cb5795679874c6cd95a18b93</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</anchorfile>
      <anchor>a831d8a5703f730ab4980e38f5676cc55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</anchorfile>
      <anchor>aee0b088569ca4f8cfe40960357efbec4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionParametersScoreState.html</anchorfile>
      <anchor>aeed261658f026112a0a069bf1564cb76</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ProjectionStates</name>
    <filename>classIMP_1_1em2d_1_1ProjectionStates.html</filename>
    <base>IMP::em2d::GridStates</base>
    <member kind="function">
      <type></type>
      <name>ProjectionStates</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionStates.html</anchorfile>
      <anchor>ac23ddf9838569cb58cb0e9cc6ac7111a</anchor>
      <arglist>(const algebra::Vector3Ds &amp;positions, const algebra::Rotation3Ds &amp;orientations, const Images &amp;projections, const String &amp;name=&quot;ProjectionStates&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Image *</type>
      <name>get_projection</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionStates.html</anchorfile>
      <anchor>ad7a92de7b4d0453d5cf58c001ce1a1f0</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1ProjectionStates.html</anchorfile>
      <anchor>a5c9495dec8839069fac3d923b17ec315</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::RegistrationResult</name>
    <filename>classIMP_1_1em2d_1_1RegistrationResult.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add_in_plane_transformation</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>ae9ab15bdd1f3d4e782063f8b0d7f1923</anchor>
      <arglist>(algebra::Transformation2D t)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_ccc</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a55b59ad3bbcd37a254b8cb3f39d20ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_image_index</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a64c27fc3fa5f8acee7002e5e769f0af5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>get_name</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>abf6251d00a5696f0f83b290f71021af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_projection_index</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>ab9955d0e6213391203b30721ebc99ef0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Rotation3D</type>
      <name>get_rotation</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>acd2c31e953d155a20d200440af0331e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a54b357b86859edb67df326ce904c1147</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a8f751c856ebce6d1fed89b15de568e39</anchor>
      <arglist>(const String &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_from_image</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>afd9d889f9b8de4e3a3d7d42fa965f41d</anchor>
      <arglist>(const em::ImageHeader &amp;header)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_image_index</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a99ad750ea44f6e88c648ca9e8300814a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_in_image</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a51e23a3b0f9c050a741b597e2e4448ab</anchor>
      <arglist>(em::ImageHeader &amp;header) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_random_registration</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a9d57113370cc321c738c82e5b26a8245</anchor>
      <arglist>(unsigned int index, double maximum_shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rotation</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a53b7d8e11e378c1fe1ab8e2546828641</anchor>
      <arglist>(double phi, double theta, double psi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rotation</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a996ceea30768ec25b24b6c306415039e</anchor>
      <arglist>(algebra::Rotation3D R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_shift</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a7023012e178a1116d785053bc45c9f08</anchor>
      <arglist>(algebra::Vector2D shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>af9362676087f62f468fefcc25d7fd60b</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_comment_line</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>abb0afb31dfc7eb43bed87b5e0c7548e2</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>ccc_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>acfa174ef382a268cc5063159234286fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>image_index_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>aafa432a150b7a51f5e246332888bb02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>String</type>
      <name>name_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a461a335ea5284532d70805940a85fb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>phi_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a1d6a56442a3f72905faa7d6ec72f20da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>Score_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>ad618be9f6a8fd81e958b4170e0be1f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>algebra::Vector2D</type>
      <name>shift_</name>
      <anchorfile>classIMP_1_1em2d_1_1RegistrationResult.html</anchorfile>
      <anchor>a8e7ce77590f63f6b5c7008045473c4ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::RelativePositionMover</name>
    <filename>classIMP_1_1em2d_1_1RelativePositionMover.html</filename>
    <base>IMP::core::RigidBodyMover</base>
    <member kind="function">
      <type>void</type>
      <name>add_internal_transformations</name>
      <anchorfile>classIMP_1_1em2d_1_1RelativePositionMover.html</anchorfile>
      <anchor>a2045622f5bc5c6c61b42f5f27748c4f9</anchor>
      <arglist>(core::RigidBody d, algebra::Transformation3Ds transforms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1RelativePositionMover.html</anchorfile>
      <anchor>ab055515237e5f58dab5a711ad3889cd4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_random_move_probability</name>
      <anchorfile>classIMP_1_1em2d_1_1RelativePositionMover.html</anchorfile>
      <anchor>acb7103be36dc03a2551650aad0ce879d</anchor>
      <arglist>(Float p)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1em2d_1_1RelativePositionMover.html</anchorfile>
      <anchor>ae07320916fa8b3816c96ce1155f84fec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1em2d_1_1RelativePositionMover.html</anchorfile>
      <anchor>a5f6ebb80ab4e83da250e6bd835a7bec5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::RigidBodiesImageFitRestraint</name>
    <filename>classIMP_1_1em2d_1_1RigidBodiesImageFitRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>RigidBodiesImageFitRestraint</name>
      <anchorfile>classIMP_1_1em2d_1_1RigidBodiesImageFitRestraint.html</anchorfile>
      <anchor>af061f3bf53dde9fec3da4b4432220b84</anchor>
      <arglist>(ScoreFunction *scf, const core::RigidBodies &amp;rbs, Image *img)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_masks</name>
      <anchorfile>classIMP_1_1em2d_1_1RigidBodiesImageFitRestraint.html</anchorfile>
      <anchor>adc029e547932f000de091deb35097fe4</anchor>
      <arglist>(const core::RigidBody &amp;rb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1RigidBodiesImageFitRestraint.html</anchorfile>
      <anchor>a8635d3ec42f718d3120131fff7f5d1b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_orientations</name>
      <anchorfile>classIMP_1_1em2d_1_1RigidBodiesImageFitRestraint.html</anchorfile>
      <anchor>a9ecd59712114458c5d440bb7e01870f1</anchor>
      <arglist>(const core::RigidBody &amp;rb, const algebra::Rotation3Ds &amp;rots)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::ScoreFunction</name>
    <filename>classIMP_1_1em2d_1_1ScoreFunction.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::SegmentationParameters</name>
    <filename>classIMP_1_1em2d_1_1SegmentationParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::SingleLinkage</name>
    <filename>classIMP_1_1em2d_1_1SingleLinkage.html</filename>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1em2d_1_1SingleLinkage.html</anchorfile>
      <anchor>a49ba34ff3b564943003feb4950656f1c</anchor>
      <arglist>(unsigned int id1, unsigned int id2, const ClusterSet &amp;cluster_set, const FloatsList &amp;distances) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::SpiderImageReaderWriter</name>
    <filename>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</filename>
    <base>IMP::em2d::ImageReaderWriter</base>
    <member kind="function">
      <type></type>
      <name>SpiderImageReaderWriter</name>
      <anchorfile>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</anchorfile>
      <anchor>a204c350117aab20cc185777b410e566f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpiderImageReaderWriter</name>
      <anchorfile>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</anchorfile>
      <anchor>a4488a0648c4a1bee51e5b7ddef6e22da</anchor>
      <arglist>(const String &amp;filename, bool skip_type_check, bool force_reversed, bool skip_extra_checkings)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</anchorfile>
      <anchor>a6d0b9f574ab7e186682c3ffe1c66c672</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_from_floats</name>
      <anchorfile>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</anchorfile>
      <anchor>a9c08b22839e3ad4f256541b5737b8443</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, cv::Mat &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_to_floats</name>
      <anchorfile>classIMP_1_1em2d_1_1SpiderImageReaderWriter.html</anchorfile>
      <anchor>acdda9e14c4ebaf55bccaac401e86ae2a</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, const cv::Mat &amp;data) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::em2d::TIFFImageReaderWriter</name>
    <filename>classIMP_1_1em2d_1_1TIFFImageReaderWriter.html</filename>
    <base>IMP::em2d::ImageReaderWriter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1em2d_1_1TIFFImageReaderWriter.html</anchorfile>
      <anchor>a2b9c81001b2a001b63e075aaff4a8944</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_from_ints</name>
      <anchorfile>classIMP_1_1em2d_1_1TIFFImageReaderWriter.html</anchorfile>
      <anchor>a79e71352278aba3e88a035c0a1d9b378</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, cv::Mat &amp;data) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_to_ints</name>
      <anchorfile>classIMP_1_1em2d_1_1TIFFImageReaderWriter.html</anchorfile>
      <anchor>a5318892665b2405c50f7347d31024961</anchor>
      <arglist>(const String &amp;filename, em::ImageHeader &amp;header, const cv::Mat &amp;data) const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit</name>
    <filename>namespaceIMP_1_1EMageFit.html</filename>
    <namespace>IMP::EMageFit::argminmax</namespace>
    <namespace>IMP::EMageFit::buildxlinks</namespace>
    <namespace>IMP::EMageFit::csv_related</namespace>
    <namespace>IMP::EMageFit::database</namespace>
    <namespace>IMP::EMageFit::domino_model</namespace>
    <namespace>IMP::EMageFit::imp_general</namespace>
    <namespace>IMP::EMageFit::monte_carlo</namespace>
    <namespace>IMP::EMageFit::restraints</namespace>
    <namespace>IMP::EMageFit::sampling</namespace>
    <namespace>IMP::EMageFit::solutions_io</namespace>
    <namespace>IMP::EMageFit::utility</namespace>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1EMageFit.html</anchorfile>
      <anchor>a5b16b5b1b76f417937f4848edc08ce89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1EMageFit.html</anchorfile>
      <anchor>a13b7b49265d4d605aafaa4d855d55ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1EMageFit.html</anchorfile>
      <anchor>afb599428b9d7a62d408d2614d775e74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1EMageFit.html</anchorfile>
      <anchor>a50b85070dc24a13e7174fa0a65312eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::argminmax</name>
    <filename>namespaceIMP_1_1EMageFit_1_1argminmax.html</filename>
    <member kind="function">
      <type>def</type>
      <name>argmax</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1argminmax.html</anchorfile>
      <anchor>adcef7f44f093d7b21d7976fb60716024</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>argmin</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1argminmax.html</anchorfile>
      <anchor>a7cad10532a4f43a1645e7533e8221afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>keymax</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1argminmax.html</anchorfile>
      <anchor>aa6742ea4ef43351ac6631c07fd17de8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>keymin</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1argminmax.html</anchorfile>
      <anchor>aab9feb4ab34c06afc9580964ac8d82ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::buildxlinks</name>
    <filename>namespaceIMP_1_1EMageFit_1_1buildxlinks.html</filename>
    <class kind="class">IMP::EMageFit::buildxlinks::DockOrder</class>
    <class kind="class">IMP::EMageFit::buildxlinks::InitialDockingFromXlinks</class>
    <class kind="class">IMP::EMageFit::buildxlinks::Xlink</class>
    <class kind="class">IMP::EMageFit::buildxlinks::XlinksDict</class>
    <member kind="function">
      <type>def</type>
      <name>build_xlinks_graph</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1buildxlinks.html</anchorfile>
      <anchor>a9318c44465a4b0bf2ef118cede242dfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::buildxlinks::DockOrder</name>
    <filename>classIMP_1_1EMageFit_1_1buildxlinks_1_1DockOrder.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_docking_order</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1DockOrder.html</anchorfile>
      <anchor>a3f8df01636ae0093df5115d77004c9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_components_and_connections</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1DockOrder.html</anchorfile>
      <anchor>a85e222e82b25d71396c692c17b51ca87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_xlinks</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1DockOrder.html</anchorfile>
      <anchor>a33ee9576bac3218992c22c603b7576f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::buildxlinks::InitialDockingFromXlinks</name>
    <filename>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_residue_coordinates</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>aa6de47dc75b28f73fe383c34e65fa81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_particle</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>a1802e4717754400ee247dc913bc38e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>move_ligand</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>aef9484e34de9b6c6e7766c28e4d1bd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>move_one_xlink</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>a8952e55d3b342f219fc1fa5f7910920a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>move_xlinks</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>ad890db075019d2624a662cb97d49a92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_hierarchies</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>a0fceb9318ba5bf9405d84f99c6143359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pdbs</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>a0e3fb93000f12ab45adbfc7d41f60b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rigid_bodies</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>ae944a0bf95f20d96040a124d2303bfe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_xlinks</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>adad1e2cf7eeb0f86c69a8d60d9d2effe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_ligand</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1InitialDockingFromXlinks.html</anchorfile>
      <anchor>a386b2641eb2fb0ecde7718341c8076a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::buildxlinks::Xlink</name>
    <filename>classIMP_1_1EMageFit_1_1buildxlinks_1_1Xlink.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1Xlink.html</anchorfile>
      <anchor>a31de938d7749e2f3d6dc12a1e12ef6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_name</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1Xlink.html</anchorfile>
      <anchor>ace0d95556989b358ab9083458cee99b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>swap</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1Xlink.html</anchorfile>
      <anchor>a864d0f3f95fd296562f02ea9a6e1e9c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::buildxlinks::XlinksDict</name>
    <filename>classIMP_1_1EMageFit_1_1buildxlinks_1_1XlinksDict.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1XlinksDict.html</anchorfile>
      <anchor>a3ddb03f48475ab8cc0fcded9187ef68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_xlinks_for_pair</name>
      <anchorfile>classIMP_1_1EMageFit_1_1buildxlinks_1_1XlinksDict.html</anchorfile>
      <anchor>a2a7ed4b90295644a618e55648f23b1c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::csv_related</name>
    <filename>namespaceIMP_1_1EMageFit_1_1csv__related.html</filename>
    <member kind="function">
      <type>def</type>
      <name>read_csv</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1csv__related.html</anchorfile>
      <anchor>a17b9764efad11f0b7160796170c90c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_csv_keyword</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1csv__related.html</anchorfile>
      <anchor>a1dddea37b6b5d613456f44995615290f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::database</name>
    <filename>namespaceIMP_1_1EMageFit_1_1database.html</filename>
    <class kind="class">IMP::EMageFit::database::Database2</class>
    <member kind="function">
      <type>def</type>
      <name>get_sorting_indices</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1database.html</anchorfile>
      <anchor>a1b915fc74ec6a92b25aa66b4939653bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge_databases</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1database.html</anchorfile>
      <anchor>add9628b884747d5e7b547da1e5aabde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>print_data</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1database.html</anchorfile>
      <anchor>ac4ebe582fa8fbdc21a8907b012597008</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_data</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1database.html</anchorfile>
      <anchor>a7769a1bd2c0918b861a019b7200946bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::database::Database2</name>
    <filename>classIMP_1_1EMageFit_1_1database_1_1Database2.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_column</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a39d6be9140e301f894cbbda6d98cdae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_columns</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a1ec31efac36de77b10a0319d0ef2154f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_if_is_connected</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a2f3d67febd580f054a7d9e66b78a3628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>close</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a394531c4697d3c317b35c965d4799654</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>connect</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a2381b216a986d5c3a9cbeaf3a73a4a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>ae336e33ebf485fb29be5efac87198ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a6b06cc323c246b3f120294e447daeaaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_view</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a3bd6089fde7626eb5c4529dfa8793501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>drop_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a64cc05308359dabb516a0e0e82e29a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>drop_view</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a79adac7835606da439649e42d104ab09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_condition_string</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>ab675ecc8a91304d8020e0fb7c9e14fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>ad13436cc2e5c420ed3e36f2d02e70891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_table_column_names</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>ae8d9ab6301acabe13144d3e7c9abe629</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_table_types</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>a492b85a3618bf5467ff644adff571bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>retrieve_data</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>aa445ce25c8b4089d205c59b47fbaaeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>abe0a0f142a09313f0aeed75e23c051e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>store_data</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>abc06085147fc92ad20470d6b2ba132cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>store_dataV1</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>ab9f33f372f1959bc9cf31b3b655e415c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_data</name>
      <anchorfile>classIMP_1_1EMageFit_1_1database_1_1Database2.html</anchorfile>
      <anchor>aba01716844c16d161dad116b19fc4be5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::domino_model</name>
    <filename>namespaceIMP_1_1EMageFit_1_1domino__model.html</filename>
    <class kind="class">IMP::EMageFit::domino_model::DominoModel</class>
    <member kind="function">
      <type>def</type>
      <name>anchor_assembly</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1domino__model.html</anchorfile>
      <anchor>af3ceb1fc24e5c1d4fe486fb7041fdf08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_coordinates</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1domino__model.html</anchorfile>
      <anchor>a50c5b26df2123d54d78a55a822f22a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>measure_model</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1domino__model.html</anchorfile>
      <anchor>a1df9404a2d0947a48577ee3c0fd3f699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::domino_model::DominoModel</name>
    <filename>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_branch_and_bound_assignments_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a2363dae95d53c417e76f115521953671</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_exclusion_filter_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>ae3d1c821090a681e62855dcd26180896</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a2aaab87d1dffe07efb8edab88c14601d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_restraint_score_filter_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>adcfc8304c0020228e05ce5ee6f99abef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>align_rigid_bodies_states</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a46857142c14ae81899481f0c63e1cab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_coarse_assembly</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>afd442abe51a873040e6de1e11287631a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_merge_tree</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a33b0a9d778d54f79d7e9dd1a298b3ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>do_sampling</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a344d2997d1a304541bd52723e1a10c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_assignment_and_RFs</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a1e57996a528533821b1bcdc068f933f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_assignment_info</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a98825cf74333719bf1a158cc475b1685</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_assignment_scores</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a6437e785f8d88bad6784f55d6dc0d38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_assignment_text</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>ab38cbe8f7be9b50e63ddcb3add0b5e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_assignments_with_heap</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>ada6f2104f2369747ec5f441a60a0ed62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_value_for_assignment</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a3466a97aa1c19b589f6fede4f42e913d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraints_for_native</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>aad505f3a45571c8e9eded997bc1aac9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraints_names_used</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a8e597cb451e760e67d7a5388c017e8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_scoring_function</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>ad64e8f9f4e4603e0b613773acbc892fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_state</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a41d538cc9e7aec575a7a9ccf8e9df08c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_merge_tree</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a088262ecf189662b84297aa693ad6ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_assembly</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a7dc428494b2cf40ec5b7f9e668158566</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_assembly_components</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a59c3e499a5160bed59df78f22a45b189</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_close_pairs_excluded_volume_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a874e0fec1a6a5d722716243b90d002ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_complementarity_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a8990032cf949970e863c63dffb7dbe62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_connectivity_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a767d943f7673128ea9a9401fc05964a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_em2d_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>afa76f3dbeb365357687f2cedd470ff33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_native_assembly_for_benchmark</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>aa4f7923c59ba15ffa112e22a5764ab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_not_optimized</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>acfd658c1ac9935b9de341e0d7c62065c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pair_score_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a543ab99574b241d7ea3ba705447603b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rb_states</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>adb076fc6399bd1604975df62aecb9dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_xlink_restraint</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>aa4f1dc63ed0628e57a29cac190cf367c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setup_domino_sampler</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a00a32c420793a7d28aed40957ae04063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_merge_tree</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a19d8f6983c7e5bfc39a28867dcacb472</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_monte_carlo_solution</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>aa7fd7f47d98be1ecb61706e39a68d3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdb_for_assignment</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a532f62fd9a7f7c7173d472b4100467c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdb_for_component</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a8400a53e15789ebebe82ce210a3d580e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdb_for_configuration</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a2e54d074f42744f2c9a7d0d8975aa7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdb_for_reference_frames</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>aa0eace67f05f71ffdb04c499f61ba386</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdbs_for_reference_frames</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>afd95c6ab6309fed239958f8ed2235eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_solutions_database</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a0a84a3adb1bc9c20344bf33f0328a16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_subset</name>
      <anchorfile>classIMP_1_1EMageFit_1_1domino__model_1_1DominoModel.html</anchorfile>
      <anchor>a1c89dff1028bef50672314748854545f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general.html</filename>
    <namespace>IMP::EMageFit::imp_general::alignments</namespace>
    <namespace>IMP::EMageFit::imp_general::comparisons</namespace>
    <namespace>IMP::EMageFit::imp_general::io</namespace>
    <namespace>IMP::EMageFit::imp_general::movement</namespace>
    <namespace>IMP::EMageFit::imp_general::representation</namespace>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general::alignments</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general_1_1alignments.html</filename>
    <member kind="function">
      <type>def</type>
      <name>align_centroids_using_pca</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1alignments.html</anchorfile>
      <anchor>a6c3cde98118d30e552fe9a3b3c4cfad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_reference_frames_aligning_rbs</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1alignments.html</anchorfile>
      <anchor>a6d82c462759ff9f65c146fcc77e3d64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_reference_frames_from_chain_alignment</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1alignments.html</anchorfile>
      <anchor>a0da8a3f963e8cfe376dd9b2895b07c6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general::comparisons</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_assembly_placement_score</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>a912a4116c973ffbadd8a8c2af8d6aeea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_ccc</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>a99d24e357ffd30e5baf165fbcc7f6a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_components_placement_scores</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>ae1fed1c8c819c20cef7f77db5ae37bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_drms_for_backbone</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>aa73031a7b05110e280ce1af813160f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_placement_score_from_coordinates</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>aab4ff457b2c122929d41819155fa0c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_placement_scores_from_coordinates</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1comparisons.html</anchorfile>
      <anchor>ae7d0ce8ef583c9ffff7f2ec79ab5dda4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general::io</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</filename>
    <class kind="class">IMP::EMageFit::imp_general::io::ReferenceFrameToText</class>
    <class kind="class">IMP::EMageFit::imp_general::io::Transformation3DToText</class>
    <member kind="function">
      <type>def</type>
      <name>get_particles_from_points</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>ae0e3e30af51fe005f71b4549a3dd0b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>imp_info</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>ae79d0e0d8ec8201baeef8d6c6a0cd288</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_reference_frames</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>a41e391818b1373210671aba71c7d0e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_transforms</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>ae28de1975c021d1bea8166cec00de981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_particles_as_text</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>ab9d1f07679f38dd6480f33ec61236dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdb_for_reference_frames</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>a66b021c917e94c12584f5dfe01d039ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_transforms</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>aee94a8696b6ac25d4785c556f93443cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_vectors_in_multifit2_format</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1io.html</anchorfile>
      <anchor>a0500b631febd08fe8d04e1eed63d56bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::imp_general::io::ReferenceFrameToText</name>
    <filename>classIMP_1_1EMageFit_1_1imp__general_1_1io_1_1ReferenceFrameToText.html</filename>
    <base>IMP::EMageFit::imp_general::io::Transformation3DToText</base>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::imp_general::io::Transformation3DToText</name>
    <filename>classIMP_1_1EMageFit_1_1imp__general_1_1io_1_1Transformation3DToText.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general::movement</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general_1_1movement.html</filename>
    <member kind="function">
      <type>def</type>
      <name>apply_random_transform</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1movement.html</anchorfile>
      <anchor>aad5cb388abe75c6d51e818282356df3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_transformation_to_hierarchy</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1movement.html</anchorfile>
      <anchor>ad1825b8a250dcc9048ee741250ff55e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_random_transformation</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1movement.html</anchorfile>
      <anchor>adc73a418fe35196e812263bad672e75f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::imp_general::representation</name>
    <filename>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</filename>
    <member kind="function">
      <type>def</type>
      <name>apply_rotation_around_centroid</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>ae05d34e078c85073885e6de202a37703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_transformation_around_centroid</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a5a19e015333663823a1ce22fc3073d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_assembly</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>ae1015b8e76a92f4e01cf9c64a774732c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_assembly_from_pdb</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a17a5d60d092533dc03078e8a93447646</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_rigid_bodies</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a52d6d5c7d234dab4d32b055cbf0ad56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_simplified_assembly</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>ac015767b79ca4d9c838e6d098f878d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_simplified_dna</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>adb397e22f57917dc949b592184e3a665</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_all_chains</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a9b1c9d60584715625d2cd762aa16707a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_all_members</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>aea9ada5d4efb5bd279bab45f5c03b353</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_backbone</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a6e185f269092960780a815b32bd8f38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_coarse_selection</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a61c52d2078cd718b001f61ff70a05ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_component</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a540de77ceb2c1b81d8be63c77c0942c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_nucleic_acid_backbone</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a4d72094b83debcb9b037a6cbe8e7d125</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rb_name</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>aa165ca5b9cd443913425bfa43311718e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_coordinates</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a1a2f024c03bca48fbdff91c0bb6cd141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_particle</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a648f725bbadc2e183c0c009baf90f557</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residues_distance</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>aea4e2369c2524a88339daea35339b316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rigid_body</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a139f5af04feb2440d78dd22dd0def0fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_selection_as_atom_hierarchy</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>ad1202968c6ae585909076efa295e51ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_selection_rigid_body</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a6bfe80d4f999ea3959ef60d43c3e2535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_component</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>a52de54f895c8546113d0cf99f417c037</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rename_chains</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1imp__general_1_1representation.html</anchorfile>
      <anchor>ab29d7e988ca2243d2a2465042fe220c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::monte_carlo</name>
    <filename>namespaceIMP_1_1EMageFit_1_1monte__carlo.html</filename>
    <class kind="class">IMP::EMageFit::monte_carlo::MonteCarloRelativeMoves</class>
    <member kind="function">
      <type>def</type>
      <name>set_random_seed</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1monte__carlo.html</anchorfile>
      <anchor>a6f3c2dca31c5e2fc6b4c82d005969bff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::monte_carlo::MonteCarloRelativeMoves</name>
    <filename>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</filename>
    <member kind="function">
      <type>def</type>
      <name>run_monte_carlo</name>
      <anchorfile>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</anchorfile>
      <anchor>a165c48b3852ed906a4abac8f1607abaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_monte_carlo_with_relative_movers</name>
      <anchorfile>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</anchorfile>
      <anchor>afa63e1212c62ff7ec672ee24d292e925</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_relative_movers</name>
      <anchorfile>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</anchorfile>
      <anchor>a5f894da30250bbec31b8682214e881cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_scoring_function</name>
      <anchorfile>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</anchorfile>
      <anchor>aba014010a54a7cf30fc5bc9f11686b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_temperature_pattern</name>
      <anchorfile>classIMP_1_1EMageFit_1_1monte__carlo_1_1MonteCarloRelativeMoves.html</anchorfile>
      <anchor>a38c62e5a29f913339d40435d714d1ae2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::restraints</name>
    <filename>namespaceIMP_1_1EMageFit_1_1restraints.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_connectivity_restraint</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1restraints.html</anchorfile>
      <anchor>aaeab39f78a981927942da64d447eafd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_em2d_restraint</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1restraints.html</anchorfile>
      <anchor>a7a6090fa5a0340160665b6eaaa18573b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::sampling</name>
    <filename>namespaceIMP_1_1EMageFit_1_1sampling.html</filename>
    <member kind="function">
      <type>def</type>
      <name>create_sampling_grid_2d</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1sampling.html</anchorfile>
      <anchor>a7cacacb3362cc9bb74837c15a29365f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_sampling_grid_3d</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1sampling.html</anchorfile>
      <anchor>aba7782920d172bf395012ac9a04345fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_orientations_nearby</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1sampling.html</anchorfile>
      <anchor>aef8e620fe5f4a54287a545ee41d4bf8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::solutions_io</name>
    <filename>namespaceIMP_1_1EMageFit_1_1solutions__io.html</filename>
    <class kind="class">IMP::EMageFit::solutions_io::HeapRecord</class>
    <class kind="class">IMP::EMageFit::solutions_io::ResultsDB</class>
    <member kind="function">
      <type>def</type>
      <name>gather_best_solution_results</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1solutions__io.html</anchorfile>
      <anchor>a05f86206e48662f8fbd7ff0674a4e691</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>gather_solution_results</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1solutions__io.html</anchorfile>
      <anchor>aca5ec12ff66b258fc2d161688ae65374</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_best_solution</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1solutions__io.html</anchorfile>
      <anchor>af9a5e9ed1922c0087c67d11826fcedfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_fields_string</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1solutions__io.html</anchorfile>
      <anchor>aa9572d3a4f28313e0735e9a15c2b149c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_sorting_indices</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1solutions__io.html</anchorfile>
      <anchor>a84ce5dcfcaa40fc18a8763f19da2cc47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::solutions_io::HeapRecord</name>
    <filename>classIMP_1_1EMageFit_1_1solutions__io_1_1HeapRecord.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__lt__</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1HeapRecord.html</anchorfile>
      <anchor>a341945becef70dcd08d5bc75f306ab5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__new__</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1HeapRecord.html</anchorfile>
      <anchor>a78e2e0c18db49649a091f9573001ce71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::EMageFit::solutions_io::ResultsDB</name>
    <filename>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</filename>
    <base>IMP::EMageFit::database::Database2</base>
    <member kind="function">
      <type>def</type>
      <name>add_ccc_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>ac08c58a257ee274fbb545a87afbe7ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_cluster_record</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a76dc5212dbf1747a2e24fc055a9ca097</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_clusters_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a20f875c882bd4a457a8a196a11cad8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_native_record</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a5ba7bd39b1febd607d1f01727c9e2a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_placement_scores_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a2fb9ab74fbf42c2679b571aae30aad46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_record</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a7604eb442f83b9417887f910e9dd755e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_results_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>ab4a012e5f1efdeeac1c3647c347a1bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>format_ccc_record</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>ab4105f6bc89f28d8a5fe3f02d1c66f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>format_placement_record</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>af62d4425d0d3af7e87bd3a9e7a4a283e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_ccc</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a991d2580462b235014856a18b1ac37e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_individual_placement_statistics</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a068e72c11bbe61489c236a2af5b5bbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_left_join_command</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a889021131b6d4eabde164e2f2b01437f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_native_rank</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>aa191787c774b24aad5148e9a5b3396ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_native_solution</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a4f642cce30e4d6a22ac98421336cfff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_nth_largest_cluster</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a6750653e42ce113b5b1e9560f20e1158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_placement_fields</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>aaa437211bbe37148a6c3308854c2bb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_placement_statistics</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a81f1c492904ade3847b73cbeb2255c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_solutions</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a97f7c89cd8072dd25d58dd4624762d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_solutions_from_list</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>aada58f551b76ed16d9f976b9e0044dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_solutions_results_table</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a495c30f5122cbe6420d17f3d21772e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>store_cluster_data</name>
      <anchorfile>classIMP_1_1EMageFit_1_1solutions__io_1_1ResultsDB.html</anchorfile>
      <anchor>a32b78545a83346a61adaa646c6d65c35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::EMageFit::utility</name>
    <filename>namespaceIMP_1_1EMageFit_1_1utility.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_experiment_params</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1utility.html</anchorfile>
      <anchor>aafc9cbde8c44ae7b7e24b942a713929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>vararg_callback</name>
      <anchorfile>namespaceIMP_1_1EMageFit_1_1utility.html</anchorfile>
      <anchor>a80ba592c231a4d239c63a82d752c184c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::example</name>
    <filename>namespaceIMP_1_1example.html</filename>
    <class kind="class">IMP::example::ExampleComplexRestraint</class>
    <class kind="class">IMP::example::ExampleConstraint</class>
    <class kind="class">IMP::example::ExampleDecorator</class>
    <class kind="class">IMP::example::ExampleObject</class>
    <class kind="class">IMP::example::ExamplePairScore</class>
    <class kind="class">IMP::example::ExampleRestraint</class>
    <class kind="class">IMP::example::ExampleSingletonModifier</class>
    <class kind="class">IMP::example::ExampleSubsetFilterTable</class>
    <class kind="class">IMP::example::ExampleTemplateClassD</class>
    <class kind="class">IMP::example::ExampleUnaryFunction</class>
    <class kind="class">IMP::example::PythonExampleConstraint</class>
    <class kind="class">IMP::example::PythonExamplePairScore</class>
    <class kind="class">IMP::example::PythonExampleRestraint</class>
    <class kind="class">IMP::example::PythonExampleSingletonModifier</class>
    <class kind="class">IMP::example::PythonExampleUnaryFunction</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ExamplePairScore &gt; &gt;</type>
      <name>ExamplePairScores</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a686e92f35902479cf1a55cac9238bbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ExamplePairScore &gt; &gt;</type>
      <name>ExamplePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>af337e634e5bd61458f9c0621280d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_chain_restraint</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a9aa2ea9cadf531860b3041ded1973637</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps, double length_factor, double k, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_excluded_volume</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a3664740d13bae6e46e99912a842c5160</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;ps, double k, std::string name)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_incidences</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>af8c9f5150402309a3284c9fb93e55efa</anchor>
      <arglist>(const ParticlesTemp &amp;psa, const ParticlesTemp &amp;psb, double point_distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_particles</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a9565cd11fa56ad6312caef58c5510a30</anchor>
      <arglist>(const ParticlesList &amp;ps, const BoundingVolume &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a1c6750d8defe4e52e71994ca66155027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>add1c14e5ed75529f9d1823e34a763392</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1example.html</anchorfile>
      <anchor>a4d0115df05cd0f34ef4b8db91e8d4284</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1example" title="imp_example_app">imp_example_app_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleComplexRestraint</name>
    <filename>classIMP_1_1example_1_1ExampleComplexRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ExampleComplexRestraint</name>
      <anchorfile>classIMP_1_1example_1_1ExampleComplexRestraint.html</anchorfile>
      <anchor>a2fdc2b737dd01072a9d87e90e3dee5b3</anchor>
      <arglist>(UnaryFunction *f, SingletonContainer *sc, Float diameter, std::string name=&quot;ExampleComplexRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleComplexRestraint.html</anchorfile>
      <anchor>aab7acda0aff47884061167e76df6ac8c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleComplexRestraint.html</anchorfile>
      <anchor>af24dc82830b36e39a6d385f1f87010f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1example_1_1ExampleComplexRestraint.html</anchorfile>
      <anchor>a9ab2354a722ef2c5a55d7a2a44a04db8</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleConstraint</name>
    <filename>classIMP_1_1example_1_1ExampleConstraint.html</filename>
    <base>IMP::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleConstraint.html</anchorfile>
      <anchor>a304c0a6f2d144bf55a928d60cf30ce31</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleConstraint.html</anchorfile>
      <anchor>ad05636249789f86111cc62c31ea3aeae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleConstraint.html</anchorfile>
      <anchor>afe3e37c55728ac56c66808d93a2b5f16</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleDecorator</name>
    <filename>classIMP_1_1example_1_1ExampleDecorator.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_decorator_name</name>
      <anchorfile>classIMP_1_1example_1_1ExampleDecorator.html</anchorfile>
      <anchor>a1db75a122abc8172f85c51e63c430b91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_decorator_name</name>
      <anchorfile>classIMP_1_1example_1_1ExampleDecorator.html</anchorfile>
      <anchor>a112e84cddc4b161028d835386d92d7a9</anchor>
      <arglist>(std::string nm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1example_1_1ExampleDecorator.html</anchorfile>
      <anchor>a42e9462d9fccab327fdadac0a4ab45d7</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExampleDecorator</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1example_1_1ExampleDecorator.html</anchorfile>
      <anchor>af8dcc04f322c06a8873d069a62c886c0</anchor>
      <arglist>(Model *m, ParticleIndex pi, std::string name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExampleDecorator</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1example_1_1ExampleDecorator.html</anchorfile>
      <anchor>a173127079675cb7866584f44d127edeb</anchor>
      <arglist>(IMP::ParticleAdaptor pa, std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleObject</name>
    <filename>classIMP_1_1example_1_1ExampleObject.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleObject.html</anchorfile>
      <anchor>a6ed7736943d4286750eb03a31bb34bdd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExamplePairScore</name>
    <filename>classIMP_1_1example_1_1ExamplePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a5a1b0950337730470b6036c06b5f9387</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a704a0b7e083f29204a169305b5266d6e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a985e814d79329d20af4b3581d6d36d18</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a65d86e5ecc22a176098c392091e71fcb</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a92be7b8185aea055ee0b12ebf32c4a10</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a69d99f328e2ed5284304d4262ad4835d</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExamplePairScore.html</anchorfile>
      <anchor>a1aefcfbd8d12577e6986dcd40c09f8f3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleRestraint</name>
    <filename>classIMP_1_1example_1_1ExampleRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ExampleRestraint</name>
      <anchorfile>classIMP_1_1example_1_1ExampleRestraint.html</anchorfile>
      <anchor>a63477f355b12a71baeac254e88b2face</anchor>
      <arglist>(Model *m, ParticleIndex p, double k)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleRestraint.html</anchorfile>
      <anchor>aab4f84092a4d7b52bbc1e9b4d5278c7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleRestraint.html</anchorfile>
      <anchor>ad508f33af7229ef56a8936fdeec97760</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleSingletonModifier</name>
    <filename>classIMP_1_1example_1_1ExampleSingletonModifier.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSingletonModifier.html</anchorfile>
      <anchor>ac6dc71a7f159ff84727454c767fd208f</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSingletonModifier.html</anchorfile>
      <anchor>a82129091a0e7cbdd923a818e95e3e9c3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSingletonModifier.html</anchorfile>
      <anchor>a971598f275a90b41804ce8725206ffc6</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSingletonModifier.html</anchorfile>
      <anchor>ad3d1511ba756e4f1617b9596498d16ed</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSingletonModifier.html</anchorfile>
      <anchor>a340cd0ff38bfa6ee34eb9fe54dec878f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleSubsetFilterTable</name>
    <filename>classIMP_1_1example_1_1ExampleSubsetFilterTable.html</filename>
    <base>IMP::domino::SubsetFilterTable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>get_strength</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSubsetFilterTable.html</anchorfile>
      <anchor>a4ca72767530ac8b8ac22c470ddaf9003</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::domino::SubsetFilter *</type>
      <name>get_subset_filter</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSubsetFilterTable.html</anchorfile>
      <anchor>a4fd0328dc1039a8ec541abb8fa4990ac</anchor>
      <arglist>(const IMP::domino::Subset &amp;s, const IMP::domino::Subsets &amp;excluded) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleSubsetFilterTable.html</anchorfile>
      <anchor>a6b0cc7d3de0999d6415620e36d72ebce</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleTemplateClassD</name>
    <filename>classIMP_1_1example_1_1ExampleTemplateClassD.html</filename>
    <templarg>D</templarg>
    <member kind="function">
      <type></type>
      <name>ExampleTemplateClassD</name>
      <anchorfile>classIMP_1_1example_1_1ExampleTemplateClassD.html</anchorfile>
      <anchor>aa93938fc836a0c96102da8f1530e1e6c</anchor>
      <arglist>(const IMP::algebra::VectorD&lt; D &gt; &amp;a, const IMP::algebra::VectorD&lt; D &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>const IMP::algebra::VectorD&lt; D &gt; &amp;</type>
      <name>get_point</name>
      <anchorfile>classIMP_1_1example_1_1ExampleTemplateClassD.html</anchorfile>
      <anchor>a86ede654e64072869b8c25f23bfde3d6</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::ExampleUnaryFunction</name>
    <filename>classIMP_1_1example_1_1ExampleUnaryFunction.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>ExampleUnaryFunction</name>
      <anchorfile>classIMP_1_1example_1_1ExampleUnaryFunction.html</anchorfile>
      <anchor>a7b22acd4b9b67058ed9afd3e8f79c59e</anchor>
      <arglist>(Float center, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1example_1_1ExampleUnaryFunction.html</anchorfile>
      <anchor>a733d00d1f8bc23561cd70fe9f16dc775</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1example_1_1ExampleUnaryFunction.html</anchorfile>
      <anchor>a5bd676af004849f4796fe0bf1d71f58c</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1example_1_1ExampleUnaryFunction.html</anchorfile>
      <anchor>aae72f0974717a8a2062b53b953f29345</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::example::PythonExampleConstraint</name>
    <filename>classIMP_1_1example_1_1PythonExampleConstraint.html</filename>
    <base>IMP::Constraint</base>
  </compound>
  <compound kind="class">
    <name>IMP::example::PythonExamplePairScore</name>
    <filename>classIMP_1_1example_1_1PythonExamplePairScore.html</filename>
    <base>IMP::PairScore</base>
  </compound>
  <compound kind="class">
    <name>IMP::example::PythonExampleRestraint</name>
    <filename>classIMP_1_1example_1_1PythonExampleRestraint.html</filename>
    <base>IMP::Restraint</base>
  </compound>
  <compound kind="class">
    <name>IMP::example::PythonExampleSingletonModifier</name>
    <filename>classIMP_1_1example_1_1PythonExampleSingletonModifier.html</filename>
    <base>IMP::SingletonModifier</base>
  </compound>
  <compound kind="class">
    <name>IMP::example::PythonExampleUnaryFunction</name>
    <filename>classIMP_1_1example_1_1PythonExampleUnaryFunction.html</filename>
    <base>IMP::UnaryFunction</base>
  </compound>
  <compound kind="namespace">
    <name>IMP::foxs</name>
    <filename>namespaceIMP_1_1foxs.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1foxs.html</anchorfile>
      <anchor>a79e0e7df24c3368e84479c5a79a0bfe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1foxs.html</anchorfile>
      <anchor>ac21ec57a360975076841862689481d12</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1foxs.html</anchorfile>
      <anchor>a583fe667ca348580e6e4b41c28d18606</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1foxs" title="foxs">foxs_bin</docanchor>
  </compound>
  <compound kind="namespace">
    <name>IMP::gsl</name>
    <filename>namespaceIMP_1_1gsl.html</filename>
    <class kind="class">IMP::gsl::ConjugateGradients</class>
    <class kind="class">IMP::gsl::GSLOptimizer</class>
    <class kind="class">IMP::gsl::QuasiNewton</class>
    <class kind="class">IMP::gsl::Simplex</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GSLOptimizer &gt; &gt;</type>
      <name>GSLOptimizers</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>a3f00f301d6a93e80ba642a5ba24a4c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GSLOptimizer &gt; &gt;</type>
      <name>GSLOptimizersTemp</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>ab773ba69811c05f09e996e9d94490382</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>a9a48bc4fac7f641211e11ed2a4882231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>a3729e2518ee0f20e5607f7f86884f3c2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1gsl.html</anchorfile>
      <anchor>a26177fd7b4d6bf5caa2b4e63c0e2d7da</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1gsl" title="GSL">GSL</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::gsl::ConjugateGradients</name>
    <filename>classIMP_1_1gsl_1_1ConjugateGradients.html</filename>
    <base>IMP::gsl::GSLOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1gsl_1_1ConjugateGradients.html</anchorfile>
      <anchor>a9baeed56a2e40273d7fa5cfc46740d33</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1gsl_1_1ConjugateGradients.html</anchorfile>
      <anchor>a0bfacd7345e7e5534e750199320f8403</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_threshold</name>
      <anchorfile>classIMP_1_1gsl_1_1ConjugateGradients.html</anchorfile>
      <anchor>a84958f4acc8abf7eb4227434f8fa3c9c</anchor>
      <arglist>(double mg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stop_score</name>
      <anchorfile>classIMP_1_1gsl_1_1GSLOptimizer.html</anchorfile>
      <anchor>a0c2ab0af7b41aa91430282d1f73d9224</anchor>
      <arglist>(double d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::gsl::GSLOptimizer</name>
    <filename>classIMP_1_1gsl_1_1GSLOptimizer.html</filename>
    <base>IMP::AttributeOptimizer</base>
  </compound>
  <compound kind="class">
    <name>IMP::gsl::QuasiNewton</name>
    <filename>classIMP_1_1gsl_1_1QuasiNewton.html</filename>
    <base>IMP::gsl::GSLOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1gsl_1_1QuasiNewton.html</anchorfile>
      <anchor>a1836211150681b23cd5155169d2b802c</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1gsl_1_1QuasiNewton.html</anchorfile>
      <anchor>a5dd88d80c846870442dd60fb1146f258</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::gsl::Simplex</name>
    <filename>classIMP_1_1gsl_1_1Simplex.html</filename>
    <base>IMP::gsl::GSLOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>do_optimize</name>
      <anchorfile>classIMP_1_1gsl_1_1Simplex.html</anchorfile>
      <anchor>aeafae0bffe96f2daf3b70b04203ec8c4</anchor>
      <arglist>(unsigned int max_steps) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1gsl_1_1Simplex.html</anchorfile>
      <anchor>ab236686e12c7b1d29c4f3b790892a6d0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::integrative_docking</name>
    <filename>namespaceIMP_1_1integrative__docking.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1integrative__docking.html</anchorfile>
      <anchor>a8bb2a3a731c73b938f8c23371f2ac266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1integrative__docking.html</anchorfile>
      <anchor>ada4a729cce4466ae2787e46998b3e1df</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1integrative__docking.html</anchorfile>
      <anchor>a6eea424c1af7aea86af2f38b764caa1a</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1integrative__docking" title="idock">idock_bin</docanchor>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd</name>
    <filename>namespaceIMP_1_1isd.html</filename>
    <namespace>IMP::isd::Entry</namespace>
    <namespace>IMP::isd::gmm_tools</namespace>
    <namespace>IMP::isd::History</namespace>
    <namespace>IMP::isd::TALOSReader</namespace>
    <namespace>IMP::isd::TBLReader</namespace>
    <namespace>IMP::isd::utils</namespace>
    <class kind="class">IMP::isd::AmbiguousNOERestraint</class>
    <class kind="class">IMP::isd::AmbiguousRestraint</class>
    <class kind="class">IMP::isd::AtomicCrossLinkMSRestraint</class>
    <class kind="class">IMP::isd::BivariateFunction</class>
    <class kind="class">IMP::isd::Covariance1DFunction</class>
    <class kind="class">IMP::isd::CrossLinkData</class>
    <class kind="class">IMP::isd::CrossLinkMSRestraint</class>
    <class kind="class">IMP::isd::CysteineCrossLinkData</class>
    <class kind="class">IMP::isd::CysteineCrossLinkRestraint</class>
    <class kind="class">IMP::isd::Distribution</class>
    <class kind="class">IMP::isd::FNormal</class>
    <class kind="class">IMP::isd::FretData</class>
    <class kind="class">IMP::isd::FretRestraint</class>
    <class kind="class">IMP::isd::FStudentT</class>
    <class kind="class">IMP::isd::GammaPrior</class>
    <class kind="class">IMP::isd::GaussianAnchorEMRestraint</class>
    <class kind="class">IMP::isd::GaussianEMRestraint</class>
    <class kind="class">IMP::isd::GaussianProcessInterpolation</class>
    <class kind="class">IMP::isd::GaussianProcessInterpolationRestraint</class>
    <class kind="class">IMP::isd::GaussianRestraint</class>
    <class kind="class">IMP::isd::GeneralizedGuinierPorodFunction</class>
    <class kind="class">IMP::isd::HybridMonteCarlo</class>
    <class kind="class">IMP::isd::ISDRestraint</class>
    <class kind="class">IMP::isd::JeffreysRestraint</class>
    <class kind="class">IMP::isd::Linear1DFunction</class>
    <class kind="class">IMP::isd::LognormalAmbiguousRestraint</class>
    <class kind="class">IMP::isd::LognormalRestraint</class>
    <class kind="class">IMP::isd::LogWrapper</class>
    <class kind="class">IMP::isd::MarginalHBondRestraint</class>
    <class kind="class">IMP::isd::MarginalNOERestraint</class>
    <class kind="class">IMP::isd::MolecularDynamics</class>
    <class kind="class">IMP::isd::MolecularDynamicsMover</class>
    <class kind="class">IMP::isd::MultivariateFNormalSufficient</class>
    <class kind="class">IMP::isd::NOERestraint</class>
    <class kind="class">IMP::isd::NormalSigmaPCRestraint</class>
    <class kind="class">IMP::isd::Nuisance</class>
    <class kind="class">IMP::isd::OneDimensionalDistribution</class>
    <class kind="class">IMP::isd::OneDimensionalSufficientDistribution</class>
    <class kind="class">IMP::isd::PenalizedComplexityPrior</class>
    <class kind="class">IMP::isd::RepulsiveDistancePairScore</class>
    <class kind="class">IMP::isd::ResidueProteinProximityRestraint</class>
    <class kind="class">IMP::isd::Scale</class>
    <class kind="class">IMP::isd::StudentTRestraint</class>
    <class kind="class">IMP::isd::Switching</class>
    <class kind="class">IMP::isd::TALOSRestraint</class>
    <class kind="class">IMP::isd::UniformPrior</class>
    <class kind="class">IMP::isd::UnivariateFunction</class>
    <class kind="class">IMP::isd::vonMises</class>
    <class kind="class">IMP::isd::vonMisesKappaConjugateRestraint</class>
    <class kind="class">IMP::isd::vonMisesKappaJeffreysRestraint</class>
    <class kind="class">IMP::isd::vonMisesSufficient</class>
    <class kind="class">IMP::isd::Weight</class>
    <class kind="class">IMP::isd::WeightMover</class>
    <class kind="class">IMP::isd::WeightRestraint</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Distribution &gt; &gt;</type>
      <name>Distributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a2c68a9cd2112ab2b29d7fd1f083f15d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Distribution &gt; &gt;</type>
      <name>DistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>ad104f04595872f4669da384840428b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FStudentT &gt; &gt;</type>
      <name>FStudentTs</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>ac2c53d71f0a46eb1b31d7bcad39bf8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FStudentT &gt; &gt;</type>
      <name>FStudentTsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a483e031afec4e36375cb95fc3742561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ISDRestraint &gt; &gt;</type>
      <name>ISDRestraints</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a8848cf4e97ee41e036f284c2fe4d2cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ISDRestraint &gt; &gt;</type>
      <name>ISDRestraintsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a4b3fc77dc074b486d44ded59b348adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OneDimensionalDistribution &gt; &gt;</type>
      <name>OneDimensionalDistributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a932fbb5ef64d9b8c2db201b40cadb60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OneDimensionalDistribution &gt; &gt;</type>
      <name>OneDimensionalDistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a9ca4895edff0f2841d2e2940a3ac7d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; OneDimensionalSufficientDistribution &gt; &gt;</type>
      <name>OneDimensionalSufficientDistributions</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a5cee41160f2094281badb85f2bf445d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; OneDimensionalSufficientDistribution &gt; &gt;</type>
      <name>OneDimensionalSufficientDistributionsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>abdc975998a2b162479f4de5cdb3b6147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PenalizedComplexityPrior &gt; &gt;</type>
      <name>PenalizedComplexityPriors</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a46d6c3f0e490cfec126275820fd811ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PenalizedComplexityPrior &gt; &gt;</type>
      <name>PenalizedComplexityPriorsTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a87caa2967fbe4d3f48d5b1322fcda2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RepulsiveDistancePairScore &gt; &gt;</type>
      <name>RepulsiveDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a65465f3df8530078404696f6782e34b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RepulsiveDistancePairScore &gt; &gt;</type>
      <name>RepulsiveDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a1608c3c32043ab0af077b71e529b5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>a6007741e535655d87e4d51d1078edb0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>abcc98a218eea0b525b567020683a4855</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1isd.html</anchorfile>
      <anchor>abdbcafb6249c4ae262c1321c34b2cd92</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::AmbiguousNOERestraint</name>
    <filename>classIMP_1_1isd_1_1AmbiguousNOERestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>AmbiguousNOERestraint</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousNOERestraint.html</anchorfile>
      <anchor>ae3ab78cb324e0b0d604bea494c6b4e7a</anchor>
      <arglist>(Model *m, PairContainer *pc, ParticleIndexAdaptor sigma, ParticleIndexAdaptor gamma, double Iexp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousNOERestraint.html</anchorfile>
      <anchor>a7ad4ff7b818afdf3a86ee06be3bea7bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousNOERestraint.html</anchorfile>
      <anchor>abf35b9b836c1b7dcd0af6729ee7903a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousNOERestraint.html</anchorfile>
      <anchor>a82421496e58f4e60f4e420ad76a511c8</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::AmbiguousRestraint</name>
    <filename>classIMP_1_1isd_1_1AmbiguousRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>AmbiguousRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousRestraint.html</anchorfile>
      <anchor>a7455431ce0eb1ccd1cc68d37f8e773e1</anchor>
      <arglist>(Model *m, int d, Restraint *r0, Restraint *r1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousRestraint.html</anchorfile>
      <anchor>a0c9d2cfb5657a4b208903fefc986bfe0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousRestraint.html</anchorfile>
      <anchor>a6631fe7b8224931b83cdaee3e2dd0106</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1AmbiguousRestraint.html</anchorfile>
      <anchor>a200d640b548a3b03cf5ba036bbf44c45</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::AtomicCrossLinkMSRestraint</name>
    <filename>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>AtomicCrossLinkMSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a07990c258ec01c61235bc5f365cb673d</anchor>
      <arglist>(IMP::Model *m, double length, ParticleIndex psi, Float slope=0.0, bool part_of_log_score=false, std::string name=&quot;AtomicCrossLinkMSRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_contribution</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a379f971174248a8e9c66c8402a44e27d</anchor>
      <arglist>(const ParticleIndexPair &amp;ppi, const ParticleIndexPair &amp;sigmas)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a251c49a5fff8fa78467e0314cdfc719f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>evaluate_for_contributions</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a665598a272032c7c355c0891c166b35c</anchor>
      <arglist>(Ints c, DerivativeAccumulator *accum) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>get_contribution</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>ad3a2d2fa3c4d2f50b39ec121dac14d33</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>get_contribution_sigmas</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>ad294c62610174e2a31c1e1ac03ac9bc3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_contributions</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>aca37cb5f740efb65bd96040a43fa8578</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_psi</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a0d0c75c8ff8dc95bc2366f4e98ac0728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>aec2a097e4f76babf865a9a3485cf9faa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a3bdfbdb5463019f3e5452ee846e461a3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::BivariateFunction</name>
    <filename>classIMP_1_1isd_1_1BivariateFunction.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a7c37b4ca75b7495b64e75d79b602651c</anchor>
      <arglist>(const Floats &amp;x1, const Floats &amp;x2, DerivativeAccumulator &amp;accum) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_to_particle_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a820515ded9a817d40ca3ed1c6d4cc5c9</anchor>
      <arglist>(unsigned particle_no, double value, DerivativeAccumulator &amp;accum) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::MatrixXd</type>
      <name>get_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>ac9f23a7368be94295ffb640ecb694766</anchor>
      <arglist>(unsigned particle_no, const FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>aa00c87bf2edfebd87102812ca47a90f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_ndims_x1</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a6bb24995abad9cdb3a9db677eb1ec8a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_ndims_y</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>af2bec564c70e6f43113a890017a79894</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_number_of_optimized_particles</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a330e33e76ec19fde3bcceb6d8f46c24a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_number_of_particles</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a8ca3172e1b653229009c80388e2c516f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get_particle_is_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>aaa51974107ad5e7d52695d1f9b202827</anchor>
      <arglist>(unsigned particle_no) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::MatrixXd</type>
      <name>get_second_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a0e0fe50a4aeac2a39e3e49756abe3a70</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>has_changed</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>adec30962b873a3b7ba1581bd72d8cf45</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Floats</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a97b9c7c03b5edd24e8664be2fc37e8a3</anchor>
      <arglist>(const Floats &amp;x1, const Floats &amp;x2) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::MatrixXd</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>aedf3e3b055b25a9bc96e55af2aa5b568</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatsList</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a6d53047b784d80a70e3728f13fd7dba0</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist, bool stupid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1BivariateFunction.html</anchorfile>
      <anchor>a52ef67f8a131394183b9d570de93de39</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Covariance1DFunction</name>
    <filename>classIMP_1_1isd_1_1Covariance1DFunction.html</filename>
    <base>IMP::isd::BivariateFunction</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a2c68da81218b4a8aecb91be2d390e81d</anchor>
      <arglist>(const Floats &amp;x1, const Floats &amp;x2, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_particle_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a7408e5b3d2d139d3dc204c56632615d0</anchor>
      <arglist>(unsigned particle_no, double value, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a623bda8eafe633c4b1f02d44dc3a3583</anchor>
      <arglist>(unsigned particle_no, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>aa280e9b35f64e216d67202c92a23ba4b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_x1</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a54ff8285fe776ec4c6528ca4782aabc1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_y</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a82ce33858646d2646817c07e92bcde73</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_optimized_particles</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a8d9922d2d65936d77d983a2c193fd146</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_particles</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a00b0db3b6f68a007135c83ba43c92bc9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_particle_is_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a32800cdc269215611a42f86c5afed7f2</anchor>
      <arglist>(unsigned particle_no) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_second_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>ac3ef691c6f3be8cf3d3a59ae73bfb101</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>aa0ef9005511da100427e5fe2554e059b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_changed</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a154843055b3c5cd1ca29caab86788290</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a0b88b3861facb5451489c4aaee5ce4fb</anchor>
      <arglist>(const Floats &amp;x1, const Floats &amp;x2) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a510656862a79bb8130c13ab9768f693d</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a290ccc92fd98f9be76f8db0b33789dfb</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1Covariance1DFunction.html</anchorfile>
      <anchor>a0495a63a04b605046b717f7239c5334f</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::CrossLinkData</name>
    <filename>classIMP_1_1isd_1_1CrossLinkData.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkData.html</anchorfile>
      <anchor>a8071c058dfca7a3ede54bd84d4fa94d1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::CrossLinkMSRestraint</name>
    <filename>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CrossLinkMSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>ac48fd98ad395c0d260bafa90fbbcc2a9</anchor>
      <arglist>(IMP::Model *m, double length, bool get_log_prob=false, std::string name=&quot;CrossLinkMSRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>abe933dfb80becb18f14b89c562e34260</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>get_contribution_particle_indexes</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a8dc02b39b1ebe8e2698abbae8edf6085</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndex</type>
      <name>get_contribution_psi_index</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>aa0cde9ce4d705ad75cb6db69309cde97</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>get_contribution_sigma_indexes</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>aca287f8352a7fa0931cbdc3ba741247f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_slope</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a9b6918f3f417330e7d951fc6d23f4739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_length_variable</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>aca2df63e93f4b9b45dc8abd2e88be51f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_length</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a34777a29a219b7d1e2f53abe9ce9adc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a986efc57d63786ba4a08fcfba62b170d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>ab5fc84a1dd06aa682c78fb021cb2a97c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a920bd12a40145cb7cdbbcce711761774</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_protein1</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>abea2885b288bc93ca1614b707198c724</anchor>
      <arglist>(std::string protein1)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_source_protein1</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a32b2c477be6d3bb4d94361ba5f98bc3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_protein2</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a9482c526aafb2bf8e266cd677f1a9945</anchor>
      <arglist>(std::string protein2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_source_protein2</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a99f17bfae8dbbe8e6b29df3032a384ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_residue1</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a2e4ae52d245a747db0862a89f0c5fd17</anchor>
      <arglist>(int residue1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_source_residue1</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a9f5293f4332233e1364732c391466e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_source_residue2</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a51ddbf4e6628357b78b4c1c9dd094115</anchor>
      <arglist>(int residue2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_source_residue2</name>
      <anchorfile>classIMP_1_1isd_1_1CrossLinkMSRestraint.html</anchorfile>
      <anchor>a31a93cfd2365dc9602c42f0272f5dc0a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::CysteineCrossLinkData</name>
    <filename>classIMP_1_1isd_1_1CysteineCrossLinkData.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1CysteineCrossLinkData.html</anchorfile>
      <anchor>aaa0167f64d45b16ba8b70cf0e0094df0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::CysteineCrossLinkRestraint</name>
    <filename>classIMP_1_1isd_1_1CysteineCrossLinkRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CysteineCrossLinkRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1CysteineCrossLinkRestraint.html</anchorfile>
      <anchor>add9b9dde6bf243b14dc3abac501e4d24</anchor>
      <arglist>(Model *m, ParticleIndexAdaptor beta, ParticleIndexAdaptor sigma, ParticleIndexAdaptor epsilon, ParticleIndexAdaptor weight, CrossLinkData *data, double fexp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1CysteineCrossLinkRestraint.html</anchorfile>
      <anchor>a65b4d97153751feb3145444cc4b40f9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1CysteineCrossLinkRestraint.html</anchorfile>
      <anchor>a8df19f4dfb913e411469650d8e57e270</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1CysteineCrossLinkRestraint.html</anchorfile>
      <anchor>add26b25d35a4d8d358da9d6ae51d55ef</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Distribution</name>
    <filename>classIMP_1_1isd_1_1Distribution.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1Distribution.html</anchorfile>
      <anchor>ae84155b1f44f55662368d26109663f93</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::FNormal</name>
    <filename>classIMP_1_1isd_1_1FNormal.html</filename>
    <base>IMP::isd::OneDimensionalSufficientDistribution</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1FNormal.html</anchorfile>
      <anchor>ab8410c9218fce4ad2760123bfcfd3cf5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDimensionalSufficientDistribution</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</anchorfile>
      <anchor>a2ee25c97464ef19341c1c05fc60e32d1</anchor>
      <arglist>(std::string name=&quot;OneDimensionalSufficientDistribution %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</anchorfile>
      <anchor>a8968238e786660b376ea8bcbd38f8505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</anchorfile>
      <anchor>aed1b6cd707e079ef27f51d968764a784</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_sufficient_statistics</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</anchorfile>
      <anchor>a8c0754417ca6194cc2530086eb97a1e3</anchor>
      <arglist>(Floats vs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::FretData</name>
    <filename>classIMP_1_1isd_1_1FretData.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1FretData.html</anchorfile>
      <anchor>a017a916b9de48eccc67739937efb5ece</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::FretRestraint</name>
    <filename>classIMP_1_1isd_1_1FretRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>FretRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1FretRestraint.html</anchorfile>
      <anchor>a664fedbe9379250aaf35877a06e45a01</anchor>
      <arglist>(ParticlesTemp pd, ParticlesTemp pa, Particle *kda, Particle *Ida, Particle *R0, Particle *sigma0, Particle *Pbl, double fexp, double m_d=1.0, double m_a=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1FretRestraint.html</anchorfile>
      <anchor>a757024de47ba3f52fe2bada1c4a700f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1FretRestraint.html</anchorfile>
      <anchor>a4af90cc84ac0a1f6570c93b06c3ab2e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1FretRestraint.html</anchorfile>
      <anchor>a3476239606edc34d7bef1e107c8aeb96</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::FStudentT</name>
    <filename>classIMP_1_1isd_1_1FStudentT.html</filename>
    <base>IMP::isd::OneDimensionalSufficientDistribution</base>
    <member kind="function">
      <type></type>
      <name>FStudentT</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a3af2e5871652bd7a1b61ce1d5b6c48be</anchor>
      <arglist>(Floats FXs, Floats JXs, double FM, double sigma, double nu, std::string name=&quot;FStudentT %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FStudentT</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a6888d0bd0ad69d198b6493eb5fff9ab8</anchor>
      <arglist>(double sumFX, double sumFX2, unsigned N, double LogJX, double FM, double sigma, double nu, std::string name=&quot;FStudentT %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_derivative_FM</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a10829ca8a5a77ba2c5a8ac7daf41cfd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_derivative_Fx</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>ade76abbf5920b1fe97a6e76e0fe56d7e</anchor>
      <arglist>(double Fx) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>evaluate_derivative_FX</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a91db851d0160b4548eede9261bc41c44</anchor>
      <arglist>(const Floats FXs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_derivative_LogJX</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a4616e8368cfefd2229d58be4ebe9bcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_derivative_nu</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a0bf7052aa4be77ac6651b3cc4903c60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_derivative_sigma</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>ab1031a7c72ae91db8663649fa647e6e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_sumFX</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>aad13e84b872a86dec65e648c914ff9fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>ac83a1b7297f91c99a6af3640c2fb8555</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_cached_values</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a12e437f71b557b39a76ff401cf5160e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_sufficient_statistics</name>
      <anchorfile>classIMP_1_1isd_1_1FStudentT.html</anchorfile>
      <anchor>a28df1724d959c19297be9678d78e10c9</anchor>
      <arglist>(Floats FXs, Floats JXs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GammaPrior</name>
    <filename>classIMP_1_1isd_1_1GammaPrior.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>GammaPrior</name>
      <anchorfile>classIMP_1_1isd_1_1GammaPrior.html</anchorfile>
      <anchor>a71ca9b08ef318e6d6b4a281da24d5404</anchor>
      <arglist>(IMP::Model *m, Particle *p, Float k, Float theta, std::string name=&quot;GammaPrior%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GammaPrior.html</anchorfile>
      <anchor>acc4c61cb4e0f9f877f02fea6c5d61560</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GammaPrior.html</anchorfile>
      <anchor>a96a9b5aaedfbf00c5e302862a6aa88a7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1GammaPrior.html</anchorfile>
      <anchor>ac01abb68a0bc195823bfd8ace160c0df</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GaussianAnchorEMRestraint</name>
    <filename>classIMP_1_1isd_1_1GaussianAnchorEMRestraint.html</filename>
    <base>IMP::isd::ISDRestraint</base>
    <member kind="function">
      <type></type>
      <name>GaussianAnchorEMRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianAnchorEMRestraint.html</anchorfile>
      <anchor>aaec63c0636247965e5dc102ec8a27a4a</anchor>
      <arglist>(ParticlesTemp model_ps, Floats model_sigs, Floats model_weights, ParticlesTemp density_ps, Floats density_sigs, Floats density_weights, Particle *global_sigma, Float cutoff_dist, bool rigid, bool tabexp, std::string name=&quot;GaussianAnchorEMRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianAnchorEMRestraint.html</anchorfile>
      <anchor>a3f39abf336f7ca8e92c0fd099769552f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianAnchorEMRestraint.html</anchorfile>
      <anchor>afae1a39fb67954ea44d212bae9bf9fa1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianAnchorEMRestraint.html</anchorfile>
      <anchor>a75d685438ba9e03f1ea30a084eac9d4f</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISDRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1ISDRestraint.html</anchorfile>
      <anchor>a81f293d9dc70da0e2685bcc1dc019b67</anchor>
      <arglist>(Model *m, std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GaussianEMRestraint</name>
    <filename>classIMP_1_1isd_1_1GaussianEMRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>GaussianEMRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a0eb78928392abfa8005d8fd90676dabe</anchor>
      <arglist>(Model *mdl, ParticleIndexes model_ps, ParticleIndexes density_ps, ParticleIndex global_sigma, Float model_cutoff_dist, Float density_cutoff_dist, Float slope, bool update_model=true, bool backbone_slope=false, bool local=false, std::string name=&quot;GaussianEMRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_initial_scores</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a2f3b193dc4a444fd15c5bc81d6994f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a2d714c34387ff9b1de0eafe97d69600e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_cross_correlation_coefficient</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a790eed9bb197db482b8e948d93aab3a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_dynamic_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a40cea4833ace7ed6b5f300223abd3763</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>acc0c2d94e0f5bc28e7b0358a2fd4454f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_slope</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a5432734e95db410b7dd4a58767c8d164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>aa5ff5374157d6d1ac507e5464dbd2d0e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a9820faa683832785ad3e3e37489c351e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_density_filename</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>aa6b613b7b29595ec27a149da74f7b791</anchor>
      <arglist>(std::string density_fn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_slope</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>aef616babb7efb1e943620c03b0068a39</anchor>
      <arglist>(Float s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a63741c1cce0078770644cfdb556a8f6a</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GaussianProcessInterpolation</name>
    <filename>classIMP_1_1isd_1_1GaussianProcessInterpolation.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>GaussianProcessInterpolation</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolation.html</anchorfile>
      <anchor>a311544e5a8ddbf811c9d98d8ddffa248</anchor>
      <arglist>(FloatsList x, Floats sample_mean, Floats sample_std, unsigned n_obs, UnivariateFunction *mean_function, BivariateFunction *covariance_function, Particle *sigma, double sparse_cutoff=1e-7)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_posterior_mean</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolation.html</anchorfile>
      <anchor>a67387e99a3ae6e485d508b9d336e7034</anchor>
      <arglist>(Floats x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolation.html</anchorfile>
      <anchor>a7579ee03748476c194d3664e42772666</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GaussianProcessInterpolationRestraint</name>
    <filename>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>GaussianProcessInterpolationRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a0f80da67a5f7bf01537ad983178e1e0f</anchor>
      <arglist>(Model *m, GaussianProcessInterpolation *gpi)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a84c859348e809699d91afebe3148bfbc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>get_hessian</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a6f5420e0546a34dec56795d33436bd92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_hessian</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a338883c219bc1d19b9c6b932f2a6a909</anchor>
      <arglist>(bool unused) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_logdet_hessian</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a9c2b64ee8aec59867c2698173395e577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_minus_log_normalization</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>ae3fb09f9bdda214641886c367c597bfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a67c6ae89a2a5b964d0a88e9dbe0d3bf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a57f8ab9fd3795a62f3fa83e71ba5c609</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cg</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a1cf68092744a4e6a62d298432a65bb1c</anchor>
      <arglist>(bool use, double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianProcessInterpolationRestraint.html</anchorfile>
      <anchor>a829af0f56c50724905be43fc37f68cb0</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GaussianRestraint</name>
    <filename>classIMP_1_1isd_1_1GaussianRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>GaussianRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianRestraint.html</anchorfile>
      <anchor>afda3b0e771a0696d5944ff5809dabef5</anchor>
      <arglist>(Particle *x, Particle *mu, Particle *sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianRestraint.html</anchorfile>
      <anchor>ac75b17f613c3d63e26a1d0fa8dfea2c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianRestraint.html</anchorfile>
      <anchor>a7856c91b062a7ffd2043e0459b6f87e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1GaussianRestraint.html</anchorfile>
      <anchor>a66153ac6d641c2db7f6d5b9617a2cc08</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::GeneralizedGuinierPorodFunction</name>
    <filename>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</filename>
    <base>IMP::isd::UnivariateFunction</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a6b61078b73647b415a7ebc29bf13395f</anchor>
      <arglist>(const Floats &amp;x, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_particle_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a25eaee8f23f1bafbb1c060af608a6660</anchor>
      <arglist>(unsigned particle_no, double value, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a6e55e1be2f74d3ea0f1506f5afa9ed8f</anchor>
      <arglist>(const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>get_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a0f4155318e6bb94eb1e73b6a26dae9e0</anchor>
      <arglist>(unsigned particle_no, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a04e3e41fa9baacba912caf1b9e3e6b3a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_x</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a48239575d701bf0f8ddd6f7ab582e309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_y</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a112eb6d395151c487cff510429a6ddaf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_optimized_particles</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a2add12561c254a63837e401f8f926f21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_particles</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>acf7ec6fe8a22f07d22dce4fdbdff4ebb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_particle_is_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a7d2616c0b976a60c77a997bf695a1b80</anchor>
      <arglist>(unsigned particle_no) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>acde959f7213253f62797d1aaa2c2f2d9</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a6620102a2d915d96d99bfdb2bc32fbbf</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a778379890331be73f65b85d7825b78b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_changed</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>ae20621f78cead7aa52ed6b219f7bbf22</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>aa16c9fe1b39ef9ba1e29579fde4a7bd4</anchor>
      <arglist>(const Floats &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a2f4a93dfea7ae612866d7612946f6b21</anchor>
      <arglist>(const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a126615af801b7e904d18619d9ace8004</anchor>
      <arglist>(const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1GeneralizedGuinierPorodFunction.html</anchorfile>
      <anchor>a6b3fcb56b64e7001b1e20b963440e1d5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::HybridMonteCarlo</name>
    <filename>classIMP_1_1isd_1_1HybridMonteCarlo.html</filename>
    <base>IMP::core::MonteCarlo</base>
    <member kind="function">
      <type>double</type>
      <name>do_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1HybridMonteCarlo.html</anchorfile>
      <anchor>ae376147c0308d939edc007c08d3298b8</anchor>
      <arglist>(const ParticleIndexes &amp;, bool) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1isd_1_1HybridMonteCarlo.html</anchorfile>
      <anchor>ae87cfbc49ce2a93cd2a99a7cb8750a85</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1HybridMonteCarlo.html</anchorfile>
      <anchor>a1a40e2761e4b8e891798a08d1c544de5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::ISDRestraint</name>
    <filename>classIMP_1_1isd_1_1ISDRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1ISDRestraint.html</anchorfile>
      <anchor>afd738f02217b1be15207e4db51f2bec6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1ISDRestraint.html</anchorfile>
      <anchor>ada418319542534a9efa592d3714fdf69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1ISDRestraint.html</anchorfile>
      <anchor>a049a1f5ecca33d312b2f39cb3a3bcc16</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::JeffreysRestraint</name>
    <filename>classIMP_1_1isd_1_1JeffreysRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>JeffreysRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1JeffreysRestraint.html</anchorfile>
      <anchor>a7fd2640d18677c4148ee4c0f1f32c0ca</anchor>
      <arglist>(Model *m, Particle *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1JeffreysRestraint.html</anchorfile>
      <anchor>a9f8014cbdeb69a415eedffa8e50e5e30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1JeffreysRestraint.html</anchorfile>
      <anchor>a7698d67995bf5286c5c57fa4562f1498</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1JeffreysRestraint.html</anchorfile>
      <anchor>aa056f21cf8831286085557903204021b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Linear1DFunction</name>
    <filename>classIMP_1_1isd_1_1Linear1DFunction.html</filename>
    <base>IMP::isd::UnivariateFunction</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>aa4e02bcb4d3e90a305ace16f10bb644f</anchor>
      <arglist>(const Floats &amp;x, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_particle_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a5fceb3c466c7a9eb43a6b21ad0fb43fc</anchor>
      <arglist>(unsigned particle_no, double value, DerivativeAccumulator &amp;accum) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a8c890c38a035cedbcfc316e702b4cbde</anchor>
      <arglist>(const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>get_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a595685829903157b1021bbe7708a2147</anchor>
      <arglist>(unsigned particle_no, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a7e80e01e9ccdc9e4bc0033ff8fb0e42b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_x</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>ae8d6f4d7d6af94c0f4aaf4c9964d5713</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_ndims_y</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>af36662f610ef147fc04194bdc03a605d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_optimized_particles</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a6c5102b50ea3579206a695595e2714fa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_particles</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a174fb6ff9ee192ea23edc5bc89c75163</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_particle_is_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a3376bfb024ea4cf6e17ad3674757f1c6</anchor>
      <arglist>(unsigned particle_no) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>ad0bb85aac999a22abeee3fa33cc2f66e</anchor>
      <arglist>(unsigned, unsigned, const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a82be18257270ce639d08fa578824404e</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a4c634a3f434fa35a6cb7ea4846689e3c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_changed</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>aabaf174d0989f57ba1e05639ad154753</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>ad85b3e0e19b5fbe680859be68e352839</anchor>
      <arglist>(const Floats &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>a503088562347dfb918fc3a457cb48a2e</anchor>
      <arglist>(const FloatsList &amp;xlist) const override</arglist>
    </member>
    <member kind="function">
      <type>FloatsList</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>abded4a0c70580cf5be0f86ec961a159a</anchor>
      <arglist>(const FloatsList &amp;xlist, bool) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1Linear1DFunction.html</anchorfile>
      <anchor>af1a8da340ec1fc05fd6e4bd6ac4dd7d4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::LognormalAmbiguousRestraint</name>
    <filename>classIMP_1_1isd_1_1LognormalAmbiguousRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>LognormalAmbiguousRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalAmbiguousRestraint.html</anchorfile>
      <anchor>a09553c941450ad26fa09b1b90450c192</anchor>
      <arglist>(Particle *p1, Particle *p2, Particle *ki, Particle *sigmaG)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalAmbiguousRestraint.html</anchorfile>
      <anchor>ab3226d23151104b170cda20d3e694120</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalAmbiguousRestraint.html</anchorfile>
      <anchor>a4ef51ae9d5511f264e968acf6334dbf6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalAmbiguousRestraint.html</anchorfile>
      <anchor>af4153df0828a73d2a0d577e1e0b797e0</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::LognormalRestraint</name>
    <filename>classIMP_1_1isd_1_1LognormalRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>LognormalRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalRestraint.html</anchorfile>
      <anchor>aa5db113e1cc315195b5b366c169b17d8</anchor>
      <arglist>(Particle *x, Particle *mu, Particle *sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalRestraint.html</anchorfile>
      <anchor>a7e2eddafbbd34bb697a7ce1ef6cd86b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalRestraint.html</anchorfile>
      <anchor>a6dfbee049b8cb072984aea43b80ffb96</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1LognormalRestraint.html</anchorfile>
      <anchor>a3e16552fc121f3c1eaa8b7d8962c3cd1</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::LogWrapper</name>
    <filename>classIMP_1_1isd_1_1LogWrapper.html</filename>
    <base>IMP::RestraintSet</base>
    <member kind="function">
      <type></type>
      <name>LogWrapper</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>ac64e889a779fc898bcd1cd8515720d5b</anchor>
      <arglist>(Model *m, double weight, const std::string &amp;name=&quot;LogWrapper %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogWrapper</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>a830ac7d9979b0e23e4406798917e44c0</anchor>
      <arglist>(Model *m, const std::string &amp;name=&quot;LogWrapper %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LogWrapper</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>ab64738348fcc61b8a2307745661b5d65</anchor>
      <arglist>(const RestraintsTemp &amp;rs, double weight, const std::string &amp;name=&quot;LogWrapper %1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>a2c9fd90c2ca0b92fdef8eccba537d29e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>ada7b9bc774a767f19c3fd501cde96ce1</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate_moved</name>
      <anchorfile>classIMP_1_1isd_1_1LogWrapper.html</anchorfile>
      <anchor>ad116b4df7deaf22fef866901f1d83404</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum, const ParticleIndexes &amp;moved_pis, const ParticleIndexes &amp;reset_pis) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::MarginalHBondRestraint</name>
    <filename>classIMP_1_1isd_1_1MarginalHBondRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MarginalHBondRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalHBondRestraint.html</anchorfile>
      <anchor>a0dfee9ec239f1ee02d1dd6c63e898226</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalHBondRestraint.html</anchorfile>
      <anchor>af9bdc8674be46d6a0e14ac76fd24928c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalHBondRestraint.html</anchorfile>
      <anchor>a108bd8c4a940cb8d3a90adf17cf1f60b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalHBondRestraint.html</anchorfile>
      <anchor>adb928578ffe2edd46f9c983ae6e134b9</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::MarginalNOERestraint</name>
    <filename>classIMP_1_1isd_1_1MarginalNOERestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>MarginalNOERestraint</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalNOERestraint.html</anchorfile>
      <anchor>aba5e67e02e0989d7d49e47da3eeebad1</anchor>
      <arglist>(Model *m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalNOERestraint.html</anchorfile>
      <anchor>a2a38c2079f044064683daa1d0f89f8ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalNOERestraint.html</anchorfile>
      <anchor>ae46fc18bbcff68355f91916916aea9c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1MarginalNOERestraint.html</anchorfile>
      <anchor>a6f9da09b5e8aba44e15847237367d252</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::MolecularDynamics</name>
    <filename>classIMP_1_1isd_1_1MolecularDynamics.html</filename>
    <base>IMP::atom::MolecularDynamics</base>
    <member kind="function">
      <type></type>
      <name>MolecularDynamics</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>ab2fad5b20bbb4604be901b18d47836c1</anchor>
      <arglist>(Model *m=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_velocities</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>a753c9fb7aa17c96e2c5e43e271553c65</anchor>
      <arglist>(Float temperature) override</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_kinetic_energy</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>a33ac1236ae6fc250cd17875a023810b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>get_is_simulation_particle</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>aa3d100c48a9ad5f273b13c3663d59b12</anchor>
      <arglist>(ParticleIndex pi) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagate_coordinates</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>a7a9bbf5967685b0841f7fe7cb388cc6f</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>propagate_velocities</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>a12b6112b9dfd767ed087e97a760935e8</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatKey</type>
      <name>vnuis_</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamics.html</anchorfile>
      <anchor>a81dfdf3ad5913c646287b12bce1cb9af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::MolecularDynamicsMover</name>
    <filename>classIMP_1_1isd_1_1MolecularDynamicsMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamicsMover.html</anchorfile>
      <anchor>a2e12f54855c0825ec54df55f1ed2763b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamicsMover.html</anchorfile>
      <anchor>a1099813ae32cc8f3d33d4a105c792c62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamicsMover.html</anchorfile>
      <anchor>aae4eda55d57055231276f8c5c04a6a4c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1isd_1_1MolecularDynamicsMover.html</anchorfile>
      <anchor>af758363a11894282f6993939fbd5d174</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::MultivariateFNormalSufficient</name>
    <filename>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>MultivariateFNormalSufficient</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a328e0d438116607fffb71e97d9fea1a6</anchor>
      <arglist>(const Eigen::MatrixXd &amp;FX, double JF, const Eigen::VectorXd &amp;FM, const Eigen::MatrixXd &amp;Sigma, double factor=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultivariateFNormalSufficient</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a769cc303dd83795a7664386d70afb788</anchor>
      <arglist>(const Eigen::VectorXd &amp;Fbar, double JF, const Eigen::VectorXd &amp;FM, int Nobs, const Eigen::MatrixXd &amp;W, const Eigen::MatrixXd &amp;Sigma, double factor=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>density</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>acbd05147db836ddf6269d27c3f0c14c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a9a4e360e363d86b7f81a3517d1bf0cde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_derivative_factor</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a58020bf9c13dfb02098b93136b48aafa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>evaluate_derivative_FM</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>aa903bf2f09f498ff1fee7481f28bdd16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>evaluate_derivative_Sigma</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a3a8125b7a6e0f111c7450adb03854efe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>evaluate_second_derivative_FM_FM</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a1c0af5f4df307b50dc5de3faf8e5d821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>evaluate_second_derivative_FM_Sigma</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a9e0773805b21918e3a61a4a1dac83607</anchor>
      <arglist>(unsigned l) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>evaluate_second_derivative_Sigma_Sigma</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>aeae6c26f89fca4a8f87c98d72f85484f</anchor>
      <arglist>(unsigned k, unsigned l) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_log_generalized_variance</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a51eeade8d3bc661092778b5eaf5590b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_square_residuals</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>afe8d2db3e9a125d5cdc57fbff80f3163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_minus_exponent</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>ac469de1c0617786175c5ad823f2e2011</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_minus_log_normalization</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a49726708d5ce83917e0e083b8d3f1b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_Sigma_condition_number</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>af86128bb9992c7d0c3e6b5427102b9b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>get_Sigma_eigenvalues</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a02552b824b5ee5dd3de28a55d33653d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a588661042d20576ef04971d32c5b1f4f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_flags</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>ac98c7ba7cb4e252d56171476d4bcb9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cg</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>aedd303118968db40c27f92c8c06ca59d</anchor>
      <arglist>(bool use, double tol)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::MatrixXd</type>
      <name>solve</name>
      <anchorfile>classIMP_1_1isd_1_1MultivariateFNormalSufficient.html</anchorfile>
      <anchor>a63d59a94571e2946d59188123473b4bb</anchor>
      <arglist>(Eigen::MatrixXd B) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::NOERestraint</name>
    <filename>classIMP_1_1isd_1_1NOERestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>NOERestraint</name>
      <anchorfile>classIMP_1_1isd_1_1NOERestraint.html</anchorfile>
      <anchor>a0c13662a90c8de1ce4d40456347ea73c</anchor>
      <arglist>(Model *m, Particle *p0, Particle *p1, Particle *sigma, Particle *gamma, double Iexp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1NOERestraint.html</anchorfile>
      <anchor>ac41068b88bb403682816a963240fb64d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1NOERestraint.html</anchorfile>
      <anchor>a734bb1f0bcd661c74db055985e8b6ef8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1NOERestraint.html</anchorfile>
      <anchor>a07b09fa4581b54a3e0e6ed60258d3b00</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::NormalSigmaPCRestraint</name>
    <filename>classIMP_1_1isd_1_1NormalSigmaPCRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1NormalSigmaPCRestraint.html</anchorfile>
      <anchor>a28675ed5b7735d8e203c8138089357d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1NormalSigmaPCRestraint.html</anchorfile>
      <anchor>ac2346432e6d4336d15629da25fcc1f09</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1NormalSigmaPCRestraint.html</anchorfile>
      <anchor>a699262d358ab282eb92ce86fdf07810f</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Nuisance</name>
    <filename>classIMP_1_1isd_1_1Nuisance.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>bool</type>
      <name>get_has_lower</name>
      <anchorfile>classIMP_1_1isd_1_1Nuisance.html</anchorfile>
      <anchor>a42ff92ff683f81bdf14b5177da9ef927</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Nuisance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Nuisance.html</anchorfile>
      <anchor>ac86cd1243edb27bf5836913a7ee47c1f</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Nuisance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Nuisance.html</anchorfile>
      <anchor>aabf6195915b7373bad22698c0f0cbfd8</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Nuisance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Nuisance.html</anchorfile>
      <anchor>a5389f5dd742255e89ad0f6169b21d0c5</anchor>
      <arglist>(Model *m, ParticleIndex pi, double nuisance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Nuisance</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Nuisance.html</anchorfile>
      <anchor>a0e8e2a9e009a51ec26838fee36ca1814</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double nuisance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::OneDimensionalDistribution</name>
    <filename>classIMP_1_1isd_1_1OneDimensionalDistribution.html</filename>
    <base>IMP::isd::Distribution</base>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalDistribution.html</anchorfile>
      <anchor>a48493e7204131192df180f7d0b0c5077</anchor>
      <arglist>(double v) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalDistribution.html</anchorfile>
      <anchor>af72dc26a604fe5c08c6317b2353dd1b6</anchor>
      <arglist>(const Floats &amp;vs) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalDistribution.html</anchorfile>
      <anchor>a85422e33d1d65a7877bb1d5824e48e6f</anchor>
      <arglist>(double v) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalDistribution.html</anchorfile>
      <anchor>a1f62173a957a7ac7bf8ded3f3f912841</anchor>
      <arglist>(const Floats &amp;vs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalDistribution.html</anchorfile>
      <anchor>ac49cc9ac2adfcbe5d81aa949b09510be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::OneDimensionalSufficientDistribution</name>
    <filename>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</filename>
    <base>IMP::isd::Distribution</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1OneDimensionalSufficientDistribution.html</anchorfile>
      <anchor>aeda7c1561ee5d6512bf0d5f05bd9f2a6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::PenalizedComplexityPrior</name>
    <filename>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</filename>
    <base>IMP::isd::OneDimensionalSufficientDistribution</base>
    <member kind="function">
      <type></type>
      <name>PenalizedComplexityPrior</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a08c9a44e5bf7b757a8bad634c1c0a008</anchor>
      <arglist>(double Dxi, double Jxi, double alpha, std::string name=&quot;PenalizedComplexityPrior %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_derivative_alpha</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a2e1ee0dd76e4a00347370cb36a8a820d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_derivative_Dxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>ac583ebb01990951775a951ebb261febd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_derivative_Jxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a3b0946e2f6067b0d6ae560828c3faa4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_derivative_xi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>ad3753277be18965641dff50f5931e572</anchor>
      <arglist>(double JJxi) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_alpha</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>ab3382e17addfeb8d46dfc86939462f3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_Dxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>aeb68a8f1f07ea79a564bce4e6d390fa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_Jxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>abe187ba3f547dc373749cfed9f478fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a2914910aeb598b48dfa221969793b933</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_alpha</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a037d5da977fe4c2d61f85243ab5a0e2e</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Dxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a4e94537794bf350281f8cf6d936735ac</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Jxi</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>aea3f111a8ac90e60bbc850f37b530b2a</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_sufficient_statistics</name>
      <anchorfile>classIMP_1_1isd_1_1PenalizedComplexityPrior.html</anchorfile>
      <anchor>a692b0dfb120f1d72472e9b6d21b10bc3</anchor>
      <arglist>(Floats Dxis, Floats Jxis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::RepulsiveDistancePairScore</name>
    <filename>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>ad8eec531953f0ff4410c1b5728a71894</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>a233514c128e53115db6fa9bf7a158cbe</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>ab6f109378a60ae3a4d85fe22d1e3c488</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>acbdd706994886e1958a41b1f45c42b1e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>abf212c99e0e4de5140211ca32a49a375</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>ad20c2d899619739bdc51bf6488c41212</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1RepulsiveDistancePairScore.html</anchorfile>
      <anchor>a5f952e83093b5e2776c2ea185eadb688</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::ResidueProteinProximityRestraint</name>
    <filename>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>ResidueProteinProximityRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>ab8e616753a1ec8c987330644b3b657c1</anchor>
      <arglist>(Model *m, double cutoff=6.0, double sigma=3.0, double xi=0.5, bool part_of_log_score=false, std::string name=&quot;ResidueProteinProximityRestraint_%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>a3cbeb862590d87650d926740796b4af9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_for_contributions</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>adb370e5fdb24594fb2d22a38e94b42cf</anchor>
      <arglist>(Ints c) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_contributions</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>af35ae6ea37f0d95f7285a1e639bc7af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>ae8c6be4f2330226cc7773ad97acd4adc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>a68570e1d9ece86c1a7cbb5581e6c6a19</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Scale</name>
    <filename>classIMP_1_1isd_1_1Scale.html</filename>
    <base>IMP::isd::Nuisance</base>
    <member kind="function" static="yes">
      <type>static Scale</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Scale.html</anchorfile>
      <anchor>aadab22db4f26f34f6623348be012dbb6</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scale</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Scale.html</anchorfile>
      <anchor>a8d621153a696a891d3541d4e7d31b101</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scale</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Scale.html</anchorfile>
      <anchor>a10900f39652f84d5f017a02bf95218bb</anchor>
      <arglist>(Model *m, ParticleIndex pi, double scale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scale</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Scale.html</anchorfile>
      <anchor>a0314030a246fa5d3520b8f5d2b75fd3f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double scale)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::StudentTRestraint</name>
    <filename>classIMP_1_1isd_1_1StudentTRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1StudentTRestraint.html</anchorfile>
      <anchor>abe3d077031b1fe80ea372f0044e47be7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1isd_1_1StudentTRestraint.html</anchorfile>
      <anchor>af974d37af3efb76bb58866eb608d886a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1StudentTRestraint.html</anchorfile>
      <anchor>a9e05e9582094951095d8446dae32f3c7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1StudentTRestraint.html</anchorfile>
      <anchor>a70fd39b54c647f2fafab289829c63efc</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Switching</name>
    <filename>classIMP_1_1isd_1_1Switching.html</filename>
    <base>IMP::isd::Nuisance</base>
    <member kind="function" static="yes">
      <type>static Switching</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Switching.html</anchorfile>
      <anchor>a42235fccf7f0610cd78f330ed558545d</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Switching</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Switching.html</anchorfile>
      <anchor>a36ee737a6372bea9c105a99172fde250</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Switching</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Switching.html</anchorfile>
      <anchor>ab3eec443cb4610e92bdbd8d0025454f1</anchor>
      <arglist>(Model *m, ParticleIndex pi, double switching)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Switching</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Switching.html</anchorfile>
      <anchor>a8c6c00ef202c3cd73d1a03d71dddfcc4</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double switching)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::TALOSRestraint</name>
    <filename>classIMP_1_1isd_1_1TALOSRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>TALOSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>a9380dc92734b9ef0caf86e147a824327</anchor>
      <arglist>(Model *m, Particles p, Floats data, Particle *kappa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TALOSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>abf693b735da47c6bcc3a61db2912992c</anchor>
      <arglist>(Model *m, Particle *p1, Particle *p2, Particle *p3, Particle *p4, Floats data, Particle *kappa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TALOSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>a6b861685d3d09f98cefdedd574c2213b</anchor>
      <arglist>(Model *m, Particles p, unsigned N, double R0, double chiexp, Particle *kappa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TALOSRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>a5c75d74c5f13ba09658c2ab3c5e6b9d2</anchor>
      <arglist>(Model *m, Particle *p1, Particle *p2, Particle *p3, Particle *p4, unsigned N, double R0, double chiexp, Particle *kappa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>aa7d7bd38678033ae28218fe516082263</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>a4f75a86bc726a143db29774880dac51a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>ae9949b36ba73a255d18344fc28cba7ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSRestraint.html</anchorfile>
      <anchor>ab19cab91da71f4471d129dc9a01a06a5</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::UniformPrior</name>
    <filename>classIMP_1_1isd_1_1UniformPrior.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>UniformPrior</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>a976a36f2cc0f943a2deb9be35dc4bde0</anchor>
      <arglist>(IMP::Model *m, Particle *p, double k, double upperb, double lowerb, std::string name=&quot;UniformPrior%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>a9f4fd5219e9f15e0c05266d72d7d2e71</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_dynamic_info</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>abcef5f2db468cc20575a281bc283e4e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>ae78dbc6906bed4f6a979d2b1644fd443</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>a988edba183182c6422701addf7c2bedd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1UniformPrior.html</anchorfile>
      <anchor>a75297269fd1cc190cec3c72de93f0a22</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::UnivariateFunction</name>
    <filename>classIMP_1_1isd_1_1UnivariateFunction.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_to_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>afe6f16c49b043203baa74ea289b1dbbb</anchor>
      <arglist>(const Floats &amp;x, DerivativeAccumulator &amp;accum) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add_to_particle_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a79ae543aef5c6911c2ef4c99b1d27ffd</anchor>
      <arglist>(unsigned particle_no, double value, DerivativeAccumulator &amp;accum) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatsList</type>
      <name>get_derivative_matrix</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a608345fd0246caeb099ff1b71d77c2a1</anchor>
      <arglist>(const FloatsList &amp;xlist, bool stupid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>get_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a0d7539ffa7438b63fde0e341bf2f548e</anchor>
      <arglist>(unsigned particle_no, const FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>acd56785bf375854c654f3641fd59a2cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_ndims_x</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a2eac78edb9817fc610680a4303efad42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_ndims_y</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a074fae5c700c659b492b20812db59a00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_number_of_optimized_particles</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a06d55c6f94bdea71c7d067397c2f06a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>get_number_of_particles</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>af95993becb0f1f0210800d1fff9334fa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>get_particle_is_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a8f8fce9fc7c8a0213e66995a66b94ab1</anchor>
      <arglist>(unsigned particle_no) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>ac5e6f47f3308653ca43ae2f4aa9761be</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatsList</type>
      <name>get_second_derivative_vector</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a1fbf154d3098429688ea16872da1bd2b</anchor>
      <arglist>(unsigned particle_a, unsigned particle_b, const FloatsList &amp;xlist, bool stupid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>has_changed</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>af4c9cf4e87de031da7a3956900d0e0cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Floats</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a8d2beb1d5226f6e4853d8ef43f3c82b0</anchor>
      <arglist>(const Floats &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Eigen::VectorXd</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>adfc624b07b1f84a186cfe0767ac48b6f</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FloatsList</type>
      <name>operator()</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>a40f6e6f6e0e9a4190a4c66ba275891ae</anchor>
      <arglist>(const IMP::FloatsList &amp;xlist, bool stupid) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1UnivariateFunction.html</anchorfile>
      <anchor>adedd9b32b208f5761ad231c4cd18f774</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::vonMises</name>
    <filename>classIMP_1_1isd_1_1vonMises.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1vonMises.html</anchorfile>
      <anchor>a34a9c740f20819cb258919916b1e5c60</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::vonMisesKappaConjugateRestraint</name>
    <filename>classIMP_1_1isd_1_1vonMisesKappaConjugateRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>vonMisesKappaConjugateRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaConjugateRestraint.html</anchorfile>
      <anchor>aef317fae8c79edf55fcd52e27ae4cbed</anchor>
      <arglist>(Model *m, Particle *kappa, double c=10.0, double R0=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaConjugateRestraint.html</anchorfile>
      <anchor>a5f407b926451635dd4c8a0e342bedd21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaConjugateRestraint.html</anchorfile>
      <anchor>a8ec075f4b2700e0509016dc207e1426c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaConjugateRestraint.html</anchorfile>
      <anchor>a48a1a8437589533623159b7e86cea776</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::vonMisesKappaJeffreysRestraint</name>
    <filename>classIMP_1_1isd_1_1vonMisesKappaJeffreysRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>vonMisesKappaJeffreysRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaJeffreysRestraint.html</anchorfile>
      <anchor>a135d6e7cd90c8ba7b42bebba6d5fe355</anchor>
      <arglist>(Model *m, Particle *kappa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaJeffreysRestraint.html</anchorfile>
      <anchor>aa9a464939f153ce81a56e060005d5b03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaJeffreysRestraint.html</anchorfile>
      <anchor>ae2c835da17d0d8c745f41acdd4ea78ee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesKappaJeffreysRestraint.html</anchorfile>
      <anchor>af18a7e717f53cda60766968cb55febe9</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::vonMisesSufficient</name>
    <filename>classIMP_1_1isd_1_1vonMisesSufficient.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>vonMisesSufficient</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesSufficient.html</anchorfile>
      <anchor>acefc8f8e4d3c4dbcf48157c97561c605</anchor>
      <arglist>(double chi, unsigned N, double R0, double chiexp, double kappa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vonMisesSufficient</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesSufficient.html</anchorfile>
      <anchor>abf57b108985851dc2bc96bd964cb101b</anchor>
      <arglist>(double chi, Floats obs, double kappa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesSufficient.html</anchorfile>
      <anchor>adea29aa6c99474e438f30b6cfc26ec8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Floats</type>
      <name>get_sufficient_statistics</name>
      <anchorfile>classIMP_1_1isd_1_1vonMisesSufficient.html</anchorfile>
      <anchor>a1a493c43cee11886ab5ca4b091207365</anchor>
      <arglist>(Floats data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Weight</name>
    <filename>classIMP_1_1isd_1_1Weight.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_weight_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a5011bbab25979e157b8facacf7b13295</anchor>
      <arglist>(int i, Float dwi, const DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_to_weights_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>adf3c062686fa4344880e07cadca76a60</anchor>
      <arglist>(const algebra::VectorKD &amp;dw, const DerivativeAccumulator &amp;da)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_weight</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ad3bbffa1c10c14978aaca211992698a6</anchor>
      <arglist>(Float wi=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_weight_lazy</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>acf32f4f34efd1002a3f14c7288348467</anchor>
      <arglist>(Float wi=0)</arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_number_of_weights</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>adb445b265b18929cf45a1d327b38376b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::UnitSimplexKD</type>
      <name>get_unit_simplex</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a920b97218d9fd9e9c29439feb4209e04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a18cf1e611ad40cb6e8853660ddc09d87</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_weight_derivative</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a1f05d2e45bde24edfb77ba5888d331a4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>FloatKeys</type>
      <name>get_weight_keys</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>aabcafe82a9685fce188d99234f02038a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_weights</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a5d7e3870a55d08b5b6bc55cbec0072c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_weights_are_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ab29b8f9a9685e5bd896fb77d9df4b27d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKD</type>
      <name>get_weights_derivatives</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>adb9a6e140891c2997d5e3531441412a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_weights</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ab6c8965dab447938f751e99dbb53493e</anchor>
      <arglist>(Int nweights)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_weights_lazy</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a45bead89e10a6a3bf61ef1c31df7c634</anchor>
      <arglist>(Int nweights)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weight_lazy</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ac6d29979bc9374792a9c12ffef9af52d</anchor>
      <arglist>(int i, Float wi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weights</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a781883346d085290b76a34ee944eef34</anchor>
      <arglist>(const algebra::VectorKD &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weights_are_optimized</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a7d612ce77a06e9ef1e2c574221e81883</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_weights_lazy</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a234fe8c672f0413da64abe3029ae1e23</anchor>
      <arglist>(const algebra::VectorKD &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_number_of_weights_key</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a9220f7191bf51f72b2062c0830d3ebe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_weight_key</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>af7c7d6e255c900a6ded227d2ee78ab2a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ad65d141fc4f7dc06e2c5b6dc841f00e0</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>af2db650ff6cf15033745008b9af1d4d2</anchor>
      <arglist>(IMP::ParticleAdaptor pa)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ab0e3254cf9b6d9b59dbf4ec6f1807211</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Int nweights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a444c8c0b694dc51c882ae3f116dfa4f2</anchor>
      <arglist>(Model *m, ParticleIndex pi, Int nweights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>a4430bddeaede83941b07c56b88bd6a4c</anchor>
      <arglist>(Model *m, ParticleIndex pi, const algebra::VectorKD &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weight</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1isd_1_1Weight.html</anchorfile>
      <anchor>ab67a7c287aa12e9505039ded8d82a5eb</anchor>
      <arglist>(IMP::ParticleAdaptor pa, const algebra::VectorKD &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::WeightMover</name>
    <filename>classIMP_1_1isd_1_1WeightMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>WeightMover</name>
      <anchorfile>classIMP_1_1isd_1_1WeightMover.html</anchorfile>
      <anchor>a011184e1e7ce1319f4bea6a90ed82f22</anchor>
      <arglist>(Particle *w, Float radius)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1WeightMover.html</anchorfile>
      <anchor>a5a48116cb40437548ac24b1d258f4f2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1WeightMover.html</anchorfile>
      <anchor>ad87b9ae89ba3ffa7f133b448fbeb0932</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1isd_1_1WeightMover.html</anchorfile>
      <anchor>a3d6dac949251d74cd634b1a512bfc003</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1isd_1_1WeightMover.html</anchorfile>
      <anchor>ac48c66419726ae3cd36890e753c5b87a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::WeightRestraint</name>
    <filename>classIMP_1_1isd_1_1WeightRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>WeightRestraint</name>
      <anchorfile>classIMP_1_1isd_1_1WeightRestraint.html</anchorfile>
      <anchor>a64a0f5b696b1a1d2521e0bacaac34181</anchor>
      <arglist>(Particle *w, Float wmin, Float wmax, Float kappa)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1isd_1_1WeightRestraint.html</anchorfile>
      <anchor>a81c9692ae73bbbb8a04e9690a759888a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1isd_1_1WeightRestraint.html</anchorfile>
      <anchor>af604df12728b1edd56a3ad16e76dbd5c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1isd_1_1WeightRestraint.html</anchorfile>
      <anchor>a16b2a7e76045ef6dea9bc04507548c05</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Analysis::Analysis</name>
    <filename>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_data</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>adc081eb34f85e024cdad577078a2bca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_entry</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a787b7a868910e02577c26bcee0abeeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>dump</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a7a03448c1200f4a642ad4ed00d40a8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>histogram</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a1eeb4e5404bac2b0a10770045dd130f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a4b6e9d0c729502c8980704ded61f4f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_AMBER_stats</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a1eddf39256b78b0a400d7a2ad02991e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_AMBER_variables</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a56b07a9abe1a9717f8f4eb307957d611</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_stats</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>a4aeb3b2d0b66251c1a3f266e536723cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_variables</name>
      <anchorfile>classIMP_1_1isd_1_1Analysis_1_1Analysis.html</anchorfile>
      <anchor>ad20c00b43b2b0c6483cca490b4e980a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::demux_trajs::Demuxer</name>
    <filename>classIMP_1_1isd_1_1demux__trajs_1_1Demuxer.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::isd::demux_trajs::LogHolder</name>
    <filename>classIMP_1_1isd_1_1demux__trajs_1_1LogHolder.html</filename>
    <member kind="function">
      <type>def</type>
      <name>items</name>
      <anchorfile>classIMP_1_1isd_1_1demux__trajs_1_1LogHolder.html</anchorfile>
      <anchor>aae6b53eb3d2e856220db5a7e0c332b0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::Entry</name>
    <filename>namespaceIMP_1_1isd_1_1Entry.html</filename>
    <class kind="class">IMP::isd::Entry::Entry</class>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Entry::Entry</name>
    <filename>classIMP_1_1isd_1_1Entry_1_1Entry.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::gmm_tools</name>
    <filename>namespaceIMP_1_1isd_1_1gmm__tools.html</filename>
    <member kind="function">
      <type>def</type>
      <name>decorate_gmm_from_text</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>a1eb1c592fe9353a7db13f4096451aa6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>draw_points</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>a9a2e2033332e280025b24548fb79e265</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>fit_dirichlet_gmm_to_points</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>a345dd1ef1ddf3c5ca7a890960c1b0875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>fit_gmm_to_points</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>a0d3ab9a9e7516f9af799ad5ae02dad7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_gmm_to_map</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>afbeccdc36e243bd23ad273c232f4cbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_gmm_to_text</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>acbaa32252dc7ab080d489a6095f4895f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_sklearn_gmm_to_map</name>
      <anchorfile>namespaceIMP_1_1isd_1_1gmm__tools.html</anchorfile>
      <anchor>a2ec2082ebbcc36d530fedd182081ba20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::History</name>
    <filename>namespaceIMP_1_1isd_1_1History.html</filename>
    <class kind="class">IMP::isd::History::History</class>
  </compound>
  <compound kind="class">
    <name>IMP::isd::History::History</name>
    <filename>classIMP_1_1isd_1_1History_1_1History.html</filename>
    <member kind="function">
      <type>def</type>
      <name>sanity_check</name>
      <anchorfile>classIMP_1_1isd_1_1History_1_1History.html</anchorfile>
      <anchor>a57a44ed56bbca63b871ab7a577a2f8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>toc</name>
      <anchorfile>classIMP_1_1isd_1_1History_1_1History.html</anchorfile>
      <anchor>a56036020422adc03be2c6dae4b36032c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::shared_functions::sfo_common</name>
    <filename>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</filename>
    <member kind="function">
      <type>def</type>
      <name>do_md_protein_statistics</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a71692253692920c7760f71e410560118</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>find_atom</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>ad39dfad3d85b100e980ec06c567fb76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_pdb</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>afe88d5efb99dc4f34b47fb068ad451e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_ambiguous_NOE_restraint</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a64806cda0de32c4fbed52c8ed00a6d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_base</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a3987259cfeae83d5611416c8d4c743ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_charmm_protein_and_ff</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a5da2fb4596e59136ef46a012c8055573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_conjugate_kappa</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a51c04573d059a231e41be560fa2d8931</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_HBonds_marginal</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a14ba97f0456ae8715ed5d99849f33846</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_jeffreys</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a9d1ebf6bb2e7b0446f142bdfca335696</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_jeffreys_kappa</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a03e7224062dd2dfa7fbdffc8f2078944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_NOE_restraint</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a006ad6a0a020142b89089a16670f3e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_NOEs</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a359f584371958e7a3dcb39b5963d42c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_NOEs_marginal</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a699692abccffe482acab7c9272c7238b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_setup_scale</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a56009689f286ff3c4c926c84ea5baa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_standard_SAXS_restraint</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a11077439559021451f030c3eeb4be5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_TALOS</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a90551b3cec7221bf440607c6a5bebf2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_vonMises_restraint_full</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>ab05f588c4f0860317181ee751d8828a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_model_vonMises_restraint_mean</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a3776633b369bf44e6412195da15f76b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_simulation_setup_nuisance_mc</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a3339216d361f17f27debc5f585633498</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_simulation_setup_protein_hmc_hopper</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a4f2f211f07d5caec009d3a0208fbb6e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_simulation_setup_protein_hmc_nve</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a904388d6e55b9dc5b1cfe03b44de1d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_stats_add_hmc_category</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>ac3b68f9a6cdbaff4e88cec63f9e95443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_stats_add_mc_category</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a21b3f52cb07e111b0da44038a27c062c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_stats_add_md_category</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>adb52b550f20da52192fba4c0ce9d54de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>m</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>a0fc3964e5f1620b285f93c8c42d6ddf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rescale_velocities</name>
      <anchorfile>classIMP_1_1isd_1_1shared__functions_1_1sfo__common.html</anchorfile>
      <anchor>ac058c580ffe1a18641e8464cb72e64b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::Statistics::Statistics</name>
    <filename>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_category</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a0a8838f23e49279c9bfab189932bcd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_coordinates</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a11b43838c3031fa4787abbc189aa001b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_entry</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a40b527139c38729385be984e6fc02f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>increment_counter</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a49b1f7cfc6e37001a83dde7b821e01a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a2875fd8667d7b5a5535e01ca6de12a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_coordinates</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>a333d3db0e4923b72c35db81b18ce3251</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_stats</name>
      <anchorfile>classIMP_1_1isd_1_1Statistics_1_1Statistics.html</anchorfile>
      <anchor>aaef394dfa26f3785c3d3879ad604ded2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::TALOSReader</name>
    <filename>namespaceIMP_1_1isd_1_1TALOSReader.html</filename>
    <class kind="class">IMP::isd::TALOSReader::TALOSReader</class>
  </compound>
  <compound kind="class">
    <name>IMP::isd::TALOSReader::TALOSReader</name>
    <filename>classIMP_1_1isd_1_1TALOSReader_1_1TALOSReader.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSReader_1_1TALOSReader.html</anchorfile>
      <anchor>a4e8a244987397f008840bbc75e4b3b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_full_datum</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSReader_1_1TALOSReader.html</anchorfile>
      <anchor>ac5931109e7c04c8b6c5b4bdb51b54dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_mean_datum</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSReader_1_1TALOSReader.html</anchorfile>
      <anchor>ad26845c96cd6d8aa67799eeccc74acb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read</name>
      <anchorfile>classIMP_1_1isd_1_1TALOSReader_1_1TALOSReader.html</anchorfile>
      <anchor>a2d45e394aa3fd1124b1f11f0b125bb98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::TBLReader</name>
    <filename>namespaceIMP_1_1isd_1_1TBLReader.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::isd::TuneRex::CvEstimator</name>
    <filename>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</filename>
    <member kind="function">
      <type>def</type>
      <name>estimate_cv_constant</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>a0747deb5372547da54cf933a23d73e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>estimate_cv_interpolate</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>a9f0be37812904297c18d34b36a3b2763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>estimate_cv_mbar</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>a10413b301b1c5f1d8573f293ac1307cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_interp</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>aff5462a29c7ad09ea5b091a1eefc96b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_mbar</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>a794e937a68c2177372f3c4cc4cf7adc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>mean_interp</name>
      <anchorfile>classIMP_1_1isd_1_1TuneRex_1_1CvEstimator.html</anchorfile>
      <anchor>a7abc191365964736a34fbd2990d06a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::isd::utils</name>
    <filename>namespaceIMP_1_1isd_1_1utils.html</filename>
    <class kind="class">IMP::isd::utils::Pipe</class>
    <member kind="function">
      <type>def</type>
      <name>check_residue</name>
      <anchorfile>namespaceIMP_1_1isd_1_1utils.html</anchorfile>
      <anchor>a186385c504a64877dd3b94d06a4b7756</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>map_angles</name>
      <anchorfile>namespaceIMP_1_1isd_1_1utils.html</anchorfile>
      <anchor>aaf203ed9bd739c985236eb69a96a9393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_sequence_file</name>
      <anchorfile>namespaceIMP_1_1isd_1_1utils.html</anchorfile>
      <anchor>a698d3f3291e32f01d23aea91c93aeff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::isd::utils::Pipe</name>
    <filename>classIMP_1_1isd_1_1utils_1_1Pipe.html</filename>
    <member kind="function">
      <type>def</type>
      <name>append</name>
      <anchorfile>classIMP_1_1isd_1_1utils_1_1Pipe.html</anchorfile>
      <anchor>a63cd17975cdd8ddde63bb0f47b12fe38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get</name>
      <anchorfile>classIMP_1_1isd_1_1utils_1_1Pipe.html</anchorfile>
      <anchor>abc088d07178ebfd3c96f210feac96237</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>put</name>
      <anchorfile>classIMP_1_1isd_1_1utils_1_1Pipe.html</anchorfile>
      <anchor>a60467a17ef8b11ddd75d23826116fd8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::kinematics</name>
    <filename>namespaceIMP_1_1kinematics.html</filename>
    <class kind="class">IMP::kinematics::BondAngleRevoluteJoint</class>
    <class kind="class">IMP::kinematics::CCDLoopClosure</class>
    <class kind="class">IMP::kinematics::CompositeJoint</class>
    <class kind="class">IMP::kinematics::DihedralAngleRevoluteJoint</class>
    <class kind="class">IMP::kinematics::DihedralMover</class>
    <class kind="class">IMP::kinematics::DirectionalDOF</class>
    <class kind="class">IMP::kinematics::DOF</class>
    <class kind="class">IMP::kinematics::DOFsSampler</class>
    <class kind="class">IMP::kinematics::DOFValues</class>
    <class kind="class">IMP::kinematics::FibrilSampler</class>
    <class kind="class">IMP::kinematics::Joint</class>
    <class kind="class">IMP::kinematics::KinematicForest</class>
    <class kind="class">IMP::kinematics::KinematicForestScoreState</class>
    <class kind="class">IMP::kinematics::KinematicNode</class>
    <class kind="class">IMP::kinematics::LocalPlanner</class>
    <class kind="class">IMP::kinematics::PathLocalPlanner</class>
    <class kind="class">IMP::kinematics::PrismaticJoint</class>
    <class kind="class">IMP::kinematics::ProteinKinematics</class>
    <class kind="class">IMP::kinematics::RevoluteJoint</class>
    <class kind="class">IMP::kinematics::RevoluteJointMover</class>
    <class kind="class">IMP::kinematics::RRT</class>
    <class kind="class">IMP::kinematics::TransformationJoint</class>
    <class kind="class">IMP::kinematics::UniformBackboneSampler</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BondAngleRevoluteJoint &gt; &gt;</type>
      <name>BondAngleRevolteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3652d09c8df3827d2bdf7f1d27deda02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BondAngleRevoluteJoint &gt; &gt;</type>
      <name>BondAngleRevolteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a2e025ec082d640cf2c7d12c0ff1d5812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; CompositeJoint &gt; &gt;</type>
      <name>CompositeJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a0bf3d3914b63901e185a5fc108dfc4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; CompositeJoint &gt; &gt;</type>
      <name>CompositeJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aadfebfaf3e5c3fe6ebd70ee10aaa4085</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DihedralAngleRevoluteJoint &gt; &gt;</type>
      <name>DihedralAngleRevoluteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a05a5c47395937c30901a6fc8e22e95a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DihedralAngleRevoluteJoint &gt; &gt;</type>
      <name>DihedralAngleRevoluteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad32896252cec6e362460e59c2d91f87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DirectionalDOF &gt; &gt;</type>
      <name>DirectionalDOFs</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a85d395bd4fac70175ae6a92b92e30f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DirectionalDOF &gt; &gt;</type>
      <name>DirectionalDOFsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>adfe8153bd3c894ae41bf695755709f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DOF &gt; &gt;</type>
      <name>DOFs</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a48e5f4cdb124cefbf2609fb8e65c8f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DOFsSampler &gt; &gt;</type>
      <name>DOFsSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>afb1b7d4b7407cb51948ec6a33bd15ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DOFsSampler &gt; &gt;</type>
      <name>DOFsSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a8d43725ad49c9fafed75619d1b1ca8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DOF &gt; &gt;</type>
      <name>DOFsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a0f0c14a1da8816078943911952798854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DOFValues &gt;</type>
      <name>DOFValuesList</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a421eda62b12353faf0b03f5a342ebd70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FibrilSampler &gt; &gt;</type>
      <name>FibrilSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3a8cba1b48791deba0917f81289124f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FibrilSampler &gt; &gt;</type>
      <name>FibrilSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a9763e160af13d5c33a14bffb1167eb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Joint &gt; &gt;</type>
      <name>Joints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad754a735ae4dc25b334c6b9731cf5e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Joint &gt; &gt;</type>
      <name>JointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a4d7f0fd2a68a4692c5cc4c594bc4c975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; KinematicForest &gt; &gt;</type>
      <name>KinematicForests</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aabe345a812a4367d2137ab85fdbff490</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; KinematicForest &gt; &gt;</type>
      <name>KinematicForestsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a21dc3425fb63dc7b6791310a5e00a8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LocalPlanner &gt; &gt;</type>
      <name>LocalPlanners</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aa1f95a2d7dbbbf3150b60fa91ccc74fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LocalPlanner &gt; &gt;</type>
      <name>LocalPlannersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a605d5240e6e4a5d0e0deb5b889d82676</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PathLocalPlanner &gt; &gt;</type>
      <name>PathLocalPlanners</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a791bc95ccd185f0e6ba105200b5b2f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PathLocalPlanner &gt; &gt;</type>
      <name>PathLocalPlannersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ac6dfddfb00e36b5ee2dd15da8a0224ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; PrismaticJoint &gt; &gt;</type>
      <name>PrismaticJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>af84ec02addc859311cfb41f4acfcd2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; PrismaticJoint &gt; &gt;</type>
      <name>PrismaticJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>abfecff84c05953a734c105ee39c2e47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteinKinematics &gt; &gt;</type>
      <name>ProteinKinematicsList</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad96c4b5cce575b5415d1ce933de85e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteinKinematics &gt; &gt;</type>
      <name>ProteinKinematicsListTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a9efd839868cc1dec27fe56017d9d50ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RevoluteJoint &gt; &gt;</type>
      <name>RevoluteJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a429d23e0da5eec619c14dfece91c5ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RevoluteJoint &gt; &gt;</type>
      <name>RevoluteJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aa51d75a449ab86ea9cb4755fbf9f8db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; TransformationJoint &gt; &gt;</type>
      <name>TransformationJoints</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ab3156e2951a1c36f5b08d663a4972b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; TransformationJoint &gt; &gt;</type>
      <name>TransformationJointsTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a95e6ac5b502f174aced44a97290d2711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; UniformBackboneSampler &gt; &gt;</type>
      <name>UniformBackboneSamplers</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ae1bfb4d7de7b288b03f07dc58a9e1079</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; UniformBackboneSampler &gt; &gt;</type>
      <name>UniformBackboneSamplersTemp</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>a3ec9c5e1c73578d3cc66dc0337d43eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aa04d5f6af85aa607f9aac02a80eb4a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>ad2994659e1e17488e59d35c6b66e6604</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1kinematics.html</anchorfile>
      <anchor>aad98989101e351e9d2b8b4c2e922922e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1kinematics" title="rrt_sample">rrt_sample_bin</docanchor>
    <docanchor file="namespaceIMP_1_1kinematics" title="rrt_ccd">rrt_ccd_bin</docanchor>
    <docanchor file="namespaceIMP_1_1kinematics" title="rmsd_cluster">rmsd_cluster_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::BondAngleRevoluteJoint</name>
    <filename>classIMP_1_1kinematics_1_1BondAngleRevoluteJoint.html</filename>
    <base>IMP::kinematics::RevoluteJoint</base>
    <member kind="function">
      <type></type>
      <name>BondAngleRevoluteJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1BondAngleRevoluteJoint.html</anchorfile>
      <anchor>a16ba2ca9dff457daf656a6336e46f56a</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child, IMP::core::XYZ a, IMP::core::XYZ b, IMP::core::XYZ c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a531e935921d67d59df7b1b09f6c258fe</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angle</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a2cd1b3a9533716be8b02ac2838bcff15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_angle</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a7d3eb5742e0d91e640e1fd498489bada</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>a7e1a407b470b3ee5e785583430b0a5e6</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const IMP::algebra::Transformation3D &amp;</type>
      <name>get_transformation_child_to_parent</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>a3e4b1f2fa4792d300278ebda6c091b5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>a007e1c1cfce7e7730c5fef144a65298c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>get_current_angle_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1BondAngleRevoluteJoint.html</anchorfile>
      <anchor>aa482d4132896cbc586e9b4910e3879e7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_axis_of_rotation_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1BondAngleRevoluteJoint.html</anchorfile>
      <anchor>a823a83a8d034d1a22d24008dc8f7f978</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IMP::algebra::Transformation3D</type>
      <name>get_rotation_about_joint_in_parent_coordinates</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a7b6f7b757bf908b57e23c481bbfd06bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_child_node_reference_frame</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>aa95d5985fabfd0eb1650127e1eb5ff69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_joint_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a676670aa7fd76e512ab7e47d9b01a424</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const IMP::algebra::Transformation3D &amp;</type>
      <name>get_transformation_child_to_parent_no_checks</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>ac31f8b3fff9145b88f5f9bb4d7b4b021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_owner_kf</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>a55f61a87ca11cf493e0465e9136af62f</anchor>
      <arglist>(KinematicForest *kf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_transformation_child_to_parent_no_checks</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>a39e9a4cc8ba86e14a84109bdab62a12a</anchor>
      <arglist>(IMP::algebra::Transformation3D transformation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::CCDLoopClosure</name>
    <filename>classIMP_1_1kinematics_1_1CCDLoopClosure.html</filename>
    <member kind="function">
      <type></type>
      <name>CCDLoopClosure</name>
      <anchorfile>classIMP_1_1kinematics_1_1CCDLoopClosure.html</anchorfile>
      <anchor>aae25b8faa1131674a8f7c775cede7388</anchor>
      <arglist>(DihedralAngleRevoluteJoints joints, const algebra::Vector3D &amp;F1, const algebra::Vector3D &amp;F2, const algebra::Vector3D &amp;F3, core::XYZ M1, core::XYZ M2, core::XYZ M3)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::CompositeJoint</name>
    <filename>classIMP_1_1kinematics_1_1CompositeJoint.html</filename>
    <base>IMP::kinematics::Joint</base>
    <member kind="function">
      <type></type>
      <name>CompositeJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a06ea6091af7ff36c08a5d5eb5dfd780e</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child, Joints joints=Joints())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_downstream_joint</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a5c53ae6c3e1d44be15e303bb88dc624b</anchor>
      <arglist>(Joint *j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_upstream_joint</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a16faab96024055e41874f66e7e64819a</anchor>
      <arglist>(Joint *j)</arglist>
    </member>
    <member kind="function">
      <type>const Joints &amp;</type>
      <name>get_inner_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>adc86df1c521c23181d633c5d57828374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Joints &amp;</type>
      <name>get_inner_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a57cab348a4e7454ea40325686023e9b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a6d891892145abb91384160ff0e61bdd9</anchor>
      <arglist>(Joints joints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_child_node_reference_frame</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a4159518364a861812de45a96db342cea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_joint_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1CompositeJoint.html</anchorfile>
      <anchor>a6b711daf7f74cae052be26813a141fd7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DihedralAngleRevoluteJoint</name>
    <filename>classIMP_1_1kinematics_1_1DihedralAngleRevoluteJoint.html</filename>
    <base>IMP::kinematics::RevoluteJoint</base>
    <member kind="function">
      <type></type>
      <name>DihedralAngleRevoluteJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralAngleRevoluteJoint.html</anchorfile>
      <anchor>a518c71ba70ed25ad87aae3cb9dbab4ff</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child, IMP::core::XYZ a, IMP::core::XYZ b, IMP::core::XYZ c, IMP::core::XYZ d)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>get_current_angle_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralAngleRevoluteJoint.html</anchorfile>
      <anchor>a33e0b8563256edcad0360e7a7b9893c4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_axis_of_rotation_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralAngleRevoluteJoint.html</anchorfile>
      <anchor>a7e71250578c0b68d403ff45f014c0931</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DihedralMover</name>
    <filename>classIMP_1_1kinematics_1_1DihedralMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralMover.html</anchorfile>
      <anchor>ab5f537a3e03e3741cfa4a7d8cf06b707</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralMover.html</anchorfile>
      <anchor>ae9f2ba4220930cdec3aeb8d91b9b00b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralMover.html</anchorfile>
      <anchor>addc94b49b5c3eb0087e2c487fa16a6cc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1kinematics_1_1DihedralMover.html</anchorfile>
      <anchor>a7739c997d8573b353e14b8aabd82b5de</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DirectionalDOF</name>
    <filename>classIMP_1_1kinematics_1_1DirectionalDOF.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1DirectionalDOF.html</anchorfile>
      <anchor>aaf0044f1a78b6a5e8c0aa07083a68ec2</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DOF</name>
    <filename>classIMP_1_1kinematics_1_1DOF.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_steps</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOF.html</anchorfile>
      <anchor>aa8687008f78d66a419813c4a41a3bfe1</anchor>
      <arglist>(double value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_steps</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOF.html</anchorfile>
      <anchor>a196f5d67c0142ff28a4adb461d5b325b</anchor>
      <arglist>(double value1, double value2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_step_size</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOF.html</anchorfile>
      <anchor>af9edf0c8dab63b86b0c0e64a24fcf6b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOF.html</anchorfile>
      <anchor>a87d841d84fe17b7950e9aeb28f307b4f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DOFsSampler</name>
    <filename>classIMP_1_1kinematics_1_1DOFsSampler.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>DOFsSampler</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a7e658f98e59a2386cd451c9e5ccbb800</anchor>
      <arglist>(DOFs dofs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a91b1e5f356122a2a6b026988035c327e</anchor>
      <arglist>(const DOFValues &amp;values)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_last_sample</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a7e9e8763616e99e80f27b36bcd982a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DOF const *</type>
      <name>get_dof</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a4e374b3d8393b057c5ce60cbc7c1fad2</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>DOFs const &amp;</type>
      <name>get_dofs</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a84e6265cfe694fd8826b5eeaf94550e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DOFValues</type>
      <name>get_sample</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a6b23a655042253363991b7f1ecad808b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>ad7b46f5d8e0a9725c96111cf46f5246a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample_and_apply</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFsSampler.html</anchorfile>
      <anchor>a6836e1bc991fea5f6c88069b4054ae47</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::DOFValues</name>
    <filename>classIMP_1_1kinematics_1_1DOFValues.html</filename>
    <member kind="function">
      <type></type>
      <name>DOFValues</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFValues.html</anchorfile>
      <anchor>ae92645495b111a1ad11e034b582adc5f</anchor>
      <arglist>(const DOFs &amp;dofs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DOFValues</name>
      <anchorfile>classIMP_1_1kinematics_1_1DOFValues.html</anchorfile>
      <anchor>ab2289eba66a8c0af530b88c4aad34559</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::FibrilSampler</name>
    <filename>classIMP_1_1kinematics_1_1FibrilSampler.html</filename>
    <base>IMP::kinematics::DOFsSampler</base>
    <member kind="function">
      <type></type>
      <name>FibrilSampler</name>
      <anchorfile>classIMP_1_1kinematics_1_1FibrilSampler.html</anchorfile>
      <anchor>ae1e1ece6242038323d7c0ac12f7a6264</anchor>
      <arglist>(TransformationJoints trans_joint, DihedralAngleRevoluteJoints dihedral_joints, DOFs dofs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1kinematics_1_1FibrilSampler.html</anchorfile>
      <anchor>a6a179995722772c96a9ac8c3053bcc13</anchor>
      <arglist>(const DOFValues &amp;values) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::Joint</name>
    <filename>classIMP_1_1kinematics_1_1Joint.html</filename>
    <base>IMP::Object</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_child_node_reference_frame</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>ac10263f2387fd81bec72f1c5baa87a85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_joint_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1Joint.html</anchorfile>
      <anchor>ad219ef5100a60ba8dfed7d7b9bea7d0e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::KinematicForest</name>
    <filename>classIMP_1_1kinematics_1_1KinematicForest.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>KinematicForest</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a3b814e2d09d66914a410a7304e30f5ff</anchor>
      <arglist>(Model *m, IMP::atom::Hierarchy hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>Joint *</type>
      <name>add_edge</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a4f4f75ae4464f9238edbd4f9f53da211</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_edge</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>aa327ed003021277f339df961628efb2f</anchor>
      <arglist>(Joint *joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_rigid_bodies_in_chain</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>af159bf320d6b05b0945e690ffcf1d44c</anchor>
      <arglist>(IMP::core::RigidBodies rbs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_transform_safely</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a7e6c2352a1bf031b30d5f2e463e07b76</anchor>
      <arglist>(IMP::algebra::Transformation3D tr)</arglist>
    </member>
    <member kind="function">
      <type>Joints</type>
      <name>get_ordered_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>ad82f7c587f96833cc89a699d74a490a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a16b6ce03bb0fba3a5a8ca97bf2bc2b4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_external_coordinates_changed</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a383ac62927ab0e05dafa7c4036f0e62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_internal_coordinates_changed</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a5ccc55dde508aaa013311d6b1a92ac1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_root</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a0690bcfd153301f52c7b50511440252d</anchor>
      <arglist>(IMP::Particle *new_root)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_coordinates_safe</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>ab9ffe60cb86e0edc2ee54cbd36c98199</anchor>
      <arglist>(IMP::core::RigidBody rb, IMP::algebra::Vector3D c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reference_frame_safe</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a879e819eda0a9d2851e6ac8c654b8355</anchor>
      <arglist>(IMP::core::RigidBody rb, IMP::algebra::ReferenceFrame3D r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform_safe</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>ae44ea8f250039804adc64a7e977eadf0</anchor>
      <arglist>(IMP::algebra::Transformation3D tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_all_external_coordinates</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a7111ea942baee79f1b3db541635b9f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_all_internal_coordinates</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForest.html</anchorfile>
      <anchor>a4dbf94698da8c078605cb2f7e93e853f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::KinematicForestScoreState</name>
    <filename>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type>void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</anchorfile>
      <anchor>a8290b5926353dbd91d2eb400135e489a</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</anchorfile>
      <anchor>a239ffa1a2eea34b64322d8ec214b45f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</anchorfile>
      <anchor>af44594c8fc4d9adae48ea99feadf724b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</anchorfile>
      <anchor>afa4290325927ca6c1ee2385db70f8663</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicForestScoreState.html</anchorfile>
      <anchor>a4967e3524cc36c26fae49eccfd14da81</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::KinematicNode</name>
    <filename>classIMP_1_1kinematics_1_1KinematicNode.html</filename>
    <base>IMP::core::RigidBody</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>ae7e4091b9f24f6873daedab75ddf8577</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>abfb20ad6959f6bd74156061302f47700</anchor>
      <arglist>(Model *m, ParticleIndex pi, KinematicForest *owner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>aa41da78d70027959c88b3b8f1429d809</anchor>
      <arglist>(IMP::ParticleAdaptor pa, KinematicForest *owner)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>ac4a27e38b4e2e40f53c27b5622a24db8</anchor>
      <arglist>(IMP::ParticleAdaptor pa, KinematicForest *owner, Joint *in_joint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>abcf21ca959f72e4e59d0517f8997cfa1</anchor>
      <arglist>(Model *m, ParticleIndex pi, KinematicForest *owner, Joint *in_joint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>af34e2ec4aa0e829b7164b370f8ff87f3</anchor>
      <arglist>(Model *m, ParticleIndex pi, KinematicForest *owner, Joint *in_joint, Joints out_joints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KinematicNode</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1kinematics_1_1KinematicNode.html</anchorfile>
      <anchor>a61f5a6a83beae853f7a8b2e01cec0941</anchor>
      <arglist>(IMP::ParticleAdaptor pa, KinematicForest *owner, Joint *in_joint, Joints out_joints)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::LocalPlanner</name>
    <filename>classIMP_1_1kinematics_1_1LocalPlanner.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1LocalPlanner.html</anchorfile>
      <anchor>a1ecea8ea120b5305bcef865b8440f556</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::PathLocalPlanner</name>
    <filename>classIMP_1_1kinematics_1_1PathLocalPlanner.html</filename>
    <base>IMP::kinematics::LocalPlanner</base>
    <member kind="function">
      <type></type>
      <name>PathLocalPlanner</name>
      <anchorfile>classIMP_1_1kinematics_1_1PathLocalPlanner.html</anchorfile>
      <anchor>a3c709f8a11cecb83e42fa72ced88bf5d</anchor>
      <arglist>(Model *model, DOFsSampler *dofs_sampler, DirectionalDOF *directional_dof, int save_step_interval=1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::vector&lt; DOFValues &gt;</type>
      <name>plan</name>
      <anchorfile>classIMP_1_1kinematics_1_1PathLocalPlanner.html</anchorfile>
      <anchor>a99c61f10809fe09bbbd15625d5c44009</anchor>
      <arglist>(DOFValues q_from, DOFValues q_rand, ScoringFunction *sf) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::PrismaticJoint</name>
    <filename>classIMP_1_1kinematics_1_1PrismaticJoint.html</filename>
    <base>IMP::kinematics::Joint</base>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1PrismaticJoint.html</anchorfile>
      <anchor>a69b32641f0207229ec1fd26b6d399546</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child, IMP::core::XYZ a, IMP::core::XYZ b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>classIMP_1_1kinematics_1_1PrismaticJoint.html</anchorfile>
      <anchor>ae1c2a772c0581223f7a8ed3dc5fdfd8a</anchor>
      <arglist>(IMP::core::RigidBody parent, IMP::core::RigidBody child)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_length</name>
      <anchorfile>classIMP_1_1kinematics_1_1PrismaticJoint.html</anchorfile>
      <anchor>aa85b09272efe4e5f516759d31ddb89ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_length</name>
      <anchorfile>classIMP_1_1kinematics_1_1PrismaticJoint.html</anchorfile>
      <anchor>a78e4a0f87bc44a784e9fb1d25acc14ba</anchor>
      <arglist>(double l)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_joint_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1PrismaticJoint.html</anchorfile>
      <anchor>a032241495161ac5202c4c341ff680792</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::ProteinKinematics</name>
    <filename>classIMP_1_1kinematics_1_1ProteinKinematics.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>ProteinKinematics</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a52c69182a55e364dfbba34880d19f4cb</anchor>
      <arglist>(atom::Hierarchy mhd, bool flexible_backbone=true, bool flexible_side_chains=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProteinKinematics</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a4d8caa494b87d0d8c85885e1e17a790a</anchor>
      <arglist>(atom::Hierarchy mhd, const atom::Residues &amp;flexible_residues, const ParticleIndexQuads custom_dihedral_angles, atom::Atoms open_loop_bond_atoms=atom::Atoms(), bool flexible_backbone=true, bool flexible_side_chains=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProteinKinematics</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a75272db07d39d0512dc8785a64592f7a</anchor>
      <arglist>(atom::Hierarchy mhd, const atom::Residues &amp;flexible_residues, const std::vector&lt; atom::Atoms &gt; &amp;custom_dihedral_atoms, atom::Atoms open_loop_bond_atoms=atom::Atoms(), bool flexible_backbone=true, bool flexible_side_chains=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProteinKinematics</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>aeecb67f9f8f67c05f5b8273bcbcd231e</anchor>
      <arglist>(atom::Hierarchy mhd, const atom::Residues &amp;flexible_residues, const ParticleIndexQuads custom_dihedral_angles, const std::vector&lt; ProteinAngleType &gt; &amp;custom_dihedral_angle_types, atom::Atoms open_loop_bond_atoms=atom::Atoms(), bool flexible_backbone=true, bool flexible_side_chains=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build_rigid_bodies</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>af4d545db3eae53c2e6c762f3c9618d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DihedralAngleRevoluteJoints</type>
      <name>get_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a4f2eecf122c5dd18b04329df2683ff7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KinematicForest *</type>
      <name>get_kinematic_forest</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a7d362a387254728e698107b187ccabc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DihedralAngleRevoluteJoints</type>
      <name>get_ordered_joints</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>aa46e490d53b18acd9968b91fdc3e5928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_phi</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a15a55c6976ebd2c8409a882aaaf8c3e9</anchor>
      <arglist>(const atom::Residue r) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_psi</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>aba4a7bd581a53c247d9dbace7a037aef</anchor>
      <arglist>(const atom::Residue r) const </arglist>
    </member>
    <member kind="function">
      <type>core::RigidBodies</type>
      <name>get_rigid_bodies</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a1be4d31ffe157cbd577c1deee42d5657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a098090057d248ad41f4b7abc2be0a3ae</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_rotatable_angle</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>a28d16f8a623da30f013632758da625bb</anchor>
      <arglist>(const std::vector&lt; atom::Atom &gt; &amp;dihedral_angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mark_rotatable_angles</name>
      <anchorfile>classIMP_1_1kinematics_1_1ProteinKinematics.html</anchorfile>
      <anchor>ac2601ba8221680c265cafe3ea53770c0</anchor>
      <arglist>(const std::vector&lt; atom::Atoms &gt; &amp;dihedral_angles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::RevoluteJoint</name>
    <filename>classIMP_1_1kinematics_1_1RevoluteJoint.html</filename>
    <base>IMP::kinematics::Joint</base>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>get_current_angle_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>aae994f04b42284b92912a4086e527f69</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>update_axis_of_rotation_from_cartesian_witnesses</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJoint.html</anchorfile>
      <anchor>a1468aae16cdb1199394ce96ec567842f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::RevoluteJointMover</name>
    <filename>classIMP_1_1kinematics_1_1RevoluteJointMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJointMover.html</anchorfile>
      <anchor>a52772966cd5b32f5bee21aaa705b82d8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJointMover.html</anchorfile>
      <anchor>a93d84855f3fa3e0977113fec979bb891</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJointMover.html</anchorfile>
      <anchor>a5ff3e7c51d9a45c67e25ea9f0d648960</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1kinematics_1_1RevoluteJointMover.html</anchorfile>
      <anchor>a8993e257c0d8d5cd49ad686da1943ab7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::RRT</name>
    <filename>classIMP_1_1kinematics_1_1RRT.html</filename>
    <base>IMP::Sampler</base>
    <class kind="class">IMP::kinematics::RRT::RRTNode</class>
    <member kind="function">
      <type></type>
      <name>RRT</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>abb76ef6b539bc20f536babaf3aad119e</anchor>
      <arglist>(Model *m, DOFsSampler *sampler, LocalPlanner *planner, const DOFs &amp;cspace_dofs, unsigned int iteration_number=1000, unsigned int tree_size=100, unsigned int number_of_sampled_dofs=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>ad2f94ba2c286907386d453a674c23190</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>run</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>a14624238282f44ccffc3568511ae3b28</anchor>
      <arglist>(unsigned int number_of_iterations=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_actual_tree_size</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>a364a02860318ab5981b5bec528f64ecb</anchor>
      <arglist>(unsigned int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_collisions</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>a105f65dece77b7c19c57835c37d21d6e</anchor>
      <arglist>(unsigned int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_number_of_iterations</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>a32b76e993281ef5d1bc9f21789320b65</anchor>
      <arglist>(unsigned int num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_tree_size</name>
      <anchorfile>classIMP_1_1kinematics_1_1RRT.html</anchorfile>
      <anchor>a688a39294c041fcfe22e144c12135b2f</anchor>
      <arglist>(unsigned int num)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::RRT::RRTNode</name>
    <filename>classIMP_1_1kinematics_1_1RRT_1_1RRTNode.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::TransformationJoint</name>
    <filename>classIMP_1_1kinematics_1_1TransformationJoint.html</filename>
    <base>IMP::kinematics::Joint</base>
    <member kind="function">
      <type>void</type>
      <name>set_transformation_child_to_parent</name>
      <anchorfile>classIMP_1_1kinematics_1_1TransformationJoint.html</anchorfile>
      <anchor>ac2ae8dc832dc667fdf4ed898160c99e5</anchor>
      <arglist>(IMP::algebra::Transformation3D transformation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kinematics::UniformBackboneSampler</name>
    <filename>classIMP_1_1kinematics_1_1UniformBackboneSampler.html</filename>
    <base>IMP::kinematics::DOFsSampler</base>
    <member kind="function">
      <type></type>
      <name>UniformBackboneSampler</name>
      <anchorfile>classIMP_1_1kinematics_1_1UniformBackboneSampler.html</anchorfile>
      <anchor>ac554646b587fbdab63912e8a7e7e7d48</anchor>
      <arglist>(DihedralAngleRevoluteJoints joints, DOFs dofs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>classIMP_1_1kinematics_1_1UniformBackboneSampler.html</anchorfile>
      <anchor>a1fdd5013a8c2353b217243b08d40522a</anchor>
      <arglist>(const DOFValues &amp;values) override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::kmeans</name>
    <filename>namespaceIMP_1_1kmeans.html</filename>
    <class kind="class">IMP::kmeans::KMeans</class>
    <member kind="enumeration">
      <type></type>
      <name>KM_ALG_TYPE</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LLOYDS</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a1e3b4c7fb2b2a03ed9925f2e2fa3f022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LOCAL_SWAP</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a92f6b7e3826fef9ac5f6a536fb31e1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_LOCAL_EZ_HYBRID</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a35ab4ba2898fc9b41066e60b8caa83e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KM_HYBRID</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1b6db7066473f34b4385e2b5ecfe9547a29a08c042861f77cdc777ad8b3d2262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a1ceef09b821c99c1d98cb8d251570f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>afcaf8a5f228485e1a97b53e4cec050fa</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1kmeans.html</anchorfile>
      <anchor>a0f9b7b18fb3e8c226ab2ab6d283bcb78</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::kmeans::KMeans</name>
    <filename>classIMP_1_1kmeans_1_1KMeans.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>KMeans</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a78165c703dd5044c261467a19be4884b</anchor>
      <arglist>(const std::string &amp;fname_data, int dim, unsigned int max_nPts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KMeans</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>aea34b7e5c8320d6c53d4ce01311fe65b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data_pt</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a8087c8113156122fd3e14a22f5c3b3b1</anchor>
      <arglist>(const IMP::Floats &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_data</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>ae0df654131d30d847d81774a4d878034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a21c59941f9740ea2506b733da9676648</anchor>
      <arglist>(unsigned int k, KM_ALG_TYPE alg_type=KM_LLOYDS, int stages=100)</arglist>
    </member>
    <member kind="function">
      <type>IMP::Ints</type>
      <name>get_assignments</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a6fc729b47dedaa30f9bfaea5e080616a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::Floats</type>
      <name>get_center</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>aab7631a57625aff791cb4ffdedc637f2</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const IMP::Floats &amp;</type>
      <name>get_data_point</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a7b61502fb912e88ad9bccee3923d4ef5</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_centers</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a008452be8bed8098de109e9642e561bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_data_points</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a767d12ea6c1b756aad3c72239de545cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::Floats</type>
      <name>get_squared_distance_to_centers</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a9481a9029f9a4540153c4a835e129254</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a4934b3b97ad6314b2530f7d5cf242840</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_centers</name>
      <anchorfile>classIMP_1_1kmeans_1_1KMeans.html</anchorfile>
      <anchor>a0e46bb6d7bf03d2d0e9cdf4c0dffb115</anchor>
      <arglist>(LogLevel ll=PROGRESS) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::misc</name>
    <filename>namespaceIMP_1_1misc.html</filename>
    <class kind="class">IMP::misc::CommonEndpointPairFilter</class>
    <class kind="class">IMP::misc::CustomXYZR</class>
    <class kind="class">IMP::misc::DecayPairContainerOptimizerState</class>
    <class kind="class">IMP::misc::FreelyJointedChain</class>
    <class kind="class">IMP::misc::LogPairScore</class>
    <class kind="class">IMP::misc::LowestRefinedPairScore</class>
    <class kind="class">IMP::misc::MetricClosePairsFinder</class>
    <class kind="class">IMP::misc::SoftCylinderPairScore</class>
    <class kind="class">IMP::misc::StateAdaptor</class>
    <class kind="class">IMP::misc::WormLikeChain</class>
    <member kind="function">
      <type>core::ClosePairsFinder *</type>
      <name>create_metric_close_pairs_finder</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a64da6e9b5d30fb279b61c5e7100788c0</anchor>
      <arglist>(LowerBound lb, UpperBound ub)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a65ae63767baf9a8606e74158c6ef2ade</anchor>
      <arglist>(CustomXYZR a, CustomXYZR b)</arglist>
    </member>
    <member kind="function">
      <type>const algebra::Sphere3D</type>
      <name>get_sphere_d_geometry</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a4754647ec2a9fab5886f7c0ff31c27a0</anchor>
      <arglist>(CustomXYZR d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sphere_d_geometry</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a1cca898df2ee830b5c161c85f0a1dd81</anchor>
      <arglist>(CustomXYZR d, const algebra::Sphere3D &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a3d9e0cd93a88f9d3c7e92119038fa626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>af555953f75a25211cbddff95d66eaeb2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1misc.html</anchorfile>
      <anchor>a1133171f2eca4abf8f45a808a3522edd</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::CommonEndpointPairFilter</name>
    <filename>classIMP_1_1misc_1_1CommonEndpointPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1CommonEndpointPairFilter.html</anchorfile>
      <anchor>a6f2d4adead67c24465a4fe659d546d87</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1misc_1_1CommonEndpointPairFilter.html</anchorfile>
      <anchor>a1d31164b8797b50012ca6934b3cd41bf</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1CommonEndpointPairFilter.html</anchorfile>
      <anchor>a9ad6e5df3c47aca04268be436158afa4</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::CustomXYZR</name>
    <filename>classIMP_1_1misc_1_1CustomXYZR.html</filename>
    <base>IMP::core::XYZ</base>
    <member kind="function">
      <type>Float</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>abedc23f8de0a4dd04831869d1753fa01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3D</type>
      <name>get_sphere</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>adc0285249c96ddfa3cf3e4b241ef8d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_radius</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>ae19c13c38dffeec7b4a6fff9e6c93d80</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sphere</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>adea4c6044d9b0548d7ae3ecdf70a09f6</anchor>
      <arglist>(const algebra::Sphere3D &amp;s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_default_radius_key</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>a08c777a30a57c38661bab61e7482bb25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>a7c91fd76c17332e823bbb4bf77d5f9e1</anchor>
      <arglist>(Model *m, ParticleIndex pi, FloatKey radius_key=get_default_radius_key())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CustomXYZR</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1misc_1_1CustomXYZR.html</anchorfile>
      <anchor>abf188a677aa7ebfee43ca5a544bfdfd2</anchor>
      <arglist>(Model *m, ParticleIndex pi, DecoratorTraits tr=get_default_decorator_traits())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::DecayPairContainerOptimizerState</name>
    <filename>classIMP_1_1misc_1_1DecayPairContainerOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1misc_1_1DecayPairContainerOptimizerState.html</anchorfile>
      <anchor>abf3895b8a8492f0bef870c887b27189b</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1DecayPairContainerOptimizerState.html</anchorfile>
      <anchor>addda42d4586fbec248627eebc6521345</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::FreelyJointedChain</name>
    <filename>classIMP_1_1misc_1_1FreelyJointedChain.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a55fedd379fba54b19dcaa3ec6cbdcdbf</anchor>
      <arglist>(double feature) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a9d5c4fe5a713906ad68c03118a0c74b5</anchor>
      <arglist>(double feature) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_distance</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>abe5bc217fa3a708a7ed297135e2281b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_distance_at_minimum</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a5a1127daff9c82a50db35d28e1915169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_link_length</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a9d309674b4086d2fe87eb393a6e1b05f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_link_number</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a54f639dea568f6f6cf4de49877a180d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a1ab13da635bc5fd70ed6d5532205a290</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link_length</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>a2cd3577c50a796cca3d73f720c6e2131</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link_number</name>
      <anchorfile>classIMP_1_1misc_1_1FreelyJointedChain.html</anchorfile>
      <anchor>aaf85ac05d8fb2073c10580ecbcecff1d</anchor>
      <arglist>(int N)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::LogPairScore</name>
    <filename>classIMP_1_1misc_1_1LogPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>LogPairScore</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>a18843fb6da72b1d617f4255b2c39e217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>a338e206bb2c5cd4b2755eab2718e9280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>aca0b33b777dcd7341721989c0873afed</anchor>
      <arglist>(Model *, const ParticleIndexes &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>af76ec1b6a0296996a683363737dbcd96</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_contains</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>a04e40483fcdfe82f620a38ca65d616b8</anchor>
      <arglist>(const ParticlePair &amp;pp) const </arglist>
    </member>
    <member kind="function">
      <type>ParticlePairsTemp</type>
      <name>get_particle_pairs</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>a05b4cf95caac3043f8349e0e0d99227e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1LogPairScore.html</anchorfile>
      <anchor>a03143a56b280e7a7f9ad4bb8c34bca7e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::LowestRefinedPairScore</name>
    <filename>classIMP_1_1misc_1_1LowestRefinedPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>LowestRefinedPairScore</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>ae522bb65cfacf6dfcb2eed7adc4094e4</anchor>
      <arglist>(Refiner *r, PairScore *f)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>a62b8a9acd701ad54a586246f4269c60b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>afff6519b16ac3877eaf6407775a4a0d6</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>a486ccea6da3c5b33957ecd9f74d824ce</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>abc8d2f92ee9de0d870b6621a746e2c16</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>af283d00ba230783fa44f3b27b665c1ae</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>a2ca3c115cc2b1f508bbd1cd4106067b5</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1LowestRefinedPairScore.html</anchorfile>
      <anchor>a4bfbb573f377d2ed6ada902fecaad69f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::MetricClosePairsFinder</name>
    <filename>classIMP_1_1misc_1_1MetricClosePairsFinder.html</filename>
    <templarg>LowerBound</templarg>
    <templarg>UpperBound</templarg>
    <base>IMP::core::ClosePairsFinder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>aed0b2ec4456370093bee3f39d7dd6a04</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>a59143b49e872e56ab8b802afb1e53d1f</anchor>
      <arglist>(const algebra::BoundingBox3Ds &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IntPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>addd3d02d8ae75c5d46879294309e6fb5</anchor>
      <arglist>(const algebra::BoundingBox3Ds &amp;, const algebra::BoundingBox3Ds &amp;) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>acc28aacab86019a215b47a2efd1c172d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pc) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ParticleIndexPairs</type>
      <name>get_close_pairs</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>a53328fef456c33aac8cced852450ffae</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pca, const ParticleIndexes &amp;pcb) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1MetricClosePairsFinder.html</anchorfile>
      <anchor>ad033de1219ecf9acc7c61459b3165481</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::SoftCylinderPairScore</name>
    <filename>classIMP_1_1misc_1_1SoftCylinderPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a6f9537519d6c82aa634cbe210ce8a6ef</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>ac1d4d6561734b1b17b6513497649d8ee</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a4490d4babae0919e6871c2b8b7683698</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a002328f58b3fd63b5bb3f1083be557a3</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a44f08a96119bd689790cae396c13867d</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a1f57fa73e88639cc37bb0ed36b0ff283</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1SoftCylinderPairScore.html</anchorfile>
      <anchor>a678f661a0cdd65a6a88d9c573984ca7e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::StateAdaptor</name>
    <filename>classIMP_1_1misc_1_1StateAdaptor.html</filename>
    <base>IMP::ScoreState</base>
    <member kind="function">
      <type></type>
      <name>StateAdaptor</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>a20254b90bcaebe823d0613bdf8dcde80</anchor>
      <arglist>(Model *m, OptimizerState *before, OptimizerState *after)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_after_evaluate</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>a6ea4a2a8130dd49eb098470a5fbca2b9</anchor>
      <arglist>(DerivativeAccumulator *da) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_before_evaluate</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>a67c1ed42f616022295db117d4e1df066</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>aa2b7d09be4f0235ac10ed94717066ffd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>a2cb86d326243c711f6ac6a7a2124c7dd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1StateAdaptor.html</anchorfile>
      <anchor>a7f3f089944b4bff027d89494459cdd07</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::misc::WormLikeChain</name>
    <filename>classIMP_1_1misc_1_1WormLikeChain.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>WormLikeChain</name>
      <anchorfile>classIMP_1_1misc_1_1WormLikeChain.html</anchorfile>
      <anchor>ab37df628242f03e7000f60de491f3728</anchor>
      <arglist>(Float l_max, Float lp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1misc_1_1WormLikeChain.html</anchorfile>
      <anchor>a7e4627145e339512eb80cc0d991126a2</anchor>
      <arglist>(double feature) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1misc_1_1WormLikeChain.html</anchorfile>
      <anchor>a297d9588a1ee9bf87bef26100a41851c</anchor>
      <arglist>(double feature) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1misc_1_1WormLikeChain.html</anchorfile>
      <anchor>a394176c2d2a8839192a1883e2bd6afd9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::mmcif</name>
    <filename>namespaceIMP_1_1mmcif.html</filename>
    <namespace>IMP::mmcif::data</namespace>
    <namespace>IMP::mmcif::metadata</namespace>
    <namespace>IMP::mmcif::restraint</namespace>
    <namespace>IMP::mmcif::util</namespace>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1mmcif.html</anchorfile>
      <anchor>aa75e04acc268d70c11bc8287ced682f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1mmcif.html</anchorfile>
      <anchor>ac5608e2f3315ac4c3eb77052dd47c4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1mmcif.html</anchorfile>
      <anchor>a3f8e399a238f93a69d0cac7d14332ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1mmcif.html</anchorfile>
      <anchor>af689af353d65649fe13ffe43d372e081</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::mmcif::data</name>
    <filename>namespaceIMP_1_1mmcif_1_1data.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_molecule</name>
      <anchorfile>namespaceIMP_1_1mmcif_1_1data.html</anchorfile>
      <anchor>a1980506b29e13804d10d0a8365192fd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::mmcif::metadata</name>
    <filename>namespaceIMP_1_1mmcif_1_1metadata.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::mmcif::restraint</name>
    <filename>namespaceIMP_1_1mmcif_1_1restraint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::mmcif::util</name>
    <filename>namespaceIMP_1_1mmcif_1_1util.html</filename>
    <class kind="class">IMP::mmcif::util::Writer</class>
  </compound>
  <compound kind="class">
    <name>IMP::mmcif::util::Writer</name>
    <filename>classIMP_1_1mmcif_1_1util_1_1Writer.html</filename>
    <member kind="function">
      <type>def</type>
      <name>add_model</name>
      <anchorfile>classIMP_1_1mmcif_1_1util_1_1Writer.html</anchorfile>
      <anchor>a08d0b415a6efd26ebfb0f1a898bd3e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_rmf</name>
      <anchorfile>classIMP_1_1mmcif_1_1util_1_1Writer.html</anchorfile>
      <anchor>a4c07279fb1ef7f7b508ab36c16016bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>report</name>
      <anchorfile>classIMP_1_1mmcif_1_1util_1_1Writer.html</anchorfile>
      <anchor>a2d7f9ca11049a298153d3b366849135c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write</name>
      <anchorfile>classIMP_1_1mmcif_1_1util_1_1Writer.html</anchorfile>
      <anchor>a68377ddd14b1b3f57697fe6f237c3f0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::modeller</name>
    <filename>namespaceIMP_1_1modeller.html</filename>
    <class kind="class">IMP::modeller::IMPRestraints</class>
    <class kind="class">IMP::modeller::ModellerRestraints</class>
    <class kind="class">IMP::modeller::ModelLoader</class>
    <member kind="function">
      <type>def</type>
      <name>add_soft_sphere_radii</name>
      <anchorfile>namespaceIMP_1_1modeller.html</anchorfile>
      <anchor>a5019d95ac400dc557cfcb761eb549b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1modeller.html</anchorfile>
      <anchor>aadbc0110cb502359a5c21bd596cac06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1modeller.html</anchorfile>
      <anchor>acf9fa960a40737bd783a9328ff5754e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1modeller.html</anchorfile>
      <anchor>a7d0c40d885711e9ebbcf59d59116f31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1modeller.html</anchorfile>
      <anchor>a6875694f8549e92c04861c0af158241c</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespaceIMP_1_1modeller" title="Modeller">modeller</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::modeller::IMPRestraints</name>
    <filename>classIMP_1_1modeller_1_1IMPRestraints.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1modeller_1_1IMPRestraints.html</anchorfile>
      <anchor>a21f888e57bb048eb19d070f60d099f78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::modeller::ModellerRestraints</name>
    <filename>classIMP_1_1modeller_1_1ModellerRestraints.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1modeller_1_1ModellerRestraints.html</anchorfile>
      <anchor>aa85e0c3201a834c3404d5c33418d562e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::modeller::ModelLoader</name>
    <filename>classIMP_1_1modeller_1_1ModelLoader.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a2960a4bb83ea1318c0ee602e56fa5de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_angles</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a864d3fcaa8b59792fa2ff1ecafa0f1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_atoms</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a0699a99bcaafce3995d98965002f4380</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_bonds</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a705c25e6b60a7997144f9f908f289492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_dihedrals</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>ac8f14bb1f2a2152c755fa6a4cdd899fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_dynamic_restraints</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>aeaec9948bae872160d020a040f90c6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_impropers</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a667111c7dc5849edf8d1e44ca6a617b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_static_restraints</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a13127eb3e47284272e9df7e14bc8f67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_static_restraints_file</name>
      <anchorfile>classIMP_1_1modeller_1_1ModelLoader.html</anchorfile>
      <anchor>a043e53258874b5571b707ccf1cb28e2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::mpi</name>
    <filename>namespaceIMP_1_1mpi.html</filename>
    <class kind="class">IMP::mpi::ReplicaExchange</class>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1mpi.html</anchorfile>
      <anchor>a61eaa51e62ad404df779a4a265a47798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1mpi.html</anchorfile>
      <anchor>a686cd56a7a045a21ddcb9175411be911</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1mpi.html</anchorfile>
      <anchor>abdd95811b337d1b2a7a84cc917d7a65b</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::mpi::ReplicaExchange</name>
    <filename>classIMP_1_1mpi_1_1ReplicaExchange.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>Floats</type>
      <name>create_temperatures</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>a00341119a393235457b04658067adad8</anchor>
      <arglist>(double tmin, double tmax, int nrep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>do_exchange</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>a8da36aa5da3659ed92ec90ed721f0a2c</anchor>
      <arglist>(double myscore0, double myscore1, int findex)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_exchange_array</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>ad5971d5e8ad770cc5ce0afa01bcda708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_friend_index</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>acf5f84840d3e6c93711d045e1a5923ed</anchor>
      <arglist>(int istep)</arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_friend_parameter</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>a8e5c15de68a04ce959b991abebafe727</anchor>
      <arglist>(std::string key, int findex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_my_index</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>ab343ae94a718609e38cb9539dd9c7622</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_my_parameter</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>aa9545d017d6867bff3c7ec8c83dba239</anchor>
      <arglist>(std::string key)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_replicas</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>a9a5c950b4a3debfeb79832c7f044a7e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>a2cc42707b549ed6d587ebe75390be13f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_my_parameter</name>
      <anchorfile>classIMP_1_1mpi_1_1ReplicaExchange.html</anchorfile>
      <anchor>aa7549dfd8d04b52c8dcc44324a4636ff</anchor>
      <arglist>(std::string key, Floats values)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::multi_state</name>
    <filename>namespaceIMP_1_1multi__state.html</filename>
    <class kind="class">IMP::multi_state::CompareMultiStateModels</class>
    <class kind="class">IMP::multi_state::EnsembleGenerator</class>
    <class kind="class">IMP::multi_state::MultiStateModel</class>
    <class kind="class">IMP::multi_state::MultiStateModelScore</class>
    <class kind="class">IMP::multi_state::SAXSMultiCombinationScore</class>
    <class kind="class">IMP::multi_state::SAXSMultiStateModelScore</class>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1multi__state.html</anchorfile>
      <anchor>a6ac56ea16ea6d80ed54f73cfa715cfd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1multi__state.html</anchorfile>
      <anchor>a779bf78a42b39503f7110e810535620b</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1multi__state.html</anchorfile>
      <anchor>aeca917413142b2d3b89898d73b71151b</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1multi__state" title="multi_foxs">multi_foxs_bin</docanchor>
    <docanchor file="namespaceIMP_1_1multi__state" title="multi_foxs_combination">multi_foxs_combination_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::CompareMultiStateModels</name>
    <filename>classIMP_1_1multi__state_1_1CompareMultiStateModels.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::EnsembleGenerator</name>
    <filename>classIMP_1_1multi__state_1_1EnsembleGenerator.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::MultiStateModel</name>
    <filename>classIMP_1_1multi__state_1_1MultiStateModel.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::MultiStateModelScore</name>
    <filename>classIMP_1_1multi__state_1_1MultiStateModelScore.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::SAXSMultiCombinationScore</name>
    <filename>classIMP_1_1multi__state_1_1SAXSMultiCombinationScore.html</filename>
    <templarg></templarg>
    <base>IMP::multi_state::MultiStateModelScore</base>
  </compound>
  <compound kind="class">
    <name>IMP::multi_state::SAXSMultiStateModelScore</name>
    <filename>classIMP_1_1multi__state_1_1SAXSMultiStateModelScore.html</filename>
    <templarg></templarg>
    <base>IMP::multi_state::MultiStateModelScore</base>
  </compound>
  <compound kind="namespace">
    <name>IMP::multifit</name>
    <filename>namespaceIMP_1_1multifit.html</filename>
    <class kind="class">IMP::multifit::AnchorsData</class>
    <class kind="class">IMP::multifit::AssemblyHeader</class>
    <class kind="class">IMP::multifit::ComplementarityRestraint</class>
    <class kind="class">IMP::multifit::ComponentHeader</class>
    <class kind="class">IMP::multifit::DataPointsAssignment</class>
    <class kind="class">IMP::multifit::DensityDataPoints</class>
    <class kind="class">IMP::multifit::DummyRestraint</class>
    <class kind="class">IMP::multifit::Ensemble</class>
    <class kind="class">IMP::multifit::FFTFitting</class>
    <class kind="class">IMP::multifit::FFTFittingOutput</class>
    <class kind="class">IMP::multifit::FittingSolutionRecord</class>
    <class kind="class">IMP::multifit::FittingStates</class>
    <class kind="class">IMP::multifit::GeometricHash</class>
    <class kind="class">IMP::multifit::MergeTreeBuilder</class>
    <class kind="class">IMP::multifit::ProbabilisticAnchorGraph</class>
    <class kind="class">IMP::multifit::ProteinsAnchorsSamplingSpace</class>
    <class kind="class">IMP::multifit::ProteomicsData</class>
    <class kind="class">IMP::multifit::ProteomicsEMAlignmentAtomic</class>
    <class kind="class">IMP::multifit::RadiusOfGyrationRestraint</class>
    <class kind="class">IMP::multifit::RigidLeavesRefiner</class>
    <class kind="class">IMP::multifit::SettingsData</class>
    <class kind="class">IMP::multifit::WeightedExcludedVolumeRestraint</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; AlignmentParams &gt;</type>
      <name>AlignmentParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a7322c47f87051feba6b29f57caf424c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; AnchorsData &gt;</type>
      <name>AnchorsDataList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a36f015b797d0053d39ac1ba53928bd7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ComplementarityParams &gt;</type>
      <name>ComplementarityParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a593a1ed5ac7e0ef5ee8a68b3141d506e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ComponentHeader &gt; &gt;</type>
      <name>ComponentHeaders</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a9962bd2ae6dfa569fc6138381f9fc72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ComponentHeader &gt; &gt;</type>
      <name>ComponentHeadersTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a2f3433e232b4d17eb22d746c0bf04fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ConnectivityParams &gt;</type>
      <name>ConnectivityParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aeaac2f10810a915d85456ad41e193480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; DensityDataPoints &gt; &gt;</type>
      <name>DensityDataPointsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aa20b45f55e7c7fd96f41ce3856c22535</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; DensityDataPoints &gt; &gt;</type>
      <name>DensityDataPointsListTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a63c963d09561d524caa83dddd89bccf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DominoParams &gt;</type>
      <name>DominoParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a4e3f2661912e8a4dff17bf2ed1ad41ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Ensemble &gt; &gt;</type>
      <name>Ensembles</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a95a979e03be1bace34327d2afb11aab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Ensemble &gt; &gt;</type>
      <name>EnsemblesTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a9db22354fb89bfa907bb35581f459e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; EVParams &gt;</type>
      <name>EVParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad4855c8ffbd12a1be19dd55fc0fe2a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FiltersParams &gt;</type>
      <name>FiltersParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af5ab3713c53a19c1ab9f0dc327b65d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingParams &gt;</type>
      <name>FittingParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a31b91e93553f49b37f3091f75d3949ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FittingSolutionRecord &gt;</type>
      <name>FittingSolutionRecords</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a6a146f6a8796d388d0d33755d430840e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; FragmentsParams &gt;</type>
      <name>FragmentsParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>abe9467dc6e8812b2b604896a2cb6ea89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProbabilisticAnchorGraph &gt; &gt;</type>
      <name>ProbabilisticAnchorGraphs</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aea7b9650d8e2c7cdb2637f980cc3de8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProbabilisticAnchorGraph &gt; &gt;</type>
      <name>ProbabilisticAnchorGraphsTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a25826ed1f67bba53f060e30e6a533c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProteinRecordData &gt;</type>
      <name>ProteinRecordDataList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af7a37843d8533160517b158ae6700659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; ProteinsAnchorsSamplingSpace &gt;</type>
      <name>ProteinsAnchorsSamplingSpaces</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae6378da58c4f17527065713f44a547f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ProteomicsEMAlignmentAtomic &gt; &gt;</type>
      <name>ProteomicsEMAlignmentAtomics</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a14f3e4f1232d67079f8f33c5d11ad100</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ProteomicsEMAlignmentAtomic &gt; &gt;</type>
      <name>ProteomicsEMAlignmentAtomicsTemp</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a682ff8e11ab5eb4ee1e67c045204a9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; RogParams &gt;</type>
      <name>RogParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a2bc56dd1adeb81281f92cb66e347e4b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; XlinkParams &gt;</type>
      <name>XlinkParamsList</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aa04d4a4969fea5408c08e77644f65ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_surface_index</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3e058408a3879546f50897a4e8f9253b</anchor>
      <arglist>(core::Hierarchy mhd, Float apix, FloatKey shell_key=FloatKey(&quot;surf_ind&quot;), FloatKey radius_key=core::XYZR::get_radius_key(), FloatKey weight_key=atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchy</type>
      <name>create_coarse_molecule_from_density</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3ae2f2b63f2b07f548e4fd095871d9b8</anchor>
      <arglist>(em::DensityMap *dmap, float dens_threshold, int num_beads, Model *mdl, float bead_radius)</arglist>
    </member>
    <member kind="function">
      <type>IMP::Restraint *</type>
      <name>create_weighted_excluded_volume_restraint</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a8273d850c0ab1cd53983c9f169af3cd6</anchor>
      <arglist>(core::RigidBody rb1, core::RigidBody rb2, FloatKey shell_key=FloatKey(&quot;surf_ind&quot;))</arglist>
    </member>
    <member kind="function">
      <type>multifit::FittingSolutionRecords</type>
      <name>fft_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af83b1866a4b7bb6747eea98bd9bb28e1</anchor>
      <arglist>(atom::Hierarchy mol2fit, em::DensityMap *dmap, double density_threshold, double angle_sampling_interval_rad)</arglist>
    </member>
    <member kind="function">
      <type>IntsList</type>
      <name>get_anchor_indices_matching_secondary_structure</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a173eff7add1e1652a69ce9c1365ddf2f</anchor>
      <arglist>(const AnchorsData &amp;ad, const atom::SecondaryStructureResidues &amp;ssrs, Float max_rmsd=0.7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_anchors_for_density</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>af5cfce601c0bc38d4fd668dec337b3f4</anchor>
      <arglist>(em::DensityMap *dmap, int number_of_means, float density_threshold, std::string pdb_filename, std::string cmm_filename, std::string seg_filename, std::string txt_filename)</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutionRecords</type>
      <name>get_close_to_point</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a72317593e3aff9f9e43e2e4f92481f47</anchor>
      <arglist>(const FittingSolutionRecords &amp;fit_sols, atom::Hierarchy mh, IMP::Particle *ap, Float dist)</arglist>
    </member>
    <member kind="function">
      <type>IntsList</type>
      <name>get_connected_components</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aebdba0d523d4730ee0031629b70b8ea1</anchor>
      <arglist>(em::DensityMap *dmap, float threshold, float edge_threshold)</arglist>
    </member>
    <member kind="function">
      <type>ProteinsAnchorsSamplingSpace</type>
      <name>get_part_of_sampling_space</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a1cc01cbbbb1cf9bb7f226524e0616e12</anchor>
      <arglist>(const ProteinsAnchorsSamplingSpace &amp;prots_ss, const Strings &amp;prot_names)</arglist>
    </member>
    <member kind="function">
      <type>multifit::SettingsData *</type>
      <name>get_partial_assembly_setting_data</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a3746dc39094e607667c55bde5aca85e6</anchor>
      <arglist>(multifit::SettingsData *prots_sd, const Strings &amp;prot_names)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3Ds</type>
      <name>get_points_close_to_molecule</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad9a90449965866bc3f547eb9e2193399</anchor>
      <arglist>(const atom::Hierarchy &amp;mh, const algebra::Vector3Ds points, Float max_dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_segmentation</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>aeb628c3804ee3d8aa7df59051b0ad1d2</anchor>
      <arglist>(em::DensityMap *dmap, double apix, double density_threshold, int num_means, const std::string pdb_filename, const std::string cmm_filename, const std::string seg_filename, const std::string txt_filename)</arglist>
    </member>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>pca_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a45c8385d6183240ec7216ae97374c7a9</anchor>
      <arglist>(core::RigidBody rb, Refiner *rb_refiner, em::DensityMap *em_map, Float threshold, FloatKey wei_key=atom::Mass::get_mass_key(), algebra::PrincipalComponentAnalysis dens_pca_input=algebra::PrincipalComponentAnalysis())</arglist>
    </member>
    <member kind="function">
      <type>em::FittingSolutions</type>
      <name>pca_based_rigid_fitting</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>afdf294ea4f4b41a0fa4da41f6c95e32c</anchor>
      <arglist>(ParticlesTemp ps, em::DensityMap *em_map, Float threshold, FloatKey wei_key=atom::Mass::get_mass_key(), algebra::PrincipalComponentAnalysis dens_pca_input=algebra::PrincipalComponentAnalysis())</arglist>
    </member>
    <member kind="function">
      <type>FittingSolutionRecords</type>
      <name>read_fitting_solutions</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae07f089c01764aa197297e2da4aa743a</anchor>
      <arglist>(const char *fitting_fn)</arglist>
    </member>
    <member kind="function">
      <type>IntsList</type>
      <name>read_paths</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a6d1c73d19e87fced1f49e28866f6acf7</anchor>
      <arglist>(const char *txt_filename, int max_paths=INT_MAX)</arglist>
    </member>
    <member kind="function">
      <type>ProteomicsData *</type>
      <name>read_proteomics_data</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ae4470dd25cd94e09c145556b62fd54b7</anchor>
      <arglist>(const char *proteomics_fn)</arglist>
    </member>
    <member kind="function">
      <type>em::DensityMap *</type>
      <name>remove_background</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a8528245410468cfc40ab674d0ef64d70</anchor>
      <arglist>(em::DensityMap *dmap, float threshold, float edge_threshold)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_connolly_surface</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ad3f92bb765e32aee3d6f1c0d15366d5a</anchor>
      <arglist>(atom::Atoms atoms, TextOutput fn, float density, float probe_radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_fitting_solutions</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a353be2a32c95fe02505606f5fc25465f</anchor>
      <arglist>(const char *fitting_fn, const FittingSolutionRecords &amp;fit_sols, int num_sols=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_segments_as_mrc</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>ac66c9128b0009595989bc520e3e6dcd3</anchor>
      <arglist>(em::DensityMap *dmap, const DataPointsAssignment &amp;dpa, Float resolution, Float apix, Float threshold, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a5285f017ecaf54c7034267601dd13dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a480006a88bd3b793459c5afaa4bee23c</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1multifit.html</anchorfile>
      <anchor>a4e6ed029ea3a4a15f38cd998c8bacbd2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1multifit" title="multifit: command line tool ">multifit_bin</docanchor>
    <docanchor file="namespaceIMP_1_1multifit" title="complex_to_anchor_graph ">complex_anchor_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::AnchorsData</name>
    <filename>classIMP_1_1multifit_1_1AnchorsData.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>get_secondary_structure_is_set</name>
      <anchorfile>classIMP_1_1multifit_1_1AnchorsData.html</anchorfile>
      <anchor>ad0ab430d781b9d0cd4663dec6090a7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_secondary_structure_probabilities</name>
      <anchorfile>classIMP_1_1multifit_1_1AnchorsData.html</anchorfile>
      <anchor>aa26fd429b4e9224d656c5d8936306967</anchor>
      <arglist>(const Particles &amp;ssres_ps, const Ints &amp;indices=Ints())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_secondary_structure</name>
      <anchorfile>classIMP_1_1multifit_1_1AnchorsData.html</anchorfile>
      <anchor>ad199d93f2865c7448b8d28d1663c9efd</anchor>
      <arglist>(Model *mdl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::AssemblyHeader</name>
    <filename>classIMP_1_1multifit_1_1AssemblyHeader.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1AssemblyHeader.html</anchorfile>
      <anchor>ab182e67eb0f992e5a81fa41bbc7e8643</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ComplementarityRestraint</name>
    <filename>classIMP_1_1multifit_1_1ComplementarityRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>ae26e624e20723cd439633fb012880a3b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a3fb871bbb061e460881096b1864139a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_complementarity_thickness</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a9f77d866de59965ead8ce1626ffa4d52</anchor>
      <arglist>(double th)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_complementarity_value</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>ad5cf5dc29719b19a9deb7cb3504c6250</anchor>
      <arglist>(double th)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interior_layer_thickness</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a1172757f971a296631e3ec15b39df6a9</anchor>
      <arglist>(double th)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_penetration</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a865805a86d84f35935fc2115b0feb075</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_penetration_score</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>af73ad08df0acb0c0d7fdbc415c4d79f1</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_maximum_separation</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a882c153d956b972f12180cf0af3a15c6</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1multifit_1_1ComplementarityRestraint.html</anchorfile>
      <anchor>a9c7331674e24e5874371f4966a6f2cbd</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ComponentHeader</name>
    <filename>classIMP_1_1multifit_1_1ComponentHeader.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1ComponentHeader.html</anchorfile>
      <anchor>a81aced1ad9ac945c66d954e0c0be71e7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::DataPointsAssignment</name>
    <filename>classIMP_1_1multifit_1_1DataPointsAssignment.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::DensityDataPoints</name>
    <filename>classIMP_1_1multifit_1_1DensityDataPoints.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::DummyRestraint</name>
    <filename>classIMP_1_1multifit_1_1DummyRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1multifit_1_1DummyRestraint.html</anchorfile>
      <anchor>ad3a0387c86e2f83fcab3985e9a58a033</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1DummyRestraint.html</anchorfile>
      <anchor>aae8c8ee56232b6bd0d7588e441eef333</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1multifit_1_1DummyRestraint.html</anchorfile>
      <anchor>a31afcd6930599e78a4798ad4918c54d7</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::Ensemble</name>
    <filename>classIMP_1_1multifit_1_1Ensemble.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1Ensemble.html</anchorfile>
      <anchor>a5a02b2e14f7be4f3b790040d17db2477</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::FFTFitting</name>
    <filename>classIMP_1_1multifit_1_1FFTFitting.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>FFTFittingOutput *</type>
      <name>do_global_fitting</name>
      <anchorfile>classIMP_1_1multifit_1_1FFTFitting.html</anchorfile>
      <anchor>a136cac955ee735ec87b1238b82aa67ac</anchor>
      <arglist>(em::DensityMap *dmap, double density_threshold, atom::Hierarchy mol2fit, double angle_sampling_interval_rad, int num_fits_to_report, double max_clustering_translation, double max_clustering_angle, bool cluster_fits=true, int num_angle_per_voxel=1, const std::string &amp;angles_filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FFTFittingOutput *</type>
      <name>do_local_fitting</name>
      <anchorfile>classIMP_1_1multifit_1_1FFTFitting.html</anchorfile>
      <anchor>ae47864b146f9cf99c92495967e611d01</anchor>
      <arglist>(em::DensityMap *dmap, double density_threshold, atom::Hierarchy mol2fit, double angle_sampling_interval_rad, double max_angle_sampling_rad, double max_translation, int num_fits_to_report, bool cluster_fits, int num_angle_per_voxel, double max_clustering_translation, double max_clustering_rotation, const std::string &amp;angles_filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1FFTFitting.html</anchorfile>
      <anchor>a62c07961bde4c2ae78346345ce27f9ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FittingSolutionRecords</type>
      <name>detect_top_fits</name>
      <anchorfile>classIMP_1_1multifit_1_1FFTFitting.html</anchorfile>
      <anchor>ac4e0b3ee481b867448bdb5e5fed83115</anchor>
      <arglist>(const internal::RotScoresVec &amp;rot_scores, bool cluster_fits, double max_translation, double max_clustering_trans, double max_clustering_rotation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::FFTFittingOutput</name>
    <filename>classIMP_1_1multifit_1_1FFTFittingOutput.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1FFTFittingOutput.html</anchorfile>
      <anchor>a3daf74185ac58f0ca7affcb67073cbd7</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::FittingSolutionRecord</name>
    <filename>classIMP_1_1multifit_1_1FittingSolutionRecord.html</filename>
    <member kind="function">
      <type></type>
      <name>FittingSolutionRecord</name>
      <anchorfile>classIMP_1_1multifit_1_1FittingSolutionRecord.html</anchorfile>
      <anchor>aeae3aef9eae5c906c9dc0cf4d1dc7c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1multifit_1_1FittingSolutionRecord.html</anchorfile>
      <anchor>a68a6a553daa489eac9cdbe1318eba464</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::FittingStates</name>
    <filename>classIMP_1_1multifit_1_1FittingStates.html</filename>
    <base>IMP::domino::ParticleStates</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1FittingStates.html</anchorfile>
      <anchor>aca8c255de582acdef6198c68ea65ac9e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::GeometricHash</name>
    <filename>classIMP_1_1multifit_1_1GeometricHash.html</filename>
    <templarg></templarg>
    <templarg>D</templarg>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classIMP_1_1multifit_1_1GeometricHash.html</anchorfile>
      <anchor>a04e368aff3a3e7dc3f190bcceb7409d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BucketList</type>
      <name>get_buckets</name>
      <anchorfile>classIMP_1_1multifit_1_1GeometricHash.html</anchorfile>
      <anchor>a285bff2f516ff35600d121f3fefda28f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GeomMap const &amp;</type>
      <name>Map</name>
      <anchorfile>classIMP_1_1multifit_1_1GeometricHash.html</anchorfile>
      <anchor>a21f373b5895ed4b786e2593032421309</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::MergeTreeBuilder</name>
    <filename>classIMP_1_1multifit_1_1MergeTreeBuilder.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ProbabilisticAnchorGraph</name>
    <filename>classIMP_1_1multifit_1_1ProbabilisticAnchorGraph.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1ProbabilisticAnchorGraph.html</anchorfile>
      <anchor>a1f40bf6af06636a9d3a05ad2d5c13803</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_particle_probabilities_on_anchors</name>
      <anchorfile>classIMP_1_1multifit_1_1ProbabilisticAnchorGraph.html</anchorfile>
      <anchor>ab94a576dc10c30919f4d7ee8087883ec</anchor>
      <arglist>(Particle *p, multifit::FittingSolutionRecords sols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ProteinsAnchorsSamplingSpace</name>
    <filename>classIMP_1_1multifit_1_1ProteinsAnchorsSamplingSpace.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ProteomicsData</name>
    <filename>classIMP_1_1multifit_1_1ProteomicsData.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>int</type>
      <name>add_protein</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsData.html</anchorfile>
      <anchor>ab0c990e6e1c1b47dcd7766976e4297b4</anchor>
      <arglist>(std::string name, int start_res, int end_res, const std::string &amp;mol_fn, const std::string &amp;surface_fn, const std::string &amp;ref_fn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>add_protein</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsData.html</anchorfile>
      <anchor>a5414b856576ca514581bef639cea77cf</anchor>
      <arglist>(const ProteinRecordData &amp;rec)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsData.html</anchorfile>
      <anchor>afa1e74f7eca6ee59f2e7d2a345975133</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::ProteomicsEMAlignmentAtomic</name>
    <filename>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>add_all_restraints</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</anchorfile>
      <anchor>a6f54cacaabe39632cf282d202d1327a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RestraintSet *</type>
      <name>get_restraint_set</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</anchorfile>
      <anchor>a065c8a22465b882c0c07518c097b721e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</anchorfile>
      <anchor>a35f786bf818d87dea5605de4889ab8e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_combination_of_states</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</anchorfile>
      <anchor>ac82cf2f7f641892f456c67da2ae3568b</anchor>
      <arglist>(const Ints &amp;state4particles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fast_scoring</name>
      <anchorfile>classIMP_1_1multifit_1_1ProteomicsEMAlignmentAtomic.html</anchorfile>
      <anchor>a568c21102d08963792bae063a1820f45</anchor>
      <arglist>(bool state)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::RadiusOfGyrationRestraint</name>
    <filename>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>RadiusOfGyrationRestraint</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>acbda675b11c0086ecf8d6ce4e6f2028a</anchor>
      <arglist>(Particles ps, int num_residues, Float scale=1.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>afb65095d175421f7ed20b1d60a1f1f63</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_radius_of_gyration</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a847cc2b1894c5d6a192cb28b780588c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>af319510c563d76d6fc852076a950c703</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_radius_of_gyration</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a88174776515fb9fb9725bd91c725fe7e</anchor>
      <arglist>(Float r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a0477925f07f75b8525fa1a23227cdc7a</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1multifit_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a3969666db8a2c52c752a28f41a78300b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::RigidLeavesRefiner</name>
    <filename>classIMP_1_1multifit_1_1RigidLeavesRefiner.html</filename>
    <base>IMP::Refiner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1multifit_1_1RigidLeavesRefiner.html</anchorfile>
      <anchor>a4891c1d914cda24c748074ac6b6d1bc7</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_can_refine</name>
      <anchorfile>classIMP_1_1multifit_1_1RigidLeavesRefiner.html</anchorfile>
      <anchor>ac0a25db0576ae7c43b3d636df657450e</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const ParticlesTemp</type>
      <name>get_refined</name>
      <anchorfile>classIMP_1_1multifit_1_1RigidLeavesRefiner.html</anchorfile>
      <anchor>a42116e2b0e24cdf0bde9c9aebe031e82</anchor>
      <arglist>(Particle *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1RigidLeavesRefiner.html</anchorfile>
      <anchor>a2be9ae3cd9ed95d1cdf5d08d77b3cfe1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::SettingsData</name>
    <filename>classIMP_1_1multifit_1_1SettingsData.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1SettingsData.html</anchorfile>
      <anchor>a4034d9d91078a8fe34d2ce572333744f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>component_headers</name>
      <anchorfile>classIMP_1_1multifit_1_1SettingsData.html</anchorfile>
      <anchor>a5bbfc02e8dc9e3b0dc3802927480873d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::WeightedExcludedVolumeRestraint</name>
    <filename>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>WeightedExcludedVolumeRestraint</name>
      <anchorfile>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</anchorfile>
      <anchor>a1b6c81a897d408afc71a09df136738c3</anchor>
      <arglist>(core::RigidBodies rbs, Refiner *refiner, FloatKey weight_key=IMP::atom::Mass::get_mass_key())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</anchorfile>
      <anchor>ab126d0e712711e6f1e8de098855ca669</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</anchorfile>
      <anchor>adeb5c5034841fd693ddc848a32919763</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</anchorfile>
      <anchor>a7c7ca51814d10be0e9ad264a6c5ce045</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="variable">
      <type>list</type>
      <name>particles</name>
      <anchorfile>classIMP_1_1multifit_1_1WeightedExcludedVolumeRestraint.html</anchorfile>
      <anchor>a65c3b72ae2fb2d369601c839c32b9fdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::cluster::AlignmentClustering</name>
    <filename>classIMP_1_1multifit_1_1cluster_1_1AlignmentClustering.html</filename>
    <member kind="function">
      <type>def</type>
      <name>do_clustering</name>
      <anchorfile>classIMP_1_1multifit_1_1cluster_1_1AlignmentClustering.html</anchorfile>
      <anchor>a33a6041b93f39437d76d684518a5c61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_cc</name>
      <anchorfile>classIMP_1_1multifit_1_1cluster_1_1AlignmentClustering.html</anchorfile>
      <anchor>acdde61014fb8039d535e3951478fa91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_placement_score_from_coordinates</name>
      <anchorfile>classIMP_1_1multifit_1_1cluster_1_1AlignmentClustering.html</anchorfile>
      <anchor>af6e7b9a40b1294d150729e4fbd8c6ecc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::transforms::ChimeraFormatter</name>
    <filename>classIMP_1_1multifit_1_1transforms_1_1ChimeraFormatter.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::multifit::transforms::DockRefFormatter</name>
    <filename>classIMP_1_1multifit_1_1transforms_1_1DockRefFormatter.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::nestor</name>
    <filename>namespaceIMP_1_1nestor.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::npc</name>
    <filename>namespaceIMP_1_1npc.html</filename>
    <class kind="class">IMP::npc::AssemblySymmetryByDihedralRestraint</class>
    <class kind="class">IMP::npc::AssemblySymmetryByDistanceRestraint</class>
    <class kind="class">IMP::npc::CompositeRestraint</class>
    <class kind="class">IMP::npc::MembraneExclusionRestraint</class>
    <class kind="class">IMP::npc::MembraneSurfaceLocationConditionalRestraint</class>
    <class kind="class">IMP::npc::MembraneSurfaceLocationRestraint</class>
    <class kind="class">IMP::npc::MinimumSphereDistancePairScore</class>
    <class kind="class">IMP::npc::OverallPositionRestraint</class>
    <class kind="class">IMP::npc::PerinuclearVolumeLocationRestraint</class>
    <class kind="class">IMP::npc::PoreSideVolumeLocationRestraint</class>
    <class kind="class">IMP::npc::ProteinChainRestraint</class>
    <class kind="class">IMP::npc::ProteinContactRestraint</class>
    <class kind="class">IMP::npc::ProteinProximityRestraint</class>
    <class kind="class">IMP::npc::SlabWithPore</class>
    <class kind="class">IMP::npc::SlabWithSphericalIndent</class>
    <class kind="class">IMP::npc::SlabWithSphericalIndentGeometry</class>
    <class kind="class">IMP::npc::SlabWithSphericalIndentMBMScore</class>
    <class kind="class">IMP::npc::SlabWithToroidalPore</class>
    <class kind="class">IMP::npc::SlabWithToroidalPoreGoPairScore</class>
    <class kind="class">IMP::npc::SlabWithToroidalPoreMBMScore</class>
    <class kind="class">IMP::npc::SlabWithToroidalPoreWireGeometry</class>
    <class kind="class">IMP::npc::SphericalIndentSurfaceDepthPairScore</class>
    <class kind="class">IMP::npc::ToroidalPoreSurfaceDepthPairScore</class>
    <class kind="class">IMP::npc::XAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::XAxialPositionRestraint</class>
    <class kind="class">IMP::npc::XAxialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionRestraint</class>
    <class kind="class">IMP::npc::XYRadialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionRestraint</class>
    <class kind="class">IMP::npc::YAxialPositionUpperRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionLowerRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionRestraint</class>
    <class kind="class">IMP::npc::ZAxialPositionUpperRestraint</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithSphericalIndentMBMScore &gt; &gt;</type>
      <name>SlabWithSphericalIndentMBMScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a9118d6774a0225d8449e80929bb413c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithSphericalIndentMBMScore &gt; &gt;</type>
      <name>SlabWithSphericalIndentMBMScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a6aab20c75043a77079de546857ebd528</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithToroidalPoreGoPairScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreGoPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a5a859de534d3e53d665daab41edbc4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithToroidalPoreGoPairScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreGoPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>ada271e63fc71762c502aec88d260c432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SlabWithToroidalPoreMBMScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreMBMScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a569c7cc204429d27b3e65fb7cd8c1718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SlabWithToroidalPoreMBMScore &gt; &gt;</type>
      <name>SlabWithToroidalPoreMBMScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a7a5b19f314e6be6f668b08261a2e0309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SphericalIndentSurfaceDepthPairScore &gt; &gt;</type>
      <name>SphericalIndentSurfaceDepthPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a83f21737106a1d39f4da1065dac8c8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SphericalIndentSurfaceDepthPairScore &gt; &gt;</type>
      <name>SphericalIndentSurfaceDepthPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a9a35501fd415555cf1f68e17b902429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ToroidalPoreSurfaceDepthPairScore &gt; &gt;</type>
      <name>ToroidalPoreSurfaceDepthPairScores</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a098a83361d3fa51f50695973f95be4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ToroidalPoreSurfaceDepthPairScore &gt; &gt;</type>
      <name>ToroidalPoreSurfaceDepthPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a5b8d58ae565ded6ba08b432266721a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a1247ecf11c63dadddbcfc12e55f8a4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>a039e2d93f49b8da0c8b24001cd80fda0</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1npc.html</anchorfile>
      <anchor>aa685c21faa3f5be7fd782c9febf262bc</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::AssemblySymmetryByDihedralRestraint</name>
    <filename>classIMP_1_1npc_1_1AssemblySymmetryByDihedralRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDihedralRestraint.html</anchorfile>
      <anchor>a24c250dd8cdd4654d7076ebe94732940</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDihedralRestraint.html</anchorfile>
      <anchor>a140ed9b1b5614f2f91d82fda40c63239</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDihedralRestraint.html</anchorfile>
      <anchor>a8ff705eb2e04323c0561b04b6fe827b3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::AssemblySymmetryByDistanceRestraint</name>
    <filename>classIMP_1_1npc_1_1AssemblySymmetryByDistanceRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDistanceRestraint.html</anchorfile>
      <anchor>a34910336a251cf1c3b67674f9da1f2eb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDistanceRestraint.html</anchorfile>
      <anchor>a992739e602abb4d4d6bf5d4c76877961</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1AssemblySymmetryByDistanceRestraint.html</anchorfile>
      <anchor>a8cb6d7701e901d4653eb5d8bce26533e</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::CompositeRestraint</name>
    <filename>classIMP_1_1npc_1_1CompositeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CompositeRestraint</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>a645448ed2623fd3793167938f50f7038</anchor>
      <arglist>(Model *m, PairScore *ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_type</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>a332aaa9474e2f7c94bbe8b9468f0fec1</anchor>
      <arglist>(ParticleIndexes ps)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>afefa81ac008b8c59724aa235b329c28b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPairs</type>
      <name>get_connected_pairs</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>a48c397e78a4459aa520d527aeb80ed6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>a9756e8a8f8f49a44a1bc9a916f6e26ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1CompositeRestraint.html</anchorfile>
      <anchor>a630c04fdbf5990b7eb69cf7da0872328</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::MembraneExclusionRestraint</name>
    <filename>classIMP_1_1npc_1_1MembraneExclusionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>a131c7468b67f88cdfee1ab8f6c149835</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>a7bfa44d403fce004d6dbf82f23616615</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>a7fd5a1c598cd68e91b07e9a26fe6ec2b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>a766f73f04f565401aa4240041123c39b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::MembraneSurfaceLocationConditionalRestraint</name>
    <filename>classIMP_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>ae58900974006dc440f1f8dcbc6575c18</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>a0632927bd1b15d62cd7983b71963b7bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>a1f9f11f01a2a03e285286aa6165ce577</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>ada648017c63b6284e8f3614ae270a57c</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::MembraneSurfaceLocationRestraint</name>
    <filename>classIMP_1_1npc_1_1MembraneSurfaceLocationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>a08959cdd2555522092bb1ad10bb5cb43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>a26f9e734838d33fe547db7837ee57ac7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>a80772590591003e269de6fba3450afa4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>af5db9da5aa1ddf4dc135172212a31f96</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::MinimumSphereDistancePairScore</name>
    <filename>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>ac6bac91688ca6f04aaa633d30258ab14</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>a9d21b494fcd446995a50014e7da20709</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>aa671f74191bc81438259fca6f4590824</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pi, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>a34f16fbebe6a80bfba9c5e6abada800f</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>a489d208c9864d1f81e914456a3f4546e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>ab2d020f8f0a66dd6ade96593606c7229</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1MinimumSphereDistancePairScore.html</anchorfile>
      <anchor>ac98afbe144d2c7b8d632b6a42b697e08</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::OverallPositionRestraint</name>
    <filename>classIMP_1_1npc_1_1OverallPositionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1OverallPositionRestraint.html</anchorfile>
      <anchor>a5543844be56b80dc75efc36bd722fdec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1OverallPositionRestraint.html</anchorfile>
      <anchor>aaf7443027efaf10e588a36d25defcc3d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1OverallPositionRestraint.html</anchorfile>
      <anchor>a2ff19849f7d9f775c99ecc74abf53285</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1OverallPositionRestraint.html</anchorfile>
      <anchor>abb26480be5f6586c64ee7be26d89d873</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::PerinuclearVolumeLocationRestraint</name>
    <filename>classIMP_1_1npc_1_1PerinuclearVolumeLocationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1PerinuclearVolumeLocationRestraint.html</anchorfile>
      <anchor>ab98a049f2d2db9df8f2963ed2f49f6ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1PerinuclearVolumeLocationRestraint.html</anchorfile>
      <anchor>aa01a7ead0d7a451e6cf714dbda83b1f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1PerinuclearVolumeLocationRestraint.html</anchorfile>
      <anchor>a6b1a44f199664b7290a9eb1ad335745a</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::PoreSideVolumeLocationRestraint</name>
    <filename>classIMP_1_1npc_1_1PoreSideVolumeLocationRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1PoreSideVolumeLocationRestraint.html</anchorfile>
      <anchor>af562034c7bc8fa27c4f3688875d5850c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1PoreSideVolumeLocationRestraint.html</anchorfile>
      <anchor>a4bdf805a8a9b42e49e6d8a0ee0f79679</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1PoreSideVolumeLocationRestraint.html</anchorfile>
      <anchor>ae424ef7c5e7b3b7ff16dd640230e8aea</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ProteinChainRestraint</name>
    <filename>classIMP_1_1npc_1_1ProteinChainRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinChainRestraint.html</anchorfile>
      <anchor>a5a33ea9e2ce207e374aaf1285ac46639</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinChainRestraint.html</anchorfile>
      <anchor>a8a3f58f4e6468970106eceb8fb2e6dd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinChainRestraint.html</anchorfile>
      <anchor>a84f82996f7fc9de5f92544975c842930</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ProteinContactRestraint</name>
    <filename>classIMP_1_1npc_1_1ProteinContactRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinContactRestraint.html</anchorfile>
      <anchor>a076c6e0cff3b2130cab6a607ca800c7a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinContactRestraint.html</anchorfile>
      <anchor>acd7869cb0f9efdc40f42ca74c1c79d3c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinContactRestraint.html</anchorfile>
      <anchor>ace63cd749313bf4c9fb1e7864b3a740c</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ProteinProximityRestraint</name>
    <filename>classIMP_1_1npc_1_1ProteinProximityRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinProximityRestraint.html</anchorfile>
      <anchor>abd1638fb22dcf55857f0becebbee6fad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinProximityRestraint.html</anchorfile>
      <anchor>a7aab1a992492014168fcdd2b217755fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ProteinProximityRestraint.html</anchorfile>
      <anchor>a5ed496956a84513c3dda20d8f9d88b21</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithPore</name>
    <filename>classIMP_1_1npc_1_1SlabWithPore.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_pore_radius_derivative</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a7ee3a22408cedfb37b60db1e98d13c56</anchor>
      <arglist>(double v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_pore_radius</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>ad9253350ad393e92df7e29a6e53d6cba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_thickness</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a4477cc9000610d138c9846c847a864db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pore_radius</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>ab6360278f033633dc302e441a609543c</anchor>
      <arglist>(double r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pore_radius_is_optimized</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a71591219795470c9b604d022d124c04f</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_thickness</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>aa12abe84cb909a9aa908f69bd80fef1a</anchor>
      <arglist>(double thickness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a5a47b1108ad7cc2162878adf7b9389da</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_pore_radius_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a36ada542ce2483cdc489fdd5a09c7d08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_thickness_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a582cf6e2262f5331b4e32c15b912f1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a70f6f238fa9309a0e5d5597acad1f906</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double pore_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithPore.html</anchorfile>
      <anchor>a73489d0b8dc1b2780d653555600f7a4e</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double pore_radius)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithSphericalIndent</name>
    <filename>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>std::string</type>
      <name>get_decorator_name</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a845d1584dbe2829bb5f7feb48dca64eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_sphere_depth</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>acbbcce75d1738db3e014f8ffe2de31c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_sphere_radius</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a51179646f73936a3502e805a5dddd667</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_decorator_name</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a2d32b132fba7a08748253f67b008abc1</anchor>
      <arglist>(std::string nm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a690529f541d7c7362123cb5b7c8778bf</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_sphere_depth_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>adcaa9f2474e1a46562e2fd03dfcb7c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_sphere_radius_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a82f44fe1cb0cccef5a73d250f95e0ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithSphericalIndent</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a6d429742957ba2fd9c3b836fce2a8f11</anchor>
      <arglist>(Model *m, ParticleIndex pi, double R, double h)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithSphericalIndent</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndent.html</anchorfile>
      <anchor>a6302a2e18d02bbb23ef8b7164b84c86b</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double R, double h)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithSphericalIndentGeometry</name>
    <filename>classIMP_1_1npc_1_1SlabWithSphericalIndentGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentGeometry.html</anchorfile>
      <anchor>ad79b0aeebc04595a1496719fd737d1bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentGeometry.html</anchorfile>
      <anchor>aece729fbbce18f00ded37984a4ede9da</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithSphericalIndentMBMScore</name>
    <filename>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SlabWithSphericalIndentMBMScore</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>a0974b888053b86fc6f4a8c8f947fcd58</anchor>
      <arglist>(double x0, double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>a8f5e0ca4c3ee5f5a54e895c42704ecf2</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>ab295d07a22791c9bb4cfd57ae4ebed18</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>a7768f92a3f7be59b65bca782d095360b</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>a976398242660b370fe29ce570d4ee8f7</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>ae06263430a479c7a318a34ba16e6536f</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>ab2cb54b999d427efc69c36ee351b36e8</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithSphericalIndentMBMScore.html</anchorfile>
      <anchor>af0af38b901c96998df5c25b9a5d1b617</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithToroidalPore</name>
    <filename>classIMP_1_1npc_1_1SlabWithToroidalPore.html</filename>
    <base>IMP::npc::SlabWithPore</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a53144048023d47913bd0acb78bc2a072</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_minor_radius_h2v_aspect_ratio_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a686613cd0b2b9fc89ce0424b09f4db3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_toroidal_pore_key</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>ad8a93d7cc7a3c0f45d4d81ccf573783b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>ae3877754da3268d2b9c8d06b21c4051d</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double major_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a5d2de87bff91f7c17535447c91a70e69</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double major_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a8fdd9f52a4da97953ae11a363446b50a</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double major_radius, double minor_radius_h2v_aspect_ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a46ebec4b9c4c94cc8297f796d994479c</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double major_radius, double minor_radius_h2v_aspect_ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithToroidalPoreGoPairScore</name>
    <filename>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreGoPairScore</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a56f80834de703f3a91d773b004051ece</anchor>
      <arglist>(double x0, double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a55b3dd604bf81d2cd2b579abf3247a39</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a3d1f656db8b3df8b36dfb58abb54d96a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a654d16a821c955f1edc3219b143383a3</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a7fbf189563953b077c36b708df385396</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>aef132b512c89758c92328aa6f16ca2c4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>a1104d84f764fc608ad4db2179e89b783</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreGoPairScore.html</anchorfile>
      <anchor>aae8d8697b36b39b2eab28d8e28eac380</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithToroidalPoreMBMScore</name>
    <filename>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreMBMScore</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>ae0913bdebb6038279eb0c350f619f8c3</anchor>
      <arglist>(double x0_upper, double x0_lower, double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>ac6f666d71062b61a69bb3e2d81228f9e</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>a3d37e6e91a879da02477f6590de88d89</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>ae5a0664116b23c50e57d50e1ab0a7f3f</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>ac1f26fdb8fb17a6be0c56d8b9bef4080</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>aee67a96b68311324c170f473a24bd65c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>a3e8cc19f755f7253d3c31fbfad13cb95</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreMBMScore.html</anchorfile>
      <anchor>aed3bf8c543838bdc019dea47391b4e46</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SlabWithToroidalPoreWireGeometry</name>
    <filename>classIMP_1_1npc_1_1SlabWithToroidalPoreWireGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreWireGeometry</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>a39314be9e2c539631050c3d08e5315ef</anchor>
      <arglist>(double slab_height, double major_radius, double horizontal_semiaxis, double slab_length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreWireGeometry</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>a13130557de4941f29a63affc6b66f601</anchor>
      <arglist>(double slab_height, double major_radius, double slab_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>a9c48db5feecb8080232847a8bfb9b640</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>acd8ea44125fd097af90f09bd1dd2801f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::SphericalIndentSurfaceDepthPairScore</name>
    <filename>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SphericalIndentSurfaceDepthPairScore</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>a744c21e07b3017f0d8e51655aaa865c7</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>ae73200deeb09261fc614df01b6785a4d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>aef2644d5422d850a70b1a797b2d82e04</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>ac223f0927727b5ba648e7947086fd921</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>aa403ecce536cf8f0d71bf6a3aa5fc257</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>a1256ded6469071bae65f18202f610318</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>a33bf55f9f4f057ac14cb23d0f057fdaa</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1SphericalIndentSurfaceDepthPairScore.html</anchorfile>
      <anchor>a136f3a9ec4de21e0f25d5730d5c45f21</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ToroidalPoreSurfaceDepthPairScore</name>
    <filename>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>ToroidalPoreSurfaceDepthPairScore</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a5b6d0e390af662b859c6131c07839562</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a188e29818afe3e8f9b610ea5bae1f596</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>ac58ccecdee8dceb5b338119d0ffd9285</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a5faeb819af54022ba630b605717c0faf</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a6670634dc4ce9dc2ac9a48a684411621</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>ad5374100a842fb2c5122a0f02c156687</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a8768cbcfacab7bf4a9bef495a0d8963a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ToroidalPoreSurfaceDepthPairScore.html</anchorfile>
      <anchor>a49415b28a7b04e5120de81f295bec089</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1npc_1_1XAxialPositionLowerRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionLowerRestraint.html</anchorfile>
      <anchor>af46fdb3311347828388e918df59d9a03</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionLowerRestraint.html</anchorfile>
      <anchor>aaa0b04243bf647852001a70f03247179</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionLowerRestraint.html</anchorfile>
      <anchor>afd0a975c1b47af5b0a27cd70790cba5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a0b21ed399847f297d20a9bc3bb151aa5</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XAxialPositionRestraint</name>
    <filename>classIMP_1_1npc_1_1XAxialPositionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionRestraint.html</anchorfile>
      <anchor>ad380450cd3178c6c01311a725a46f2c2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionRestraint.html</anchorfile>
      <anchor>ae75077256cdd42b9bee63baf4bd8f257</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionRestraint.html</anchorfile>
      <anchor>aacbd5cd306b907a6081fa8f2016320f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionRestraint.html</anchorfile>
      <anchor>a9eaf1f874d0094e6844a9acb50642342</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1npc_1_1XAxialPositionUpperRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionUpperRestraint.html</anchorfile>
      <anchor>abbaf16bff19fb4cebd705ed8e6b11918</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionUpperRestraint.html</anchorfile>
      <anchor>ac19e3c0d41fac3aebdbd309de3227c64</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionUpperRestraint.html</anchorfile>
      <anchor>aaf8f423a3961281c0afeb5fbd97c2206</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a1f984b9502ed2a2ca15a1fcbb333dcca</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XYRadialPositionLowerRestraint</name>
    <filename>classIMP_1_1npc_1_1XYRadialPositionLowerRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>aa0447dde34491d05887e52865201b832</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>a2f5872ddac29d262012aaf8f6af3b290</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>ab717b815bf4bb1d572b071e16d0cf8b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>a7dcd7c444ec51541a109c52a72a9cd0c</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XYRadialPositionRestraint</name>
    <filename>classIMP_1_1npc_1_1XYRadialPositionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>a17a3e6643619778a6b3797762ce484dd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>a4d5f3df75cd28b72a7b7f580bb164591</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>acfb2474c360a4e55e6469c435d702060</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>a8f9ca04fc9e827caf0fb53cef3e49fea</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::XYRadialPositionUpperRestraint</name>
    <filename>classIMP_1_1npc_1_1XYRadialPositionUpperRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>ac80ecfc4a68b9155640d499340544ce4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>a1ab15112aefdbb85d93f775e54ff352f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>a2ed5ccc504f78e581738a898fd49bc87</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>aef6211479e4d7b0768b71238fe18b77e</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::YAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1npc_1_1YAxialPositionLowerRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a631767d7f3291adc320fd11add6f576b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>ac2a6e4650922b0861568310f1e46dc26</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>aa64a3eb685b46bd6cfe62200df75a208</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>ae0226146a91f01e07689a9e8460260f4</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::YAxialPositionRestraint</name>
    <filename>classIMP_1_1npc_1_1YAxialPositionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>ab841ef6b5cb392d0c3b6fbf365c0f67b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>ae702b81295cdefc863013463d828ae68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>a8581d8209b64e39b29e9c8c85a09b5c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>a12369a1f24279a7af8e35e001de26188</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::YAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1npc_1_1YAxialPositionUpperRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>ab317030a08d92c8413147a6288b8bd21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>aad5c43f25d5fac0c6d728d0cda656ff5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>acf17a2015c652dd4d6be5208dc6f7c32</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a80953b923101309fa8c78bf3c5cb5c3a</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ZAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1npc_1_1ZAxialPositionLowerRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a4e32c3985b18a549771e18dbbbb23d7b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a53a25851888e057bea962f3c45190ccb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a8c3dde801d2765e86ed57b34cac74933</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>aa4054e4da2bea45283efe71cff7b436b</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ZAxialPositionRestraint</name>
    <filename>classIMP_1_1npc_1_1ZAxialPositionRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>a0b3e3ff9c2493011ffbe9d78280470b5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>a0600956339c89679fa968459eb8c100a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>ab03fc99300c114a21ce4b370d83c9520</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>aacaccd6f36f004f54beddd33d01e7588</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npc::ZAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1npc_1_1ZAxialPositionUpperRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a818c60298a6ee7a1c1b6ee626a147c69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>ab7d921665a2a639f909beb0b97785b28</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a410786e860f865f6d12a609be5bbe43e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>ae9dda69c4b0903fbf13a523c3e9c140f</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::npctransport</name>
    <filename>namespaceIMP_1_1npctransport.html</filename>
    <class kind="class">IMP::npctransport::AnchorToCylidnricalPorePairScore</class>
    <class kind="class">IMP::npctransport::BipartitePairsStatisticsOptimizerState</class>
    <class kind="class">IMP::npctransport::BodyStatisticsOptimizerState</class>
    <class kind="class">IMP::npctransport::BrownianDynamicsTAMDWithSlabSupport</class>
    <class kind="class">IMP::npctransport::ChainStatisticsOptimizerState</class>
    <class kind="class">IMP::npctransport::ExcludeZRangeSingletonScore</class>
    <class kind="class">IMP::npctransport::FGChain</class>
    <class kind="class">IMP::npctransport::FunctorLinearInteractionPairScore</class>
    <class kind="class">IMP::npctransport::FunctorLinearSoftSpherePairScore</class>
    <class kind="class">IMP::npctransport::GlobalStatisticsOptimizerState</class>
    <class kind="class">IMP::npctransport::HarmonicSpringSingletonScore</class>
    <class kind="class">IMP::npctransport::HarmonicWellPairScore</class>
    <class kind="class">IMP::npctransport::HierarchyWithSitesLoadLink</class>
    <class kind="class">IMP::npctransport::HierarchyWithSitesSaveLink</class>
    <class kind="class">IMP::npctransport::LinearInteraction</class>
    <class kind="class">IMP::npctransport::LinearInteractionPairScore</class>
    <class kind="class">IMP::npctransport::LinearSoftSpherePairScore</class>
    <class kind="class">IMP::npctransport::LinearWellPairScore</class>
    <class kind="class">IMP::npctransport::ParticleFactory</class>
    <class kind="class">IMP::npctransport::ParticleTransportStatisticsOptimizerState</class>
    <class kind="class">IMP::npctransport::PoreRadiusSingletonScore</class>
    <class kind="class">IMP::npctransport::RelaxingSpring</class>
    <class kind="class">IMP::npctransport::Scoring</class>
    <class kind="class">IMP::npctransport::SimulationData</class>
    <class kind="class">IMP::npctransport::SitesGeometry</class>
    <class kind="class">IMP::npctransport::SitesPairScore</class>
    <class kind="struct">IMP::npctransport::SitesPairScoreParameters</class>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPore</class>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPorePairScore</class>
    <class kind="class">IMP::npctransport::SlabWithCylindricalPoreWireGeometry</class>
    <class kind="class">IMP::npctransport::SlabWithPore</class>
    <class kind="class">IMP::npctransport::SlabWithToroidalPore</class>
    <class kind="class">IMP::npctransport::SlabWithToroidalPorePairScore</class>
    <class kind="class">IMP::npctransport::SlabWithToroidalPoreWireGeometry</class>
    <class kind="class">IMP::npctransport::Statistics</class>
    <class kind="class">IMP::npctransport::Transporting</class>
    <class kind="class">IMP::npctransport::TypedSitesGeometry</class>
    <class kind="class">IMP::npctransport::ZBiasSingletonScore</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; Avro2PBReader &gt;</type>
      <name>Avro2PBReaders</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a54793188ddf7661ff5fd6e4f3ffefc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BipartitePairsStatisticsOptimizerState &gt; &gt;</type>
      <name>BipartitePairsStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ab5a9ebf601515b3aa00f9d762522893d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BipartitePairsStatisticsOptimizerState &gt; &gt;</type>
      <name>BipartitePairsStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a839cae30351a60b49a17744f12f1df85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; BodyStatisticsOptimizerState &gt; &gt;</type>
      <name>BodyStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0e824b76a53c0cdedb6f9179f6344b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; BodyStatisticsOptimizerState &gt; &gt;</type>
      <name>BodyStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a20f8a3c3e4e66facd711bb39b4f481f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ChainStatisticsOptimizerState &gt; &gt;</type>
      <name>ChainStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa55614066c76de54898df413a803dadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ChainStatisticsOptimizerState &gt; &gt;</type>
      <name>ChainStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>afdd6f87b107df6c7836740d61654fd5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; FGChain &gt; &gt;</type>
      <name>FGChains</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a95d9b325a38781ba1119c35a6bd09fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; FGChain &gt; &gt;</type>
      <name>FGChainsTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac89b6c4a987f4ebc6e207c70e2b41134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; GlobalStatisticsOptimizerState &gt; &gt;</type>
      <name>GlobalStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7758ad9331852c7aa0c3ad1612ae98d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; GlobalStatisticsOptimizerState &gt; &gt;</type>
      <name>GlobalStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>abf3ede2368b0d48a9fdd3ba3afddc224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicSpringSingletonScore &gt; &gt;</type>
      <name>HarmonicSpringSingletonScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9766575c5b78cf187c5207a1cc4bd860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicSpringSingletonScore &gt; &gt;</type>
      <name>HarmonicSpringSingletonScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7d1f817c27f950cd5af6d2a5d6e4737b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; HarmonicWellPairScore &gt; &gt;</type>
      <name>HarmonicWellPairScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0de5c5afed93a71a4509b5445a3766e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; HarmonicWellPairScore &gt; &gt;</type>
      <name>HarmonicWellPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aabe35ad62a55273898599fe4d4d10843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; IMP::core::ParticleType, IMP::core::ParticleType &gt;</type>
      <name>InteractionType</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5611f4b5403f1c3223c116933fe38a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; InteractionType &gt;</type>
      <name>InteractionTypes</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a4d47850ed928d475a285ee51d072b7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LinearInteraction &gt; &gt;</type>
      <name>LinearInteractions</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ace066d1589beba0be2940d7ea8fb486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LinearInteraction &gt; &gt;</type>
      <name>LinearInteractionsTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a253f3034681a61da6e4bb49bda86650d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LinearWellPairScore &gt; &gt;</type>
      <name>LinearWellPairScores</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a164103352c6d88add3a802845e12d691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LinearWellPairScore &gt; &gt;</type>
      <name>LinearWellPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9d96ef15c5337091a5c0e9be4523412e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; ParticleTransportStatisticsOptimizerState &gt; &gt;</type>
      <name>ParticleTransportStatisticsOptimizerStates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a67eb64e56e4904cefa23825fe575b274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; ParticleTransportStatisticsOptimizerState &gt; &gt;</type>
      <name>ParticleTransportStatisticsOptimizerStatesTemp</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1d30f5555d684d1052afb78cb95f7c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; SitesPairScoreParameters &gt;</type>
      <name>SitesPairScoreParametersList</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae629319c73de421821e583fcfe1fa31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a57e19bdcf2152f8ac61b92eea2f3b577</anchor>
      <arglist>(RMF::FileHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a219f900a3b5e5ad3289d2d09356df1eb</anchor>
      <arglist>(RMF::NodeHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_hierarchy_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a96dbb54aa78a3ae2f795b3525565044d</anchor>
      <arglist>(RMF::FileHandle fh, atom::Hierarchy hs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_test_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a04b0a73e40ad2a5874fa9a0d98b90528</anchor>
      <arglist>(RMF::FileHandle fh, core::ParticleType t, double display_radius, algebra::Vector3Ds sites)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_test_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1b21c03340b8750efd3cd1e8a66ae45d</anchor>
      <arglist>(RMF::FileHandle fh, core::ParticleType t, algebra::Sphere3Ds sites)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>assign_ranges</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a140cb2ab53906e95e2bd105461cfe305</anchor>
      <arglist>(std::string input_config_fname, std::string output_assignment_fname, unsigned int work_unit, bool show_steps, boost::uint64_t random_seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_FGs_coordinates</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6ccdfe974fc27d12b30cfa5eac2a2297</anchor>
      <arglist>(SimulationData const *src_sd, SimulationData *trg_sd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_hierarchy_reference_frame_recursive</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1b69574be5151ac787bd44f6f33d8383</anchor>
      <arglist>(Particle *src_p, Particle *trg_p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_particle_reference_frame_if_applicable</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a7def529ac221a63d72836659cfa0f3cf</anchor>
      <arglist>(Particle *src_p, Particle *trg_p)</arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>create_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac5025684e81bdc014b287d20e18373d9</anchor>
      <arglist>(IMP::npctransport::SimulationData *sd, atom::Hierarchy parent, const ::npctransport_proto::Assignment_FGAssignment &amp;fg_data, display::Color c)</arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchies</type>
      <name>create_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>af4eac42b841cb74c967c2f4284ddb1d0</anchor>
      <arglist>(RMF::FileConstHandle fh, Model *m)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_evaluate_index</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aeeafcd1dbc23081c85d3b450cf9d3474</anchor>
      <arglist>(algebra::Sphere3D &amp;d_xyzr0, algebra::Sphere3D &amp;d_xyzr1, DerivativeAccumulator *da, const algebra::Vector3D &amp;delta, double delta_length, double x0, double k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_evaluate_index_harmonic</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a656ab4ca89e8d22e30f474a6a15fe34d</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pp, DerivativeAccumulator *da, const algebra::Vector3D &amp;delta, double delta_length, double x0, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_main_loop</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>acf2b03b3939c022ec65e8402c3016dbf</anchor>
      <arglist>(SimulationData *sd, const RestraintsTemp &amp;init_restraints)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_fg_bead_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a9bbeb15848526f263aa2fe210f967d4b</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_fg_chain_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa1713e38f848886ade58226061fd4b04</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_floater_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a13962ff20dede35cfe7a189f37d5f09a</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>find_or_add_interaction_of_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a252b25512154db426b2ac42c5c96db8e</anchor>
      <arglist>(::npctransport_proto::Statistics *s, IMP::npctransport::InteractionType it)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_close_pairs_range</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a17bebb9f71a3e88f728ab1143be6ced3</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_dump_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa174c1bd53dad496c36ddbf37489d850</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>get_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ab096cc50c7e35bf530e712d1bd321809</anchor>
      <arglist>(atom::Hierarchy root)</arglist>
    </member>
    <member kind="function">
      <type>FGChain *</type>
      <name>get_fg_chain</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae7a91516eb510beba957bd253626e22b</anchor>
      <arglist>(Particle *p_root)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_frames_from_ns</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a69b7ae68cdd585c391d323f98618e2fc</anchor>
      <arglist>(double ns, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_global_from_local_v3</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0affdade87f4dedc26d84d57faf2009e</anchor>
      <arglist>(Particle *p, const algebra::Vector3D &amp;local)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; unsigned int, unsigned int &gt;</type>
      <name>get_n_lost_and_gained</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>af98e287eada2ce07af699b66d4641e19</anchor>
      <arglist>(t_ordered_set old, t_ordered_set cur)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_non_optimizable_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5c9e777a69706ccc7d158f6dcfe50950</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_number_of_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac7d10e7dd3edaec53eca4229c332dcaf</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double time_step)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_optimizable_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa2114c9f9168cf02dccc106844de85ec</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_output_statistics_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ae5bae0ea68f8773f9742ce7e84a423d9</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;assign, double time_step, double default_value_ns=1.0)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexes</type>
      <name>get_particle_indexes</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aca539801adb3226e34f7e8c7598dd0b8</anchor>
      <arglist>(ParticlesTemp const &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_protobuf_configuration_from_text</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a20d9f367674ec1b9caf9b6772c311b84</anchor>
      <arglist>(std::string config_txt, std::string config_pb)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3Ds</type>
      <name>get_spheres_from_vectors</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aae1fad50867850b6ddc6349aa6ed1f21</anchor>
      <arglist>(V3iter first, V3iter last, double radius)</arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3Ds</type>
      <name>get_spheres_from_vectors</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>afcbf12f6b88328a9d1f5abd09a88daa4</anchor>
      <arglist>(algebra::Vector3Ds const &amp;vs, double radius)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_statistics_interval_in_frames</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aeb94e10598ebff8e89e1e62f977d01fe</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;assign, double time_step, double default_value_ns=0.1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_time_step</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a921fab686a7875df90b021d0386c2bb3</anchor>
      <arglist>(double max_d_factor, double max_k, double min_radius, double min_range, double max_trans_relative_to_radius=0.1, double time_step_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_time_step</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a3067958671f46fc9b0b5f08c55f0efd7</anchor>
      <arglist>(const ::npctransport_proto::Assignment &amp;config, double max_trans_relative_to_radius=0.1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inflate_floater</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac3ab0c2e603459987e3d2b830f9542a2</anchor>
      <arglist>(SimulationData *sd, const std::string floater_name, const float new_radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_positions</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a2e1017a2f94fda8e6e05bda62dc2b6c4</anchor>
      <arglist>(SimulationData *sd, const RestraintsTemp &amp;extra_restraints=RestraintsTemp(), bool debug=false, double short_init_factor=1.0, bool is_disable_randomize=false, bool are_fgs_pre_initialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_hierarchies_with_sites</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>adb310505fe5a5592a8dc7c13922e4f79</anchor>
      <arglist>(RMF::FileConstHandle fh, const atom::Hierarchies &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_output_protobuf</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6157ba860214a9561c7420d3af53fd80</anchor>
      <arglist>(std::string output_fname,::npctransport_proto::Output &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_pb_conformation</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a5fc61bf3d6e02c39e648b153ae6f1dbb</anchor>
      <arglist>(const ::npctransport_proto::Conformation &amp;conformation, IMP::SingletonContainerAdaptor beads, boost::unordered_map&lt; core::ParticleType, algebra::Sphere3Ds &gt; &amp;sites)</arglist>
    </member>
    <member kind="function">
      <type>InteractionType</type>
      <name>make_ordered_interaction_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>aa28a3ebab79cfdf4c82ee9207e35f09a</anchor>
      <arglist>(IMP::core::ParticleType t0, IMP::core::ParticleType t1)</arglist>
    </member>
    <member kind="function">
      <type>InteractionType</type>
      <name>make_unordered_interaction_type</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a1ff4e67d99d365a9182a7cfe54c2ffe2</anchor>
      <arglist>(IMP::core::ParticleType t0, IMP::core::ParticleType t1)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; t_value, t_value &gt;</type>
      <name>make_unordered_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a236e868e3eec8e987dc65b352f7c8354</anchor>
      <arglist>(t_value v0, t_value v1)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ParticleIndexPair</type>
      <name>make_unordered_particle_index_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a87e4abb800a27fa45024be5679f60084</anchor>
      <arglist>(IMP::ParticleIndex pi0, IMP::ParticleIndex pi1)</arglist>
    </member>
    <member kind="function">
      <type>ParticleIndexPair</type>
      <name>make_unordered_particle_index_pair</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a795fe17c17d57c27a5b28f7a9d6d02a3</anchor>
      <arglist>(ParticleIndexPair pip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randomize_particles</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a59d1d74df1135da89e6d0270eb3f506c</anchor>
      <arglist>(const ParticlesList &amp;ps, const BoundingVolume &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_Nup42</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a6208eea9bbe3ff93c959efd27ad0e27b</anchor>
      <arglist>(SimulationData *sd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_box_size</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a22d9fcba42fae7e2c499b42c0682d420</anchor>
      <arglist>(SimulationData *sd, double box_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save_pb_conformation</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a314fcf4d4eafa0e7c58ac7b2513f7673</anchor>
      <arglist>(IMP::SingletonContainerAdaptor beads, const boost::unordered_map&lt; core::ParticleType, algebra::Sphere3Ds &gt; &amp;sites,::npctransport_proto::Conformation *conformation)</arglist>
    </member>
    <member kind="function">
      <type>IMP::npctransport::SimulationData *</type>
      <name>startup</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a2af95d49ecd90f72d94b6122fec8d405</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a0cd3d6bc42f495de50d78c0ba19da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>ac95838a3dad75a92f6aa939babbd9a3e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1npctransport.html</anchorfile>
      <anchor>a2944f5715e9ee431d945607c9670b360</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1npctransport" title="fg_simulation: run NPC transport simulations ">fg_simulation_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::AnchorToCylidnricalPorePairScore</name>
    <filename>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>AnchorToCylidnricalPorePairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>ae3b2c07dc9ef0cbb2aaadb185ede98ea</anchor>
      <arglist>(Float rot_angle, Float pore_radial_d, Float z, Float k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnchorToCylidnricalPorePairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a1f82abf93180b5708bb77465c4a40382</anchor>
      <arglist>(SlabWithCylindricalPore scp, algebra::Vector3D initial_anchor_point, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>acb7f9d85e5c0e3978f2f3a0f761d5d1a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a8c4ea6c10860e95812d9bd1eda6df86e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a6fd123315be5b386ac3a4174775ced9a</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a4a2cc3d4bce6f30e9cc3b2ded82364b1</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a05c84565c46e160ccc6e06b9c2fcca06</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a6077dfc2a27878a7d6c792114a8bbc4e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1AnchorToCylidnricalPorePairScore.html</anchorfile>
      <anchor>a584fd03dc03f322ae55821fc2ce50d6d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::BipartitePairsStatisticsOptimizerState</name>
    <filename>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>BipartitePairsStatisticsOptimizerState</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a6ca3e1a26cccb7556a39a9073f685610</anchor>
      <arglist>(IMP::npctransport::Statistics *statistics_manager, InteractionType interaction_type, const ParticlesTemp &amp;particlesI, const ParticlesTemp &amp;particlesII, double contact_range=1.0, double slack=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_bound_particle_sites_I</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>afbd20dd487bea6e7621bbaa8f2c99974</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_bound_particle_sites_II</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>ae657d234456c07d9df0923207bc028f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_bound_particles_I</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>abc8472699acfe141d203e0924b9a55dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_bound_particles_II</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>ae920ea21c78234001ce75e8781a79ea9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_nonspecific_interactions_I</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a80080e1d38bbd97b8c485b3db78a31ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_fraction_nonspecific_interactions_II</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a2653bb28b21fa62613e978856b0e91cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_number_of_contacts</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>af7c046abf5e0fe6700b1e584a8e6df64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_off_per_bound_I_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>aa01871c4d139d071cc821136906f81da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_off_per_bound_II_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a555cbad9111f0958e63b523dd460098a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_off_per_contact_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a469a90fa18c67cda34948da569880b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_on_per_missing_contact_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a092b50edd47794d75c220db1a4a486c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_on_per_unbound_I_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a9f9688378185b7a82c3ac9d8d8460d3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_average_on_per_unbound_II_per_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a894f6020ac7e919d413a8b7cb6cc9c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InteractionType</type>
      <name>get_interaction_type</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a18dc3c8931cae7a40d7dec8cb8d4c1bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_number_of_particles_1</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>abe27b344c7dd88359f6665c1cc98e378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Int</type>
      <name>get_number_of_particles_2</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a50116bd79ec71cdfcd7e4507f2a4eb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>get_type_name</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>addb43d1931ccb996c46592155736a762</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>ad9d2fb83dbeb59aeb4db095ab56c08fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a35d7a30182598b2d3336fc2da1d0b018</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1npctransport_1_1BipartitePairsStatisticsOptimizerState.html</anchorfile>
      <anchor>a817d45311143e5da211f919dbf685813</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::BodyStatisticsOptimizerState</name>
    <filename>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>BodyStatisticsOptimizerState</name>
      <anchorfile>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</anchorfile>
      <anchor>a2f2eb382d62edd4e6ee40b6efee5d54b</anchor>
      <arglist>(Particle *p, IMP::npctransport::Statistics *statistics_manager=nullptr, unsigned int periodicity=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</anchorfile>
      <anchor>a255e0730d7677f0d65bcdc626bce9295</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</anchorfile>
      <anchor>ab83d13cd39a4f20beb838013c04439c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</anchorfile>
      <anchor>a6dba36b9732dd3fb604aff314a3d11e6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_particle_type_zr_distribution_map</name>
      <anchorfile>classIMP_1_1npctransport_1_1BodyStatisticsOptimizerState.html</anchorfile>
      <anchor>a19fa7c15d7a73e4c6809eb085d5aca74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::BrownianDynamicsTAMDWithSlabSupport</name>
    <filename>classIMP_1_1npctransport_1_1BrownianDynamicsTAMDWithSlabSupport.html</filename>
    <base>IMP::atom::BrownianDynamicsTAMD</base>
    <member kind="function">
      <type></type>
      <name>BrownianDynamicsTAMDWithSlabSupport</name>
      <anchorfile>classIMP_1_1npctransport_1_1BrownianDynamicsTAMDWithSlabSupport.html</anchorfile>
      <anchor>ae70077c46f3555e824b5a7a3e3b6c519</anchor>
      <arglist>(Model *m, std::string name=&quot;BrownianDynamicsTAMDWithSlabSupport%1%&quot;, double wave_factor=1.0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>do_advance_chunk</name>
      <anchorfile>classIMP_1_1npctransport_1_1BrownianDynamicsTAMDWithSlabSupport.html</anchorfile>
      <anchor>a9ce61178501c982f61623a59306e4c24</anchor>
      <arglist>(double dtfs, double ikt, const ParticleIndexes &amp;ps, unsigned int begin, unsigned int end) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::ChainStatisticsOptimizerState</name>
    <filename>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>ChainStatisticsOptimizerState</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a7799f23f04ca9ec0149f1baa771ab0bc</anchor>
      <arglist>(const ParticlesTemp &amp;ps, unsigned int periodicity=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a10f2232da5936ce195c860a13a1d5eae</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a57708f9a866c2e6142d288f0aa8f7c8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_local_diffusion_coefficients</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a42462f9c1a5525c653b6f7040369fa26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_bond_distance</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>ad8d612e871914ac259972c6a2f54f7c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_end_to_end_distance</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>aa10fecf0e480f59c8cf13986fe503d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_radius_of_gyration</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a6e15a1c9ffd4e934147d62eb0dfc8a97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_square_bond_distance</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a5b620248f52dd6adb92a8fc1135c1c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_square_end_to_end_distance</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>aeef001f4d017dd2c513a7107b7d9aed7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_mean_square_radius_of_gyration</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a5492c60fbaf0d7d48f0b330f7df37021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a95fd57a71aab706605cb50bd4e2e89a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1npctransport_1_1ChainStatisticsOptimizerState.html</anchorfile>
      <anchor>a4902df0287b04cc1d538dcc9ab7ca179</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::ExcludeZRangeSingletonScore</name>
    <filename>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>ExcludeZRangeSingletonScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>ae252f14038565e5b606bce7fb4b9e5ed</anchor>
      <arglist>(double bottom, double top, double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a67396a2c08de7efd49369caecd23cc93</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a09b5d3e19ae1afaf19a078123edac525</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a20c4bdb42a3d62624191a4ca228d3c99</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a3496ad006d5a93c3f49bde092ead6a43</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a49dbbdb4e0e9152bd919d48aa2d0bdd3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a05fee2b7efaae3a33007797359e8e116</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bottom_z</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>aa2be3b80fead207a54029abbfeed5cc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>abc466958c6ee7a165dcdbf05f671145b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_top_z</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a4c16a85fe3848097714f83c5d2b202b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1ExcludeZRangeSingletonScore.html</anchorfile>
      <anchor>a5f86995b805ab748118f7ff9b922b73c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::FGChain</name>
    <filename>classIMP_1_1npctransport_1_1FGChain.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>FGChain</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a8abf865a1080af9aad6018633846e7a4</anchor>
      <arglist>(IMP::Particle *root, double backbone_k=0.0, double rest_length_factor=1.0, std::string name=&quot;chain %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_backbone_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>ad02da5d68eba516b68b72acb28f89562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::Particle *</type>
      <name>get_bead</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>abda53276ceea983c5c307d0604bceba2</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::ParticleIndex</type>
      <name>get_bead_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>ae9b39130210c2ca09d85646722f11afe</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::ParticlesTemp</type>
      <name>get_beads</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>af525394f2d40de0e2582fd7b74451d24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Restraints</type>
      <name>get_chain_restraints</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a7df6739cdd5f325888858ec1ca32439e</anchor>
      <arglist>(Scoring const *scoring_manager)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_number_of_beads</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a64456844b59745c795710c134f12939a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_rest_length_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a478543a4086645cef5381eb8ac89109e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a90160465aabfad94fd129acec27d2fe0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_backbone_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>ad7caaed0d0f554a3ed8959d4e683bc5f</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rest_length_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>ab534579d0c738abe4bb2984d47a5ad93</anchor>
      <arglist>(double rlf)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_root</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>a68ae220984f965081881777dbf796bc0</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_root</name>
      <anchorfile>classIMP_1_1npctransport_1_1FGChain.html</anchorfile>
      <anchor>ab83a13508a81b6943ac2d26d56a1b267</anchor>
      <arglist>(atom::Hierarchy root)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::FunctorLinearInteractionPairScore</name>
    <filename>classIMP_1_1npctransport_1_1FunctorLinearInteractionPairScore.html</filename>
    <base>DistancePairScore&lt; LinearInteractionScore &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1FunctorLinearInteractionPairScore.html</anchorfile>
      <anchor>af63bfcb958c1cf433ba45a071364f0ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>LinearInteractionScore &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::FunctorLinearSoftSpherePairScore</name>
    <filename>classIMP_1_1npctransport_1_1FunctorLinearSoftSpherePairScore.html</filename>
    <base>DistancePairScore&lt; LinearSoftSphereScore &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1FunctorLinearSoftSpherePairScore.html</anchorfile>
      <anchor>a16376fdb70bb4a4fde08c01f47129f59</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>LinearSoftSphereScore &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::GlobalStatisticsOptimizerState</name>
    <filename>classIMP_1_1npctransport_1_1GlobalStatisticsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>GlobalStatisticsOptimizerState</name>
      <anchorfile>classIMP_1_1npctransport_1_1GlobalStatisticsOptimizerState.html</anchorfile>
      <anchor>ab3af708699123e6ebe45fdb283e9d3dc</anchor>
      <arglist>(IMP::npctransport::Statistics *statistics_manager=nullptr, unsigned int periodicity=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1npctransport_1_1GlobalStatisticsOptimizerState.html</anchorfile>
      <anchor>ae36f679ef72b3fdff4130a8391e49c93</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1GlobalStatisticsOptimizerState.html</anchorfile>
      <anchor>a32b2995b34c78febd0bf45f1b262bb01</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1npctransport_1_1GlobalStatisticsOptimizerState.html</anchorfile>
      <anchor>a9100ce7f10eab574f55f8c63e0180943</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::HarmonicSpringSingletonScore</name>
    <filename>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>HarmonicSpringSingletonScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a2d400480910d8170d71a1e9b6d6c829a</anchor>
      <arglist>(double k1, double k2, std::string name=&quot;HarmonicSpringSingletonScore%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a44c6e8c027e5e9f32ea1a2f319ff8e02</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>adc451619a60f6d7dbdeb613bfc19636d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>aeb0378ae1010996f7825286e82775b5e</anchor>
      <arglist>(Model *m, ParticleIndex pi, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>aedd17203c618f25b490ae390c131596c</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>ab10a07dda89601ed43c1b4819a948ea4</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a57f2c6439b62ee567a9aa43657713b21</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k1</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a2ec463717dca98a27badf3f423985005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k2</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a933ecc3835b98ce8c5508dbd8ca08302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a1500b159715ae70e68703303920c6918</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k1</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>a1cf435b36c12e9994b723828c9d9c09c</anchor>
      <arglist>(double k1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k2</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicSpringSingletonScore.html</anchorfile>
      <anchor>aa874af7e4685b9d2b0ae19aa6ba03f89</anchor>
      <arglist>(double k2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::HarmonicWellPairScore</name>
    <filename>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>HarmonicWellPairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>a87f90dc625e66d4b29a3b21c3704af2d</anchor>
      <arglist>(double rest_length_factor, double k, std::string name=&quot;HarmonicIDPairScore%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>a8988ebc867ef1c765b239171ac7fd662</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>a1ada037077b8e0b52283f612ba34b9de</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>a9a59fc524d383427cbceb7b4d4c5a331</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>ad4490fbcdf4e80febe011f5459c649f4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>ae5fb70c14449e2e4ed417de1cc1c3e17</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>ae16c04079888a9c8866c7d12b7afff53</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1HarmonicWellPairScore.html</anchorfile>
      <anchor>a1d59e522feec95a5e741b5fda63ea574</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::HierarchyWithSitesLoadLink</name>
    <filename>classIMP_1_1npctransport_1_1HierarchyWithSitesLoadLink.html</filename>
    <base>IMP::rmf::HierarchyLoadLink</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchyLoadLink.html</anchorfile>
      <anchor>a51cd666b48b447c287b1f1e64f220a3d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Pointer&lt; Particle &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classIMP_1_1rmf_1_1SimpleLoadLink.html</anchorfile>
      <anchor>a8c568d0291111015e06845c3c6466f39</anchor>
      <arglist>(RMF::NodeConstHandle rt)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Pointer&lt; Particle &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classIMP_1_1rmf_1_1SimpleLoadLink.html</anchorfile>
      <anchor>acb250839c30652b3b67bb63c8beb3429</anchor>
      <arglist>(RMF::NodeConstHandle rt, Model *m)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_link_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1HierarchyWithSitesLoadLink.html</anchorfile>
      <anchor>a0e05ab8cf97265ecd5d570a34e15dab8</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex cur, RMF::NodeConstHandle node) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_load_hierarchy</name>
      <anchorfile>classIMP_1_1npctransport_1_1HierarchyWithSitesLoadLink.html</anchorfile>
      <anchor>aa520868594a163e0f8c2b41b185c32f6</anchor>
      <arglist>(RMF::NodeConstHandle root_node, Model *m, ParticleIndex pi) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1HierarchyWithSitesLoadLink.html</anchorfile>
      <anchor>a6b2e3b99ff5bbb7ac31d5470a3ff1b56</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex cur, RMF::NodeConstHandle node) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::HierarchyWithSitesSaveLink</name>
    <filename>classIMP_1_1npctransport_1_1HierarchyWithSitesSaveLink.html</filename>
    <base>IMP::rmf::HierarchySaveLink</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchySaveLink.html</anchorfile>
      <anchor>a570a24f2be728bd61e279e913ae50992</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_save_hierarchy</name>
      <anchorfile>classIMP_1_1npctransport_1_1HierarchyWithSitesSaveLink.html</anchorfile>
      <anchor>ae5b4edbab732ae01896c8211e206e5e5</anchor>
      <arglist>(Model *m, ParticleIndex root, RMF::NodeHandle root_node) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_setup_node</name>
      <anchorfile>classIMP_1_1npctransport_1_1HierarchyWithSitesSaveLink.html</anchorfile>
      <anchor>acac2dfb84f3367b772a352786d987eb3</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex cur, RMF::NodeHandle cur_node) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::LinearInteraction</name>
    <filename>classIMP_1_1npctransport_1_1LinearInteraction.html</filename>
    <base>IMP::score_functor::LinearLowerBound</base>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>structIMP_1_1score__functor_1_1Score.html</anchorfile>
      <anchor>aaf311d89788adc569fe8fc6ed601ce42</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_trivially_zero</name>
      <anchorfile>structIMP_1_1score__functor_1_1Score.html</anchorfile>
      <anchor>ac6eb17845fd2ef1e3f48be8022014651</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double squared_distance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_range</name>
      <anchorfile>structIMP_1_1score__functor_1_1Score.html</anchorfile>
      <anchor>a5b645f9abf22f43796fb8a165f07cfe8</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score</name>
      <anchorfile>structIMP_1_1score__functor_1_1Score.html</anchorfile>
      <anchor>a9f50e07daac769a051ba8e0e841961ff</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>DerivativePair</type>
      <name>get_score_and_derivative</name>
      <anchorfile>structIMP_1_1score__functor_1_1Score.html</anchorfile>
      <anchor>aecad1fdb3091cfe91c37964f19673157</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double distance) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::LinearInteractionPairScore</name>
    <filename>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</filename>
    <base>IMP::PairScore</base>
    <class kind="struct">IMP::npctransport::LinearInteractionPairScore::EvaluationCache</class>
    <member kind="function">
      <type></type>
      <name>LinearInteractionPairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>a678602a87e7f2fbd55f0089c4ef6e2f9</anchor>
      <arglist>(double k_rep, double range_attr, double k_attr, std::string name=&quot;LinearIDPairScore%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>af146acaf1466e582fceaeffbe2963860</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>afb9f4d62725ad326f8090665b8ab4a7d</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;pips, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k_attraction</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>acb3230ba96323b849acb4adcc6bb5dab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k_repulsion</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>ad0bbeaac0fd37054fc1bbf6cd1f893be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_range_attraction</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>a51228b7841402456c3f0b8f7e79bcc06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>a54bc05a0e1afb64aed0aca1309af7cf2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k_attraction</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>afbf617b47f82fc08f0306c18bdc042cc</anchor>
      <arglist>(double k_attr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k_repulsion</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>ad58eda44b863d1bf11888b456fa3e50c</anchor>
      <arglist>(double k_rep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearInteractionPairScore.html</anchorfile>
      <anchor>aca9ea98ff4513f4de765d18d3828a9c7</anchor>
      <arglist>(algebra::Sphere3D const &amp;s0, algebra::Sphere3D const &amp;s1, algebra::Sphere3D &amp;ds0, algebra::Sphere3D &amp;ds1, DerivativeAccumulator *da) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::npctransport::LinearInteractionPairScore::EvaluationCache</name>
    <filename>structIMP_1_1npctransport_1_1LinearInteractionPairScore_1_1EvaluationCache.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::LinearSoftSpherePairScore</name>
    <filename>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>a94724e098c7759af5e928e6c46a68e84</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>a228db65eb728a5ae8f2331221c9dc691</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>ab49750e45848a27be5e0691e78f21e00</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>af0d64579906365939d40e11e05994926</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;pips, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>af9a09e90e7e58236349a9357472ca0d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>a876705cd618c3a7de622c72f665b7766</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearSoftSpherePairScore.html</anchorfile>
      <anchor>aae44155552c1719e618a66a0fe5054bb</anchor>
      <arglist>(algebra::Sphere3D const &amp;s0, algebra::Sphere3D const &amp;s1, algebra::Sphere3D &amp;ds0, algebra::Sphere3D &amp;ds1, DerivativeAccumulator *da) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::LinearWellPairScore</name>
    <filename>classIMP_1_1npctransport_1_1LinearWellPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>LinearWellPairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>a7ccb0ef9c1f28b66514da314d7474eca</anchor>
      <arglist>(double rest_length_factor, double k, std::string name=&quot;LinearIDPairScore%1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>ac2496303ec9f6a9a54f66f987d827726</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>a9cce3155dfacf3a049191e42d8ce8392</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>a46fbb9f55fdb0b630624e2aae3cb561f</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>ad6257b35eadbb14c13191edb7cbfddbc</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>aa47d103cde49af14dfd15ad7c954a22c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>a3879682e0639d71376213b164e7d80a5</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1LinearWellPairScore.html</anchorfile>
      <anchor>ac37957f725d58cb0a2a3ad203977e161</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::ParticleFactory</name>
    <filename>classIMP_1_1npctransport_1_1ParticleFactory.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>ParticleFactory</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>aba74e71f6c9b9937152ffb044859b3d4</anchor>
      <arglist>(SimulationData *sd, double radius, double D_factor, double angular_D_factor, display::Color color, core::ParticleType type, std::string name=&quot;Particle factory %1%&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IMP::Particle *</type>
      <name>create</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>a918d7c02c32576f81616813a145fcb41</anchor>
      <arglist>(std::string name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>a8e321c944e1b03398671c0865e83f6a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>a7afe2ae0a0a696ea9463f2c09a199177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimulationData *</type>
      <name>get_simulation_data</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>ab742c4c31ef9ff7015a9385990bb6b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>ae9db36e861ebaa604238a4db9782c106</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>angular_D_factor_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>a904371e0867846f3e83b838ed58e3681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>display::Color</type>
      <name>color_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>a0060f90c85fd0704a8a116254ab20a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>D_factor_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>abcbc4305b027a398fc5c59ee29cf3c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>radius_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>afa157f5b781ea9270b7beab7dc4ea6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IMP::WeakPointer&lt; SimulationData &gt;</type>
      <name>sd_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>ae69036e34c6bef730a3d3382e253f9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>core::ParticleType</type>
      <name>type_</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleFactory.html</anchorfile>
      <anchor>accef2ce2e90e91c3f8ec176517d544de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::ParticleTransportStatisticsOptimizerState</name>
    <filename>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function">
      <type></type>
      <name>ParticleTransportStatisticsOptimizerState</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a8e9618751dbd77f8f62232e40c95af61</anchor>
      <arglist>(Particle *p, Float bottom_z, Float top_z, WeakPointer&lt; IMP::npctransport::Statistics &gt; statistics_manager=nullptr, WeakPointer&lt; IMP::atom::Simulator &gt; owner=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a6c18c0d158f6115ec0151f9487bab371</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_n_transports_down</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a239fa71454238b54128d054c9748f490</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_n_transports_up</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>ad2002cfa9a320b5377a08065dbf764c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WeakPointer&lt; IMP::atom::Simulator &gt;</type>
      <name>get_owner</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a65f5ee167a8b5382747947a1b5bb9412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_total_n_transports</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a60cc2005d8e550239f1601a361f420ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Floats const &amp;</type>
      <name>get_transport_time_points_in_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a66f7ecee9d2dd910c4c25bd239e982e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>afd09d4579f0f44a3c2a2c94049bdffa6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>ad67d745e1c711e9ce3211aaf31d26ba5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_owner</name>
      <anchorfile>classIMP_1_1npctransport_1_1ParticleTransportStatisticsOptimizerState.html</anchorfile>
      <anchor>a131fb76848a857a11cc966986b256a0c</anchor>
      <arglist>(WeakPointer&lt; IMP::atom::Simulator &gt; owner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::PoreRadiusSingletonScore</name>
    <filename>classIMP_1_1npctransport_1_1PoreRadiusSingletonScore.html</filename>
    <base>GenericAttributeSingletonScore&lt; core::Harmonic &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoreRadiusSingletonScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1PoreRadiusSingletonScore.html</anchorfile>
      <anchor>a4b010bbf9d5d29033163d7f9a0114290</anchor>
      <arglist>(Float mean, Float k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1PoreRadiusSingletonScore.html</anchorfile>
      <anchor>a0b431ce4f4f31fdcdb57ed8f3406f04a</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1PoreRadiusSingletonScore.html</anchorfile>
      <anchor>afd99c468526871d41e2f685a13678c9e</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericAttributeSingletonScore</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a809328fce3bd2cfb06d00431c6ff26fe</anchor>
      <arglist>(core::Harmonic *f, FloatKey k)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>aa7b30a6bbce315c31e52bfaa51be4ea3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a479c49b7cd7eb575e351a0cbaf369b68</anchor>
      <arglist>(Model *m, ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a6c3e00a3980f185db477b5a74632e98b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>ac7f5fbfe3b2584ba743063738206cb54</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a5be8cc3cc824ab4956f01de72b1a74db</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>core::Harmonic *</type>
      <name>get_unary_function</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>ab9d1d9ff20900a6d33d737e67bb3db31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1core_1_1GenericAttributeSingletonScore.html</anchorfile>
      <anchor>a4add52896ed146541e3861de31f26ecc</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::RelaxingSpring</name>
    <filename>classIMP_1_1npctransport_1_1RelaxingSpring.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Float</type>
      <name>get_equilibrium_rest_length_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>ac2202ed2cec428aae754d77438a088ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_rest_length</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a3480699c173b6b1065b163bb837f8ef1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_rest_length_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a49759a729a47e39eccafe2a763a1c83c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_equilibrium_rest_length_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a22a81f5d57069da396661bde2f686951</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rest_length</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a72d67fff73e714485707edec3ac4a57e</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rest_length_diffusion_coefficient</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a9ad4e46e4e8641bc01cf9a6d1e095356</anchor>
      <arglist>(Float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_equilibrium_rest_length_factor_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a77aa29ab6aa42eebad1828e83e68e70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>ad7eb24d2589fa49fcd08a0bc21e8f526</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_rest_length_diffusion_coefficient_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>abf2662f011ee8da330b18532187b8f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_rest_length_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a869b93a18d011b83795f35de508b9484</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelaxingSpring</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a64df0f0064fcd7d14990458ec3b048fe</anchor>
      <arglist>(IMP::ParticleAdaptor pa, ParticleIndex bonded_pi0, ParticleIndex bonded_pi1, double equilibrium_rest_length_factor, double rest_length_diffusion_coefficient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelaxingSpring</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1RelaxingSpring.html</anchorfile>
      <anchor>a0af5978ddc8840ca5576953425ca8ded</anchor>
      <arglist>(Model *m, ParticleIndex pi, ParticleIndex bonded_pi0, ParticleIndex bonded_pi1, double equilibrium_rest_length_factor, double rest_length_diffusion_coefficient)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::Scoring</name>
    <filename>classIMP_1_1npctransport_1_1Scoring.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Scoring</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a59c9139729570e2ead12d7129256eb6f</anchor>
      <arglist>(SimulationData *owner_sd, const ::npctransport_proto::Assignment &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_chain_restraints</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a19aa8517aaaf627dd0752f45d0bddf4a</anchor>
      <arglist>(FGChain *chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interaction</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>adf0302d8d73f4123656d6b437d20cf70</anchor>
      <arglist>(const ::npctransport_proto::Assignment_InteractionAssignment &amp;idata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_restrained_anchor_bead</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a47f010e29b792ddcbc5da6657d0ab49c</anchor>
      <arglist>(IMP::Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_z_bias_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a7c79f71a7354a360368115ba1ff7c38c</anchor>
      <arglist>(SingletonContainerAdaptor ps, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_z_bias_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a0dd8308ed6e255a2f0d00c10f82accbd</anchor>
      <arglist>(Particle *p, double k)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; Restraint *, Object * &gt;</type>
      <name>create_backbone_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>ad8e7271031722c22a033e31afd7a4094</anchor>
      <arglist>(double rest_length_factor, double backbone_k, ParticlesTemp beads, std::string name) const </arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_bounding_volume_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a5af15fec4f0f1153c0a5d8c9042a3536</anchor>
      <arglist>(SingletonContainerAdaptor beads) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::PairContainer *</type>
      <name>create_close_beads_container</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a4e4f841b03e335318b0617e5cf5a1b5b</anchor>
      <arglist>(SingletonContainerAdaptor non_optimiziable_beads, SingletonContainerAdaptor optimizable_beads) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::PairContainer *</type>
      <name>create_close_beads_container</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aedd0b42cf991b9980138d60ee29a7838</anchor>
      <arglist>(ParticleIndexes non_optimizable_beads, SingletonContainerAdaptor optimizable_beads) const </arglist>
    </member>
    <member kind="function">
      <type>container::PredicatePairsRestraint *</type>
      <name>create_predicates_pair_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a4652f839b606cd0de7efbe2220510a22</anchor>
      <arglist>(PairContainer *bead_pairs, bool is_attr_interactions_on=true) const </arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>create_slab_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a9e946acc8b600f31d8c01edf59534dd7</anchor>
      <arglist>(SingletonContainerAdaptor beads) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::Restraint *</type>
      <name>create_z_bias_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a871ed833b15dcb500c7e8e733e709be5</anchor>
      <arglist>(SingletonContainerAdaptor ps, double k) const </arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>get_all_chain_restraints</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a81c296bec51c8163d8333d6492221b7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>get_bounding_volume_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a1f680b9c0df4420c40174fd40819e169</anchor>
      <arglist>(bool update=false)</arglist>
    </member>
    <member kind="function">
      <type>Restraints</type>
      <name>get_chain_restraints_on</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a240419d2434543e30736dacdff5aa444</anchor>
      <arglist>(SingletonContainerAdaptor beads) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::PairContainer *</type>
      <name>get_close_beads_container</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa8442a8627971126904de6b8622f8435</anchor>
      <arglist>(bool update=false)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ScoringFunction *</type>
      <name>get_custom_scoring_function</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aae1d68d893a9cc874ae24552a5a24540</anchor>
      <arglist>(const RestraintsTemp &amp;extra_restraints, SingletonContainerAdaptor non_optimizable_beads, SingletonContainerAdaptor optimizable_beads, bool is_attr_interactions_on=true) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::ScoringFunction *</type>
      <name>get_custom_scoring_function</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>adb5e855a526b1a707bcb0ba40ffbd9bb</anchor>
      <arglist>(const RestraintsTemp &amp;extra_restraints, ParticleIndexes non_optimizable_beads, SingletonContainerAdaptor optimizable_beads, bool is_attr_interactions_on=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_default_backbone_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa4a1d468244a99b97265e9e8675a1da1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_excluded_volume_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>afd921500de4e82e77f6984d62a535669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FGChains</type>
      <name>get_fg_chains</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a5fcf0dc7087e7b1d3d720bcb99aad12b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_box</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>ae9dbfade0c2cb81f321421d2b780f671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_sphere</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a68bc26d53d623aa5aa9317b03136b41e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_volume</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>acb79b64524d335f64cffc3fd40eaadfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_interaction_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>ab8490197bd415ccae7deb71906a5904e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_interaction_range_for</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a89db04c24c2a7de4ab41c842832b354f</anchor>
      <arglist>(core::ParticleType t1, core::ParticleType t2, bool site_specific=true, bool non_specific=false) const </arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa7840b767cfdce2e6f371dcdf5b9b0d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aae01932be6be7ea5e905ae7f301868d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMP::PairScore const *</type>
      <name>get_predicate_pair_score</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa5cbef8b44cd00022f00d413fd979bb6</anchor>
      <arglist>(core::ParticleType t1, core::ParticleType t2) const </arglist>
    </member>
    <member kind="function">
      <type>IMP::PairScore *</type>
      <name>get_predicate_pair_score</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a657cb19846800e2cb7a52853ccb88bc6</anchor>
      <arglist>(core::ParticleType t1, core::ParticleType t2)</arglist>
    </member>
    <member kind="function">
      <type>container::PredicatePairsRestraint *</type>
      <name>get_predicates_pair_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a44d0aff387c0e7dad1ad1c6c9e5985e0</anchor>
      <arglist>(bool update=false)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ScoringFunction *</type>
      <name>get_scoring_function</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>ae64c9d924a678c15cfdb9b940fb1ad82</anchor>
      <arglist>(bool force_update=false)</arglist>
    </member>
    <member kind="function">
      <type>IMP::Restraints</type>
      <name>get_scoring_function_restraints</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a18e009d258f5d80621b823b0c1715cfb</anchor>
      <arglist>(bool force_update=false)</arglist>
    </member>
    <member kind="function">
      <type>SimulationData *</type>
      <name>get_sd</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a9d9a6424679119d6f30b3ed4adcdad46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SimulationData const *</type>
      <name>get_sd</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a8e6ed2b0c1ce9659942227f412be20c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; unsigned int, std::vector&lt; unsigned int &gt;, std::vector&lt; unsigned int &gt;, bool &gt;</type>
      <name>get_site_interactions_statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>ae8394a592d97d11945af71f94b061f56</anchor>
      <arglist>(ParticleIndex pi1, ParticleIndex pi2) const </arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; unsigned int, std::vector&lt; unsigned int &gt;, std::vector&lt; unsigned int &gt;, bool &gt;</type>
      <name>get_site_interactions_statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>acc8b7389943af3f50fbc4a7e4f082560</anchor>
      <arglist>(Particle const *p1, Particle const *p2) const </arglist>
    </member>
    <member kind="function">
      <type>Restraint *</type>
      <name>get_slab_restraint</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa04e72cc5132af0ace408ff0687a8810</anchor>
      <arglist>(bool update=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aa48d05c74867d83c2c24d2ef11806709</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IMP::Restraints</type>
      <name>get_z_bias_restraints</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a7a1d106571143b9278018eb5df1af871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_particle_type</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a32a8b964fc88f5db9dd4e3ad91862fda</anchor>
      <arglist>(core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interaction_k_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>aba849f5b04730758f32d033fafd7d8bb</anchor>
      <arglist>(IMP::core::ParticleType type, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interaction_range_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1Scoring.html</anchorfile>
      <anchor>a9b38614a1ec25d300a7aa0672143ff67</anchor>
      <arglist>(IMP::core::ParticleType type, double value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SimulationData</name>
    <filename>classIMP_1_1npctransport_1_1SimulationData.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>SimulationData</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>afc122cc61ea803cff40d2d12a60d6a8c</anchor>
      <arglist>(std::string prev_output_file, bool quick, std::string rmf_file_name=std::string(), std::string new_output_file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aeb2b3b338b910b1f87b010ea8bf0fbd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interaction</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a2876b08aadccba673d3df2e3dc972baf</anchor>
      <arglist>(const ::npctransport_proto::Assignment_InteractionAssignment &amp;idata)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_angular_d_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ae5f473af97c226d345e8d38f3f80885b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_are_floaters_on_one_slab_side</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a4dbe4136f0aa0632baa84d2196f14a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>atom::BrownianDynamics *</type>
      <name>get_bd</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a86c45294f3f86f28f66d0ec3d047e71b</anchor>
      <arglist>(bool recreate=false)</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_beads</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ac74ed5ad4a9b3e5df4efaf8c2ef64221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Particles &amp;</type>
      <name>get_beads_byref</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a9fd32e5f37d18e0a7f7fa0928f12776f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bounding_box_size</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a02d85749e8479db5b5dcc48422886f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bounding_sphere_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a45278d8d84f4e6385d7bd23c5b7b3dc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleTypeSet const &amp;</type>
      <name>get_fg_bead_types</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ad143b296fd044e4dc05fcd8de69fb6a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchies</type>
      <name>get_fg_chain_roots</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a7fd6303499deed5e9c6e2c0cea99d0f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleTypeSet const &amp;</type>
      <name>get_fg_chain_types</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ab4dac17aba3089cbabe3912975418362</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchies</type>
      <name>get_fg_chains</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aff2a4f1e5c3fe124d47f7747d8cc5177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleTypeSet const &amp;</type>
      <name>get_floater_types</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ad4f85a9ff6885108fc6eb3a50d262a3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_box</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a064d4c29cde7aeb298c7e0321b9bd732</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_sphere</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a304c4983e2dff7c8c8ff0d63aeb4c1ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_bounding_volume</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a359ba3e18408c74227382ffaa4a10922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_initial_simulation_time_ns</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ae8fa497ec41ea652d622f86ead1a9288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_exclude_floaters_from_slab_initially</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a9087b263eac28b4d553a3f0010164958</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_fg_bead</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a6a0b55c1e927f1cdaa04c970bebe711c</anchor>
      <arglist>(ParticleIndex pi) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_fg_bead</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a78cb3e3d90584c84ae1445b16533f195</anchor>
      <arglist>(core::ParticleType pt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_fg_chain</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a7c4430c03056bc911a5d5e8ab7f0c024</anchor>
      <arglist>(ParticleIndex pi) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_fg_chain</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a9267e37bb4f689146d282b081f9f7c72</anchor>
      <arglist>(core::ParticleType pt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_pore_radius_dynamic</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a90e3737c0c61783fa3de7e819a9b9cab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_slab_with_cylindrical_pore</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aa5385f6062d3889eb4f2dd58ae55503c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_slab_with_toroidal_pore</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a958c9f2600064b6071e06b4aeb443c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_xyz_hist_stats</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>afd128a22d0ff290c444d768ece3a5e8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_number_of_minutes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a44379b45d48212db76ed12cd52520619</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_non_optimizable_beads</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a59e5c508e8d5f8b3a3867476bf649c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_obstacle_particles</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a986e19289e25a3317b55ca5e7bb45784</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleTypeSet const &amp;</type>
      <name>get_obstacle_types</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a001157e4d50ea929d413ed170a4130c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticlesTemp</type>
      <name>get_optimizable_beads</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>accc16c1b9bd4f5223e6ab1c4b243011f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_pore_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>abeb357e9cd309916f777c818443a5de8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_pore_radius_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a4ad468aec1b21fbd928a374af2d44d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_range</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a6c5e30cc67ad03aea23c12a1c615577f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>rmf::SaveOptimizerState *</type>
      <name>get_rmf_sos_writer</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a6d48a4a0c2690d6d89ff537edfa2b85f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>atom::Hierarchy</type>
      <name>get_root_of_type</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aa2c1343216d8134ade6e414c511440f8</anchor>
      <arglist>(core::ParticleType type) const </arglist>
    </member>
    <member kind="function">
      <type>Scoring *</type>
      <name>get_scoring</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aa141e3e041963a194dfce3bef9f0f85d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scoring const *</type>
      <name>get_scoring</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ab6bf77374a57f8c472ac8a5adcea5655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3Ds</type>
      <name>get_site_centers</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aa4527abbffafdde0d1ec1e2462b0878f</anchor>
      <arglist>(core::ParticleType t0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_site_display_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a364fafa09d44bf2720440f8e0b14bf58</anchor>
      <arglist>(core::ParticleType) const </arglist>
    </member>
    <member kind="function">
      <type>algebra::Sphere3Ds</type>
      <name>get_sites</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a5e74c39ee9e99bd1d1b504619f94a20a</anchor>
      <arglist>(core::ParticleType t0) const </arglist>
    </member>
    <member kind="function">
      <type>Particle *</type>
      <name>get_slab_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a6b6b9d4f83a9ae230edca68779a9747a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Statistics *</type>
      <name>get_statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a2bab690e0137e2750c1458baef9acef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Statistics const *</type>
      <name>get_statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aebad5e9d8afb447e8c788aae93a7ef62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_statistics_fraction</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a88f92c91b1f762266529476cca009b3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_tunnel_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>aac5923a0b2f32d2b89894f64db08480b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_tunnel_radius_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>ac7599765e29ad0709bae4c5b3c8b239e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a07019e72d2243e2ac5654a8ec898d596</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_xyz_stats_crop_factor</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>af90100c949a5e53f3be4d39db7570a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_xyz_stats_max_box_size_A</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a5ad74c5720a72f3c1f2f9c4311fb8f81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_xyz_stats_voxel_size_A</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a565eab99db687882b589530b765cca72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize_positions_from_rmf</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a0867c650929c05801014e0b296589f64</anchor>
      <arglist>(RMF::FileConstHandle fh, int frame_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>link_rmf_file_handle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a6f9835f42a1f83d4149991ba95b5c252</anchor>
      <arglist>(RMF::FileHandle fh, bool is_restraints=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_fgs_with_prefix</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a73e2dcd06035970724a286ed519ace67</anchor>
      <arglist>(std::string s_fg_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_particle_type</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>adc05a325fffc184b9beca28db907d7ae</anchor>
      <arglist>(core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_rmf</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>af26614c376a200210e8248512082e6d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_box_size</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a180fbb76d51a95b15af6763f5998a4ee</anchor>
      <arglist>(double box_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_sphere_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a8a403a24afb57d45e415e2d17ce33712</anchor>
      <arglist>(double sphere_radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_bounding_volume</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a183bcf4b042532a4da4c966ca186cdad</anchor>
      <arglist>(double volume_A3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rmf_file</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a643dec56a7107eea3671382ffa09cf31</anchor>
      <arglist>(const std::string &amp;new_name, bool is_save_restraints_to_rmf=true, bool is_force_restart=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sites</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a265203276b027c89be00e42229b36c19</anchor>
      <arglist>(core::ParticleType t0, int n, double r, double sr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sites</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>af1f756d35bc420d8621a8b602cb6fb09</anchor>
      <arglist>(core::ParticleType t0, const algebra::Sphere3Ds &amp;sites)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_geometry</name>
      <anchorfile>classIMP_1_1npctransport_1_1SimulationData.html</anchorfile>
      <anchor>a5307a3cdcac99750b057e1c32ebc2d3f</anchor>
      <arglist>(std::string out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SitesGeometry</name>
    <filename>classIMP_1_1npctransport_1_1SitesGeometry.html</filename>
    <base>IMP::core::XYZRGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesGeometry.html</anchorfile>
      <anchor>ad8b29cafaec8259ee5469a4763bf50ef</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesGeometry.html</anchorfile>
      <anchor>a7fb0358bc97c398e4d951670168b6a9f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SitesPairScore</name>
    <filename>classIMP_1_1npctransport_1_1SitesPairScore.html</filename>
    <base>IMP::npctransport::LinearInteractionPairScore</base>
    <member kind="function">
      <type></type>
      <name>SitesPairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a57668150291727eaadeb842bbec1a127</anchor>
      <arglist>(double range, double k, double sigma0_deg, double sigma1_deg, double range_nonspec_attraction, double k_nonspec_attraction, double k_nonspec_repulsion, const algebra::Sphere3Ds &amp;sites0, const algebra::Sphere3Ds &amp;sites1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a5668cba4f5faf164b28c3106bb9d2677</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>ac326c5df88fca715838f962aa729ee45</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a7eeadc6c7921818c4639d01e8597b4cf</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a95dab11087581a4f612c50a221a8cdde</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_site_contributions</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a0652d42fb895d6381b71909cc75bd4dc</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da, boost::tuple&lt; unsigned int, std::vector&lt; unsigned int &gt;, std::vector&lt; unsigned int &gt;, bool &gt;(*contacts_accumulator)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_site_contributions_with_internal_tables</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a4f458d7972f6fd4b0a01c7d83d8f2534</anchor>
      <arglist>(algebra::Sphere3D const *spheres_table, double const **quaternions_tables, algebra::Sphere3D *sphere_derivatives_table, double **torques_tables, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da, boost::tuple&lt; unsigned int, std::vector&lt; unsigned int &gt;, std::vector&lt; unsigned int &gt;, bool &gt;(*contacts_accumulator)=nullptr) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_sites_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a3e63a9203cec72d6b470b22a455ff859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_sites_range</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a964e62635aa9566846bac6a807fb6e7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SitesPairScore.html</anchorfile>
      <anchor>a4159600a0397fdebb2c4074d42bffcae</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::npctransport::SitesPairScoreParameters</name>
    <filename>structIMP_1_1npctransport_1_1SitesPairScoreParameters.html</filename>
    <member kind="function">
      <type></type>
      <name>SitesPairScoreParameters</name>
      <anchorfile>structIMP_1_1npctransport_1_1SitesPairScoreParameters.html</anchorfile>
      <anchor>a109bad980329de376b07e51022afeb18</anchor>
      <arglist>(double range, double k_coefficient, double sigma1_max_deg=0.0, double sigma2_max_deg=0.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithCylindricalPore</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithCylindricalPore.html</filename>
    <base>IMP::npctransport::SlabWithPore</base>
    <member kind="function">
      <type>void</type>
      <name>add_to_pore_radius_derivative</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a8b3be5efd113369fd41b7f1902d987fd</anchor>
      <arglist>(double v, DerivativeAccumulator &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_pore_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a71356c3dbde05fc9742514a7d52dcaba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_thickness</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a9f71176ec398be58e0071069e9c89839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pore_radius</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a9baa9f2a173b50df9f3473ef687d68f4</anchor>
      <arglist>(double r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pore_radius_is_optimized</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a8198456cf073bb80fdcdee4fc7ce4b9d</anchor>
      <arglist>(bool tf) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_thickness</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a6bfa9721a50c34511780d142f0e098d0</anchor>
      <arglist>(double thickness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_cylindrical_pore_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPore.html</anchorfile>
      <anchor>ac3bba6e1809d855793066be2681aa854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPore.html</anchorfile>
      <anchor>a2347b50f2cac5c30d24ddb177317039d</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithCylindricalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPore.html</anchorfile>
      <anchor>ab7769e4e0926ac132d52799e5bbe9f61</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithCylindricalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPore.html</anchorfile>
      <anchor>ae301271e74499f0d8647fdb74b363eb7</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>acc7b4fce7b556983476c904f249993e5</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_pore_radius_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a89350e85967bb4da6b09d5ee65742bfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_thickness_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>a9144d513a282788f0231e92699ce5eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>af5cb3804ddf53f76ddb8db8086a039d2</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double pore_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithPore.html</anchorfile>
      <anchor>ac03d4e35c9c772fff4d300d4155d23f1</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double pore_radius)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithCylindricalPorePairScore</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SlabWithCylindricalPorePairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>abec007c11a1467e4635721ebb5e351a3</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>ac1a626e5a0b4e8b8ff1d6b84ee57ea81</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>a7279ad15c4426999f70ca70f9d36d348</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;pips, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>a357315d2afa0299919715bda326699c5</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>a3e2cce4870d29e9cdcb6d1116ef8819c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;pips, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>algebra::Vector3D</type>
      <name>get_displacement_direction</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>a77eb2891252ad5ceec130ed962f7ab8c</anchor>
      <arglist>(SlabWithCylindricalPore const &amp;slab, const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_displacement_magnitude</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>aef5d246d897659dc304b4b9aa683dd43</anchor>
      <arglist>(SlabWithCylindricalPore const &amp;slab, const algebra::Vector3D &amp;v) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPorePairScore.html</anchorfile>
      <anchor>a3551f3c2bfe855da791cdf7b409d6d1c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithCylindricalPoreWireGeometry</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithCylindricalPoreWireGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function">
      <type></type>
      <name>SlabWithCylindricalPoreWireGeometry</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPoreWireGeometry.html</anchorfile>
      <anchor>a86b42ae2d33a1d872bddf067f59a294c</anchor>
      <arglist>(double height, double radius, double length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPoreWireGeometry.html</anchorfile>
      <anchor>ac4f2ae1230ed9fb1e4482731a1b5603d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithCylindricalPoreWireGeometry.html</anchorfile>
      <anchor>a9c786e29c02ea78e3500158469706446</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithPore</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithPore.html</filename>
    <base>IMP::Decorator</base>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithToroidalPore</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</filename>
    <base>IMP::npctransport::SlabWithPore</base>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>acfa3d5d3fcf813c02f3cc30c13ac4876</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_minor_radius_h2v_aspect_ratio_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a7ab5fa6af9729ac9b187c383faa14eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_toroidal_pore_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a47507ca4083ec1ff0cd9e02aa02900be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>aaf307e24380fdacb3c205d5073d0144a</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double major_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>abf6f1001e8f575785dae808b9f84dd6a</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double major_radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a07871738b01b66c32412e600bbcebf83</anchor>
      <arglist>(Model *m, ParticleIndex pi, double thickness, double major_radius, double minor_radius_h2v_aspect_ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SlabWithToroidalPore</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPore.html</anchorfile>
      <anchor>a8a9c2131c40596728442f99734f76485</anchor>
      <arglist>(IMP::ParticleAdaptor pa, double thickness, double major_radius, double minor_radius_h2v_aspect_ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithToroidalPorePairScore</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPorePairScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>aec2fe46b7f0ca0bebc0236d2354095e3</anchor>
      <arglist>(double k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>a829be2f16529fec7288111f86115d548</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>a1f8a014676abcd854acf4e8f8d1464b7</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>aa24dbd9c0555cdb75ed2616c451bc8be</anchor>
      <arglist>(Model *m, ParticleIndexPair const &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>ae31adb3e69bc1653a86d2ef6c3e112d2</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;pips, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPorePairScore.html</anchorfile>
      <anchor>a7935782b3a7398d139b361e3e391702b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::SlabWithToroidalPoreWireGeometry</name>
    <filename>classIMP_1_1npctransport_1_1SlabWithToroidalPoreWireGeometry.html</filename>
    <base>IMP::display::Geometry</base>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreWireGeometry</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>a8b09ca984c34d288ee31c5b170df3944</anchor>
      <arglist>(double slab_height, double major_radius, double horizontal_semiaxis, double slab_length)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SlabWithToroidalPoreWireGeometry</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>ae5c6a9c8a3a54c101fc1bb72b4eb9471</anchor>
      <arglist>(double slab_height, double major_radius, double slab_length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>ab72dcdcbc71f83de2b64c93f914199f4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1SlabWithToroidalPoreWireGeometry.html</anchorfile>
      <anchor>a1709ba59630f148845141c94417101b1</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::Statistics</name>
    <filename>classIMP_1_1npctransport_1_1Statistics.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Statistics</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>ad8fa946acbb73598c6510378be2bff8e</anchor>
      <arglist>(SimulationData *sd, unsigned int statistics_interval_frames, std::string output_file_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_fg_chain_stats</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a0cf5a8c74dd00ea5d832a9240e09a92b</anchor>
      <arglist>(FGChain *fg_chain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_floater_stats</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a117961980b6db5dbf0f85a7243718b62</anchor>
      <arglist>(IMP::Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_interaction_stats</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a9aba0d5dafeae77ac5f48514757076f7</anchor>
      <arglist>(core::ParticleType type0, core::ParticleType type1)</arglist>
    </member>
    <member kind="function">
      <type>OptimizerStates</type>
      <name>add_optimizer_states</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a551002c191a92fe34f8743c110549028</anchor>
      <arglist>(Optimizer *o=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_activated</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a0206a1f4c006882515ca21121809cfb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a077ec2a3a6334249ec7aa5e1572f62ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Model *</type>
      <name>get_model</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a9499acc5b2a6dcc6efb19bd693955855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimulationData *</type>
      <name>get_sd</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>aa3d25ade5a201d984d0d3e1ce338bdc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SimulationData const *</type>
      <name>get_sd</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a39e3581c4eb09bf4c5b2a75883988fd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a5b01e56c08fbda8d44cacfee4d8f062d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_particle_type</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a7529ec1ee2814f194e54431f2437e736</anchor>
      <arglist>(core::ParticleType pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_statistics_optimizer_states</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>aefebca7d303c1148b032b46a8d22a37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interrupted</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>af60263e1654c1fd1dde65c71788a9ce3</anchor>
      <arglist>(bool tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a6acfc23e1671fe8e56225a1e216acf74</anchor>
      <arglist>(const IMP::internal::SimpleTimer &amp;timer, unsigned int nf_new=1, bool force_full_output=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_particle_type_xyz_distribution_map</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>aa4685933e6e5a02d9890661b0a7a3fcb</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_particle_type_zr_distribution_map</name>
      <anchorfile>classIMP_1_1npctransport_1_1Statistics.html</anchorfile>
      <anchor>a9d370e6cad1e6ca4cf02a11c1f5e8846</anchor>
      <arglist>(Particle *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::Transporting</name>
    <filename>classIMP_1_1npctransport_1_1Transporting.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>bool</type>
      <name>get_is_last_entry_from_top</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>af203d04b1517c585b81bde9da120c06d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_last_tracked_z</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a5b2bbb3c15366ca54a5bbb7c56c401ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_n_entries_bottom</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a23c45f55a0592bde7613f79a25bcc6f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_n_entries_top</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a8f673a863b7f4fd0e9d145a9fc77e893</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_last_entry_from_top</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>af5ec5427b1ed50a1fc62478fe5b164bf</anchor>
      <arglist>(bool is_last_entry_from_top)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_last_tracked_z</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a8db52313ae46ccd922342d307270b3a6</anchor>
      <arglist>(double last_tracked_z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n_entries_bottom</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a384ff2e8776cc09beea420f1f24525a5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_n_entries_top</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a5e45be1c340b9cb15493364124684f16</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_is_last_entry_from_top_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>ae761df990ffbd288432ffba2ed76dbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_is_setup</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a5e1e6ea2eeb8996e721e3e2542317ed8</anchor>
      <arglist>(Model *m, ParticleIndex pi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FloatKey</type>
      <name>get_last_tracked_z_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a3bf2ccc2a43e11e6078a2bda1144ff35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_n_entries_bottom_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>abb38f1a7ee20227535c90dbd58ce3216</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntKey</type>
      <name>get_n_entries_top_key</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>ad33f3f9208a1a9e65516606cb3dae250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transporting</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>adaa01fc8072a868df076503486fa4eaa</anchor>
      <arglist>(IMP::ParticleAdaptor pa, bool is_last_entry_from_top=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transporting</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1npctransport_1_1Transporting.html</anchorfile>
      <anchor>a4040a253b333196bd955a5945a079283</anchor>
      <arglist>(Model *m, ParticleIndex pi, bool is_last_entry_from_top=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::TypedSitesGeometry</name>
    <filename>classIMP_1_1npctransport_1_1TypedSitesGeometry.html</filename>
    <base>IMP::display::SingletonsGeometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::display::Geometries</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1npctransport_1_1TypedSitesGeometry.html</anchorfile>
      <anchor>a1f52d6556ef43d263b6c8813c2722973</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1TypedSitesGeometry.html</anchorfile>
      <anchor>a3d0f5b6b840d84dd950ce91de88a0b91</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::npctransport::ZBiasSingletonScore</name>
    <filename>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function">
      <type></type>
      <name>ZBiasSingletonScore</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>ae952455da2f376f9c70e8db1b115877d</anchor>
      <arglist>(double k, double max_r=HALF_SQRT_MAX_DOUBLE)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a6a264ea9775dfe466640a7dab52c0218</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>ae3bc38f364dd505d5eaf365f0e76cb27</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a711976b7bd29b5c599a086bdb0dfb4b8</anchor>
      <arglist>(Model *m, ParticleIndex pi, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a2f3e84e9d220690124f1e23e13da20ce</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a8f635f43a5533873b7d6ec4b3937fc98</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>ab92b1e4d5fbee8b0261a7b07af25f0b4</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>ad496b0a49b2fc39b4a61fca51c6896a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a4b3385417ecdddfe6a813442c1a75433</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_k</name>
      <anchorfile>classIMP_1_1npctransport_1_1ZBiasSingletonScore.html</anchorfile>
      <anchor>a457a440582528b1bb671cd7491ff3c50</anchor>
      <arglist>(double k)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::parallel</name>
    <filename>namespaceIMP_1_1parallel.html</filename>
    <namespace>IMP::parallel::manager_communicator</namespace>
    <namespace>IMP::parallel::subproc</namespace>
    <namespace>IMP::parallel::util</namespace>
    <class kind="class">IMP::parallel::Context</class>
    <class kind="class">IMP::parallel::Error</class>
    <class kind="class">IMP::parallel::LocalWorker</class>
    <class kind="class">IMP::parallel::Manager</class>
    <class kind="class">IMP::parallel::NetworkError</class>
    <class kind="class">IMP::parallel::NoMoreWorkersError</class>
    <class kind="class">IMP::parallel::RemoteError</class>
    <class kind="class">IMP::parallel::SGEPEWorkerArray</class>
    <class kind="class">IMP::parallel::SGEQsubWorkerArray</class>
    <class kind="class">IMP::parallel::Worker</class>
    <class kind="class">IMP::parallel::WorkerArray</class>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1parallel.html</anchorfile>
      <anchor>a64bb1020078e3beafa45f90429cb6cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1parallel.html</anchorfile>
      <anchor>ad6d1bb6eed3037d51d5e09f9173a2c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1parallel.html</anchorfile>
      <anchor>ab8face57bb2f0e4201b90c6f557f734a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1parallel.html</anchorfile>
      <anchor>a9a75e8481ca295770a9b378718c5b4f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::Context</name>
    <filename>classIMP_1_1parallel_1_1Context.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1parallel_1_1Context.html</anchorfile>
      <anchor>a7cc6f83ece11aec641cdcd530ccca3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_task</name>
      <anchorfile>classIMP_1_1parallel_1_1Context.html</anchorfile>
      <anchor>a884fecd57a5fac583c5272d9882d316d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_results_unordered</name>
      <anchorfile>classIMP_1_1parallel_1_1Context.html</anchorfile>
      <anchor>aabac930e1a2e9b1fa7494bdf9150802a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::Error</name>
    <filename>classIMP_1_1parallel_1_1Error.html</filename>
    <base>IMP::Exception</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::LocalWorker</name>
    <filename>classIMP_1_1parallel_1_1LocalWorker.html</filename>
    <base>IMP::parallel::Worker</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::Manager</name>
    <filename>classIMP_1_1parallel_1_1Manager.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1parallel_1_1Manager.html</anchorfile>
      <anchor>ae7b822c30bfb9c27082b894d56f60e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_worker</name>
      <anchorfile>classIMP_1_1parallel_1_1Manager.html</anchorfile>
      <anchor>a0e0ec3587a7f5987ed08499730e64492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_context</name>
      <anchorfile>classIMP_1_1parallel_1_1Manager.html</anchorfile>
      <anchor>acbec65c99df6aac3e4ea6379a6737997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::NetworkError</name>
    <filename>classIMP_1_1parallel_1_1NetworkError.html</filename>
    <base>IMP::parallel::Error</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::NoMoreWorkersError</name>
    <filename>classIMP_1_1parallel_1_1NoMoreWorkersError.html</filename>
    <base>IMP::parallel::Error</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::RemoteError</name>
    <filename>classIMP_1_1parallel_1_1RemoteError.html</filename>
    <base>IMP::parallel::Error</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::SGEPEWorkerArray</name>
    <filename>classIMP_1_1parallel_1_1SGEPEWorkerArray.html</filename>
    <base>IMP::parallel::WorkerArray</base>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::SGEQsubWorkerArray</name>
    <filename>classIMP_1_1parallel_1_1SGEQsubWorkerArray.html</filename>
    <base>IMP::parallel::WorkerArray</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1parallel_1_1SGEQsubWorkerArray.html</anchorfile>
      <anchor>a9424a43f17f6ab0fd4a78bdcab6b3baa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::Worker</name>
    <filename>classIMP_1_1parallel_1_1Worker.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::WorkerArray</name>
    <filename>classIMP_1_1parallel_1_1WorkerArray.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::parallel::manager_communicator</name>
    <filename>namespaceIMP_1_1parallel_1_1manager__communicator.html</filename>
    <class kind="class">IMP::parallel::manager_communicator::ManagerCommunicator</class>
  </compound>
  <compound kind="class">
    <name>IMP::parallel::manager_communicator::ManagerCommunicator</name>
    <filename>classIMP_1_1parallel_1_1manager__communicator_1_1ManagerCommunicator.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::parallel::subproc</name>
    <filename>namespaceIMP_1_1parallel_1_1subproc.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::parallel::util</name>
    <filename>namespaceIMP_1_1parallel_1_1util.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pepdock</name>
    <filename>namespaceIMP_1_1pepdock.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1pepdock.html</anchorfile>
      <anchor>a4b5398c5ad4b5d3920962127afe354ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1pepdock.html</anchorfile>
      <anchor>a840b54e50d9ad167d560e6edbba795f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1pepdock.html</anchorfile>
      <anchor>ad720948933b57c1d360b26868d4f9389</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1pepdock.html</anchorfile>
      <anchor>a15f1056b3432c91a9f1a7a47ad76913a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi</name>
    <filename>namespaceIMP_1_1pmi.html</filename>
    <namespace>IMP::pmi::alphabets</namespace>
    <namespace>IMP::pmi::analysis</namespace>
    <namespace>IMP::pmi::dof</namespace>
    <namespace>IMP::pmi::io</namespace>
    <namespace>IMP::pmi::macros</namespace>
    <namespace>IMP::pmi::mmcif</namespace>
    <namespace>IMP::pmi::output</namespace>
    <namespace>IMP::pmi::restraints</namespace>
    <namespace>IMP::pmi::samplers</namespace>
    <namespace>IMP::pmi::tools</namespace>
    <namespace>IMP::pmi::topology</namespace>
    <class kind="class">IMP::pmi::CompositeRestraint</class>
    <class kind="class">IMP::pmi::CrossLinkRestraintSet</class>
    <class kind="class">IMP::pmi::MembraneRestraint</class>
    <class kind="class">IMP::pmi::MissingFileWarning</class>
    <class kind="class">IMP::pmi::ParameterWarning</class>
    <class kind="class">IMP::pmi::Resolution</class>
    <class kind="class">IMP::pmi::StructureWarning</class>
    <class kind="class">IMP::pmi::Symmetric</class>
    <class kind="class">IMP::pmi::TransformMover</class>
    <class kind="class">IMP::pmi::Uncertainty</class>
    <member kind="function">
      <type>RestraintSet *</type>
      <name>create_elastic_network</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a136fbe0c4b8cf1f652b8786ae448bc24</anchor>
      <arglist>(const Particles &amp;ps, Float dist_cutoff, Float strength)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_molecule_name_and_copy</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a29784187f69b015fd2d9ae278d862188</anchor>
      <arglist>(atom::Hierarchy h)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a2e51c8b68146b4cdb7a7ba002141604d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a8abba76b26592fed21192f5944473428</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1pmi.html</anchorfile>
      <anchor>a34b82d5f2a7bdf4896889a32d51cfd0c</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::CompositeRestraint</name>
    <filename>classIMP_1_1pmi_1_1CompositeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CompositeRestraint</name>
      <anchorfile>classIMP_1_1pmi_1_1CompositeRestraint.html</anchorfile>
      <anchor>ae074c9b992d2959c99ac2a24d0f23060</anchor>
      <arglist>(Model *m, ParticleIndexesAdaptor handle_particle_indexes, double coffd, double l, bool tabprob, double plateau, std::string name=&quot;CompositeRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi_1_1CompositeRestraint.html</anchorfile>
      <anchor>a483b5c5d83124a26c599cffecb12ce93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi_1_1CompositeRestraint.html</anchorfile>
      <anchor>a07cac0a6aa483ef01e59b6c3a0f49baf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1pmi_1_1CompositeRestraint.html</anchorfile>
      <anchor>a433f9614fd83b9b4fdc2e14efddd0475</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::CrossLinkRestraintSet</name>
    <filename>classIMP_1_1pmi_1_1CrossLinkRestraintSet.html</filename>
    <base>IMP::RestraintSet</base>
    <member kind="function" virtualness="virtual">
      <type>virtual RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1pmi_1_1CrossLinkRestraintSet.html</anchorfile>
      <anchor>a4f0fac1095fb14a6446a2c150c4939e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi_1_1CrossLinkRestraintSet.html</anchorfile>
      <anchor>abc6148c07fd31be8c8b3a91916dc2435</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::MembraneRestraint</name>
    <filename>classIMP_1_1pmi_1_1MembraneRestraint.html</filename>
    <base>IMP::isd::ISDRestraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi_1_1MembraneRestraint.html</anchorfile>
      <anchor>a8623a77aa20a7fdc5557f6507888ef96</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi_1_1MembraneRestraint.html</anchorfile>
      <anchor>afe7e0e84d5f69bf869cd96716a66e0cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1pmi_1_1MembraneRestraint.html</anchorfile>
      <anchor>aafd40b37cdccb5b4b0ecf181d4ca3496</anchor>
      <arglist>(DerivativeAccumulator *) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::MissingFileWarning</name>
    <filename>classIMP_1_1pmi_1_1MissingFileWarning.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::ParameterWarning</name>
    <filename>classIMP_1_1pmi_1_1ParameterWarning.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::Resolution</name>
    <filename>classIMP_1_1pmi_1_1Resolution.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Resolution</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Resolution.html</anchorfile>
      <anchor>afe33425fc9b6e30f6fef08e644ae23d6</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float resolution)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Resolution</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Resolution.html</anchorfile>
      <anchor>a84a147a105e3ddbb62ce6f357584eb3f</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float resolution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::StructureWarning</name>
    <filename>classIMP_1_1pmi_1_1StructureWarning.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::Symmetric</name>
    <filename>classIMP_1_1pmi_1_1Symmetric.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Symmetric</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Symmetric.html</anchorfile>
      <anchor>ae95167db885a60e540bcf7b66abbdaac</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float symmetric)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Symmetric</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Symmetric.html</anchorfile>
      <anchor>ad0242a6a4a42aee2d0e9624e3786f8c9</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float symmetric)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::TransformMover</name>
    <filename>classIMP_1_1pmi_1_1TransformMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi_1_1TransformMover.html</anchorfile>
      <anchor>a14f2b94f34f318131d457f8d5038820b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi_1_1TransformMover.html</anchorfile>
      <anchor>a2f651feb2dbe32164a4b0a7a192ab3b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1pmi_1_1TransformMover.html</anchorfile>
      <anchor>aa4a44d3b4a1c9ce6253f689cb3a70711</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1pmi_1_1TransformMover.html</anchorfile>
      <anchor>a9c5b820796b3e135000d96cad85f80a7</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::Uncertainty</name>
    <filename>classIMP_1_1pmi_1_1Uncertainty.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Uncertainty</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Uncertainty.html</anchorfile>
      <anchor>ab5afc06397b7e14477e106a2475d3706</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float uncertainty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Uncertainty</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1Uncertainty.html</anchorfile>
      <anchor>a3e69a9051e1acc2054c11ef0c731a805</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float uncertainty)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1</name>
    <filename>namespaceIMP_1_1pmi1.html</filename>
    <namespace>IMP::pmi1::analysis</namespace>
    <namespace>IMP::pmi1::io</namespace>
    <namespace>IMP::pmi1::macros</namespace>
    <namespace>IMP::pmi1::metadata</namespace>
    <namespace>IMP::pmi1::mmcif</namespace>
    <namespace>IMP::pmi1::nonmaintained</namespace>
    <namespace>IMP::pmi1::output</namespace>
    <namespace>IMP::pmi1::representation</namespace>
    <namespace>IMP::pmi1::restraints</namespace>
    <namespace>IMP::pmi1::samplers</namespace>
    <namespace>IMP::pmi1::tools</namespace>
    <namespace>IMP::pmi1::topology</namespace>
    <class kind="class">IMP::pmi1::CompositeRestraint</class>
    <class kind="class">IMP::pmi1::InternalCoordinatesConstraint</class>
    <class kind="class">IMP::pmi1::MembraneRestraint</class>
    <class kind="class">IMP::pmi1::Resolution</class>
    <class kind="class">IMP::pmi1::SigmoidRestraintSphere</class>
    <class kind="class">IMP::pmi1::Symmetric</class>
    <class kind="class">IMP::pmi1::TransformMover</class>
    <class kind="class">IMP::pmi1::Uncertainty</class>
    <member kind="function">
      <type>RestraintSet *</type>
      <name>create_elastic_network</name>
      <anchorfile>namespaceIMP_1_1pmi1.html</anchorfile>
      <anchor>a2995df7ccbc9bebba29bf2f879e92fc7</anchor>
      <arglist>(const Particles &amp;ps, Float dist_cutoff, Float strength)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1pmi1.html</anchorfile>
      <anchor>acf90d1766910e7d4d7dd9be185cbe628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1pmi1.html</anchorfile>
      <anchor>a1a63ba98fcbf5cc9f17f20eb0ba9c54e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1pmi1.html</anchorfile>
      <anchor>a96d75dba6abc6d584a0f9c4cbcc6d6a2</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::CompositeRestraint</name>
    <filename>classIMP_1_1pmi1_1_1CompositeRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>CompositeRestraint</name>
      <anchorfile>classIMP_1_1pmi1_1_1CompositeRestraint.html</anchorfile>
      <anchor>ab47ac587dcc28a81ae538afc3fc079f8</anchor>
      <arglist>(Model *m, ParticleIndexesAdaptor handle_particle_indexes, double coffd, double l, bool tabprob, double plateau, std::string name=&quot;CompositeRestraint%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1CompositeRestraint.html</anchorfile>
      <anchor>a92d012fcca39e548a9de44ace739f32c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi1_1_1CompositeRestraint.html</anchorfile>
      <anchor>abb94ac9a91d60f46462b1acc63f34029</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1pmi1_1_1CompositeRestraint.html</anchorfile>
      <anchor>a6234f6656975589de731b66b2cf85bbe</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::InternalCoordinatesConstraint</name>
    <filename>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</anchorfile>
      <anchor>abb0915261046d538f13b85e3efd44802</anchor>
      <arglist>(Model *m, ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</anchorfile>
      <anchor>a4de9a706437e7453499af14b6a1b0b52</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</anchorfile>
      <anchor>a481a0a3a93533e44a4b9e37f572eda88</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</anchorfile>
      <anchor>af3f9103885f232a6bf58143a9e482a76</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi1_1_1InternalCoordinatesConstraint.html</anchorfile>
      <anchor>acc766eee82c603f717a7ad9590aee460</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::MembraneRestraint</name>
    <filename>classIMP_1_1pmi1_1_1MembraneRestraint.html</filename>
    <base>IMP::isd::ISDRestraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1MembraneRestraint.html</anchorfile>
      <anchor>a8f7c20894b8364b94db74ac1280b6ce0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi1_1_1MembraneRestraint.html</anchorfile>
      <anchor>afcd88b9f4b16906a006a64400bae439b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1pmi1_1_1MembraneRestraint.html</anchorfile>
      <anchor>afdb184ea3130ba648d359aec329cb963</anchor>
      <arglist>(DerivativeAccumulator *) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::Resolution</name>
    <filename>classIMP_1_1pmi1_1_1Resolution.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Resolution</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Resolution.html</anchorfile>
      <anchor>a62ad0268fee3b17322401ca59937bc40</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float resolution)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Resolution</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Resolution.html</anchorfile>
      <anchor>a5355960e431eab4a7297ba993b900c18</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float resolution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::SigmoidRestraintSphere</name>
    <filename>classIMP_1_1pmi1_1_1SigmoidRestraintSphere.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>SigmoidRestraintSphere</name>
      <anchorfile>classIMP_1_1pmi1_1_1SigmoidRestraintSphere.html</anchorfile>
      <anchor>a6c6d08563da661764df750fe520139ce</anchor>
      <arglist>(IMP::Model *m, IMP::ParticleIndexAdaptor p1, IMP::ParticleIndexAdaptor p2, double inflection, double slope, double amplitude, double line_slope_=0, std::string name=&quot;SigmoidRestraintSphere%1%&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1SigmoidRestraintSphere.html</anchorfile>
      <anchor>a3ea3f193c17f6692c5ee8e7d7e9f85e3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi1_1_1SigmoidRestraintSphere.html</anchorfile>
      <anchor>a19c5049f66a7cfbfd84766ecc90f1c6d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1pmi1_1_1SigmoidRestraintSphere.html</anchorfile>
      <anchor>aa5c39eb4822fe7c68a9f49d9b077c84c</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::Symmetric</name>
    <filename>classIMP_1_1pmi1_1_1Symmetric.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Symmetric</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Symmetric.html</anchorfile>
      <anchor>a14e50dfbe30e8c3b38a9bba3b723bc9c</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float symmetric)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Symmetric</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Symmetric.html</anchorfile>
      <anchor>a845729a7199d5724547652b7ca8170ee</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float symmetric)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::TransformMover</name>
    <filename>classIMP_1_1pmi1_1_1TransformMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1pmi1_1_1TransformMover.html</anchorfile>
      <anchor>a80bd2d0c27771fa4d6a2716939d1195d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1pmi1_1_1TransformMover.html</anchorfile>
      <anchor>a50c3efe9b5f5671a03f1ba17909f7235</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1pmi1_1_1TransformMover.html</anchorfile>
      <anchor>a8509a87e225659743f28c3f82e63268c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1pmi1_1_1TransformMover.html</anchorfile>
      <anchor>aef201d1de7af2bafcd41a3abe2d8f522</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::Uncertainty</name>
    <filename>classIMP_1_1pmi1_1_1Uncertainty.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function" static="yes">
      <type>static Uncertainty</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Uncertainty.html</anchorfile>
      <anchor>a27aa0f2676642cf2ec2d02285519684c</anchor>
      <arglist>(Model *m, ParticleIndex pi, Float uncertainty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Uncertainty</type>
      <name>setup_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1Uncertainty.html</anchorfile>
      <anchor>addf4e0aa7e2f2a210ab57678f1dd01ae</anchor>
      <arglist>(IMP::ParticleAdaptor pa, Float uncertainty)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::analysis</name>
    <filename>namespaceIMP_1_1pmi1_1_1analysis.html</filename>
    <class kind="class">IMP::pmi1::analysis::Alignment</class>
    <class kind="class">IMP::pmi1::analysis::Clustering</class>
    <class kind="class">IMP::pmi1::analysis::CrossLinkTable</class>
    <class kind="class">IMP::pmi1::analysis::GetModelDensity</class>
    <class kind="class">IMP::pmi1::analysis::Precision</class>
    <class kind="class">IMP::pmi1::analysis::RMSD</class>
    <member kind="function">
      <type>def</type>
      <name>get_particles_at_resolution_one</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1analysis.html</anchorfile>
      <anchor>a48ada4aa6e35f473e2f42c8630bd66a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_at_resolution_ten</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1analysis.html</anchorfile>
      <anchor>ae0b462ea23bca4023c89c21a4e99df3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::Alignment</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1Alignment.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Alignment.html</anchorfile>
      <anchor>a0ea4ee38e696affb07e8ea3519bbeda5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::Clustering</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1Clustering.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>a0bfead5518ca9dd19d88f0f3dbeadba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>do_cluster</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>adeb69b73b93fa3f82aedbf340f354655</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>fill</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>a95ccd9d6402680e11e140237007e0231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::CrossLinkTable</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1CrossLinkTable.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::GetModelDensity</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1GetModelDensity.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>aa7e0f178cde4b8d3f226851afe067438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_subunits_density</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>a0243e9ced155359855efa7f981be294f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>a567be60d8d7a8578e95be872008d89a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::Precision</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>adf1d71c09e1b3aaf71d7d8aba578422c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_structure</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a17b61a0ec470f4a89a300b73a71d07e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_structures</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a651836171d472b953875060cf177f43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_average_distance_wrt_reference_structure</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a10c260216f3938146cffa091d8db3982</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_precision</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a26f23013880e9a0b21cd4bd94104bb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rmsd_wrt_reference_structure_with_alignment</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a6317fdb609c5ac29f66657bd60840a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rmsf</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a9746bf4d6e17a117c5acd40f2bc92695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_reference_structure</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a63f762cf3fa1b280c75ef9ede962a183</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::analysis::RMSD</name>
    <filename>classIMP_1_1pmi1_1_1analysis_1_1RMSD.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>a6eaebdf466937b0ced8a30665d059ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_moldict_coorddict</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>a7f35c33690be9b70d990569107155f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_output</name>
      <anchorfile>classIMP_1_1pmi1_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>aa49ef7266227fb7f661dc296e9b9cab9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::io</name>
    <filename>namespaceIMP_1_1pmi1_1_1io.html</filename>
    <namespace>IMP::pmi1::io::crosslink</namespace>
    <namespace>IMP::pmi1::io::utilities</namespace>
    <namespace>IMP::pmi1::io::xltable</namespace>
    <class kind="class">IMP::pmi1::io::RMSDOutput</class>
    <class kind="class">IMP::pmi1::io::TotalScoreOutput</class>
    <member kind="function">
      <type>def</type>
      <name>add_provenance</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>a179a50880cc6912bd461a08bda9fc948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_bead_sizes</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>a9ac831ac37abd86d775823d03056559a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_best_models</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>a9700bd8482877a9c732ba5d29c9f180a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_trajectory_models</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>a31a2e4f5368c322b0a7499ede2b0ee73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parse_dssp</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>a2dae9afa90d4e6a90593aefb085f153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_coordinates_of_rmfs</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>aa1253f4a79bbac9daf1015ff0db5365c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_best_models</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1io.html</anchorfile>
      <anchor>af0a93dbed7bae10c9215f96e966b71c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::RMSDOutput</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1RMSDOutput.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::TotalScoreOutput</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1TotalScoreOutput.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::io::crosslink</name>
    <filename>namespaceIMP_1_1pmi1_1_1io_1_1crosslink.html</filename>
    <class kind="class">IMP::pmi1::io::crosslink::CrossLinkDataBaseFromStructure</class>
    <class kind="class">IMP::pmi1::io::crosslink::CrossLinkDataBaseKeywordsConverter</class>
    <class kind="class">IMP::pmi1::io::crosslink::FilterOperator</class>
    <class kind="class">IMP::pmi1::io::crosslink::FixedFormatParser</class>
    <class kind="class">IMP::pmi1::io::crosslink::JaccardDistanceMatrix</class>
    <class kind="class">IMP::pmi1::io::crosslink::MapCrossLinkDataBaseOnStructure</class>
    <class kind="class">IMP::pmi1::io::crosslink::ResiduePairListParser</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::CrossLinkDataBaseFromStructure</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseFromStructure.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::CrossLinkDataBaseKeywordsConverter</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a86b2dd8f05fe8b81d5caa26f8accd851</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_keys</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a010aa48fbb7cc902992d5b4aded15a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_backward_converter</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a0df0328c08de7bd7299ecb6a8301a83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_converter</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a1a153d5796a1ab68c01800a3af26dcd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_setup_keys</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a9ca9adb921aa3f35c5e02b0a198a5dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_standard_keys</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>ab27a6d410e144b4c2b2e9e968153c2d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::FilterOperator</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1FilterOperator.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1FilterOperator.html</anchorfile>
      <anchor>a21579ce8b76c837f36c8cbda007442e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::FixedFormatParser</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1FixedFormatParser.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::JaccardDistanceMatrix</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</anchorfile>
      <anchor>a06ba3cc20bcb9d45f9ad3e23bc1494cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>jaccard_index</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</anchorfile>
      <anchor>ad7f59b0338796d7d7a7f1a19896fed79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::MapCrossLinkDataBaseOnStructure</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1MapCrossLinkDataBaseOnStructure.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::crosslink::ResiduePairListParser</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1ResiduePairListParser.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_list</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1crosslink_1_1ResiduePairListParser.html</anchorfile>
      <anchor>a4b1381966ff3eee9a0af2f9ee43e8cfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::io::utilities</name>
    <filename>namespaceIMP_1_1pmi1_1_1io_1_1utilities.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::io::xltable</name>
    <filename>namespaceIMP_1_1pmi1_1_1io_1_1xltable.html</filename>
    <class kind="class">IMP::pmi1::io::xltable::XLTable</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::io::xltable::XLTable</name>
    <filename>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</filename>
    <member kind="function">
      <type>def</type>
      <name>load_crosslinks</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a93c8f564016f1a1f291d141dce263a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_pdb_coordinates</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a810ff5cfac1b4a1845c5e070d26ab669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_rmf_coordinates</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a6431056e5e8fdd84a0e23d35784b129a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_sequence_from_fasta_file</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>ad162b3136a606ae8ae808e5386eb7971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_table</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a241c460a3b14471cbe9613fa4098f603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_residue_pairs_to_display</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a638e81dcacafeaba1305be34b949f9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setup_contact_map</name>
      <anchorfile>classIMP_1_1pmi1_1_1io_1_1xltable_1_1XLTable.html</anchorfile>
      <anchor>a3a590e9fa8525b56923c9816c3fae7d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::macros</name>
    <filename>namespaceIMP_1_1pmi1_1_1macros.html</filename>
    <class kind="class">IMP::pmi1::macros::AnalysisReplicaExchange</class>
    <class kind="class">IMP::pmi1::macros::AnalysisReplicaExchange0</class>
    <class kind="class">IMP::pmi1::macros::BuildModel</class>
    <class kind="class">IMP::pmi1::macros::BuildModel1</class>
    <class kind="class">IMP::pmi1::macros::ReplicaExchange0</class>
    <member kind="function">
      <type>def</type>
      <name>BuildModel0</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1macros.html</anchorfile>
      <anchor>af6897709ed6c7b32ff48d873ad1231e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::macros::AnalysisReplicaExchange</name>
    <filename>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a3d3a8ab2efd8f84fbc35759ac452107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>aggregate</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ae84230590f9235f4be8fff9736ac98b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_molecular_assignments</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a0cad9077c298eedbe87af0fc06e0a9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>bipartite_precision</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a8bde24d4ac270d433a2bb93987d39595</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cluster</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a0f2846071f3e0a16e206d73db712180b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>compute_cluster_center</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>abfb2ac4ae192fbdfc69a74a34df782b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_cluster_data</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a91af0ba69469024837cd97500ff975f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>have_close_members</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a21ece52a82cc4cdb4f2cd7a5e9b09f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_clusters</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ac49eb8d0c9afd30d5612993f948e042f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_data</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>afbfceb0993037c9c951e13b710f0da52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>aa20bd870651ac2183b15eb41c5243ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge_aggregates</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a6cb006bf215de76da2fc6a161bd0fa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>precision</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>aabdfba51d28c729f106fdf8617c6b673</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>prune_redundant_structures</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a87cae9255bd5f76a4cf969b7c8fef2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>refine</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>aba1418378472482a535247c936a4a1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsd</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a3b0f73343399cae79d9115f3f56fc998</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsd_helper</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a6cd59a8c4dc86fd16fbf96b6a26f7c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsf</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a070a0bde0c1fe3d25bc7e2a4be9dcfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_clusters</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a5d0825342e5d11748ca572cc4ab81871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_coordinates</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a5a697c0299d22a353755d20162cfe47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_data</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a67b6300558d200d8affd23c17e9c6506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_alignment_selection</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a66b6bd2c2bf49bd9808bea4fbad85344</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_data</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a3a01596f2bb12c64f39809cba108d7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_reference</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>afe43bdf91bc97f0f154072a3e96409fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rmsd_selection</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a2f139cbe1c6b9a5bb2197847979175e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_symmetric</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>acc0151a1ecf3bf19fa2da27e04fb062c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>undo_apply_molecular_assignments</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ab0fa26cf12ecb8a4c2a758f30996e8d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_clusters</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a64de0f840e1b192d899ed3f83461ea22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_seldicts</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>aaf4c0711b4734836d50572dda575d470</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::macros::AnalysisReplicaExchange0</name>
    <filename>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange0.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a383206f24ee3d903fa509110c7bf5d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_protocol_output</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a1319eb1fc551b4e49ff44ab2a9596812</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clustering</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a71b1bbde30c34e8bb4653e6fcfa33951</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_modeling_trajectory</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>aea20253de996398e579a0a06a213e8d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::macros::BuildModel</name>
    <filename>classIMP_1_1pmi1_1_1macros_1_1BuildModel.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1BuildModel.html</anchorfile>
      <anchor>acf3aa9542c8dcd7199107619f20d6a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_representation</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1BuildModel.html</anchorfile>
      <anchor>a160e11d18163b423b89e18b8c57644dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::macros::BuildModel1</name>
    <filename>classIMP_1_1pmi1_1_1macros_1_1BuildModel1.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1BuildModel1.html</anchorfile>
      <anchor>abd1e98c6f0e0efa744e1a0a29fe8a41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>build_model</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1BuildModel1.html</anchorfile>
      <anchor>a8f7d227af37945aa04e464e4b8a6c955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::macros::ReplicaExchange0</name>
    <filename>classIMP_1_1pmi1_1_1macros_1_1ReplicaExchange0.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1macros_1_1ReplicaExchange0.html</anchorfile>
      <anchor>af67752a0a297621351304e16f3a68430</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::metadata</name>
    <filename>namespaceIMP_1_1pmi1_1_1metadata.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::mmcif</name>
    <filename>namespaceIMP_1_1pmi1_1_1mmcif.html</filename>
    <class kind="class">IMP::pmi1::mmcif::AsymUnit</class>
    <class kind="class">IMP::pmi1::mmcif::Entity</class>
    <class kind="class">IMP::pmi1::mmcif::ProtocolOutput</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::mmcif::AsymUnit</name>
    <filename>classIMP_1_1pmi1_1_1mmcif_1_1AsymUnit.html</filename>
    <member kind="function">
      <type>def</type>
      <name>pmi_range</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1AsymUnit.html</anchorfile>
      <anchor>a4b8ef7142253366f41cbcc7c6c918216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pmi_residue</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1AsymUnit.html</anchorfile>
      <anchor>afdede52f2ca6a314eb3424473cc30180</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::mmcif::Entity</name>
    <filename>classIMP_1_1pmi1_1_1mmcif_1_1Entity.html</filename>
    <member kind="function">
      <type>def</type>
      <name>pmi_range</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1Entity.html</anchorfile>
      <anchor>ab0f7ff64635455af00af8b1cf6dd0f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pmi_residue</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1Entity.html</anchorfile>
      <anchor>aa6973abc83ea8cabf2305b16c438ba67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::mmcif::ProtocolOutput</name>
    <filename>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</filename>
    <base>IMP::pmi1::output::ProtocolOutput</base>
    <member kind="function">
      <type>def</type>
      <name>create_representation</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a0aa4f997f0812875da388a94a0427b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_transformed_component</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a9fc16423ad26c909102a9894a9fe566c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>exclude_coordinates</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a4d000374aecf777d8cca844e7108c0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>finalize</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a21d9628e73d8229c1ef87fc3c847613e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_ensemble_file</name>
      <anchorfile>classIMP_1_1pmi1_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a965bff5833b9ebdcc4998374cda3c0df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::nonmaintained</name>
    <filename>namespaceIMP_1_1pmi1_1_1nonmaintained.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::nonmantained::CrossLinkMS</name>
    <filename>classIMP_1_1pmi1_1_1nonmantained_1_1CrossLinkMS.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::output</name>
    <filename>namespaceIMP_1_1pmi1_1_1output.html</filename>
    <class kind="class">IMP::pmi1::output::Cluster</class>
    <class kind="class">IMP::pmi1::output::DataEntry</class>
    <class kind="class">IMP::pmi1::output::Output</class>
    <class kind="class">IMP::pmi1::output::OutputStatistics</class>
    <class kind="class">IMP::pmi1::output::ProcessOutput</class>
    <class kind="class">IMP::pmi1::output::ProtocolOutput</class>
    <class kind="class">IMP::pmi1::output::RMFHierarchyHandler</class>
    <class kind="class">IMP::pmi1::output::StatHierarchyHandler</class>
    <member kind="function">
      <type>def</type>
      <name>plot_field_histogram</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1output.html</anchorfile>
      <anchor>aa01ed61ae5b2af7074f31dbd1d5263fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_fields_box_plots</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1output.html</anchorfile>
      <anchor>a6bffd1b47743ce699ccf0e0964f34161</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::Cluster</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1Cluster.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::DataEntry</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1DataEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::Output</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1Output.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_prot_name_from_particle</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1Output.html</anchorfile>
      <anchor>a027f2020ce0b29a63845d3c2a5986d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_pdb</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1Output.html</anchorfile>
      <anchor>a39e2b03ef28a0d15f8f0b233b60efbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1Output.html</anchorfile>
      <anchor>a00601445d493f0dda48c32cb322f1d56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::OutputStatistics</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1OutputStatistics.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::ProcessOutput</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1ProcessOutput.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_fields</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1ProcessOutput.html</anchorfile>
      <anchor>af1964f3fdcb0dd12cba86b447d64cc47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::ProtocolOutput</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1ProtocolOutput.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::RMFHierarchyHandler</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1RMFHierarchyHandler.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1RMFHierarchyHandler.html</anchorfile>
      <anchor>ae6d2e0c96c9a549e3d71ca0ac7e18465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>link_to_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1RMFHierarchyHandler.html</anchorfile>
      <anchor>a34afa7ef5114b9cef27a14714e9b2455</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::output::StatHierarchyHandler</name>
    <filename>classIMP_1_1pmi1_1_1output_1_1StatHierarchyHandler.html</filename>
    <base>IMP::pmi1::output::RMFHierarchyHandler</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1output_1_1StatHierarchyHandler.html</anchorfile>
      <anchor>af2ebc14a22a415e26164a4798113d84c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::plotting::topology::TopologyPlot</name>
    <filename>classIMP_1_1pmi1_1_1plotting_1_1topology_1_1TopologyPlot.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>a13ad3d477cbefecc1ccbbd16fc481943</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>aa96acdc4716fb51cb34f5b682523441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>make_plot</name>
      <anchorfile>classIMP_1_1pmi1_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>a520286d76b656bc7e9f709ea5cdd6b62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::representation</name>
    <filename>namespaceIMP_1_1pmi1_1_1representation.html</filename>
    <class kind="class">IMP::pmi1::representation::Representation</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::representation::Representation</name>
    <filename>classIMP_1_1pmi1_1_1representation_1_1Representation.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a22c7cf6d0234ab4ddcbc62cee231bda6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_all_atom_densities</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a88136921aefc9de9f46956440c5eb818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_beads</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a03218766ec6cba583bcf5a37fc883a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_density</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a61536ab59de65d8e3f67c746f9c78dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_hierarchy_clone</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>ae5128d56474020b66bf066cf6ca40740</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_necklace</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>ad1602ee9f27961b68302e4ab1a47400c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_pdb</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a818c3e1822bcd8a22db9ffed3b999d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_component_sequence</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>aed77e6077ea853951e7476dad8325f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_metadata</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a4c43771a06b15de4514271db872ea1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_protocol_output</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a3ae1c0b585c345fc7b103c9144109e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_root</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>abad9ee36b35474af72d197ea126240c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>coarse_hierarchy</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a21e974c0376855580695c4910791b282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_components_from_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>ab1c6956e274213cda3afad1a854be527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_non_modeled_component</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>afd0b5e89c0fcc3d1530e61c7a919795b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_rotational_symmetry</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>adabd70c06e9c1f2603558477ed4786ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_transformed_component</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>aeec1f1da73cc393d4c88783aa7d0d83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_file_dataset</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a5fa8be3722a9fb1e882c57275c95c8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchies_at_given_resolution</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>aad4e77c2bba8bd2407197010b591416b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_from_selection_tuples</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a1581db003fd19a3f38c98c6a82fef652</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>link_components_to_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a3e840e0027f6b2af6fd92bd361fab032</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_floppy_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a829b49bbbc0f94d40786e78d6af5ca68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove_floppy_bodies_from_component</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>ab3624b41edc62dcfcb7abd6361630c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_chain_of_super_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a0a5be638ae440bf687c377b3c63422b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_coordinates_from_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a0e2fb90e458512a3178d61ea9da0811e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_file_dataset</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a09fc93d309c89f5386e964bf91528672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_floppy_bodies_as_fixed</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>ad5c2279632321793f83c6a2b77b612db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a431016ca01da5c53111f90e68497cc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rigid_bodies_as_fixed</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>abbfc50b8cff850a2abf9dbe125b2dbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rigid_body_from_hierarchies</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a405d5b8da5625af818ac36ac3495b546</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setup_component_sequence_connectivity</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>adb728f0030100c5f908971d9960975fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>shuffle_configuration</name>
      <anchorfile>classIMP_1_1pmi1_1_1representation_1_1Representation.html</anchorfile>
      <anchor>a976a4966d48bf0b074022c8131998e99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints.html</filename>
    <namespace>IMP::pmi1::restraints::basic</namespace>
    <namespace>IMP::pmi1::restraints::crosslinking</namespace>
    <namespace>IMP::pmi1::restraints::crosslinking_new</namespace>
    <namespace>IMP::pmi1::restraints::em</namespace>
    <namespace>IMP::pmi1::restraints::em2d</namespace>
    <namespace>IMP::pmi1::restraints::npc</namespace>
    <namespace>IMP::pmi1::restraints::parameters</namespace>
    <namespace>IMP::pmi1::restraints::proteomics</namespace>
    <namespace>IMP::pmi1::restraints::saxs</namespace>
    <namespace>IMP::pmi1::restraints::stereochemistry</namespace>
    <class kind="class">IMP::pmi1::restraints::RestraintBase</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::RestraintBase</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a0b6c0d57b48068cffcac9a2045a966f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_to_model</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a6aed52fc76f5de64f941ba64b4a49574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a6b3ce7255c84bc151b8bcb6323782886</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_output</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>ac22ef2a7e4c01fd39c21bbd6e36cd34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_to_sample</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a037aa62e05ff602069caa247bd6b4f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a1ad6da4c9776ab750957e5cdd2bf8617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_for_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a1fbb1dcfbd96f86e20712472ebc70cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_set</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>aec1adff957738a918399b08af73d0d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_label</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a9e4e2b79c380e91d5ebd10583b9fb3d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_weight</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1RestraintBase.html</anchorfile>
      <anchor>a5a9ecdf0b27786152748dff1a7db7959</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::basic</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1basic.html</filename>
    <class kind="class">IMP::pmi1::restraints::basic::BiStableDistanceRestraint</class>
    <class kind="class">IMP::pmi1::restraints::basic::CylinderRestraint</class>
    <class kind="class">IMP::pmi1::restraints::basic::DistanceRestraint</class>
    <class kind="class">IMP::pmi1::restraints::basic::DistanceToPointRestraint</class>
    <class kind="class">IMP::pmi1::restraints::basic::ExternalBarrier</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::basic::BiStableDistanceRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1BiStableDistanceRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1BiStableDistanceRestraint.html</anchorfile>
      <anchor>a3c2ab4d6b7e4bef6d3f1ef5e91c36911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::basic::CylinderRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1CylinderRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1CylinderRestraint.html</anchorfile>
      <anchor>a8672d91e6c66c6f11bab674e899d82d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::basic::DistanceRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1DistanceRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1DistanceRestraint.html</anchorfile>
      <anchor>a44e10c58b1bd5529077f6f94910d737e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::basic::DistanceToPointRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1DistanceToPointRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1DistanceToPointRestraint.html</anchorfile>
      <anchor>a0a730eeefaf6524d56db5a5d309df5ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::basic::ExternalBarrier</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1ExternalBarrier.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1basic_1_1ExternalBarrier.html</anchorfile>
      <anchor>a03a9916a66c9c0f21cc8fed254489b1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::crosslinking</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1crosslinking.html</filename>
    <class kind="class">IMP::pmi1::restraints::crosslinking::AtomicCrossLinkMSRestraint</class>
    <class kind="class">IMP::pmi1::restraints::crosslinking::ConnectivityCrossLinkMS</class>
    <class kind="class">IMP::pmi1::restraints::crosslinking::CrossLinkingMassSpectrometryRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::crosslinking::AtomicCrossLinkMSRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a1de6b1abc8a2c0386a91eed192b4830d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_restraints_for_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a571d88f2318dd2e1613011391fb32fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_best_stats</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>ab74fe91dbbc26b3b39bcaefe45dd195f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_to_sample</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>aa46145a8286ece75b91e207513ccb370</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_nuisances_from_stat_file</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>aacf5f68f4f190c1fc2e78c892831e07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_violations</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a373d11d1575cb866f29db3c2881a580d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::crosslinking::ConnectivityCrossLinkMS</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1ConnectivityCrossLinkMS.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::crosslinking::CrossLinkingMassSpectrometryRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>af47a9a0e4164099de480e63a168e6ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_psi</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a28779ad8858149770d52d77706424e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_sigma</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a0fdc74ec01e007b37d7991a9102147cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchies</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>addee75c94a412b9a221a26ed2434feff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_movers</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>afdccad29d265263d89711a5e98d06408</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_output</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a3f4d27aab994b46ff5b9c73913f7b8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particle_pairs</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>ae7988c5ad4d4659a3b3c223659504b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_to_sample</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>ae43c1ec2d2efe50a528b8b062af74e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_for_rmf</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>aa9087f34a1a8ee14c0e11131bae39ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_sets</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>ada8221738e4036f543fc9f4817f52ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraints</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a53510c407281e798cdbefce6cd0ed0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_output_level</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>aefe0c267b8c8b9d8ad4a309ff3d28f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_psi_is_sampled</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a3edd8f983873204d38ef28db1f0fafc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_sigma_is_sampled</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a82c548e6c48286b606a44c7af6bc81b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::crosslinking_new</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1crosslinking__new.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::em</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1em.html</filename>
    <class kind="class">IMP::pmi1::restraints::em::CrossCorrelationRestraint</class>
    <class kind="class">IMP::pmi1::restraints::em::GaussianEMRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::em::CrossCorrelationRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1em_1_1CrossCorrelationRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em_1_1CrossCorrelationRestraint.html</anchorfile>
      <anchor>ae70270699a6e4687e798f9b27d1e361f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::em::GaussianEMRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1em_1_1GaussianEMRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a70d50ae6ebec20829c44fb021958f3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_target_density_to_hierarchy</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a1858e10fcbf414eeae23fd408051e6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_center_of_mass</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a6686ab878c6e3bd71f85c55afafcb023</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_target_gmm_to_mrc</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>ab9b63cc169bb3c913fb23dcff1230c5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::em2d</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1em2d.html</filename>
    <class kind="class">IMP::pmi1::restraints::em2d::ElectronMicroscopy2D</class>
    <class kind="class">IMP::pmi1::restraints::em2d::ElectronMicroscopy2D_FFT</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::em2d::ElectronMicroscopy2D</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D.html</anchorfile>
      <anchor>a1cd0fca967ecbc220b468873053f95f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::em2d::ElectronMicroscopy2D_FFT</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D__FFT.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D__FFT.html</anchorfile>
      <anchor>aa886e201a500fb6e2cba9d639771aead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::npc</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1npc.html</filename>
    <class kind="class">IMP::pmi1::restraints::npc::MembraneExclusionRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::MembraneSurfaceLocationConditionalRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::MembraneSurfaceLocationRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::XYRadialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::XYRadialPositionRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::XYRadialPositionUpperRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::YAxialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::YAxialPositionRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::YAxialPositionUpperRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::ZAxialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::ZAxialPositionRestraint</class>
    <class kind="class">IMP::pmi1::restraints::npc::ZAxialPositionUpperRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::MembraneExclusionRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneExclusionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>a14d79382553205cd2c309bb218b88db3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::MembraneSurfaceLocationConditionalRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>a384d9c51d50c25a97fa058a17011a2e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::MembraneSurfaceLocationRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneSurfaceLocationRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>a8d49ee8e92031805471ee8115f1a1077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::XYRadialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>a64d6387863925407475c6c4b5625c60a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::XYRadialPositionRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>a85510c1ea810144582d7cd3260db4625</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::XYRadialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>a241b535fdd12280765b2859da692c8a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::YAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>abc67a20c12d2e9370762dfe3f9f8f9ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::YAxialPositionRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>a355035fe21a998043ddc7b85a6ec929f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::YAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>ad974fc57a5db4fc2c6591f00dffda6b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::ZAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a813692a2cd088300460782747b9f2a7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::ZAxialPositionRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>a8b6765f55b8ead51b7bdb0fd1dfc1e16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::npc::ZAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a4e2a39e71953be6b9d92c80d76215189</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::parameters</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1parameters.html</filename>
    <class kind="class">IMP::pmi1::restraints::parameters::JeffreysPrior</class>
    <class kind="class">IMP::pmi1::restraints::parameters::WeightRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::parameters::JeffreysPrior</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1parameters_1_1JeffreysPrior.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1parameters_1_1JeffreysPrior.html</anchorfile>
      <anchor>af762676b9197443a795e06095e0bfe49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::parameters::WeightRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1parameters_1_1WeightRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1parameters_1_1WeightRestraint.html</anchorfile>
      <anchor>a96d88c473728d4361e328b5cb1532663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::proteomics</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1proteomics.html</filename>
    <class kind="class">IMP::pmi1::restraints::proteomics::AmbiguousCompositeRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::CompositeRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::ConnectivityNetworkRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::ConnectivityRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::FuzzyBoolean</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::FuzzyRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::SetupConnectivityNetworkRestraint</class>
    <class kind="class">IMP::pmi1::restraints::proteomics::SetupMembraneRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::AmbiguousCompositeRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1AmbiguousCompositeRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::CompositeRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1CompositeRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::ConnectivityNetworkRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>ab3f4c82e1895ec8e3b24d8b7c7ca2229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_full_graph</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a994654e8510cad84270683e0c233240c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_minimum_spanning_tree</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>ada3f797acb8518a1c82a71946d2795e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>sigmoid</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a83a5ae6e8980e289dae995c65a54ddd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::ConnectivityRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1ConnectivityRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::FuzzyBoolean</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1FuzzyBoolean.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1FuzzyBoolean.html</anchorfile>
      <anchor>aab99a9fa7117f6d7dd6b757b6d16c343</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::FuzzyRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1FuzzyRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1FuzzyRestraint.html</anchorfile>
      <anchor>ae475d383076ce5ec077f9ed9568a2b71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::SetupConnectivityNetworkRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1SetupConnectivityNetworkRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::proteomics::SetupMembraneRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1proteomics_1_1SetupMembraneRestraint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::saxs</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1saxs.html</filename>
    <class kind="class">IMP::pmi1::restraints::saxs::SAXSISDRestraint</class>
    <class kind="class">IMP::pmi1::restraints::saxs::SAXSRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::saxs::SAXSISDRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>draw_gamma</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>ad02349fcd695acc54ca0eaec85d6dc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>draw_sigma</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>a7c5f6044cecb5a82ae908c5edf26bcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_gamma_value</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>afe90dd2307fbac6e4a0c42e3576ce68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>optimize_gamma</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>a447fb43daaaa6c1c646e1280481eea2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>optimize_sigma</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>a7f2851234917f0197c19ae70c1414f04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::saxs::SAXSRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1saxs_1_1SAXSRestraint.html</anchorfile>
      <anchor>a5e217283ca2d0c75171a0868bbdd7801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::restraints::stereochemistry</name>
    <filename>namespaceIMP_1_1pmi1_1_1restraints_1_1stereochemistry.html</filename>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::CharmmForceFieldRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ConnectivityRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ElasticNetworkRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ExcludedVolumeSphere</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::FusionRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::HelixRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::PlaneDihedralRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::PseudoAtomicRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ResidueAngleRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ResidueBondRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::ResidueDihedralRestraint</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::SecondaryStructure</class>
    <class kind="class">IMP::pmi1::restraints::stereochemistry::SymmetryRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::CharmmForceFieldRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1CharmmForceFieldRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1CharmmForceFieldRestraint.html</anchorfile>
      <anchor>a861c6b00945c17c005aa4e66d4dbb401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ConnectivityRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ae26c334a3711b45c399637defcf631e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_num_restraints</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a88d50a30f53e01915efe1dac8b601036</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particle_pairs</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ab4a10ecc9c93ea209fbd9d4dc4333ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ElasticNetworkRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ElasticNetworkRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ElasticNetworkRestraint.html</anchorfile>
      <anchor>af05f3aba28e26e1e1dec7fd73544ccbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ExcludedVolumeSphere</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ExcludedVolumeSphere.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ExcludedVolumeSphere.html</anchorfile>
      <anchor>aa9529c900aedd6ff44a68b26b1fbedff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::FusionRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1FusionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1FusionRestraint.html</anchorfile>
      <anchor>ab8967acc0745bb327caebbc0c12c5b03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::HelixRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1HelixRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1HelixRestraint.html</anchorfile>
      <anchor>ab2ca8814a50d8d92bdd1e0e1d82c69ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::PlaneDihedralRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1PlaneDihedralRestraint.html</filename>
    <base>IMP::pmi1::restraints::RestraintBase</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1PlaneDihedralRestraint.html</anchorfile>
      <anchor>a5671f41a770f667320d4e2b650179d9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::PseudoAtomicRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1PseudoAtomicRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1PseudoAtomicRestraint.html</anchorfile>
      <anchor>a8d3820f59e472b3fdd17e4eb66ecfc4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ResidueAngleRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ResidueAngleRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ResidueBondRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ResidueBondRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ResidueBondRestraint.html</anchorfile>
      <anchor>a9424dec3426d9d55135d2ffa4e7b2be5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::ResidueDihedralRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1ResidueDihedralRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::SecondaryStructure</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1SecondaryStructure.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::restraints::stereochemistry::SymmetryRestraint</name>
    <filename>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1SymmetryRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1restraints_1_1stereochemistry_1_1SymmetryRestraint.html</anchorfile>
      <anchor>a8f26887c54c9d96da0f9a2c9495daac4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::samplers</name>
    <filename>namespaceIMP_1_1pmi1_1_1samplers.html</filename>
    <class kind="class">IMP::pmi1::samplers::ConjugateGradients</class>
    <class kind="class">IMP::pmi1::samplers::MolecularDynamics</class>
    <class kind="class">IMP::pmi1::samplers::MonteCarlo</class>
    <class kind="class">IMP::pmi1::samplers::ReplicaExchange</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::samplers::ConjugateGradients</name>
    <filename>classIMP_1_1pmi1_1_1samplers_1_1ConjugateGradients.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::samplers::MolecularDynamics</name>
    <filename>classIMP_1_1pmi1_1_1samplers_1_1MolecularDynamics.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1samplers_1_1MolecularDynamics.html</anchorfile>
      <anchor>a47d89647658693cc8110f216f64bb3ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::samplers::MonteCarlo</name>
    <filename>classIMP_1_1pmi1_1_1samplers_1_1MonteCarlo.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1samplers_1_1MonteCarlo.html</anchorfile>
      <anchor>a25878b70b5c559ea44a36f8a3f8c2cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_nuisance_movers_parameters</name>
      <anchorfile>classIMP_1_1pmi1_1_1samplers_1_1MonteCarlo.html</anchorfile>
      <anchor>a0f3c90a14c250a8d8a2484363fc2fb75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::samplers::ReplicaExchange</name>
    <filename>classIMP_1_1pmi1_1_1samplers_1_1ReplicaExchange.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1samplers_1_1ReplicaExchange.html</anchorfile>
      <anchor>a6b1721c09bbf9bf7447cd39c78c2ef2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::tools</name>
    <filename>namespaceIMP_1_1pmi1_1_1tools.html</filename>
    <class kind="class">IMP::pmi1::tools::ColorChange</class>
    <class kind="class">IMP::pmi1::tools::HierarchyDatabase</class>
    <class kind="class">IMP::pmi1::tools::OrderedDefaultDict</class>
    <class kind="class">IMP::pmi1::tools::Segments</class>
    <class kind="class">IMP::pmi1::tools::Stopwatch</class>
    <class kind="class">IMP::pmi1::tools::ThreeToOneConverter</class>
    <member kind="function">
      <type>def</type>
      <name>add_restraint_to_model</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ac50a5a68fff52e61d0ea6a5af7113961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>color2rgb</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a9e45231c9f9cd62542b3411097d00798</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cross_link_db_filter_parser</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ae0987238271967e25d97709cdd9a080e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>display_bonds</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ac4b1ae674b070fc82dd957ad6488d5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_all_leaves</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a31cf56568ead94adcf5c44e8ba998dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_closest_residue_position</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a5276a2dac20977fe3664f839b2e62b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_densities</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ae0b59d23ac82b5fa45ba68beaa476da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_molecules</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a7c92b672f5b49a00c9020965eacecd8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_within_zone</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a7678630547a274d53f2403ee84bf0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_prot_name_from_particle</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a922db91a36a0d489c88e2b497528b45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_random_cross_link_dataset</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a1e4962a1b11a43a14262e8767283d392</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rbs_and_beads</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>aeedea15ce3fdedbeb6f8153473dc2b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_gaps_in_hierarchy</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ac1198748c4296bba5ab00ecb841ea779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_indexes</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a3aa517b83a73b1d99e3f821e160df66f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_set</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>accb8835d1d8af95b3e1ee102f58d8432</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_sorted_segments</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a9f2ce0707f2c75d6286817abba63db62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_terminal_residue</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ac18c85abc70a68249607153aec3a00a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_terminal_residue_position</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a5d8426d55da8039a06721c3d94d53f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>input_adaptor</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a21ab56aba8915fa0158ab8353f62d003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>list_chunks_iterator</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a60c18417ee5eafccae7e3d81c31b085d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>scatter_and_gather</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a97648f14dcd2b45575c2637c55a15c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>scatter_and_gather_dict_append</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a8b92eabc9213fb09286007b68bc0bb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>ab4a8d30d3536c47961ace3c2a5c542c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_at_all_resolutions</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a0162f99551ee36a9371d076ca224ef97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_by_tuple_2</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>aa681628cef3a5c8f49a09f632aad05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_coordinates_from_rmf</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>aca4527aed69e4513fde9dc30dea77c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>shuffle_configuration</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a590a449e7afcbf5b57f25be8ac17979b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>sublist_iterator</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a706e9ca0ada05e515fcc845ac12d4139</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>translate_hierarchy</name>
      <anchorfile>namespaceIMP_1_1pmi1_1_1tools.html</anchorfile>
      <anchor>a8ed6df31f786574453f9f11d73860c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::ColorChange</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1ColorChange.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::HierarchyDatabase</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1HierarchyDatabase.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::OrderedDefaultDict</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1OrderedDefaultDict.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::Segments</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1Segments.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1tools_1_1Segments.html</anchorfile>
      <anchor>aaa724e5db7a3f5597fc2428a7537b426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add</name>
      <anchorfile>classIMP_1_1pmi1_1_1tools_1_1Segments.html</anchorfile>
      <anchor>a6f10375f5e926e13d8dc36eff7d3103b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_flatten</name>
      <anchorfile>classIMP_1_1pmi1_1_1tools_1_1Segments.html</anchorfile>
      <anchor>aa0860ab05726da862b039bb70f271880</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove</name>
      <anchorfile>classIMP_1_1pmi1_1_1tools_1_1Segments.html</anchorfile>
      <anchor>a76a025c7a5e282b0104b784117607d46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::Stopwatch</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1Stopwatch.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1tools_1_1Stopwatch.html</anchorfile>
      <anchor>ace002013f05e5cb0abda1dc19d131089</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::tools::ThreeToOneConverter</name>
    <filename>classIMP_1_1pmi1_1_1tools_1_1ThreeToOneConverter.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi1::topology</name>
    <filename>namespaceIMP_1_1pmi1_1_1topology.html</filename>
    <class kind="class">IMP::pmi1::topology::PMIMoleculeHierarchy</class>
    <class kind="class">IMP::pmi1::topology::Sequences</class>
    <class kind="class">IMP::pmi1::topology::TopologyReader</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::topology::PMIMoleculeHierarchy</name>
    <filename>classIMP_1_1pmi1_1_1topology_1_1PMIMoleculeHierarchy.html</filename>
    <base>IMP::atom::Molecule</base>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::topology::Sequences</name>
    <filename>classIMP_1_1pmi1_1_1topology_1_1Sequences.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1Sequences.html</anchorfile>
      <anchor>a952ea54707a83261352d4fd856cee07e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi1::topology::TopologyReader</name>
    <filename>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a2d2704fe21b98b9ed96ff742c4f31a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_chains_of_super_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>aceb12a568636de513e87d54c718505d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a637ba24754e73d0e036bc2492c9879e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a296899d07abb6a8fd1e9dd1a763568e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_super_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a0855e451cd419b4e1dcc12d7fee644f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a415a8b041e078bd9f0a98f8f398296e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_fasta_dir</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>acd057321103120bd38636409be40b08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_gmm_dir</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a1eaac9711b3e315dc91d64e09dfcbe87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pdb_dir</name>
      <anchorfile>classIMP_1_1pmi1_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a162967d279f685ca7c688040a568de35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::alphabets</name>
    <filename>namespaceIMP_1_1pmi_1_1alphabets.html</filename>
    <class kind="class">IMP::pmi::alphabets::ResidueAlphabet</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::alphabets::ResidueAlphabet</name>
    <filename>classIMP_1_1pmi_1_1alphabets_1_1ResidueAlphabet.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_chain_type</name>
      <anchorfile>classIMP_1_1pmi_1_1alphabets_1_1ResidueAlphabet.html</anchorfile>
      <anchor>ab522175afdc13b3a078d412e4e9fd38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_one_letter_code_from_residue_type</name>
      <anchorfile>classIMP_1_1pmi_1_1alphabets_1_1ResidueAlphabet.html</anchorfile>
      <anchor>a5081f1589cdd545db3873350d44ba802</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_type_from_one_letter_code</name>
      <anchorfile>classIMP_1_1pmi_1_1alphabets_1_1ResidueAlphabet.html</anchorfile>
      <anchor>a7bad226c3dd8ab3f90527293f039e2ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::analysis</name>
    <filename>namespaceIMP_1_1pmi_1_1analysis.html</filename>
    <class kind="class">IMP::pmi::analysis::Alignment</class>
    <class kind="class">IMP::pmi::analysis::Clustering</class>
    <class kind="class">IMP::pmi::analysis::CrossLinkTable</class>
    <class kind="class">IMP::pmi::analysis::GetModelDensity</class>
    <class kind="class">IMP::pmi::analysis::Precision</class>
    <class kind="class">IMP::pmi::analysis::RMSD</class>
    <member kind="function">
      <type>def</type>
      <name>get_particles_at_resolution_one</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1analysis.html</anchorfile>
      <anchor>a94def10183fbdeadc7a838a23fbddf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_at_resolution_ten</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1analysis.html</anchorfile>
      <anchor>ac408d33f1000195a05165cf9fea0ea9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::Alignment</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1Alignment.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Alignment.html</anchorfile>
      <anchor>abfd765c2486edeb5deda1c290863e0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::Clustering</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1Clustering.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>aa63a3f0007194b0f5ef11c517e4c154e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>do_cluster</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>a369f90b9ea1080a77418ebaf77ef3488</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>fill</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Clustering.html</anchorfile>
      <anchor>aca26c1111a9c6c1b3119d8c8f5899a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::CrossLinkTable</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1CrossLinkTable.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::GetModelDensity</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1GetModelDensity.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>a7ae855dd9612606fb5193113e36abbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_subunits_density</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>a7c170ecf5e488d1563829408641a45e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1GetModelDensity.html</anchorfile>
      <anchor>a63456c01136b8835c5a7af02d062df9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::Precision</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1Precision.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>aad4fb439eec725b8c09d0b356f2c890c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_structure</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a40f1366a70bca2ceebbefb10275da7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_structures</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a42adb7d41ada68bc17e2c017626ae0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_average_distance_wrt_reference_structure</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>ab9b10b80769e92fef69bb59f3fcff3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_precision</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>aa54b3225cb83560e31f0bf166c0bbd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rmsd_wrt_reference_structure_with_alignment</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a05d7534f0fdc8b2690483ccf8a9418c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rmsf</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>adfa950684736a67a346eb39487851bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_reference_structure</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1Precision.html</anchorfile>
      <anchor>a94f101aa2ca5d4af5d1a08504203f743</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::analysis::RMSD</name>
    <filename>classIMP_1_1pmi_1_1analysis_1_1RMSD.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>a4681fbbe9186135cc7da64cf01bab808</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_moldict_coorddict</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>ac43a3e8a62e291035a0d1ddc4e65d614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_output</name>
      <anchorfile>classIMP_1_1pmi_1_1analysis_1_1RMSD.html</anchorfile>
      <anchor>acde4c43e9203449c1e464f4cc84eef58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::dof</name>
    <filename>namespaceIMP_1_1pmi_1_1dof.html</filename>
    <class kind="class">IMP::pmi::dof::DegreesOfFreedom</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::dof::DegreesOfFreedom</name>
    <filename>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</filename>
    <member kind="function">
      <type>def</type>
      <name>constrain_symmetry</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a587b1b8da6cb821843e01f6558f4ae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_flexible_beads</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a3aeccbc9c5ba8f4e07d75d4192f4cdc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_main_chain_mover</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>aaa1a1a1bc0f64107298a2d30ed8af2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_nuisance_mover</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a26378df7e3f78478ab7ba17daa86a6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_rigid_body</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a482101718baf67356048b61778b1fbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_super_rigid_body</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a17774636feb23261285ce7907cbb5489</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>disable_movers</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a16aa184d8bbf86979c0a3b0275fbf9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>enable_all_movers</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a3a86d8ce6b53f8ec5f8a48261f67fc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_flexible_beads</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a90769251735ef65c6374c7c497210c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_floppy_body_movers</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a5358cdd00201f3def88629e2d9e95b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_movers</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>af3c1b8a18bfc07f801d15e24792b2dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_nuisances_from_restraint</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>aca54e6cffefabf5bc5020ebda65b34e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a886e8de54dfa6dd5f2411fa8b303befe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>optimize_flexible_beads</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a1fac50222658556875fdc17cbe971a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>setup_md</name>
      <anchorfile>classIMP_1_1pmi_1_1dof_1_1DegreesOfFreedom.html</anchorfile>
      <anchor>a70af322c1c164591ed0c04364e6d4c00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::io</name>
    <filename>namespaceIMP_1_1pmi_1_1io.html</filename>
    <namespace>IMP::pmi::io::crosslink</namespace>
    <class kind="class">IMP::pmi::io::TotalScoreOutput</class>
    <member kind="function">
      <type>def</type>
      <name>add_provenance</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>ad0035927b055b7ff51c96a29535d42aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_bead_sizes</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>ae40d1210f6202104ff6da1dc99af6984</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_best_models</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>a3b414225406a01fce6cb8bdec7aa1101</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_trajectory_models</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>abb1d4fd48439dec40c569b4a10143f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>parse_dssp</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>a48f78f0ae64bafc9aa91b888df6bc2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_coordinates_of_rmfs</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>a22cb9c1332b65efe98878f2f855030d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_best_models</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1io.html</anchorfile>
      <anchor>a716ca0b42745c22de69fe8fd35e804ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::TotalScoreOutput</name>
    <filename>classIMP_1_1pmi_1_1io_1_1TotalScoreOutput.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::io::crosslink</name>
    <filename>namespaceIMP_1_1pmi_1_1io_1_1crosslink.html</filename>
    <class kind="class">IMP::pmi::io::crosslink::CrossLinkDataBase</class>
    <class kind="class">IMP::pmi::io::crosslink::CrossLinkDataBaseFromStructure</class>
    <class kind="class">IMP::pmi::io::crosslink::CrossLinkDataBaseKeywordsConverter</class>
    <class kind="class">IMP::pmi::io::crosslink::FilterOperator</class>
    <class kind="class">IMP::pmi::io::crosslink::FixedFormatParser</class>
    <class kind="class">IMP::pmi::io::crosslink::JaccardDistanceMatrix</class>
    <class kind="class">IMP::pmi::io::crosslink::MapCrossLinkDataBaseOnStructure</class>
    <class kind="class">IMP::pmi::io::crosslink::ResiduePairListParser</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::CrossLinkDataBase</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a2887d74602a55d6c5efa6147148507c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>align_sequence</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a6df90cd066134357a62c272c8ef578b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>append_database</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a75db5c72031aa220e92d586e73b38768</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_cross_link_consistency</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>ab43655059feae99bc46fdd2f22e9ee4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>classify_crosslinks_by_score</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a97a10936a5bcd512de8da519d0935489</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_new_keyword</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a8244f97cdf50a9690e4ee662dfe69348</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_set_from_file</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a4fc694a2e5c64354164aa4b17145e139</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>filter_out_same_residues</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>ada4e7131d00b35765fd27b4fa4ca7d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>filter_score</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>ab50d9e48f91b2a517a07e7a5ad6ab19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_number_of_unique_crosslinked_sites</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>ab98b076d6f7b60289374a6afab3101ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_values</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a9d9cb06aca7bf9445eabacbfcb88aef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>jackknife</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>aa527f2fb6a7f1487eb05bee53800e1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>ad5db8b641d26ac4ced0b903f316f2e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>offset_residue_index</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a9da5e95991e93357b807d1b8489ddfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rename_proteins</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a094a4338fe44540eb78cd45150da6f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_value</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBase.html</anchorfile>
      <anchor>a0ff8687fe69037b50d0bc4c3158e3f49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::CrossLinkDataBaseFromStructure</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseFromStructure.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::CrossLinkDataBaseKeywordsConverter</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a4cfa2ec031005adc80bd0d5dd83dfe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_keys</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>ab5c3479e44307b5e444777f3d3db3fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_backward_converter</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a010f53a90787e528d0043d3ce5b43478</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_converter</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>acd4517f356d87013a1375fb7207e4dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_setup_keys</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>ac9cca084f47ff9fe04482a840f18e855</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_standard_keys</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1CrossLinkDataBaseKeywordsConverter.html</anchorfile>
      <anchor>a290d622359cb37fe1c3337b1f78c51ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::FilterOperator</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1FilterOperator.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1FilterOperator.html</anchorfile>
      <anchor>a5997469892131bb3c9af58462ce4ab5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::FixedFormatParser</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1FixedFormatParser.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::JaccardDistanceMatrix</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</anchorfile>
      <anchor>a6f65393359963aef0ff32397c4efde17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>jaccard_index</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1JaccardDistanceMatrix.html</anchorfile>
      <anchor>aea8e78c8c4197640bd22482e62c87f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::MapCrossLinkDataBaseOnStructure</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1MapCrossLinkDataBaseOnStructure.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::io::crosslink::ResiduePairListParser</name>
    <filename>classIMP_1_1pmi_1_1io_1_1crosslink_1_1ResiduePairListParser.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_list</name>
      <anchorfile>classIMP_1_1pmi_1_1io_1_1crosslink_1_1ResiduePairListParser.html</anchorfile>
      <anchor>a75dc83bdd6df5959007aa79c557d17c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::macros</name>
    <filename>namespaceIMP_1_1pmi_1_1macros.html</filename>
    <class kind="class">IMP::pmi::macros::AnalysisReplicaExchange</class>
    <class kind="class">IMP::pmi::macros::AnalysisReplicaExchange0</class>
    <class kind="class">IMP::pmi::macros::BuildSystem</class>
    <class kind="class">IMP::pmi::macros::ReplicaExchange</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::macros::AnalysisReplicaExchange</name>
    <filename>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a449bda36d93d521bc183f89140d63f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>aggregate</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a87df1e2bce412e6a2e1f24c2b6130d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>apply_molecular_assignments</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ad24c9a03e7aedbc47a9c700c55f251c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>bipartite_precision</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a669b9ebe7b599bd5e6796718509bd516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cluster</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ae0dcd944d748bf0f94108c5b21f112a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>compute_cluster_center</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a2431d92eb09aa8caa511b25e35d6005c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_cluster_data</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a677488b6bdd54367e167f319cc7c6fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>have_close_members</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a2fd004cd720b37f458855738c5c925f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_clusters</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a3ec8d4f815452cfc4f31288f848d1abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_data</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>abf7593edb8319be4d8b19003dfc75666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a9e4ca8408921f51f7af8235ed698527a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>merge_aggregates</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a27cfd31aac9fc15f716edf2e5e96797d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>precision</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>ab7d5859fddde099931f00f19aa7dca48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>prune_redundant_structures</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>af904839ddb506d8032c86cefaef881d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>refine</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a86621576a46545d475acbba560da4f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsd</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a2afbbb259d4325ff338666db92d467f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsd_helper</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>abaa5c1cb2f5a6236d47dbc18f600ad42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>rmsf</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a528a68654c52d5cf7f50dfcc8ef41af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_clusters</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a83e5632ff498ad609929e04e02fc80d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_coordinates</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a9f3350c04fa37a96f81259a0bd506278</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>save_data</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>acf523f7ab31e18be08ff6b042350ba35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_alignment_selection</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a13988d582fe475b9f04953f3cff8a846</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_data</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a39e8ff1c706ae41242c94fb0391f34c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_reference</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a83ce9675cfb07e3eee847929ca0bdf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_rmsd_selection</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a640dca5a65162e66ffead0a13c1a3789</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_symmetric</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a6b58c753c121ad5a69ad993d31926843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>undo_apply_molecular_assignments</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a6e1aee877f04d1efbff12dfde26f4cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_clusters</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a292d0ecfee5e3d2ed504cdb364f933b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>update_seldicts</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange.html</anchorfile>
      <anchor>a9be490d6acc793066eef307b3e460d14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::macros::AnalysisReplicaExchange0</name>
    <filename>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange0.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a1c88b94e165699d50b9acd3ec19f507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_protocol_output</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a4a2374ae9bbe25e49ff1ba042cba7260</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>clustering</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>a49eb0d98e1ada0b7d0d35a4338966602</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_modeling_trajectory</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1AnalysisReplicaExchange0.html</anchorfile>
      <anchor>ac0844021a6a9184c7eebd5f5afb97d9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::macros::BuildSystem</name>
    <filename>classIMP_1_1pmi_1_1macros_1_1BuildSystem.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1BuildSystem.html</anchorfile>
      <anchor>a6b0d93da66a2af931783cdda2775a4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_state</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1BuildSystem.html</anchorfile>
      <anchor>a8d1910d8909b3f161528b096c3212ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>execute_macro</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1BuildSystem.html</anchorfile>
      <anchor>a80f5d49bead09baff801696d5299c5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_molecules</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1BuildSystem.html</anchorfile>
      <anchor>a53dc8037fe3d0d0360c8e2558ab85d47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::macros::ReplicaExchange</name>
    <filename>classIMP_1_1pmi_1_1macros_1_1ReplicaExchange.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1macros_1_1ReplicaExchange.html</anchorfile>
      <anchor>ac77b9fdfc57e8a97e9f86e244448bb0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::mmcif</name>
    <filename>namespaceIMP_1_1pmi_1_1mmcif.html</filename>
    <class kind="class">IMP::pmi::mmcif::AsymUnit</class>
    <class kind="class">IMP::pmi::mmcif::Entity</class>
    <class kind="class">IMP::pmi::mmcif::GMMParser</class>
    <class kind="class">IMP::pmi::mmcif::ProtocolOutput</class>
    <member kind="function">
      <type>def</type>
      <name>get_dumpers</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1mmcif.html</anchorfile>
      <anchor>a95eaf4c8c349df357f6d68fb769ab570</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_handlers</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1mmcif.html</anchorfile>
      <anchor>a69c2a90c1c6999184d6a1091772e3a8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::mmcif::AsymUnit</name>
    <filename>classIMP_1_1pmi_1_1mmcif_1_1AsymUnit.html</filename>
    <member kind="function">
      <type>def</type>
      <name>pmi_range</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1AsymUnit.html</anchorfile>
      <anchor>a8ec5739a47c8a999fde8f63de77cfad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pmi_residue</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1AsymUnit.html</anchorfile>
      <anchor>a090593d7d6859bbf0b3e3b50cae88349</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::mmcif::Entity</name>
    <filename>classIMP_1_1pmi_1_1mmcif_1_1Entity.html</filename>
    <member kind="function">
      <type>def</type>
      <name>pmi_range</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1Entity.html</anchorfile>
      <anchor>a04ec837fe5c342cf1dc8a42dfb92b7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>pmi_residue</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1Entity.html</anchorfile>
      <anchor>a59bff1cc10c07b63a432ff0060e40a23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::mmcif::GMMParser</name>
    <filename>classIMP_1_1pmi_1_1mmcif_1_1GMMParser.html</filename>
    <member kind="function">
      <type>def</type>
      <name>parse_file</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1GMMParser.html</anchorfile>
      <anchor>a698299faa445cd397d1f659167a7c01f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::mmcif::ProtocolOutput</name>
    <filename>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</filename>
    <base>IMP::pmi::output::ProtocolOutput</base>
    <member kind="function">
      <type>def</type>
      <name>create_representation</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a7f2d53836021462fdcbd3a48831dfac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_transformed_component</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a88f421a0c1740353ad1f8c68959edd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>exclude_coordinates</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>abad21cccf62e37839c4d1e937ad95be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>finalize</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a7b8395a33cbd3211cdf28e943c35dfa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_ensemble_file</name>
      <anchorfile>classIMP_1_1pmi_1_1mmcif_1_1ProtocolOutput.html</anchorfile>
      <anchor>a6337dbefa0a3b848e096064b86ab3c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::output</name>
    <filename>namespaceIMP_1_1pmi_1_1output.html</filename>
    <class kind="class">IMP::pmi::output::Cluster</class>
    <class kind="class">IMP::pmi::output::DataEntry</class>
    <class kind="class">IMP::pmi::output::Output</class>
    <class kind="class">IMP::pmi::output::OutputStatistics</class>
    <class kind="class">IMP::pmi::output::ProcessOutput</class>
    <class kind="class">IMP::pmi::output::ProtocolOutput</class>
    <class kind="class">IMP::pmi::output::RMFHierarchyHandler</class>
    <class kind="class">IMP::pmi::output::StatHierarchyHandler</class>
    <member kind="function">
      <type>def</type>
      <name>plot_field_histogram</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1output.html</anchorfile>
      <anchor>a77a3388768c2458670441282ae4f50b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_fields</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1output.html</anchorfile>
      <anchor>a9ffd596d4be6506bb3d62623d05454f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_fields_box_plots</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1output.html</anchorfile>
      <anchor>a49633b4c1ce68a746d69a7cc9df7f6a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::Cluster</name>
    <filename>classIMP_1_1pmi_1_1output_1_1Cluster.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::DataEntry</name>
    <filename>classIMP_1_1pmi_1_1output_1_1DataEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::Output</name>
    <filename>classIMP_1_1pmi_1_1output_1_1Output.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_pdb_names</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1Output.html</anchorfile>
      <anchor>a5fb4b70f51847a1fd7104e6d93ba1d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_prot_name_from_particle</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1Output.html</anchorfile>
      <anchor>a370021afca0b1c1f59fef88bd8e3a335</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_pdb</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1Output.html</anchorfile>
      <anchor>a7025abf6f5c30758a7503bc3ea9a6eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_pdb_best_scoring</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1Output.html</anchorfile>
      <anchor>ac349dc48f554eaafefffb563062614f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_rmf</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1Output.html</anchorfile>
      <anchor>aec9cbcfb5f19fb69dfb97a8323923fd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::OutputStatistics</name>
    <filename>classIMP_1_1pmi_1_1output_1_1OutputStatistics.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::ProcessOutput</name>
    <filename>classIMP_1_1pmi_1_1output_1_1ProcessOutput.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_fields</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1ProcessOutput.html</anchorfile>
      <anchor>a0bcbbec62f76723bd3e5928cabddf85d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::ProtocolOutput</name>
    <filename>classIMP_1_1pmi_1_1output_1_1ProtocolOutput.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::RMFHierarchyHandler</name>
    <filename>classIMP_1_1pmi_1_1output_1_1RMFHierarchyHandler.html</filename>
    <base>IMP::atom::Hierarchy</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1RMFHierarchyHandler.html</anchorfile>
      <anchor>a2c11213e3f879901bd37e33b7205680e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>link_to_rmf</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1RMFHierarchyHandler.html</anchorfile>
      <anchor>a44c3bbf71dd28acb5a25df455ed73bc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::output::StatHierarchyHandler</name>
    <filename>classIMP_1_1pmi_1_1output_1_1StatHierarchyHandler.html</filename>
    <base>IMP::pmi::output::RMFHierarchyHandler</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1output_1_1StatHierarchyHandler.html</anchorfile>
      <anchor>a13293f64406a1be762feb649ecba53b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::plotting::topology::TopologyPlot</name>
    <filename>classIMP_1_1pmi_1_1plotting_1_1topology_1_1TopologyPlot.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>a80c087e7fb2faad599b8b9144883ea81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_rmf</name>
      <anchorfile>classIMP_1_1pmi_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>a64b29be8d8eefe3cb9074ed55d0d7adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>make_plot</name>
      <anchorfile>classIMP_1_1pmi_1_1plotting_1_1topology_1_1TopologyPlot.html</anchorfile>
      <anchor>aa05ec80282861f8ed609ed196e82862d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints.html</filename>
    <namespace>IMP::pmi::restraints::basic</namespace>
    <namespace>IMP::pmi::restraints::crosslinking</namespace>
    <namespace>IMP::pmi::restraints::em</namespace>
    <namespace>IMP::pmi::restraints::em2d</namespace>
    <namespace>IMP::pmi::restraints::npc</namespace>
    <namespace>IMP::pmi::restraints::parameters</namespace>
    <namespace>IMP::pmi::restraints::proteomics</namespace>
    <namespace>IMP::pmi::restraints::saxs</namespace>
    <namespace>IMP::pmi::restraints::stereochemistry</namespace>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::basic</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1basic.html</filename>
    <class kind="class">IMP::pmi::restraints::basic::BiStableDistanceRestraint</class>
    <class kind="class">IMP::pmi::restraints::basic::CylinderRestraint</class>
    <class kind="class">IMP::pmi::restraints::basic::DistanceRestraint</class>
    <class kind="class">IMP::pmi::restraints::basic::DistanceToPointRestraint</class>
    <class kind="class">IMP::pmi::restraints::basic::ExternalBarrier</class>
    <class kind="class">IMP::pmi::restraints::basic::MembraneRestraint</class>
    <class kind="class">IMP::pmi::restraints::basic::ResidueProteinProximityRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::BiStableDistanceRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1BiStableDistanceRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1BiStableDistanceRestraint.html</anchorfile>
      <anchor>aa469af804ef9eefe60ac50e655ebfcc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::CylinderRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1CylinderRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1CylinderRestraint.html</anchorfile>
      <anchor>ae7327e74c9db98840cc773f294eeeaa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::DistanceRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1DistanceRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1DistanceRestraint.html</anchorfile>
      <anchor>a4b2ba53a708e0aa3836785e31c212092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::DistanceToPointRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1DistanceToPointRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1DistanceToPointRestraint.html</anchorfile>
      <anchor>a0ac66acb1cc367cf76e5529aa0ad4544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::ExternalBarrier</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1ExternalBarrier.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1ExternalBarrier.html</anchorfile>
      <anchor>a1457f94526c0b6c2d5edaa524f12a5d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::MembraneRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1MembraneRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1MembraneRestraint.html</anchorfile>
      <anchor>ac3828d87b1a44bb7168dafaa487b3861</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_membrane_density</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1MembraneRestraint.html</anchorfile>
      <anchor>a9c7463ce90081481cdd6182f1ea580c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::basic::ResidueProteinProximityRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1basic_1_1ResidueProteinProximityRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>af359abe65f17475051fdc10ee2057640</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_container_pairs</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1basic_1_1ResidueProteinProximityRestraint.html</anchorfile>
      <anchor>a11212236a481d6a1259f80c919a14ca9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::crosslinking</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1crosslinking.html</filename>
    <class kind="class">IMP::pmi::restraints::crosslinking::AtomicCrossLinkMSRestraint</class>
    <class kind="class">IMP::pmi::restraints::crosslinking::CrossLinkingMassSpectrometryRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::crosslinking::AtomicCrossLinkMSRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>ae6c493e70806d85a54c5e74c540ab829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_restraints_for_rmf</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>aad0fa5e6955f44e9fb126f34504d1017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_best_stats</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>accba7faf15a2ebc0b6f15e27ca9200c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_to_sample</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a21dfde96a4fad3e436ed1d2273692b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>load_nuisances_from_stat_file</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>abd48258515a00a97fbf66d3a692a403f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>plot_violations</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1AtomicCrossLinkMSRestraint.html</anchorfile>
      <anchor>a0b00b1320a0e306b263f4a3b634092a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::crosslinking::CrossLinkingMassSpectrometryRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a4b0328e1d19e4ad978f96ad1b63602fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_psi</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a73d622f38ee93f48074f8ef3fe4ac343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_sigma</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>af0ff936adea9d5c508ed05f878e3f065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchies</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a723869033b037c092ca15dc7ed8f945b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_likelihood</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>afcb0a9f3bc07c380c6810761cb9282e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_movers</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a34563bfc7fdd7026ab1490bd5b0ebb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_output</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>aad0d688384ecdf4c8733b579f218792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particle_pairs</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a7f786c9ac9afe020bbebac2ea46b0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_to_sample</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a4ec68c75c1e4770c7ab4245490e24f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_for_rmf</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>abae45ccb1802c42a32a1eee7206da87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_sets</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>acb3973de3a7bc2ec2da999da757c2848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraints</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a4cdbd9643f946a345f677e30eea0c438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_output_level</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a2a24b09f496d3db48546da9ddc83a563</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_psi_is_sampled</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>a5a3c5fb28a3db5f1674b6ce2b5e8317a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_sigma_is_sampled</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1crosslinking_1_1CrossLinkingMassSpectrometryRestraint.html</anchorfile>
      <anchor>aac400e4b034a918054337763cabd9207</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::em</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1em.html</filename>
    <class kind="class">IMP::pmi::restraints::em::GaussianEMRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::em::GaussianEMRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a70ddcf10fa51bf28342d6eed57ee4314</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_target_density_to_hierarchy</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>afea4f3a58b0ab488dcaad75a68a4f113</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_center_of_mass</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>adc6cdf29f8d145959e5202ab319351a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_likelihood</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a1f6698f7be64f2e9909eaa4ac5036b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_target_gmm_to_mrc</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em_1_1GaussianEMRestraint.html</anchorfile>
      <anchor>a93e7cc9a6abaae111632bdee4a0a62b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::em2d</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1em2d.html</filename>
    <class kind="class">IMP::pmi::restraints::em2d::ElectronMicroscopy2D</class>
    <class kind="class">IMP::pmi::restraints::em2d::ElectronMicroscopy2D_FFT</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::em2d::ElectronMicroscopy2D</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D.html</anchorfile>
      <anchor>a3176afb022a739a0a699f2bce12fd432</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::em2d::ElectronMicroscopy2D_FFT</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D__FFT.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1em2d_1_1ElectronMicroscopy2D__FFT.html</anchorfile>
      <anchor>abd90901b808e584731ad41b1acaaad3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::npc</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1npc.html</filename>
    <class kind="class">IMP::pmi::restraints::npc::MembraneExclusionRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::MembraneSurfaceLocationConditionalRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::MembraneSurfaceLocationRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::XYRadialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::XYRadialPositionRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::XYRadialPositionUpperRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::YAxialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::YAxialPositionRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::YAxialPositionUpperRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::ZAxialPositionLowerRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::ZAxialPositionRestraint</class>
    <class kind="class">IMP::pmi::restraints::npc::ZAxialPositionUpperRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::MembraneExclusionRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneExclusionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneExclusionRestraint.html</anchorfile>
      <anchor>aa5648ae12f0f7f66bb0f39a07086f7d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::MembraneSurfaceLocationConditionalRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneSurfaceLocationConditionalRestraint.html</anchorfile>
      <anchor>a5a01e62fd3ed8e0624033e7976702f0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::MembraneSurfaceLocationRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneSurfaceLocationRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1MembraneSurfaceLocationRestraint.html</anchorfile>
      <anchor>a8fbbde07cc6b07dcd31245be74af8f56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::XYRadialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionLowerRestraint.html</anchorfile>
      <anchor>a50771e5f91b0123b68beab58d8ed1af3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::XYRadialPositionRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionRestraint.html</anchorfile>
      <anchor>aa27f522ed8211a1e3ce414cf4ed74924</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::XYRadialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1XYRadialPositionUpperRestraint.html</anchorfile>
      <anchor>a898d77e1bc16f8f0772c6e47f5965eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::YAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a78a7156be1b5069426c535a6fc11ed6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::YAxialPositionRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionRestraint.html</anchorfile>
      <anchor>a349a6ca4699d9b883252bdb4ed32670b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::YAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1YAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a1c85cbbe033741a4eeb2e764258b75ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::ZAxialPositionLowerRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionLowerRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionLowerRestraint.html</anchorfile>
      <anchor>a65537a7c8f87dd23bae1364c927d72c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::ZAxialPositionRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionRestraint.html</anchorfile>
      <anchor>a03daac8218872bc4ad05fc2cfb54ead2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::npc::ZAxialPositionUpperRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionUpperRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1npc_1_1ZAxialPositionUpperRestraint.html</anchorfile>
      <anchor>a462773f8264259381dd524587a227fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::parameters</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1parameters.html</filename>
    <class kind="class">IMP::pmi::restraints::parameters::JeffreysPrior</class>
    <class kind="class">IMP::pmi::restraints::parameters::WeightRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::parameters::JeffreysPrior</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1parameters_1_1JeffreysPrior.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1parameters_1_1JeffreysPrior.html</anchorfile>
      <anchor>a6eade0113d32eab4566fd5807998b81d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::parameters::WeightRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1parameters_1_1WeightRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1parameters_1_1WeightRestraint.html</anchorfile>
      <anchor>ada87dfd438c0b9d7197025f617a3c437</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::proteomics</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1proteomics.html</filename>
    <class kind="class">IMP::pmi::restraints::proteomics::AmbiguousCompositeRestraint</class>
    <class kind="class">IMP::pmi::restraints::proteomics::CompositeRestraint</class>
    <class kind="class">IMP::pmi::restraints::proteomics::ConnectivityNetworkRestraint</class>
    <class kind="class">IMP::pmi::restraints::proteomics::ConnectivityRestraint</class>
    <class kind="class">IMP::pmi::restraints::proteomics::FuzzyBoolean</class>
    <class kind="class">IMP::pmi::restraints::proteomics::FuzzyRestraint</class>
    <class kind="class">IMP::pmi::restraints::proteomics::SetupConnectivityNetworkRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::AmbiguousCompositeRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1AmbiguousCompositeRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::CompositeRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1CompositeRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::ConnectivityNetworkRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a24e90e4413821b5f5acb43c96ecd0053</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_full_graph</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a9329ed2ca4103b87758cbaef438f4a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_minimum_spanning_tree</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a1723c0d715b440fa2c67ed12a2634dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>sigmoid</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityNetworkRestraint.html</anchorfile>
      <anchor>a1d6483c9aa41d7830a4e035b1c6e047b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::ConnectivityRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1ConnectivityRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::FuzzyBoolean</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1FuzzyBoolean.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1FuzzyBoolean.html</anchorfile>
      <anchor>a71875718c304bbc28dbfff5637f656da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::FuzzyRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1FuzzyRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1FuzzyRestraint.html</anchorfile>
      <anchor>ae534b980385b2508076854d13c632622</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::proteomics::SetupConnectivityNetworkRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1proteomics_1_1SetupConnectivityNetworkRestraint.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::saxs</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1saxs.html</filename>
    <class kind="class">IMP::pmi::restraints::saxs::SAXSISDRestraint</class>
    <class kind="class">IMP::pmi::restraints::saxs::SAXSRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::saxs::SAXSISDRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>draw_gamma</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>acf3fa584f8a039dcd94a34394aae3125</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>draw_sigma</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>ac67530a7ae4926b9fe28c4eae4853da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_gamma_value</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>ae619eb54ce6efd825fd39c4103c0616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>optimize_gamma</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>a8b2605b95306c603cfcb3b0097983cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>optimize_sigma</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSISDRestraint.html</anchorfile>
      <anchor>a839f2a72022664ebc684285212b3756a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::saxs::SAXSRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1saxs_1_1SAXSRestraint.html</anchorfile>
      <anchor>aa7f52f61b271b0ee99f86cb3a7326139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::restraints::stereochemistry</name>
    <filename>namespaceIMP_1_1pmi_1_1restraints_1_1stereochemistry.html</filename>
    <class kind="class">IMP::pmi::restraints::stereochemistry::CharmmForceFieldRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ConnectivityRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ElasticNetworkRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ExcludedVolumeSphere</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::FusionRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::HelixRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::PlaneDihedralRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::PseudoAtomicRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ResidueAngleRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ResidueBondRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::ResidueDihedralRestraint</class>
    <class kind="class">IMP::pmi::restraints::stereochemistry::SymmetryRestraint</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::CharmmForceFieldRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1CharmmForceFieldRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1CharmmForceFieldRestraint.html</anchorfile>
      <anchor>a4b5b18ac77e8459ac52c8a4510ce0833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ConnectivityRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>ac905361fbab6e774cb8603549a19cec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_num_restraints</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a4fc447d947e9ae1357b3a7fd3fa7eaba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particle_pairs</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ConnectivityRestraint.html</anchorfile>
      <anchor>a071471291fbf819de0c89362570a7b34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ElasticNetworkRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ElasticNetworkRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ElasticNetworkRestraint.html</anchorfile>
      <anchor>aada400db70910afb6f87e11bc6c8c4c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ExcludedVolumeSphere</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ExcludedVolumeSphere.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ExcludedVolumeSphere.html</anchorfile>
      <anchor>a6ef22bba163cbd112a4067608ecb92b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::FusionRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1FusionRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1FusionRestraint.html</anchorfile>
      <anchor>a2194fff818abda18689f76e8053e79ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::HelixRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1HelixRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1HelixRestraint.html</anchorfile>
      <anchor>a0bae6ec6d1433465f10f682d0d706f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::PlaneDihedralRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1PlaneDihedralRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1PlaneDihedralRestraint.html</anchorfile>
      <anchor>a94f4aa4ee9707520eac123a24709892c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::PseudoAtomicRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1PseudoAtomicRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1PseudoAtomicRestraint.html</anchorfile>
      <anchor>a4a7a81ba34ea5b4125d0dd58f80fea1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ResidueAngleRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ResidueAngleRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ResidueBondRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ResidueBondRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ResidueBondRestraint.html</anchorfile>
      <anchor>ac3a8fe6c3018d271bf47756ce988e1c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::ResidueDihedralRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1ResidueDihedralRestraint.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::restraints::stereochemistry::SymmetryRestraint</name>
    <filename>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1SymmetryRestraint.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1restraints_1_1stereochemistry_1_1SymmetryRestraint.html</anchorfile>
      <anchor>a9112415e70a526e548b9b008784de5bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::samplers</name>
    <filename>namespaceIMP_1_1pmi_1_1samplers.html</filename>
    <class kind="class">IMP::pmi::samplers::ConjugateGradients</class>
    <class kind="class">IMP::pmi::samplers::MolecularDynamics</class>
    <class kind="class">IMP::pmi::samplers::MonteCarlo</class>
    <class kind="class">IMP::pmi::samplers::ReplicaExchange</class>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::samplers::ConjugateGradients</name>
    <filename>classIMP_1_1pmi_1_1samplers_1_1ConjugateGradients.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::samplers::MolecularDynamics</name>
    <filename>classIMP_1_1pmi_1_1samplers_1_1MolecularDynamics.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1samplers_1_1MolecularDynamics.html</anchorfile>
      <anchor>adb627fe8c43b4c94defc279c549e055d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::samplers::MonteCarlo</name>
    <filename>classIMP_1_1pmi_1_1samplers_1_1MonteCarlo.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1samplers_1_1MonteCarlo.html</anchorfile>
      <anchor>aef30c6dced8a7679c4c95dad72d42c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_nuisance_movers_parameters</name>
      <anchorfile>classIMP_1_1pmi_1_1samplers_1_1MonteCarlo.html</anchorfile>
      <anchor>a0e193bef91296902b3d4c2a22035983f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::samplers::ReplicaExchange</name>
    <filename>classIMP_1_1pmi_1_1samplers_1_1ReplicaExchange.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1samplers_1_1ReplicaExchange.html</anchorfile>
      <anchor>a47a9ba7e6e3dee3c7a71dc472f804de9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::tools</name>
    <filename>namespaceIMP_1_1pmi_1_1tools.html</filename>
    <class kind="class">IMP::pmi::tools::ColorChange</class>
    <class kind="class">IMP::pmi::tools::OrderedDefaultDict</class>
    <class kind="class">IMP::pmi::tools::Segments</class>
    <class kind="class">IMP::pmi::tools::Stopwatch</class>
    <member kind="function">
      <type>def</type>
      <name>add_restraint_to_model</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a673d4032fcf9e89cb1c2eeb6c57d85f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>color2rgb</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a9e0f08df0e9a67767297fbbe4252dd58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>cross_link_db_filter_parser</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a15b276fbf7278a85564aa6e7f409ecb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>display_bonds</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a1c71847bbffa8bc4cff4ca24abb18a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_all_leaves</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>af2e7ea830ba8cedc63a8acfb6e5e304f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_closest_residue_position</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a3115625413689e5f5dec49a82e23bf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_densities</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a960eededc337abcf715fe0b26357ba10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_molecules</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>ada6ddbbbca368354c1fbbb595c155310</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_within_zone</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a5f83047001e23ecec9db30a9d6f8ae3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_prot_name_from_particle</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>aa1a62cf111339743b915b84bfe3a8bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rbs_and_beads</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a2bea29d29a6cd12c50d183271cebf5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_gaps_in_hierarchy</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a33fae818c2b828bc9b29cd39c17ba113</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residue_indexes</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a9ebdf7db8ab251a60c758aca51e2ce9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_restraint_set</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>af6d6c0ec42281d773122075abef0f744</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_sorted_segments</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a91da28e392edc9bc1d51094fc217c65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>input_adaptor</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a2e777c418f2b0019cfdc91a62c4b0cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>list_chunks_iterator</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>ad27a104c464d7b7d305b527171870310</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>scatter_and_gather</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a8a526d91d69b7257afd937128d9a1d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_at_all_resolutions</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a9ce35b130e7ff66a587aa21c55769488</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>select_by_tuple_2</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>a11c925b0060500bed4391528b926bef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_coordinates_from_rmf</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>aa17e5dd338e4c657ed160ea7383480b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>shuffle_configuration</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>aa73da33fe662302b54a9ab9e958574e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>sublist_iterator</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1tools.html</anchorfile>
      <anchor>aaf836f348487be5f436ecdc31e77540e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::tools::ColorChange</name>
    <filename>classIMP_1_1pmi_1_1tools_1_1ColorChange.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::tools::OrderedDefaultDict</name>
    <filename>classIMP_1_1pmi_1_1tools_1_1OrderedDefaultDict.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::tools::Segments</name>
    <filename>classIMP_1_1pmi_1_1tools_1_1Segments.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1tools_1_1Segments.html</anchorfile>
      <anchor>aff7acda61c3df6ffdf7223acfdd79b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add</name>
      <anchorfile>classIMP_1_1pmi_1_1tools_1_1Segments.html</anchorfile>
      <anchor>ae7477f641844c372c5f24716d5fef8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_flatten</name>
      <anchorfile>classIMP_1_1pmi_1_1tools_1_1Segments.html</anchorfile>
      <anchor>a85719bb4ecc1bd1b4dc0e80b37d2c644</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>remove</name>
      <anchorfile>classIMP_1_1pmi_1_1tools_1_1Segments.html</anchorfile>
      <anchor>a2cc4ec5181da3dbf3692e97a80483195</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::tools::Stopwatch</name>
    <filename>classIMP_1_1pmi_1_1tools_1_1Stopwatch.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1tools_1_1Stopwatch.html</anchorfile>
      <anchor>a7c9b1d88204923dadce8a4e2f20d3890</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::pmi::topology</name>
    <filename>namespaceIMP_1_1pmi_1_1topology.html</filename>
    <class kind="class">IMP::pmi::topology::Molecule</class>
    <class kind="class">IMP::pmi::topology::PDBSequences</class>
    <class kind="class">IMP::pmi::topology::PMIMoleculeHierarchy</class>
    <class kind="class">IMP::pmi::topology::Sequences</class>
    <class kind="class">IMP::pmi::topology::State</class>
    <class kind="class">IMP::pmi::topology::System</class>
    <class kind="class">IMP::pmi::topology::TempResidue</class>
    <class kind="class">IMP::pmi::topology::TopologyReader</class>
    <member kind="function">
      <type>def</type>
      <name>fasta_pdb_alignments</name>
      <anchorfile>namespaceIMP_1_1pmi_1_1topology.html</anchorfile>
      <anchor>a57d63ce453741b572cf90601b90f47ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::Molecule</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1Molecule.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a4afbb517f8ae6287a5932b48cfdf92d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_representation</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a9d58a3dfe6809887b9b2df9f0f760e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_structure</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a14b2630b80cd3813acc2c172c55fe08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>build</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>af49a08ee3c1586d39cadb11f84193d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_clone</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a84fef205212ead92b09997a8e0369d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_copy</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a3ef328e625e028a078b7896369061a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_atomic_residues</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>ad64a6d193bcc2ab9ec3fc7c79222bee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchy</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a176d4226b3e9807034713dfac438264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_ideal_helices</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>ae12fb534db3ff016317b41f90da746dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_name</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a7169752a79d45fe3ffaabdd8f739d494</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_non_atomic_residues</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a08aa8800d596771c944eef2b5e740ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_particles_at_all_resolutions</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a0bd31eabb5566b21c2ba60de6c075532</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_represented</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a88ac34f5e35b9190e5d6f7066d8792ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_residues</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a8294c4444c99f5cb8f7058cc06c314a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_state</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a0ae0d487bfb56f880712a01f481d742e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>residue_range</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Molecule.html</anchorfile>
      <anchor>a2496c3d899d863e38727db8a5691a197</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::PDBSequences</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1PDBSequences.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1PDBSequences.html</anchorfile>
      <anchor>a1408b6aee9b602d3f15ce751d0bd4342</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::PMIMoleculeHierarchy</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1PMIMoleculeHierarchy.html</filename>
    <base>IMP::atom::Molecule</base>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::Sequences</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1Sequences.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1Sequences.html</anchorfile>
      <anchor>a32be97e191f3baeb286711e3fdfecf26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::State</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1State.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>a9f5fb3334f4688cc2f72b8fd98207570</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>build</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>afa7f30b2e9a97e7b146c115857a88672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_molecule</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>a6448c3de07edc1ad3fd58e139aca924a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchy</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>a0cddaa4b8132ddd8bc9d244af5ecb0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_molecule</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>aee5dd3e4a67efb34d2b604c9d47db516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_molecules</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>ac549eace53d967d33d4c5dea07351a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_number_of_copies</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1State.html</anchorfile>
      <anchor>a570f69cf107d9586c8b924d1c1423582</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::System</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1System.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a59bf44023f51ae1222f3c63ff6830877</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_protocol_output</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a44348ee47906822e2efdcc7c109c605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>build</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a3d618c243fb353924d97385df0bb9fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_state</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a3bf94fc416de7b3217ab6c9e9c361d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_hierarchy</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a29505879ddc6855e3a682122c55a82c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_number_of_states</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a53c4a24341ffc15066f1691633172364</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_states</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1System.html</anchorfile>
      <anchor>a509ca1bef1d5dcdfe429956bb1b7ed29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::TempResidue</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1TempResidue.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TempResidue.html</anchorfile>
      <anchor>ad2f4c4bd98dc2991c07213b95d83ddcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::pmi::topology::TopologyReader</name>
    <filename>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>ad6672025789064062753ff76d142482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_chains_of_super_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>ae2d7bfe9000147382ee48be36561868c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_components</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a92fc916821ad18fed2cfd6680e2e08bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a16748899193d1d6c9e9f57a27727055a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_super_rigid_bodies</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>abffa4dbd76185218073b043dad5e1dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a28d53d607e7699cad036f277fa71c9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_fasta_dir</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a3031b27ae7266c632ff2495dd8c03e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_gmm_dir</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>aa9e8f7650a0710863dec60b3034f017a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_pdb_dir</name>
      <anchorfile>classIMP_1_1pmi_1_1topology_1_1TopologyReader.html</anchorfile>
      <anchor>a6c28b6e1d8d5979c65d2d18f5ca5f379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::rmf</name>
    <filename>namespaceIMP_1_1rmf.html</filename>
    <class kind="class">IMP::rmf::HierarchyLoadLink</class>
    <class kind="class">IMP::rmf::HierarchySaveLink</class>
    <class kind="class">IMP::rmf::LoadLink</class>
    <class kind="class">IMP::rmf::SaveLink</class>
    <class kind="class">IMP::rmf::SaveOptimizerState</class>
    <class kind="class">IMP::rmf::SimpleLoadLink</class>
    <class kind="class">IMP::rmf::SimpleSaveLink</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; LoadLink &gt; &gt;</type>
      <name>LoadLinks</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a4a4aa5fb4802a5dcef9e0be4bea0b8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; LoadLink &gt; &gt;</type>
      <name>LoadLinksTemp</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a1f9c45d2b0771f8414023c5c083a1c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; SaveLink &gt; &gt;</type>
      <name>SaveLinks</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ac3ecdfab578f53c6116c153071f2fb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; SaveLink &gt; &gt;</type>
      <name>SaveLinksTemp</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a28cec2dd8e3983372f4d963b9801434b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_frame</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>abc15209a0aef0e859c99ce00659ebdfb</anchor>
      <arglist>(RMF::FileConstHandle file, RMF::FrameID frame)</arglist>
    </member>
    <member kind="function">
      <type>RMF::FrameID</type>
      <name>save_frame</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ad6d2441fb928c5ed04c1231864cae1c8</anchor>
      <arglist>(RMF::FileHandle file, std::string name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a8d48e73186b5ed363596506b44c32d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>a19dca802fd497aab5f17e09852358728</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1rmf.html</anchorfile>
      <anchor>ab7e7eabb8372041e0738c3e88b5ccbd1</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1rmf" title="rmf_display">rmf_display_bin</docanchor>
    <docanchor file="namespaceIMP_1_1rmf" title="pdb_rmf">pdb_rmf_bin</docanchor>
    <docanchor file="namespaceIMP_1_1rmf" title="rmf_simplify">rmf_simplify_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::HierarchyLoadLink</name>
    <filename>classIMP_1_1rmf_1_1HierarchyLoadLink.html</filename>
    <base>SimpleLoadLink&lt; Particle &gt;</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_link_particle</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchyLoadLink.html</anchorfile>
      <anchor>a9ad11ee81d4673d7716254bd0c00bd61</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex cur, RMF::NodeConstHandle node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_load_hierarchy</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchyLoadLink.html</anchorfile>
      <anchor>aecf46029c51bfaf16f02092f617f6f37</anchor>
      <arglist>(RMF::NodeConstHandle root_node, Model *m, ParticleIndex root)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_setup_particle</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchyLoadLink.html</anchorfile>
      <anchor>aa017db1cdf052be7f5a8e9e0351c2be1</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex cur, RMF::NodeConstHandle node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::HierarchySaveLink</name>
    <filename>classIMP_1_1rmf_1_1HierarchySaveLink.html</filename>
    <base>SimpleSaveLink&lt; Particle &gt;</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_save_hierarchy</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchySaveLink.html</anchorfile>
      <anchor>acad2966f5813309997bdb1b89a4106f4</anchor>
      <arglist>(Model *m, ParticleIndex root, RMF::NodeHandle root_node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_setup_node</name>
      <anchorfile>classIMP_1_1rmf_1_1HierarchySaveLink.html</anchorfile>
      <anchor>acb5c102fbadac34930f053c2ed03bd42</anchor>
      <arglist>(Model *m, ParticleIndex root, ParticleIndex p, RMF::NodeHandle n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::LoadLink</name>
    <filename>classIMP_1_1rmf_1_1LoadLink.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::SaveLink</name>
    <filename>classIMP_1_1rmf_1_1SaveLink.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::SaveOptimizerState</name>
    <filename>classIMP_1_1rmf_1_1SaveOptimizerState.html</filename>
    <base>IMP::OptimizerState</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_update</name>
      <anchorfile>classIMP_1_1rmf_1_1SaveOptimizerState.html</anchorfile>
      <anchor>ab5c4d7347aa23213a1889641865852e3</anchor>
      <arglist>(unsigned int call_num) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1rmf_1_1SaveOptimizerState.html</anchorfile>
      <anchor>aa2be9922499fe17fe1211121c3e3ad04</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_simulator</name>
      <anchorfile>classIMP_1_1rmf_1_1SaveOptimizerState.html</anchorfile>
      <anchor>aaf387b770701f90b639953345671c103</anchor>
      <arglist>(atom::Simulator *sim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_always</name>
      <anchorfile>classIMP_1_1rmf_1_1SaveOptimizerState.html</anchorfile>
      <anchor>ad171be75fae16dc0c8e7d2278b4ec8fb</anchor>
      <arglist>(std::string name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::SimpleLoadLink</name>
    <filename>classIMP_1_1rmf_1_1SimpleLoadLink.html</filename>
    <templarg>O</templarg>
    <base>IMP::rmf::LoadLink</base>
    <member kind="function">
      <type>Vector&lt; Pointer&lt; O &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classIMP_1_1rmf_1_1SimpleLoadLink.html</anchorfile>
      <anchor>a8c568d0291111015e06845c3c6466f39</anchor>
      <arglist>(RMF::NodeConstHandle rt)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Pointer&lt; O &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classIMP_1_1rmf_1_1SimpleLoadLink.html</anchorfile>
      <anchor>acb250839c30652b3b67bb63c8beb3429</anchor>
      <arglist>(RMF::NodeConstHandle rt, Model *m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rmf::SimpleSaveLink</name>
    <filename>classIMP_1_1rmf_1_1SimpleSaveLink.html</filename>
    <templarg>O</templarg>
    <base>IMP::rmf::SaveLink</base>
  </compound>
  <compound kind="namespace">
    <name>IMP::rotamer</name>
    <filename>namespaceIMP_1_1rotamer.html</filename>
    <class kind="class">IMP::rotamer::ResidueRotamer</class>
    <class kind="class">IMP::rotamer::RotamerAngleTuple</class>
    <class kind="class">IMP::rotamer::RotamerCalculator</class>
    <class kind="class">IMP::rotamer::RotamerLibrary</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; ResidueRotamer &gt;</type>
      <name>ResidueRotamers</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>afb0ae089ef958f1d3e2cafdf7fd5bb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; RotamerAngleTuple &gt;</type>
      <name>RotamerAngleTuples</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>a09f458d1d62cc666339ddcd9a0edb669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>aab4434bbae67ccd1436e3ee89d76bf8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>a0d518e68d84f060ccb06e98ecbe947f8</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1rotamer.html</anchorfile>
      <anchor>a9e76b273a08001c96c97901f3ec22f8f</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rotamer::ResidueRotamer</name>
    <filename>classIMP_1_1rotamer_1_1ResidueRotamer.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>get_atom_exists</name>
      <anchorfile>classIMP_1_1rotamer_1_1ResidueRotamer.html</anchorfile>
      <anchor>ada53a356af89839596eb5148c15de6d8</anchor>
      <arglist>(const IMP::atom::AtomType &amp;at) const </arglist>
    </member>
    <member kind="function">
      <type>const IMP::algebra::Vector3D &amp;</type>
      <name>get_coordinates</name>
      <anchorfile>classIMP_1_1rotamer_1_1ResidueRotamer.html</anchorfile>
      <anchor>aa3b628cc432c926a0a90b6065eeb0592</anchor>
      <arglist>(unsigned index, const IMP::atom::AtomType &amp;at) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_cases</name>
      <anchorfile>classIMP_1_1rotamer_1_1ResidueRotamer.html</anchorfile>
      <anchor>a4e6c416e3801b8584c2e712a7a397cf5</anchor>
      <arglist>(const IMP::atom::AtomType &amp;at) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1rotamer_1_1ResidueRotamer.html</anchorfile>
      <anchor>a5fb962235256e9a81389adabe575c656</anchor>
      <arglist>(unsigned index) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_size</name>
      <anchorfile>classIMP_1_1rotamer_1_1ResidueRotamer.html</anchorfile>
      <anchor>a7a6ebaa53f15be8b8a16304eece3078f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rotamer::RotamerAngleTuple</name>
    <filename>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</filename>
    <member kind="function">
      <type></type>
      <name>RotamerAngleTuple</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>a8732c7bb5b31b46624687c8d5d0085ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotamerAngleTuple</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>a7ce58a7ac9bdc9d4f88b51fc3c92da06</anchor>
      <arglist>(float chi1, float chi2, float chi3, float chi4, float probability)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_chi1</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>a8fc7497cceb5f3aacfd41386a9db0da6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_chi2</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>aa4ec0fbac59d7939e4b160c2fbedb8bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_chi3</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>a0348fcc5162a27e437d507a778fdc563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_chi4</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>a782a5a4fa32d491db9933ae26e571c45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_probability</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerAngleTuple.html</anchorfile>
      <anchor>aeb42b418f69aa7a7e3f98295ddaefe07</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rotamer::RotamerCalculator</name>
    <filename>classIMP_1_1rotamer_1_1RotamerCalculator.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>RotamerCalculator</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerCalculator.html</anchorfile>
      <anchor>ae6d0ae1fea1b6f90e0ac4f4698f9e0a9</anchor>
      <arglist>(const RotamerLibrary *rl)</arglist>
    </member>
    <member kind="function">
      <type>ResidueRotamer</type>
      <name>get_rotamer</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerCalculator.html</anchorfile>
      <anchor>a87f7878daf288370734d78479eaea929</anchor>
      <arglist>(const IMP::atom::Residue &amp;rd, double thr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerCalculator.html</anchorfile>
      <anchor>a256b6b112265933e6c1f13e56e6542d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerCalculator.html</anchorfile>
      <anchor>a7b2c4dcc21cd3cf6cee2430993a1e756</anchor>
      <arglist>(const IMP::atom::Hierarchy &amp;protein, const IMP::PairScore *score, double thr, double K, int num_iter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::rotamer::RotamerLibrary</name>
    <filename>classIMP_1_1rotamer_1_1RotamerLibrary.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>RotamerLibrary</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerLibrary.html</anchorfile>
      <anchor>a4a7bb75f5c200aec077b218058f34a4d</anchor>
      <arglist>(unsigned angle_step=10)</arglist>
    </member>
    <member kind="function">
      <type>RotamerAngleTuples</type>
      <name>get_rotamers</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerLibrary.html</anchorfile>
      <anchor>a917624d3ba6e635f360c999efe4ce0f7</anchor>
      <arglist>(IMP::atom::ResidueType residue, float phi, float psi, float probability_thr) const </arglist>
    </member>
    <member kind="function">
      <type>RotamerRange</type>
      <name>get_rotamers_fast</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerLibrary.html</anchorfile>
      <anchor>a17b121526a2716bca70671c76dc56fc5</anchor>
      <arglist>(IMP::atom::ResidueType residue, float phi, float psi, float probability_thr) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerLibrary.html</anchorfile>
      <anchor>a17335d183429f41a88463ed2bd9f2396</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_library_file</name>
      <anchorfile>classIMP_1_1rotamer_1_1RotamerLibrary.html</anchorfile>
      <anchor>aed107d8105110ef8a23079016c69d751</anchor>
      <arglist>(const std::string &amp;lib_file_name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon</name>
    <filename>namespaceIMP_1_1sampcon.html</filename>
    <namespace>IMP::sampcon::clustering_rmsd</namespace>
    <namespace>IMP::sampcon::good_scoring_model_selector</namespace>
    <namespace>IMP::sampcon::precision_rmsd</namespace>
    <namespace>IMP::sampcon::rmsd_calculation</namespace>
    <namespace>IMP::sampcon::scores_convergence</namespace>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1sampcon.html</anchorfile>
      <anchor>a2ca69124d87909ff546c4e14e63371c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1sampcon.html</anchorfile>
      <anchor>a72891f51b43021a141c0280b0bb79cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1sampcon.html</anchorfile>
      <anchor>a36f5518a7e6d6027ee4d6d0f776cfc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1sampcon.html</anchorfile>
      <anchor>a0a70e5d9c3bb37628a11e2ba6d83a9c0</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespaceIMP_1_1sampcon" title="imp_sampcon: sampling exhaustiveness test">imp_sampcon</docanchor>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon::clustering_rmsd</name>
    <filename>namespaceIMP_1_1sampcon_1_1clustering__rmsd.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon::good_scoring_model_selector</name>
    <filename>namespaceIMP_1_1sampcon_1_1good__scoring__model__selector.html</filename>
    <class kind="class">IMP::sampcon::good_scoring_model_selector::GoodScoringModelSelector</class>
  </compound>
  <compound kind="class">
    <name>IMP::sampcon::good_scoring_model_selector::GoodScoringModelSelector</name>
    <filename>classIMP_1_1sampcon_1_1good__scoring__model__selector_1_1GoodScoringModelSelector.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1sampcon_1_1good__scoring__model__selector_1_1GoodScoringModelSelector.html</anchorfile>
      <anchor>a71e97fa64fb0415a76d7b4f0d974359d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_good_scoring_models</name>
      <anchorfile>classIMP_1_1sampcon_1_1good__scoring__model__selector_1_1GoodScoringModelSelector.html</anchorfile>
      <anchor>a3911f65f0809feced175983d42bb4f8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon::precision_rmsd</name>
    <filename>namespaceIMP_1_1sampcon_1_1precision__rmsd.html</filename>
    <class kind="class">IMP::sampcon::precision_rmsd::GetModelDensity</class>
  </compound>
  <compound kind="class">
    <name>IMP::sampcon::precision_rmsd::GetModelDensity</name>
    <filename>classIMP_1_1sampcon_1_1precision__rmsd_1_1GetModelDensity.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1sampcon_1_1precision__rmsd_1_1GetModelDensity.html</anchorfile>
      <anchor>a1c1eabfce6ce3a598e5475600c6fe19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_subunits_density</name>
      <anchorfile>classIMP_1_1sampcon_1_1precision__rmsd_1_1GetModelDensity.html</anchorfile>
      <anchor>a4e7ccf732b4ba5a31f62a61dc06ce74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_density</name>
      <anchorfile>classIMP_1_1sampcon_1_1precision__rmsd_1_1GetModelDensity.html</anchorfile>
      <anchor>af49e00e685dce71dd7eb7c1dd2cb3e82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon::rmsd_calculation</name>
    <filename>namespaceIMP_1_1sampcon_1_1rmsd__calculation.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_rmfs_coordinates_one_rmf</name>
      <anchorfile>namespaceIMP_1_1sampcon_1_1rmsd__calculation.html</anchorfile>
      <anchor>a300cf81f5610b3eb182c807af957be78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::sampcon::scores_convergence</name>
    <filename>namespaceIMP_1_1sampcon_1_1scores__convergence.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP::saxs</name>
    <filename>namespaceIMP_1_1saxs.html</filename>
    <class kind="class">IMP::saxs::ChiFreeScore</class>
    <class kind="class">IMP::saxs::ChiScore</class>
    <class kind="class">IMP::saxs::ChiScoreLog</class>
    <class kind="class">IMP::saxs::DeltaDistributionFunction</class>
    <class kind="class">IMP::saxs::DerivativeCalculator</class>
    <class kind="class">IMP::saxs::Distribution</class>
    <class kind="class">IMP::saxs::FitParameters</class>
    <class kind="class">IMP::saxs::FormFactorTable</class>
    <class kind="class">IMP::saxs::Profile</class>
    <class kind="class">IMP::saxs::ProfileClustering</class>
    <class kind="class">IMP::saxs::ProfileFitter</class>
    <class kind="class">IMP::saxs::RadialDistributionFunction</class>
    <class kind="class">IMP::saxs::RadiusOfGyrationRestraint</class>
    <class kind="class">IMP::saxs::RatioVolatilityScore</class>
    <class kind="class">IMP::saxs::Restraint</class>
    <class kind="class">IMP::saxs::RigidBodiesProfileHandler</class>
    <class kind="class">IMP::saxs::SolventAccessibleSurface</class>
    <class kind="class">IMP::saxs::WeightedFitParameters</class>
    <class kind="class">IMP::saxs::WeightedProfileFitter</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Profile &gt; &gt;</type>
      <name>Profiles</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a1912f2ff92b59929df371379ed08b790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Profile &gt; &gt;</type>
      <name>ProfilesTemp</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>afb20a5d01382345eb19e4cc4442fff35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FormFactorType</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>af6bcf28f95539cc1cfa91071938ee111</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_max_distance</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a9dd5a67ebe96a9ce98c53ab08f9d93ef</anchor>
      <arglist>(const Particles &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_max_distance</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>ac62b03b218a730a56a730b06a14bfffd</anchor>
      <arglist>(const Particles &amp;particles1, const Particles &amp;particles2)</arglist>
    </member>
    <member kind="function">
      <type>Profile *</type>
      <name>compute_profile</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a3088d29b90d6cefe75a9cf2bd68f340b</anchor>
      <arglist>(Particles particles, double min_q=0.0, double max_q=0.5, double delta_q=0.001, FormFactorTable *ft=get_default_form_factor_table(), FormFactorType ff_type=HEAVY_ATOMS, bool hydration_layer=true, bool fit=true, bool reciprocal=false, bool ab_initio=false, bool vacuum=false, std::string beam_profile_file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FormFactorTable *</type>
      <name>get_default_form_factor_table</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a4376a2c676c4c92975cbb4df0cb6d294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXf</type>
      <name>NNLS</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a4f88e301b11c223351766922b377efd5</anchor>
      <arglist>(const Eigen::MatrixXf &amp;A, const Eigen::VectorXf &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius_of_gyration</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a770cbee09c575c3e143146e040bc7128</anchor>
      <arglist>(const Particles &amp;particles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_files</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a48a6e99f77380532e66b861ecd6ff64c</anchor>
      <arglist>(Model *m, const std::vector&lt; std::string &gt; &amp;files, std::vector&lt; std::string &gt; &amp;pdb_file_names, std::vector&lt; std::string &gt; &amp;dat_files, std::vector&lt; IMP::Particles &gt; &amp;particles_vec, Profiles &amp;exp_profiles, bool residue_level=false, bool heavy_atoms_only=true, int multi_model_pdb=2, bool explicit_water=false, float max_q=0.0, int units=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_pdb</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>abd840b58460b2d3c4874fe738272f80b</anchor>
      <arglist>(Model *m, const std::string file, std::vector&lt; std::string &gt; &amp;pdb_file_names, std::vector&lt; IMP::Particles &gt; &amp;particles_vec, bool residue_level=false, bool heavy_atoms_only=true, int multi_model_pdb=2, bool explicit_water=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a5588a8d6b603c1c5fa4b713303854933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>aeb11328fcc07f05858afa4a47b965ffc</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1saxs.html</anchorfile>
      <anchor>a3715816c6118ac5a89a3bc842e71d15e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1saxs" title="cluster_profiles">cluster_profiles_bin</docanchor>
    <docanchor file="namespaceIMP_1_1saxs" title="compute_chi">compute_chi_bin</docanchor>
    <docanchor file="namespaceIMP_1_1saxs" title="compute_vr">compute_vr_bin</docanchor>
    <docanchor file="namespaceIMP_1_1saxs" title="compute_rg">compute_rg_bin</docanchor>
    <docanchor file="namespaceIMP_1_1saxs" title="validate_profile">validate_profile_bin</docanchor>
    <docanchor file="namespaceIMP_1_1saxs" title="weight_profiles">weight_profiles_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::ChiFreeScore</name>
    <filename>classIMP_1_1saxs_1_1ChiFreeScore.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::ChiScore</name>
    <filename>classIMP_1_1saxs_1_1ChiScore.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1ChiScore.html</anchorfile>
      <anchor>ac69555b23c21d4f5d3879bbd73964d1b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::ChiScoreLog</name>
    <filename>classIMP_1_1saxs_1_1ChiScoreLog.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1ChiScoreLog.html</anchorfile>
      <anchor>a23fe48947fc3e1a9bb5e78e9e189380e</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::DeltaDistributionFunction</name>
    <filename>classIMP_1_1saxs_1_1DeltaDistributionFunction.html</filename>
    <base>Distribution&lt; algebra::Vector3D &gt;</base>
    <member kind="function">
      <type></type>
      <name>DeltaDistributionFunction</name>
      <anchorfile>classIMP_1_1saxs_1_1DeltaDistributionFunction.html</anchorfile>
      <anchor>a8eae097c785264e03f8f0c00b1edab33</anchor>
      <arglist>(const Particles &amp;particles, double max_distance=0.0, double bin_size=pr_resolution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_derivative_distribution</name>
      <anchorfile>classIMP_1_1saxs_1_1DeltaDistributionFunction.html</anchorfile>
      <anchor>ac6fa9216d0e1328eb588d296df014972</anchor>
      <arglist>(Particle *particle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1saxs_1_1DeltaDistributionFunction.html</anchorfile>
      <anchor>a3b6ea8a431ff1519408f3931a9210083</anchor>
      <arglist>(std::ostream &amp;out=std::cout, std::string prefix=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Distribution</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a1bac4ad0ef51c735e5c6348dd2927661</anchor>
      <arglist>(double bin_size=pr_resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bin_size</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a6eb7b1030b849bdc86158c59c07135d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_max_distance</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>ab8fc1edf05bcda8f8b49611c5b7daef7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::DerivativeCalculator</name>
    <filename>classIMP_1_1saxs_1_1DerivativeCalculator.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type>void</type>
      <name>compute_chisquare_derivative</name>
      <anchorfile>classIMP_1_1saxs_1_1DerivativeCalculator.html</anchorfile>
      <anchor>a163a8ac0c3dafe0b32ea60875dca5d24</anchor>
      <arglist>(const Profile *model_profile, const Particles &amp;particles1, const Particles &amp;particles2, Vector&lt; algebra::Vector3D &gt; &amp;derivatives, const Vector&lt; double &gt; &amp;effect_size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute_chisquare_derivative</name>
      <anchorfile>classIMP_1_1saxs_1_1DerivativeCalculator.html</anchorfile>
      <anchor>a561de457d223a06aa56a8651e790858f</anchor>
      <arglist>(const Profile *model_profile, const Particles &amp;particles, Vector&lt; algebra::Vector3D &gt; &amp;derivatives, const Vector&lt; double &gt; &amp;effect_size) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::Distribution</name>
    <filename>classIMP_1_1saxs_1_1Distribution.html</filename>
    <templarg>ValueT</templarg>
    <member kind="function">
      <type></type>
      <name>Distribution</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a1bac4ad0ef51c735e5c6348dd2927661</anchor>
      <arglist>(double bin_size=pr_resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bin_size</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a6eb7b1030b849bdc86158c59c07135d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_max_distance</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>ab8fc1edf05bcda8f8b49611c5b7daef7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::FitParameters</name>
    <filename>classIMP_1_1saxs_1_1FitParameters.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::FormFactorTable</name>
    <filename>classIMP_1_1saxs_1_1FormFactorTable.html</filename>
    <member kind="function">
      <type></type>
      <name>FormFactorTable</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>aa547b22edd7fc0bfea54aba199c9bb47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FormFactorTable</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a933294e2678d0fd58ecdbe980d84d377</anchor>
      <arglist>(const std::string &amp;table_name, double min_q, double max_q, double delta_q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_dummy_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a061842b33df0ea0f88041fc152700747</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_dummy_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a41e3c1b2e22f41645e9dff51f31a5b19</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_dummy_water_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a56f748c3fe722eb7ac7b480e64d5ae0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a00c35e189804f0f800a6813b2d8e9581</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>ab90fa63100485221a07d9549b5ac32fb</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_radius</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a3e10a9829a0c04b62993e03df8e38bb4</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_vacuum_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a461fe539918ab449a15825a3f9a3b051</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_vacuum_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>ad841c2816abc2dcf15547ed76ef2ffda</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_vacuum_water_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>aedfbf845a6b47f4a1c96f4e337a73455</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_volume</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>ae1573daae7724faa5ae41cfbe9375dc2</anchor>
      <arglist>(Particle *p, FormFactorType ff_type=HEAVY_ATOMS) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_water_dummy_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a5c4c424ba167aa6b10159f3163853813</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_water_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>abd3420f28bbe27d7581726871d5c4755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_water_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>adfb626e687665ddf2b7a58dbe5cfc23f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector&lt; double &gt; &amp;</type>
      <name>get_water_vacuum_form_factors</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>ace61d6c9bf5b3211bb7865e214be8bad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1saxs_1_1FormFactorTable.html</anchorfile>
      <anchor>a2e4f01ccf93c87ff9fbd77e2039d3881</anchor>
      <arglist>(std::ostream &amp;out=std::cout, std::string prefix=&quot;&quot;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::Profile</name>
    <filename>classIMP_1_1saxs_1_1Profile.html</filename>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>Profile</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a0a90cf894f357ed01b49bcdfb387f8b2</anchor>
      <arglist>(const std::string &amp;file_name, bool fit_file=false, double max_q=0.0, int units=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Profile</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a81f243c644511e57b8a1c0618a331752</anchor>
      <arglist>(double qmin=0.0, double qmax=0.5, double delta=0.005)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>af2d065b52f2c154fedd4dbfa84d046ab</anchor>
      <arglist>(const Profile *other_profile, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a13596be5f2149e65e6a457041e49e478</anchor>
      <arglist>(const Vector&lt; Profile * &gt; &amp;profiles, const Vector&lt; double &gt; &amp;weights=Vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_errors</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a5d5b4d04927cb80dadc9324acc4770ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_noise</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a498e3e368d6b4f23e393ce34cbaf2d5b</anchor>
      <arglist>(double percentage=0.03)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_partial_profiles</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ac8f8e0caded8f8dec4df955c341b3e2e</anchor>
      <arglist>(const Profile *other_profile, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_partial_profiles</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a03e96bef7c9652e7dddee5e588e2532f</anchor>
      <arglist>(const Vector&lt; Profile * &gt; &amp;profiles, const Vector&lt; double &gt; &amp;weights=Vector&lt; double &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>background_adjust</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a83d5279ce74b9721145ebd438e7019bf</anchor>
      <arglist>(double start_q)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>calculate_I0</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ab60c5504b6ae92c8afe633a6e7960506</anchor>
      <arglist>(const Particles &amp;particles, FormFactorType ff_type=HEAVY_ATOMS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a3ff7be59ec7951b7b46d2b83d262c5c1</anchor>
      <arglist>(const Particles &amp;particles, FormFactorType ff_type=HEAVY_ATOMS, bool reciprocal=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>aa793b6976e52f52343e6236e51e8800b</anchor>
      <arglist>(const Particles &amp;particles1, const Particles &amp;particles2, FormFactorType ff_type=HEAVY_ATOMS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_profile_constant_form_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a279e033ea338fbff0eb20b45b1db1ede</anchor>
      <arglist>(const Particles &amp;particles, double form_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_profile_partial</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a7a1c3d7aa86b2e9c36951a0f1d7a5d38</anchor>
      <arglist>(const Particles &amp;particles, const Vector&lt; double &gt; &amp;surface=Vector&lt; double &gt;(), FormFactorType ff_type=HEAVY_ATOMS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate_profile_partial</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a057258a47d0cde7e29dbc47967b3f3ab</anchor>
      <arglist>(const Particles &amp;particles1, const Particles &amp;particles2, const Vector&lt; double &gt; &amp;surface1=Vector&lt; double &gt;(), const Vector&lt; double &gt; &amp;surface2=Vector&lt; double &gt;(), FormFactorType ff_type=HEAVY_ATOMS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distribution_2_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a1c170e6a2d3867d31fb0a6104093cd33</anchor>
      <arglist>(const RadialDistributionFunction &amp;r_dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>downsample</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ab89bf550f73ed2bdc93addcf0b62d23d</anchor>
      <arglist>(Profile *downsampled_profile, unsigned int point_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_delta_q</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ad23ec73c360f68277009e96c353e3960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_max_q</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a1e2ea64303f8bacc3adec498c4699f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_min_q</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a6ffa9a7e6b34e069c4714a599d06b7f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a8e0ed7d2bb30b17f97b9b92ca09f3209</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_uniform_sampling</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a212a0770476e6fb88e397da9ded2b575</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean_intensity</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ab80ac85b61752427752052305e3307bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>aa806a4f5e69ae0d560916ae175f6e3a8</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>profile_2_distribution</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a76a8fa45603a71e8e2e2e468bb5cb59d</anchor>
      <arglist>(RadialDistributionFunction &amp;rd, double max_distance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>radius_of_gyration</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a2468304f26a82e8ccb687616d58e5db1</anchor>
      <arglist>(double end_q_rg=1.3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_partial_profiles</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a1e06251997bae26e6526412924a3a280</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_SAXS_file</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>ad7e6ce3b8dedc7b9b825c687d38c6c92</anchor>
      <arglist>(const std::string &amp;file_name, bool fit_file=false, double max_q=0.0, int units=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resample</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a7894872bb7d93b30adb9951bff99735a</anchor>
      <arglist>(const Profile *exp_profile, Profile *resampled_profile) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a18da132f135c0fc41e606b889de73fd5</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ff_table</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a8a1d10d7b06c24dbc9cc3b70d7b56a92</anchor>
      <arglist>(FormFactorTable *ff_table)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>abddecb7d710dddeffed89858d17d7f80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sum_partial_profiles</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>aea32b4b93a9d6fa80dd9ac519ee81a7c</anchor>
      <arglist>(double c1, double c2, bool check_cashed=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_partial_profiles</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>aa94fc32830a29680e0fd63edcdf65b8b</anchor>
      <arglist>(const std::string &amp;file_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_SAXS_file</name>
      <anchorfile>classIMP_1_1saxs_1_1Profile.html</anchorfile>
      <anchor>a8f89c81cc82f79f10a898d702f2b4de2</anchor>
      <arglist>(const std::string &amp;file_name, double max_q=0.0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::ProfileClustering</name>
    <filename>classIMP_1_1saxs_1_1ProfileClustering.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::ProfileFitter</name>
    <filename>classIMP_1_1saxs_1_1ProfileFitter.html</filename>
    <templarg>ScoringFunctionT</templarg>
    <base>IMP::Object</base>
    <member kind="function">
      <type></type>
      <name>ProfileFitter</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a344f7cdb6981bb1b9d568a9a8927987b</anchor>
      <arglist>(const Profile *exp_profile)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_offset</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a224cf0e4fd31d2d7fe08a27d6b7c5bbd</anchor>
      <arglist>(const Profile *model_profile) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_scale_factor</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a04886872e631bfbd3d9d31f374c0c194</anchor>
      <arglist>(const Profile *model_profile, double offset=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_score</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a3ac45584df4d5b3f05cea7065a7e51a2</anchor>
      <arglist>(const Profile *model_profile, bool use_offset=false, const std::string fit_file_name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>FitParameters</type>
      <name>fit_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>afaa5cad2558d184e54d2255880ab156e</anchor>
      <arglist>(Profile *partial_profile, double min_c1=0.95, double max_c1=1.05, double min_c2=-2.0, double max_c2=4.0, bool use_offset=false, const std::string fit_file_name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>const Profile *</type>
      <name>get_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a99a3500f4b707258b6ee239500d74fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resample</name>
      <anchorfile>classIMP_1_1saxs_1_1ProfileFitter.html</anchorfile>
      <anchor>a66edb60e5085c5f369a4e786ef0aa4e4</anchor>
      <arglist>(const Profile *model_profile, Profile *resampled_profile) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::RadialDistributionFunction</name>
    <filename>classIMP_1_1saxs_1_1RadialDistributionFunction.html</filename>
    <base>Distribution&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>RadialDistributionFunction</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>a614b41c3ebd8245a0184f328872a9df9</anchor>
      <arglist>(double bin_size=pr_resolution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadialDistributionFunction</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>adce14ffe1c86faa5df2e469d1f6e8144</anchor>
      <arglist>(const std::string &amp;file_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>aeb53667c6c8b782418cc9189c9bd0a12</anchor>
      <arglist>(const RadialDistributionFunction &amp;model_pr)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fit</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>aa3db96b43586768ea44f52b91803545e</anchor>
      <arglist>(const RadialDistributionFunction &amp;model_pr, const std::string &amp;file_name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>get_square_root_distances</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>ac30c7a05b02cdcedca0dd65b77cb2fa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>a591cb35b054a4266669f4e82698c0cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>R_factor_score</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>a9c67650585b9ad2d0a9d43546fe5b66a</anchor>
      <arglist>(const RadialDistributionFunction &amp;model_pr, const std::string &amp;file_name=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>ad0a21333e46833fcde2263df53143ff3</anchor>
      <arglist>(double c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classIMP_1_1saxs_1_1RadialDistributionFunction.html</anchorfile>
      <anchor>a3e4067f6a15136defefd384eb076e0a6</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Distribution</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a1bac4ad0ef51c735e5c6348dd2927661</anchor>
      <arglist>(double bin_size=pr_resolution)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_bin_size</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>a6eb7b1030b849bdc86158c59c07135d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_max_distance</name>
      <anchorfile>classIMP_1_1saxs_1_1Distribution.html</anchorfile>
      <anchor>ab8fc1edf05bcda8f8b49611c5b7daef7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::RadiusOfGyrationRestraint</name>
    <filename>classIMP_1_1saxs_1_1RadiusOfGyrationRestraint.html</filename>
    <base>IMP::saxs::Restraint</base>
    <member kind="function">
      <type></type>
      <name>RadiusOfGyrationRestraint</name>
      <anchorfile>classIMP_1_1saxs_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a9b5742b6241cf0f196b45dec658bc5d1</anchor>
      <arglist>(const Particles &amp;particles, const Profile *exp_profile, const double end_q_rg=1.3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1saxs_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>ad7794d8939320ac1433c5b3ac8dbd259</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a99e179581b124b79ac3d9fd091122b41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1saxs_1_1RadiusOfGyrationRestraint.html</anchorfile>
      <anchor>a2cd360f8df04576a1f1569c9cb6d30eb</anchor>
      <arglist>(DerivativeAccumulator *accum) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Restraint</name>
      <anchorfile>classIMP_1_1saxs_1_1Restraint.html</anchorfile>
      <anchor>ad11e61724397d0366af159ff0eda0ab6</anchor>
      <arglist>(const Particles &amp;particles, const Profile *exp_profile, FormFactorType ff_type=HEAVY_ATOMS)</arglist>
    </member>
    <member kind="function">
      <type>RestraintInfo *</type>
      <name>get_static_info</name>
      <anchorfile>classIMP_1_1saxs_1_1Restraint.html</anchorfile>
      <anchor>abd1d9d53d1488583dcfe6db27518601d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::RatioVolatilityScore</name>
    <filename>classIMP_1_1saxs_1_1RatioVolatilityScore.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1RatioVolatilityScore.html</anchorfile>
      <anchor>aeb54ada9a5f6a0004a6bfbd022479da9</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::Restraint</name>
    <filename>classIMP_1_1saxs_1_1Restraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1saxs_1_1Restraint.html</anchorfile>
      <anchor>ae4f3e121a438c8001fd26a186dbee47c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1Restraint.html</anchorfile>
      <anchor>a3f834872ef44459f87e7ccfa47f77bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1saxs_1_1Restraint.html</anchorfile>
      <anchor>a7cde8df4cf0fa7e5bd9d9548f30b9ce3</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::RigidBodiesProfileHandler</name>
    <filename>classIMP_1_1saxs_1_1RigidBodiesProfileHandler.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1saxs_1_1RigidBodiesProfileHandler.html</anchorfile>
      <anchor>a3d9ee7d91000ba8d8682cd528e29177d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::SolventAccessibleSurface</name>
    <filename>classIMP_1_1saxs_1_1SolventAccessibleSurface.html</filename>
    <member kind="function">
      <type>Vector&lt; double &gt;</type>
      <name>get_solvent_accessibility</name>
      <anchorfile>classIMP_1_1saxs_1_1SolventAccessibleSurface.html</anchorfile>
      <anchor>a219d7fc61ef2b987317334a260246b19</anchor>
      <arglist>(const core::XYZRs &amp;points, double probe_radius=1.8, double density=5.0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::WeightedFitParameters</name>
    <filename>classIMP_1_1saxs_1_1WeightedFitParameters.html</filename>
    <base>IMP::saxs::FitParameters</base>
  </compound>
  <compound kind="class">
    <name>IMP::saxs::WeightedProfileFitter</name>
    <filename>classIMP_1_1saxs_1_1WeightedProfileFitter.html</filename>
    <templarg>ScoringFunctionT</templarg>
    <base>IMP::saxs::ProfileFitter</base>
    <member kind="function">
      <type></type>
      <name>WeightedProfileFitter</name>
      <anchorfile>classIMP_1_1saxs_1_1WeightedProfileFitter.html</anchorfile>
      <anchor>aaf22d8d5fe1016714188b0e67c8dea51</anchor>
      <arglist>(const Profile *exp_profile)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>compute_score</name>
      <anchorfile>classIMP_1_1saxs_1_1WeightedProfileFitter.html</anchorfile>
      <anchor>ad8d3d9db95c64b163e831db4f2e30a85</anchor>
      <arglist>(const ProfilesTemp &amp;profiles, Vector&lt; double &gt; &amp;weights, bool use_offset=false, bool NNLS=true) const </arglist>
    </member>
    <member kind="function">
      <type>WeightedFitParameters</type>
      <name>fit_profile</name>
      <anchorfile>classIMP_1_1saxs_1_1WeightedProfileFitter.html</anchorfile>
      <anchor>ac48627aa0a274cc70594d4ebc01195e8</anchor>
      <arglist>(ProfilesTemp partial_profiles, double min_c1=0.95, double max_c1=1.05, double min_c2=-2.0, double max_c2=4.0, bool use_offset=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_fit_file</name>
      <anchorfile>classIMP_1_1saxs_1_1WeightedProfileFitter.html</anchorfile>
      <anchor>a489c79b2bdb91a7aed83289c5dcee477</anchor>
      <arglist>(ProfilesTemp partial_profiles, const WeightedFitParameters &amp;fp, const std::string fit_file_name, bool use_offset=false) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::saxs_merge</name>
    <filename>namespaceIMP_1_1saxs__merge.html</filename>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1saxs__merge.html</anchorfile>
      <anchor>ac1d829f6284f0f2a4a71c9eac2fcc7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1saxs__merge.html</anchorfile>
      <anchor>a1000f4749fdaaa920e8f31737f78f779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1saxs__merge.html</anchorfile>
      <anchor>a9ad4473420770a42851b6dba9b922b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1saxs__merge.html</anchorfile>
      <anchor>ad2b46442e935d9aa9707456975050542</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="namespaceIMP_1_1saxs__merge" title="saxs_merge ">saxs_merge_bin</docanchor>
  </compound>
  <compound kind="namespace">
    <name>IMP::score_functor</name>
    <filename>namespaceIMP_1_1score__functor.html</filename>
    <class kind="class">IMP::score_functor::AddScores</class>
    <class kind="class">IMP::score_functor::DistancePairScore</class>
    <class kind="class">IMP::score_functor::DistancePairScoreWithCache</class>
    <class kind="class">IMP::score_functor::Dope</class>
    <class kind="class">IMP::score_functor::Harmonic</class>
    <class kind="class">IMP::score_functor::HarmonicLowerBound</class>
    <class kind="class">IMP::score_functor::HarmonicUpperBound</class>
    <class kind="class">IMP::score_functor::LinearLowerBound</class>
    <class kind="class">IMP::score_functor::LoopStatistical</class>
    <class kind="class">IMP::score_functor::OpenCubicSpline</class>
    <class kind="class">IMP::score_functor::OrientedSoap</class>
    <class kind="class">IMP::score_functor::PointToSphereDistance</class>
    <class kind="struct">IMP::score_functor::Score</class>
    <class kind="class">IMP::score_functor::ScoreUnaryFunction</class>
    <class kind="struct">IMP::score_functor::ScoreWithCache</class>
    <class kind="class">IMP::score_functor::Shift</class>
    <class kind="class">IMP::score_functor::SingletonStatistical</class>
    <class kind="class">IMP::score_functor::Soap</class>
    <class kind="class">IMP::score_functor::SphereDistance</class>
    <class kind="class">IMP::score_functor::Statistical</class>
    <class kind="class">IMP::score_functor::SurfaceDepthPairScore</class>
    <class kind="class">IMP::score_functor::SurfaceDistancePairScore</class>
    <class kind="class">IMP::score_functor::SurfaceHeightPairScore</class>
    <class kind="class">IMP::score_functor::UnaryFunctionEvaluate</class>
    <class kind="class">IMP::score_functor::WeightScore</class>
    <member kind="typedef">
      <type>Key&lt; 6453462 &gt;</type>
      <name>DopeType</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a97c0892c56f43f9c34aefe0f4f669a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; DopeType &gt;</type>
      <name>DopeTypes</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a81c04fc0185c67c6f3d60fa4feb16537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key&lt; 6453472 &gt;</type>
      <name>LoopStatisticalType</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a880c730221bbe309c5b9472ba99d5f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; LoopStatisticalType &gt;</type>
      <name>LoopStatisticalTypes</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>abea3f0d6b2a824b19a9e83984b502d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a3d6b6ffa3ae0d0be20474739265b956a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>ac5a5738b19c99aaff96dfd7863d95f12</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1score__functor.html</anchorfile>
      <anchor>a5a435dae69a37cc4f4b2c07f857f4f34</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::AddScores</name>
    <filename>classIMP_1_1score__functor_1_1AddScores.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IMP::score_functor::Score</base>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_range</name>
      <anchorfile>classIMP_1_1score__functor_1_1AddScores.html</anchorfile>
      <anchor>a2dc8010737faa261c7d8bdf93781db1f</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::DistancePairScore</name>
    <filename>classIMP_1_1score__functor_1_1DistancePairScore.html</filename>
    <templarg>DistanceScoreT</templarg>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>aa13691df66ff55acfa6d3303b8937954</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a4104a0b37e51e89118347ca12d0ccc31</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a204d31c53166bedf08b2d53ed1de03bb</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1f8d7714a4a1466ea34fea593b15c5cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>ab46775b785179b2e978459e3886e5542</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a9413de7596b6a1ee97c74759169a004a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>DistanceScoreT &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a61bfe35532a6d66b3c0e4910677f165d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScore.html</anchorfile>
      <anchor>a1a67f29a44377c6d45ee0c9e14fcf2be</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::DistancePairScoreWithCache</name>
    <filename>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</filename>
    <templarg>DistanceScoreT</templarg>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a7c23a56c32a8c083952dc8a66b8d4c1b</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a1de7d8754b21c165b5fe57e304682160</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>ac7362fc5bec2a3dcc0bd153ce9f07df2</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a5a64b1fbc830b64388119fe59f28c39e</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a35f76fb8f35de5af8c90e5163da578d5</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const override</arglist>
    </member>
    <member kind="function">
      <type>DistanceScoreT &amp;</type>
      <name>get_score_functor</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a491a59fb1f2dab4e265018ee980cc28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1DistancePairScoreWithCache.html</anchorfile>
      <anchor>a2a04b780c2867aa2d842a8650999a730</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::Dope</name>
    <filename>classIMP_1_1score__functor_1_1Dope.html</filename>
    <base>Statistical&lt; DopeType, false, true &gt;</base>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>ab0f8bda15288865292e58494fdd37200</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>acfa23222824ef5e35558596f3bcfb3b0</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::Harmonic</name>
    <filename>classIMP_1_1score__functor_1_1Harmonic.html</filename>
    <base>IMP::score_functor::Score</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::HarmonicLowerBound</name>
    <filename>classIMP_1_1score__functor_1_1HarmonicLowerBound.html</filename>
    <base>IMP::score_functor::Score</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::HarmonicUpperBound</name>
    <filename>classIMP_1_1score__functor_1_1HarmonicUpperBound.html</filename>
    <base>IMP::score_functor::Score</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::LinearLowerBound</name>
    <filename>classIMP_1_1score__functor_1_1LinearLowerBound.html</filename>
    <base>IMP::score_functor::Score</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::LoopStatistical</name>
    <filename>classIMP_1_1score__functor_1_1LoopStatistical.html</filename>
    <base>Statistical&lt; LoopStatisticalType, false, true &gt;</base>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>ab0f8bda15288865292e58494fdd37200</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>acfa23222824ef5e35558596f3bcfb3b0</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::OpenCubicSpline</name>
    <filename>classIMP_1_1score__functor_1_1OpenCubicSpline.html</filename>
    <base>IMP::score_functor::Score</base>
    <member kind="function">
      <type></type>
      <name>OpenCubicSpline</name>
      <anchorfile>classIMP_1_1score__functor_1_1OpenCubicSpline.html</anchorfile>
      <anchor>a50f56f735edca22dee6280d5b71cb2e8</anchor>
      <arglist>(const Floats &amp;values, Float minrange, Float spacing, bool extend=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::OrientedSoap</name>
    <filename>classIMP_1_1score__functor_1_1OrientedSoap.html</filename>
    <base>IMP::score_functor::ScoreWithCache</base>
    <member kind="function">
      <type></type>
      <name>OrientedSoap</name>
      <anchorfile>classIMP_1_1score__functor_1_1OrientedSoap.html</anchorfile>
      <anchor>a21f8eda408fbb66508169d6e605fc3ce</anchor>
      <arglist>(std::string library)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_cache_valid</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>a1e4a745bb69d0e810606fbcd1ead464e</anchor>
      <arglist>(Model *m) const </arglist>
    </member>
    <member kind="function">
      <type>ModelObjectsTemp</type>
      <name>get_inputs</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>af3ac76d360cb5de9f11e97b676748ae1</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_trivially_zero_with_cache</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>abcba7776887c809a888259f0affa265f</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double squared_distance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_maximum_range</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>afeec19cfb116f816aaf3ae0bb1f7abac</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>DerivativePair</type>
      <name>get_score_and_derivative_with_cache</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>ad0c844aeb37640fd8e4fa8e328f31441</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double distance) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_score_with_cache</name>
      <anchorfile>structIMP_1_1score__functor_1_1ScoreWithCache.html</anchorfile>
      <anchor>a39fb594dd38fb071e01c5ddb2d93fdf1</anchor>
      <arglist>(Model *m, const Array&lt; D, ParticleIndex &gt; &amp;p, double distance) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::PointToSphereDistance</name>
    <filename>classIMP_1_1score__functor_1_1PointToSphereDistance.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>IMP::score_functor::Score</name>
    <filename>structIMP_1_1score__functor_1_1Score.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::ScoreUnaryFunction</name>
    <filename>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</filename>
    <templarg>Score</templarg>
    <templarg>D</templarg>
    <base>IMP::UnaryFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a3214a0834690e50e804cd821ea6e27eb</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a42797ecd8ab59e271f1ce1463b37789b</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1ScoreUnaryFunction.html</anchorfile>
      <anchor>a06593c61dd70c347f2250188c7b8418d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IMP::score_functor::ScoreWithCache</name>
    <filename>structIMP_1_1score__functor_1_1ScoreWithCache.html</filename>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::Shift</name>
    <filename>classIMP_1_1score__functor_1_1Shift.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::SingletonStatistical</name>
    <filename>classIMP_1_1score__functor_1_1SingletonStatistical.html</filename>
    <templarg></templarg>
    <templarg>INTERPOLATE</templarg>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::Soap</name>
    <filename>classIMP_1_1score__functor_1_1Soap.html</filename>
    <base>Statistical&lt; DopeType, false, false &gt;</base>
    <member kind="function">
      <type></type>
      <name>Soap</name>
      <anchorfile>classIMP_1_1score__functor_1_1Soap.html</anchorfile>
      <anchor>aa1778b3085c972ce9ed48d7e5a8dfb4b</anchor>
      <arglist>(double threshold=std::numeric_limits&lt; double &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Soap</name>
      <anchorfile>classIMP_1_1score__functor_1_1Soap.html</anchorfile>
      <anchor>aa43b57f68bf7ae5b3961b2a77dfce147</anchor>
      <arglist>(double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>ab0f8bda15288865292e58494fdd37200</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>acfa23222824ef5e35558596f3bcfb3b0</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::SphereDistance</name>
    <filename>classIMP_1_1score__functor_1_1SphereDistance.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::Statistical</name>
    <filename>classIMP_1_1score__functor_1_1Statistical.html</filename>
    <templarg>Key</templarg>
    <templarg>BIPARTITE</templarg>
    <templarg>INTERPOLATE</templarg>
    <templarg>SPARSE</templarg>
    <base>IMP::score_functor::Score</base>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>ab0f8bda15288865292e58494fdd37200</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistical</name>
      <anchorfile>classIMP_1_1score__functor_1_1Statistical.html</anchorfile>
      <anchor>acfa23222824ef5e35558596f3bcfb3b0</anchor>
      <arglist>(IntKey k, double threshold, TextInput data_file, unsigned int shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::SurfaceDepthPairScore</name>
    <filename>classIMP_1_1score__functor_1_1SurfaceDepthPairScore.html</filename>
    <templarg></templarg>
    <base>IMP::PairScore</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::SurfaceDistancePairScore</name>
    <filename>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</filename>
    <templarg></templarg>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a6d23af0029db1b7ce0f2b5922e045000</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>ae4ff38e5237203953db7ecaf02c7bb2c</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a723c12ba93b8896f58793bc654d546c3</anchor>
      <arglist>(Model *m, const ParticleIndexPair &amp;pip, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a49af4fcef31929afd91b3ce1e01818ed</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a1718358986df62743fe5cd608db8464b</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>ae24f14f68edec040ccdb33ac7029eb65</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1score__functor_1_1SurfaceDistancePairScore.html</anchorfile>
      <anchor>a376ac706e46c53b2426efe5322bc0f69</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::SurfaceHeightPairScore</name>
    <filename>classIMP_1_1score__functor_1_1SurfaceHeightPairScore.html</filename>
    <templarg></templarg>
    <base>IMP::PairScore</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::UnaryFunctionEvaluate</name>
    <filename>classIMP_1_1score__functor_1_1UnaryFunctionEvaluate.html</filename>
    <base>IMP::score_functor::Score</base>
  </compound>
  <compound kind="class">
    <name>IMP::score_functor::WeightScore</name>
    <filename>classIMP_1_1score__functor_1_1WeightScore.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>IMP::scratch</name>
    <filename>namespaceIMP_1_1scratch.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1scratch.html</anchorfile>
      <anchor>a401664374c56f16fc3bcae8f0f359148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1scratch.html</anchorfile>
      <anchor>a0c697ca9b026ea9ab5be92fe4c5dbd26</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1scratch.html</anchorfile>
      <anchor>a6679ae1e44da36fd3c1d61f0960c4fba</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal</name>
    <filename>namespaceIMP_1_1spatiotemporal.html</filename>
    <namespace>IMP::spatiotemporal::analysis</namespace>
    <namespace>IMP::spatiotemporal::composition_scoring</namespace>
    <namespace>IMP::spatiotemporal::create_DAG</namespace>
    <namespace>IMP::spatiotemporal::graphNode</namespace>
    <namespace>IMP::spatiotemporal::score_graph</namespace>
    <namespace>IMP::spatiotemporal::write_output</namespace>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal.html</anchorfile>
      <anchor>aeb11742201457d2701d0b7aea0320b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal.html</anchorfile>
      <anchor>a96c892c6ba2d63cb9aada5a69038dadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal.html</anchorfile>
      <anchor>aaa76b7cad0b382ffcbfbf3f809fbba43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal.html</anchorfile>
      <anchor>a9dee0052bc8b55663b57a297de8e0e5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::analysis</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1analysis.html</filename>
    <member kind="function">
      <type>def</type>
      <name>purity</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1analysis.html</anchorfile>
      <anchor>a60775416e22d87b5dc601465b43894a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>temporal_precision</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1analysis.html</anchorfile>
      <anchor>a143fbcebb8bdf05d305182decca95038</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::composition_scoring</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1composition__scoring.html</filename>
    <member kind="function">
      <type>def</type>
      <name>calc_likelihood</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1composition__scoring.html</anchorfile>
      <anchor>a9a39c484ff823289c52d51a7c3c8100d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>composition_likelihood_function</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1composition__scoring.html</anchorfile>
      <anchor>a706b375a29445d5b97eadc616bcd3994</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_state</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1composition__scoring.html</anchorfile>
      <anchor>ac91be2ef5e4bc8ac8bf52bed56485fb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::create_DAG</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1create__DAG.html</filename>
    <member kind="function">
      <type>def</type>
      <name>create_DAG</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1create__DAG.html</anchorfile>
      <anchor>aafbefe6b705d81da5d8191fa3ad2df70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::graphNode</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1graphNode.html</filename>
    <class kind="class">IMP::spatiotemporal::graphNode::graphNode</class>
    <member kind="function">
      <type>def</type>
      <name>draw_edge</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1graphNode.html</anchorfile>
      <anchor>a365159251bb031efd05c994a3ef1cbb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spatiotemporal::graphNode::graphNode</name>
    <filename>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>abf3838575850eff8aac4a252c5304aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>__repr__</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>af10383317119ccd03d1e36f57793f378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_edge</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a549bf6373c6ff6ec8c362023cbc1b79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>add_score</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a80499e4e89e17831cd8909392f3138dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_edges</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a360cb2b788ebe00665b1d8342ea5f97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_index</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a55c31ff913316e0ef9cbab4d58c6600a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_label</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>ad18e3d92a22300592c4b9d73b0afdcf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_scores</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a7939e5b79a1e13ad222dbd9400f41f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_subcomplex_components</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a7af8361c310ea2f1c091910d1a4d130e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_time</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a50924466eaa39a33f1dea4925fc1515b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>afd9c11e116f14cc2abd7a49d64211add</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>init_graphNode</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>aae545949698e2bcfc77d3f6e6444b21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_expected_subcomplexes</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a871c9ac5894943946ddb824296a2301d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_index</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>af0dd65b6f39804714e6fd1c63998fba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_label</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a34be1292feb2efc697bf3cbca5704c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_scores</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a8044f7c17fa46b654945a0e870b6d609</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_subcomplex_components</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>a23aa69c58e09baad37bf7e344bfa3b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>set_time</name>
      <anchorfile>classIMP_1_1spatiotemporal_1_1graphNode_1_1graphNode.html</anchorfile>
      <anchor>ab79361ed914b2b0b02bbd6eaed20f600</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::score_graph</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1score__graph.html</filename>
    <member kind="function">
      <type>def</type>
      <name>find_all_paths</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1score__graph.html</anchorfile>
      <anchor>ae1a3adee0546f5d9d38a1520c9abe24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_graph_as_dict</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1score__graph.html</anchorfile>
      <anchor>a4ea095b3bea598d83bcad8d232f23cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>score_graph</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1score__graph.html</anchorfile>
      <anchor>ac385b0b5b29e498b061a66e80b74ab1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spatiotemporal::write_output</name>
    <filename>namespaceIMP_1_1spatiotemporal_1_1write__output.html</filename>
    <member kind="function">
      <type>def</type>
      <name>draw_dag</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>a42021b78700a2fb2a92be842b21afc6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>draw_dag_in_graphviz</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>a249ebdc8a8168afd4523e7edfddf2a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_cdf</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>ac3a93832c08b7d776bbc5ea707b809a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_final_npaths</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>ac3e1c83376c1b641bbec5e4651db375a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_labeled_pdf</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>a0f6f5ab37c5a19b16f55171626c06223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>write_pdf</name>
      <anchorfile>namespaceIMP_1_1spatiotemporal_1_1write__output.html</anchorfile>
      <anchor>aa32a97e69c31d6c29366490ed330e950</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::spb</name>
    <filename>namespaceIMP_1_1spb.html</filename>
    <class kind="class">IMP::spb::AttributeDistancePairScore</class>
    <class kind="class">IMP::spb::BoxedMover</class>
    <class kind="class">IMP::spb::CellMover</class>
    <class kind="class">IMP::spb::ChiSquareMetric</class>
    <class kind="class">IMP::spb::ContactMapMetric</class>
    <class kind="class">IMP::spb::DiameterRgyrRestraint</class>
    <class kind="class">IMP::spb::DistanceRMSDMetric</class>
    <class kind="class">IMP::spb::DistanceTerminiRestraint</class>
    <class kind="class">IMP::spb::EM2DRestraint</class>
    <class kind="class">IMP::spb::Gaussian</class>
    <class kind="class">IMP::spb::HelixDecorator</class>
    <class kind="class">IMP::spb::ISDRestraint</class>
    <class kind="class">IMP::spb::KinkPairScore</class>
    <class kind="class">IMP::spb::MolecularDynamicsWithWte</class>
    <class kind="class">IMP::spb::MonteCarloWithWte</class>
    <class kind="class">IMP::spb::NuisanceRangeModifier</class>
    <class kind="class">IMP::spb::PbcBoxedMover</class>
    <class kind="class">IMP::spb::PbcBoxedRigidBodyMover</class>
    <class kind="class">IMP::spb::RigidBodyNewMover</class>
    <class kind="class">IMP::spb::RigidBodyPackingScore</class>
    <class kind="class">IMP::spb::RMSDMetric</class>
    <class kind="class">IMP::spb::SameParticlePairFilter</class>
    <class kind="class">IMP::spb::SameRigidBodyPairFilter</class>
    <class kind="class">IMP::spb::TiltSingletonScore</class>
    <class kind="class">IMP::spb::TransformationSymmetry</class>
    <class kind="class">IMP::spb::TwoStateGoModelRestraint</class>
    <class kind="class">IMP::spb::UniformBoundedRestraint</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; AttributeDistancePairScore &gt; &gt;</type>
      <name>AttributeDistancePairScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a515daf5a237fc4ba71e58e58fbe2c33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; AttributeDistancePairScore &gt; &gt;</type>
      <name>AttributeDistancePairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>adc6aa221bf61f3086177b6099cd3db7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; HelixDecorator &gt;</type>
      <name>HelixDecorators</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a1747197c4d19e2d1ab012525936934cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; KinkPairScore &gt; &gt;</type>
      <name>KinkPairScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>afbc79bd68a9b5971661341ca4d6c6146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; KinkPairScore &gt; &gt;</type>
      <name>KinkPairScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a76597356209f4eade3ff1adec77ab0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; RigidBodyPackingScore &gt; &gt;</type>
      <name>RigidBodyPackingScores</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a8dad1dea544defccb9ea3e3b2de70719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; RigidBodyPackingScore &gt; &gt;</type>
      <name>RigidBodyPackingScoresTemp</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>aeb59d4eb22535828795afdc60e5a774e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a267bfe077fd4c62eaf5a2c560879971e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>ac4d6b102ab93bb1da1d22860c1536d2b</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1spb.html</anchorfile>
      <anchor>a1a7c475c82ab592f468be0340cf39c71</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <docanchor file="namespaceIMP_1_1spb" title="spb">spb_bin</docanchor>
    <docanchor file="namespaceIMP_1_1spb" title="spb_analysis">spb_analysis_bin</docanchor>
    <docanchor file="namespaceIMP_1_1spb" title="spb_cluster">spb_cluster_bin</docanchor>
    <docanchor file="namespaceIMP_1_1spb" title="spb_density">spb_density_bin</docanchor>
    <docanchor file="namespaceIMP_1_1spb" title="spb_density_perbead">spb_density_perbead_bin</docanchor>
    <docanchor file="namespaceIMP_1_1spb" title="spb_test_score">spb_test_score_bin</docanchor>
  </compound>
  <compound kind="class">
    <name>IMP::spb::AttributeDistancePairScore</name>
    <filename>classIMP_1_1spb_1_1AttributeDistancePairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function">
      <type></type>
      <name>AttributeDistancePairScore</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>abd9f3f36a0742a1dbf85cb6021e905da</anchor>
      <arglist>(UnaryFunction *f, FloatKey k)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>a2c26ca11c74783316831843183a39bd9</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>ae04647c748e9b276cad563b90db85b48</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>ae034eb7a7d2e7cc7cf3d8973cb622855</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>a9bee2c70a02640e74d5f39dd074f2174</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>a6361d693f4bf545c34a63d12b5d361cd</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>ae53d0256f944d532dac12cc00c32094f</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1AttributeDistancePairScore.html</anchorfile>
      <anchor>a712d8203b0cc4fd24ae1a1ad11c6d309</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::BoxedMover</name>
    <filename>classIMP_1_1spb_1_1BoxedMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>BoxedMover</name>
      <anchorfile>classIMP_1_1spb_1_1BoxedMover.html</anchorfile>
      <anchor>a42b03b596dab01a65b08165d60d1f588</anchor>
      <arglist>(Particle *p, Float max_tr, algebra::Vector3Ds centers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1BoxedMover.html</anchorfile>
      <anchor>a13858fcd3581bc3d222839f5845db11b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1BoxedMover.html</anchorfile>
      <anchor>a47133cee3edf105526159f48a6932f7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1spb_1_1BoxedMover.html</anchorfile>
      <anchor>ad70033560950a5f8d77d44454217c09e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1spb_1_1BoxedMover.html</anchorfile>
      <anchor>a465004dd593ddb87632406a31b7df2eb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::CellMover</name>
    <filename>classIMP_1_1spb_1_1CellMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1CellMover.html</anchorfile>
      <anchor>a96366c6aaba9d5fae391cd927995e502</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1CellMover.html</anchorfile>
      <anchor>ab6aa71806ac4a4ce35e5ecdae7cda635</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1spb_1_1CellMover.html</anchorfile>
      <anchor>a3fd38af233c4193e9a04a4b5a4e41976</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1spb_1_1CellMover.html</anchorfile>
      <anchor>a5d80d062df1d9be097b59e88357b99e5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::ChiSquareMetric</name>
    <filename>classIMP_1_1spb_1_1ChiSquareMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1ChiSquareMetric.html</anchorfile>
      <anchor>a1c72aae2c5e5a4fbbf7d152554fd776d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_weight</name>
      <anchorfile>classIMP_1_1statistics_1_1Metric.html</anchorfile>
      <anchor>a1c4e688ca42f1c1a31764ab59dda7c1d</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual double</type>
      <name>do_get_weight</name>
      <anchorfile>classIMP_1_1statistics_1_1Metric.html</anchorfile>
      <anchor>a67e2b01a2353144b88a15bd617be250d</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::ContactMapMetric</name>
    <filename>classIMP_1_1spb_1_1ContactMapMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1ContactMapMetric.html</anchorfile>
      <anchor>ab14e00eeed77d0ff2dfc4ca892b34eb3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::DiameterRgyrRestraint</name>
    <filename>classIMP_1_1spb_1_1DiameterRgyrRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1DiameterRgyrRestraint.html</anchorfile>
      <anchor>a8157a23eec7e212becfecf5ce9015923</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1DiameterRgyrRestraint.html</anchorfile>
      <anchor>ab09a6d47b6953e127afb413899254634</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1DiameterRgyrRestraint.html</anchorfile>
      <anchor>ab224c1fdd7b55e88d074056d50fd0575</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::DistanceRMSDMetric</name>
    <filename>classIMP_1_1spb_1_1DistanceRMSDMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1DistanceRMSDMetric.html</anchorfile>
      <anchor>adf1b20f4840efa19033c88c7cb8ad8a5</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::DistanceTerminiRestraint</name>
    <filename>classIMP_1_1spb_1_1DistanceTerminiRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function">
      <type></type>
      <name>DistanceTerminiRestraint</name>
      <anchorfile>classIMP_1_1spb_1_1DistanceTerminiRestraint.html</anchorfile>
      <anchor>a43c5d156666d4d3a9997ca5380322c30</anchor>
      <arglist>(IMP::Particle *nterm, IMP::Particle *cterm, IMP::Particle *reqd_dist_term, double sigma0_dist)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1DistanceTerminiRestraint.html</anchorfile>
      <anchor>ab5207e19cbbe60aed6b9b047fb312284</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1DistanceTerminiRestraint.html</anchorfile>
      <anchor>a40c7008cf30ddfdcf034a96e754c9600</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1DistanceTerminiRestraint.html</anchorfile>
      <anchor>ad3aa68a4b00274594adc6c634ba604be</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::EM2DRestraint</name>
    <filename>classIMP_1_1spb_1_1EM2DRestraint.html</filename>
    <base>IMP::spb::ISDRestraint</base>
    <member kind="function">
      <type></type>
      <name>EM2DRestraint</name>
      <anchorfile>classIMP_1_1spb_1_1EM2DRestraint.html</anchorfile>
      <anchor>af1c4225392bb43cb37bd9014cb24eb2e</anchor>
      <arglist>(Particles ps, Particle *sigma, std::string ifile, Float px_size, Float res)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1EM2DRestraint.html</anchorfile>
      <anchor>abb0d425afdb7c85dd41583026618dba8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1EM2DRestraint.html</anchorfile>
      <anchor>a618cbcc25da2a0cc0664487224d4ea25</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1EM2DRestraint.html</anchorfile>
      <anchor>a8d6b189e88acca5fc8b4f9b6e76e6570</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::Gaussian</name>
    <filename>classIMP_1_1spb_1_1Gaussian.html</filename>
    <base>IMP::UnaryFunction</base>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classIMP_1_1spb_1_1Gaussian.html</anchorfile>
      <anchor>ae2252aa908524d4ab6d81a96df1ea810</anchor>
      <arglist>(Float Emin, Float Zmin, Float sigma)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1Gaussian.html</anchorfile>
      <anchor>ab13a0ea743949b51cc7d3f419ca33fa9</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DerivativePair</type>
      <name>evaluate_with_derivative</name>
      <anchorfile>classIMP_1_1spb_1_1Gaussian.html</anchorfile>
      <anchor>a33a4e1b273b006a49b02f6d0a0192c55</anchor>
      <arglist>(double feature) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1Gaussian.html</anchorfile>
      <anchor>aafd1d2d706f6136bcb13f184fe03cd04</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::HelixDecorator</name>
    <filename>classIMP_1_1spb_1_1HelixDecorator.html</filename>
    <base>IMP::Decorator</base>
    <member kind="function">
      <type>Float</type>
      <name>get_begin</name>
      <anchorfile>classIMP_1_1spb_1_1HelixDecorator.html</anchorfile>
      <anchor>accc8e6ab266da2186c2014f0ee4f3351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_end</name>
      <anchorfile>classIMP_1_1spb_1_1HelixDecorator.html</anchorfile>
      <anchor>ab278bc700372459fc2e20c57d82bd46a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_begin</name>
      <anchorfile>classIMP_1_1spb_1_1HelixDecorator.html</anchorfile>
      <anchor>af71ac58d6940ae687acac7bb6d85b97d</anchor>
      <arglist>(Float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_end</name>
      <anchorfile>classIMP_1_1spb_1_1HelixDecorator.html</anchorfile>
      <anchor>a944390e70f53fa38f6351dbdf7fb6840</anchor>
      <arglist>(Float v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::ISDRestraint</name>
    <filename>classIMP_1_1spb_1_1ISDRestraint.html</filename>
    <base>IMP::Restraint</base>
  </compound>
  <compound kind="class">
    <name>IMP::spb::KinkPairScore</name>
    <filename>classIMP_1_1spb_1_1KinkPairScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>a258175a6ea5dded6c847e1a77139bd1b</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>a3334c13a418b2209301b8806701863c4</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>adf2a2ed42daf23b463d076d4a4f99fa4</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>a9165c983e516536cec617e4a1b11491a</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>a50533c39c9ca2515b0cd3b3a015a03ea</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>af88491f8b534e82a57e6f6cbfba2af09</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1KinkPairScore.html</anchorfile>
      <anchor>a5eafd8aeab32a4fcc68a0fdd242d2157</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::MolecularDynamicsWithWte</name>
    <filename>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</filename>
    <base>IMP::atom::Simulator</base>
    <member kind="function">
      <type></type>
      <name>MolecularDynamicsWithWte</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a2666b8ac4baae12e5ebbf94bc125c3cc</anchor>
      <arglist>(Model *m, double emin, double emax, double sigma, double gamma, double w0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign_velocities</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a0a5cb1e977b6c3800b2dfae41a8c04a6</anchor>
      <arglist>(Float temperature)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>aa3e974603ad69de7378b140de8dc71e9</anchor>
      <arglist>(const ParticleIndexes &amp;sc, double dt) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_is_simulation_particle</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a68a05f36118444c0e0afb1c2ce98b7b2</anchor>
      <arglist>(ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Float</type>
      <name>get_kinetic_energy</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a0782ee416ed4e3885a7edba324e1445a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Float</type>
      <name>get_kinetic_temperature</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a10d12aa2a502198b159a84d33d997035</anchor>
      <arglist>(Float ekinetic) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rescale_velocities</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a3519d92cba5ffac12ee5846a1b3d61c4</anchor>
      <arglist>(Float rescale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_velocity_cap</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a4af44ce176e7b374f5113ce43b345646</anchor>
      <arglist>(Float velocity_cap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>ac1eaac2752f5f4e042320500bc9fcbbc</anchor>
      <arglist>(const ParticleIndexes &amp;ps) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cap_velocity_component</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a839fb25aefb7d685bf2a8c777c048a99</anchor>
      <arglist>(Float &amp;vel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate_coordinates</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>af060e5e297ad3e6b35de01133dab2c0a</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>propagate_velocities</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>aebf18749657dcaad6ad378f51b2a7b43</anchor>
      <arglist>(const ParticleIndexes &amp;ps, double step_size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>degrees_of_freedom_</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>ad4c3aada1b651f808d33e45ac142ec89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Float</type>
      <name>velocity_cap_</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a85abb384e2bda9e6b8fcb176b7dc123f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FloatKey</type>
      <name>vs_</name>
      <anchorfile>classIMP_1_1spb_1_1MolecularDynamicsWithWte.html</anchorfile>
      <anchor>a01404fe1683a97d9bc5603103efd0a03</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::MonteCarloWithWte</name>
    <filename>classIMP_1_1spb_1_1MonteCarloWithWte.html</filename>
    <base>IMP::core::MonteCarlo</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>do_step</name>
      <anchorfile>classIMP_1_1spb_1_1MonteCarloWithWte.html</anchorfile>
      <anchor>aead2597b0b13c868364090f83980e69c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1MonteCarloWithWte.html</anchorfile>
      <anchor>a63fbbe0782870f2ba04e99abf0992046</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::NuisanceRangeModifier</name>
    <filename>classIMP_1_1spb_1_1NuisanceRangeModifier.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1spb_1_1NuisanceRangeModifier.html</anchorfile>
      <anchor>a97af4894cc160c28f899b74c2e89d3fe</anchor>
      <arglist>(IMP::Model *m, IMP::ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1NuisanceRangeModifier.html</anchorfile>
      <anchor>a628311d01f21051386442d5bb0f2fe71</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1NuisanceRangeModifier.html</anchorfile>
      <anchor>a8f220ce0066ea2b0bfbecf9ec8b19d93</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1spb_1_1NuisanceRangeModifier.html</anchorfile>
      <anchor>a908a926e51c1d4d31519118433683e5b</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1NuisanceRangeModifier.html</anchorfile>
      <anchor>a9ef012045a0073af25842a532a33d8c3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::PbcBoxedMover</name>
    <filename>classIMP_1_1spb_1_1PbcBoxedMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>PbcBoxedMover</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedMover.html</anchorfile>
      <anchor>a131c4510cd00aaa4229c157b4bfd601d</anchor>
      <arglist>(Particle *p, Particles ps, Float max_tr, algebra::Vector3Ds centers, algebra::Transformation3Ds transformations, Particle *px, Particle *py, Particle *pz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedMover.html</anchorfile>
      <anchor>a9e70e4714329a55e800ca95258bc8f14</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedMover.html</anchorfile>
      <anchor>acc63a31c24c853b99bc0c6d1529a2415</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedMover.html</anchorfile>
      <anchor>a17af145045d3e272125806b0efcc7ed5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedMover.html</anchorfile>
      <anchor>ad47b63f89f8012b3ffd95211f8bc26b9</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::PbcBoxedRigidBodyMover</name>
    <filename>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>PbcBoxedRigidBodyMover</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</anchorfile>
      <anchor>a71a75e5182b952b8fb0b4a4e5ca49eeb</anchor>
      <arglist>(core::RigidBody d, Particles ps, Float max_translation, Float max_rotation, algebra::Vector3Ds centers, algebra::Transformation3Ds transformations, Particle *px, Particle *py, Particle *pz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</anchorfile>
      <anchor>a4b98f808ee6f4f48d8228513f10cabb9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</anchorfile>
      <anchor>a900b146ae495ae7757da722b1a477107</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</anchorfile>
      <anchor>ad9d016ff8f2fae64204338adc2513410</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1spb_1_1PbcBoxedRigidBodyMover.html</anchorfile>
      <anchor>a73db58690aa69a2491ec420f345ea7b6</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::RigidBodyNewMover</name>
    <filename>classIMP_1_1spb_1_1RigidBodyNewMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyNewMover</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyNewMover.html</anchorfile>
      <anchor>af43951b1f208f16ca904dd5bb845f30f</anchor>
      <arglist>(core::RigidBody d, Float max_x_translation, Float max_y_translation, Float max_z_translation, Float max_rot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyNewMover.html</anchorfile>
      <anchor>a2b9f66d24c831710eaa31dc4e585edf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyNewMover.html</anchorfile>
      <anchor>a5e079dfd12ef07f77dadae35f9f256f8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyNewMover.html</anchorfile>
      <anchor>a847648eaf1edbf4f2817567e9ee4b66e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyNewMover.html</anchorfile>
      <anchor>a4767ba2d36c25707263a0c0f2c9d92bf</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::RigidBodyPackingScore</name>
    <filename>classIMP_1_1spb_1_1RigidBodyPackingScore.html</filename>
    <base>IMP::PairScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>a1a5190b3fd84786ff14566b87f71aa8f</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>ac8306153744c70728c28195e78bc6ddb</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>a15cccb6e5f73f6f7005995f7462a0577</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexPair &amp;p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>aba6c70d08e36991a9ebeb9c90454e0ae</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>ac8e9049c6e64812f883e324697d5a29d</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1spb_1_1RigidBodyPackingScore.html</anchorfile>
      <anchor>a60290274c5e321e080531585977f1ac9</anchor>
      <arglist>(Model *m, const ParticleIndexPairs &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::RMSDMetric</name>
    <filename>classIMP_1_1spb_1_1RMSDMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1RMSDMetric.html</anchorfile>
      <anchor>a69236b51b869fb6652b4268c7f8c215a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::SameParticlePairFilter</name>
    <filename>classIMP_1_1spb_1_1SameParticlePairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1SameParticlePairFilter.html</anchorfile>
      <anchor>a7f4062dc2880a74bff524c3f6dfbb0bf</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1spb_1_1SameParticlePairFilter.html</anchorfile>
      <anchor>a93f06f1a2d8e80791321fa096a08ecac</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1SameParticlePairFilter.html</anchorfile>
      <anchor>a4ef95ddfb6b4d4b27c74d86498c81e01</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::SameRigidBodyPairFilter</name>
    <filename>classIMP_1_1spb_1_1SameRigidBodyPairFilter.html</filename>
    <base>IMP::PairPredicate</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1SameRigidBodyPairFilter.html</anchorfile>
      <anchor>a354ce81a4d5ebbad0028660537cd7b57</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_value_index</name>
      <anchorfile>classIMP_1_1spb_1_1SameRigidBodyPairFilter.html</anchorfile>
      <anchor>add61f73b92419512960c8d9e901c216c</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexPair &amp;p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1SameRigidBodyPairFilter.html</anchorfile>
      <anchor>a06c4b88d18e97ee2df626855a3567ee4</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::TiltSingletonScore</name>
    <filename>classIMP_1_1spb_1_1TiltSingletonScore.html</filename>
    <base>IMP::SingletonScore</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a3a80bfed17479205093bdb892c7af638</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_if_good_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a42080d888c9f04dd613898cb3afe038d</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, double max, unsigned int lower_bound, unsigned int upper_bound) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>evaluate_index</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a67fde55f6a70f6c0c444dfe9ea8a17b7</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndex p, DerivativeAccumulator *da) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>aa4ccd2141448e64c9f2a247385382690</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_delta</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a6b3e14eb145fab969750662186f252b0</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, const std::vector&lt; unsigned &gt; &amp;indexes, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate_indexes_scores</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a0e7a1fead6f4c29c0b810851968eeca3</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;p, DerivativeAccumulator *da, unsigned int lower_bound, unsigned int upper_bound, std::vector&lt; double &gt; &amp;score) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1TiltSingletonScore.html</anchorfile>
      <anchor>a29d625ac5350e407a0f75baeb94ff7dd</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::TransformationSymmetry</name>
    <filename>classIMP_1_1spb_1_1TransformationSymmetry.html</filename>
    <base>IMP::SingletonModifier</base>
    <member kind="function">
      <type></type>
      <name>TransformationSymmetry</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>abbd918cd369d5b315141934b20ac0868</anchor>
      <arglist>(algebra::Transformation3D t, Particle *px, Particle *py, Particle *pz)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_index</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>ae943600ae937b0f3b30d312af33babd6</anchor>
      <arglist>(IMP::Model *m, IMP::ParticleIndex p) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply_indexes</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>afe16cd8112da31f163fe67e2de5b0cc0</anchor>
      <arglist>(Model *m, const ParticleIndexes &amp;o, unsigned int lower_bound, unsigned int upper_bound) const overridefinal</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>a9ab9a05cceaf83ed48ee3b9a053a9eff</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_outputs</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>ac96d4863caa65fe5fc21d8d727636f09</anchor>
      <arglist>(IMP::Model *m, const IMP::ParticleIndexes &amp;pis) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1TransformationSymmetry.html</anchorfile>
      <anchor>ace73cf7a2f119cdfe73911e25a702712</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::TwoStateGoModelRestraint</name>
    <filename>classIMP_1_1spb_1_1TwoStateGoModelRestraint.html</filename>
    <base>IMP::Restraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1TwoStateGoModelRestraint.html</anchorfile>
      <anchor>ad7ec415885c8ac3ca98aadeca26a73a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1TwoStateGoModelRestraint.html</anchorfile>
      <anchor>ae85a46b2c7144b0103effac2d53f7662</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1TwoStateGoModelRestraint.html</anchorfile>
      <anchor>a7ae206ec555800493787a24ba0c8fdce</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::spb::UniformBoundedRestraint</name>
    <filename>classIMP_1_1spb_1_1UniformBoundedRestraint.html</filename>
    <base>IMP::spb::ISDRestraint</base>
    <member kind="function">
      <type></type>
      <name>UniformBoundedRestraint</name>
      <anchorfile>classIMP_1_1spb_1_1UniformBoundedRestraint.html</anchorfile>
      <anchor>ad778f9dd80c267b5860c40d80a7d6da9</anchor>
      <arglist>(Particle *p, FloatKey fk, Particle *a, Particle *b)</arglist>
    </member>
    <member kind="function">
      <type>IMP::ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1spb_1_1UniformBoundedRestraint.html</anchorfile>
      <anchor>ab729c18b1a70b66bc0841a9a5b1d4452</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1spb_1_1UniformBoundedRestraint.html</anchorfile>
      <anchor>a87b071effd27529147cbac5de93691ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>unprotected_evaluate</name>
      <anchorfile>classIMP_1_1spb_1_1UniformBoundedRestraint.html</anchorfile>
      <anchor>aaf72b7cc4c37b6242af4c42d903e0328</anchor>
      <arglist>(IMP::DerivativeAccumulator *accum) const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::statistics</name>
    <filename>namespaceIMP_1_1statistics.html</filename>
    <class kind="class">IMP::statistics::ChiSquareMetric</class>
    <class kind="class">IMP::statistics::ConfigurationSetRMSDMetric</class>
    <class kind="class">IMP::statistics::ConfigurationSetXYZEmbedding</class>
    <class kind="class">IMP::statistics::Embedding</class>
    <class kind="class">IMP::statistics::EuclideanMetric</class>
    <class kind="class">IMP::statistics::HistogramD</class>
    <class kind="class">IMP::statistics::Metric</class>
    <class kind="class">IMP::statistics::ParticleEmbedding</class>
    <class kind="class">IMP::statistics::PartitionalClustering</class>
    <class kind="class">IMP::statistics::PartitionalClusteringWithCenter</class>
    <class kind="class">IMP::statistics::RecursivePartitionalClusteringEmbedding</class>
    <class kind="class">IMP::statistics::RecursivePartitionalClusteringMetric</class>
    <class kind="class">IMP::statistics::VectorDEmbedding</class>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Embedding &gt; &gt;</type>
      <name>Embeddings</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a2e77da82dce88ee51ea0a461212c82f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Embedding &gt; &gt;</type>
      <name>EmbeddingsTemp</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aa1b9c40712d53ed04bc5ab0bf0daae8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::Pointer&lt; Metric &gt; &gt;</type>
      <name>Metrics</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a3054bf7e087ffb8226c43c353f1f0612</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IMP::Vector&lt; IMP::WeakPointer&lt; Metric &gt; &gt;</type>
      <name>MetricsTemp</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aef5f11d78d5f7418a0190a33cd4a8414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_bin_based_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a2ccc84a060553c450d17b18bce708436</anchor>
      <arglist>(Embedding *embed, double side)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_centrality_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a033ac0d9e680dc724a782c219391dc5c</anchor>
      <arglist>(Metric *d, double far, int k)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_centrality_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a19eae7a22f877948e0582872cb42e760</anchor>
      <arglist>(Embedding *d, double far, int k)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_connectivity_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ad6ac98231fe5e79078029b821e5d2417</anchor>
      <arglist>(Embedding *embed, double dist)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_connectivity_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a7fa3185254b0cf61b8baa2b04e3461c6</anchor>
      <arglist>(Metric *metric, double dist)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_diameter_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ae34d7252a499c1f7a6948fa5283f88a6</anchor>
      <arglist>(Metric *d, double maximum_diameter)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClustering *</type>
      <name>create_gromos_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a739c887af40a30b27d360f052f3d001b</anchor>
      <arglist>(Metric *d, double cutoff)</arglist>
    </member>
    <member kind="function">
      <type>PartitionalClusteringWithCenter *</type>
      <name>create_lloyds_kmeans</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a84d813a09204387c1b2af83e6fb5e014</anchor>
      <arglist>(Embedding *embedding, unsigned int k, unsigned int iterations)</arglist>
    </member>
    <member kind="function">
      <type>algebra::VectorKDs</type>
      <name>get_centroids</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>ac31b5cbb1a3c6722e837341ce0ee872d</anchor>
      <arglist>(Embedding *d, PartitionalClustering *pc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_quantile</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>aeda69487ba39957469c1c8985bb58196</anchor>
      <arglist>(const Histogram1D &amp;h, double fraction)</arglist>
    </member>
    <member kind="function">
      <type>Ints</type>
      <name>get_representatives</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a974ae5760db93ab3cf0afced47455a29</anchor>
      <arglist>(Embedding *d, PartitionalClustering *pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>validate_partitional_clustering</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a5935bfa801d76e543494e701665dd173</anchor>
      <arglist>(PartitionalClustering *pc, unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a1e2a642bcb74e9332387644021a9fcb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a153cad4f8c32a9551ebf78497254dd74</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1statistics.html</anchorfile>
      <anchor>a8b63d350d23e96ecb962887d62c63b06</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::ChiSquareMetric</name>
    <filename>classIMP_1_1statistics_1_1ChiSquareMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function">
      <type>void</type>
      <name>add_configuration</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>ac47268fc9e8d36e3627cadb2bf26d3e1</anchor>
      <arglist>(Floats data, Floats stddev, double weight=1.0)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>do_get_weight</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>a969902672bd4844f24793b53eb5dce07</anchor>
      <arglist>(unsigned i) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_chi_square_experimental</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>ae4150aa50e755fbf186165f2fa896cfa</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_data</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>ab023b5384d40aaf6f2ae6c2b4ea683d3</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function">
      <type>Floats</type>
      <name>get_standard_deviation</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>a37136881e31f0eeac9112ff56c33d5a4</anchor>
      <arglist>(unsigned i) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1ChiSquareMetric.html</anchorfile>
      <anchor>a80160eec7589afaa6dbb6a4d6bdacc03</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::ConfigurationSetRMSDMetric</name>
    <filename>classIMP_1_1statistics_1_1ConfigurationSetRMSDMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationSetRMSDMetric</name>
      <anchorfile>classIMP_1_1statistics_1_1ConfigurationSetRMSDMetric.html</anchorfile>
      <anchor>a4a6365b3e39347130d20397aef8a8bad</anchor>
      <arglist>(ConfigurationSet *cs, SingletonContainer *sc, bool align=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1ConfigurationSetRMSDMetric.html</anchorfile>
      <anchor>a28a30cacd860baa44d16a632e893ee31</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::ConfigurationSetXYZEmbedding</name>
    <filename>classIMP_1_1statistics_1_1ConfigurationSetXYZEmbedding.html</filename>
    <base>IMP::statistics::Embedding</base>
    <member kind="function">
      <type></type>
      <name>ConfigurationSetXYZEmbedding</name>
      <anchorfile>classIMP_1_1statistics_1_1ConfigurationSetXYZEmbedding.html</anchorfile>
      <anchor>a59f36e0f094ff45193a47939d8d93cd1</anchor>
      <arglist>(ConfigurationSet *cs, SingletonContainerAdaptor pi, bool align=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1ConfigurationSetXYZEmbedding.html</anchorfile>
      <anchor>ac7e3e2a8b5e8048d7e75312ec611c228</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::Embedding</name>
    <filename>classIMP_1_1statistics_1_1Embedding.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::EuclideanMetric</name>
    <filename>classIMP_1_1statistics_1_1EuclideanMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1EuclideanMetric.html</anchorfile>
      <anchor>a2285eb83641ba468733c1dc3fa65d0ac</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::HistogramD</name>
    <filename>classIMP_1_1statistics_1_1HistogramD.html</filename>
    <templarg>D</templarg>
    <templarg></templarg>
    <base>IMP::algebra::GeometricPrimitiveD</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classIMP_1_1statistics_1_1HistogramD.html</anchorfile>
      <anchor>a592798e458c9acaded04b9ed7a9a95d7</anchor>
      <arglist>(const algebra::VectorD&lt; D &gt; &amp;x, double weight=1)</arglist>
    </member>
    <member kind="function">
      <type>HistogramD&lt; D &gt;</type>
      <name>get_probability_distribution_function</name>
      <anchorfile>classIMP_1_1statistics_1_1HistogramD.html</anchorfile>
      <anchor>a86b8234abcce13c45107b89edddda2c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_total_count</name>
      <anchorfile>classIMP_1_1statistics_1_1HistogramD.html</anchorfile>
      <anchor>ae2f6058d17f50df68e93324c14ffc8fb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::Metric</name>
    <filename>classIMP_1_1statistics_1_1Metric.html</filename>
    <base>IMP::Object</base>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::ParticleEmbedding</name>
    <filename>classIMP_1_1statistics_1_1ParticleEmbedding.html</filename>
    <base>IMP::statistics::Embedding</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1ParticleEmbedding.html</anchorfile>
      <anchor>ab6822358cddc553d0e16905722a8b20c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::PartitionalClustering</name>
    <filename>classIMP_1_1statistics_1_1PartitionalClustering.html</filename>
    <base>IMP::Object</base>
    <member kind="function" virtualness="pure">
      <type>virtual const Ints &amp;</type>
      <name>get_cluster</name>
      <anchorfile>classIMP_1_1statistics_1_1PartitionalClustering.html</anchorfile>
      <anchor>aa22bdacfa291281a21f0fa3e14590021</anchor>
      <arglist>(unsigned int cluster_index) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>get_cluster_representative</name>
      <anchorfile>classIMP_1_1statistics_1_1PartitionalClustering.html</anchorfile>
      <anchor>a74052d991c15c31431cb820081aaec41</anchor>
      <arglist>(unsigned int cluster_index) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::PartitionalClusteringWithCenter</name>
    <filename>classIMP_1_1statistics_1_1PartitionalClusteringWithCenter.html</filename>
    <base>IMP::statistics::PartitionalClustering</base>
    <member kind="function">
      <type>const Ints &amp;</type>
      <name>get_cluster</name>
      <anchorfile>classIMP_1_1statistics_1_1PartitionalClusteringWithCenter.html</anchorfile>
      <anchor>a9531b1d4aeca4b5cbdbd6ba7b2530329</anchor>
      <arglist>(unsigned int i) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_cluster_representative</name>
      <anchorfile>classIMP_1_1statistics_1_1PartitionalClusteringWithCenter.html</anchorfile>
      <anchor>a234660a38fa7f48e202ff06fa3c09877</anchor>
      <arglist>(unsigned int i) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1PartitionalClusteringWithCenter.html</anchorfile>
      <anchor>af0fa1d9e9ed02cc10ecfda8c5ad0ed2b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::RecursivePartitionalClusteringEmbedding</name>
    <filename>classIMP_1_1statistics_1_1RecursivePartitionalClusteringEmbedding.html</filename>
    <base>IMP::statistics::Embedding</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1RecursivePartitionalClusteringEmbedding.html</anchorfile>
      <anchor>acf076ee7169764e17f39bb36164be35c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::RecursivePartitionalClusteringMetric</name>
    <filename>classIMP_1_1statistics_1_1RecursivePartitionalClusteringMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1RecursivePartitionalClusteringMetric.html</anchorfile>
      <anchor>a6a0c8fa95d119254e0acfcb2cad560e6</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::statistics::VectorDEmbedding</name>
    <filename>classIMP_1_1statistics_1_1VectorDEmbedding.html</filename>
    <base>IMP::statistics::Embedding</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1statistics_1_1VectorDEmbedding.html</anchorfile>
      <anchor>a5ed1368248335c0e99a8ab536364b224</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::symmetry</name>
    <filename>namespaceIMP_1_1symmetry.html</filename>
    <class kind="class">IMP::symmetry::BallMover</class>
    <class kind="class">IMP::symmetry::RigidBodyMover</class>
    <member kind="function">
      <type>std::string</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1symmetry.html</anchorfile>
      <anchor>aa9eee4c6e77adccf9cb251411c7c08a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1symmetry.html</anchorfile>
      <anchor>a187872f9e40f744dc1381c20a707386e</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1symmetry.html</anchorfile>
      <anchor>a32ae3f1069a90d1421a9babf0cc23cec</anchor>
      <arglist>(std::string file_name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::symmetry::BallMover</name>
    <filename>classIMP_1_1symmetry_1_1BallMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>BallMover</name>
      <anchorfile>classIMP_1_1symmetry_1_1BallMover.html</anchorfile>
      <anchor>aa31ed479ef4b404d06981ac681f99667</anchor>
      <arglist>(Particle *p, Particles ps, Float max_tr, algebra::Vector3Ds ctrs, algebra::Transformation3Ds trs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1symmetry_1_1BallMover.html</anchorfile>
      <anchor>a59745e95c1ce4d2d7e593748edb327ea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1symmetry_1_1BallMover.html</anchorfile>
      <anchor>ad636d0e87af31805133bd5e37913f1d2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1symmetry_1_1BallMover.html</anchorfile>
      <anchor>af44f0c93d8bb4a56851fa7918a9e456b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1symmetry_1_1BallMover.html</anchorfile>
      <anchor>ae4ab0f4afcaf579bf7fea85a91ee371b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::symmetry::RigidBodyMover</name>
    <filename>classIMP_1_1symmetry_1_1RigidBodyMover.html</filename>
    <base>IMP::core::MonteCarloMover</base>
    <member kind="function">
      <type></type>
      <name>RigidBodyMover</name>
      <anchorfile>classIMP_1_1symmetry_1_1RigidBodyMover.html</anchorfile>
      <anchor>ad9dca2981893121c227c5bc4f46b74fe</anchor>
      <arglist>(core::RigidBody d, Particles ps, Float max_tr, Float max_ang, algebra::Vector3Ds ctrs, algebra::Transformation3Ds trs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ::IMP::VersionInfo</type>
      <name>get_version_info</name>
      <anchorfile>classIMP_1_1symmetry_1_1RigidBodyMover.html</anchorfile>
      <anchor>a32e40d9add968b9f0e2365328d15cf58</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual ModelObjectsTemp</type>
      <name>do_get_inputs</name>
      <anchorfile>classIMP_1_1symmetry_1_1RigidBodyMover.html</anchorfile>
      <anchor>ad0850d14bee9c83c61b4ccf50853fd81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual core::MonteCarloMoverResult</type>
      <name>do_propose</name>
      <anchorfile>classIMP_1_1symmetry_1_1RigidBodyMover.html</anchorfile>
      <anchor>ae6e6722b8dfc01f3f0671d182a2ca9f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>do_reject</name>
      <anchorfile>classIMP_1_1symmetry_1_1RigidBodyMover.html</anchorfile>
      <anchor>abf89e33a2b1c59f1659f0144e3934946</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>IMP::test</name>
    <filename>namespaceIMP_1_1test.html</filename>
    <class kind="class">IMP::test::ApplicationTestCase</class>
    <class kind="class">IMP::test::DirectorObjectChecker</class>
    <class kind="class">IMP::test::RefCountChecker</class>
    <class kind="class">IMP::test::TestCase</class>
    <member kind="function">
      <type>def</type>
      <name>get_data_path</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a58e6fdab96df35f3676e377e6e40bf29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_example_path</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a2081cada6aa7fd9bdd74c00750062f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_name</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>abdee14d20e0dd16229ada59f93063c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_module_version</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a07d1582603e79e3dc4ea4d379ca12eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>main</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a4a97f26b15582620bf0a709ace14c158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>numerical_derivative</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a6abc30f44a8687c009eee938487f6e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>temporary_directory</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>a538c961625e35321814b9fd46b9a9649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>temporary_working_directory</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>afd3984aba933a51e99aa57605fe457d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>xyz_numerical_derivatives</name>
      <anchorfile>namespaceIMP_1_1test.html</anchorfile>
      <anchor>add0898592e753ff788681750a08dc82a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::test::ApplicationTestCase</name>
    <filename>classIMP_1_1test_1_1ApplicationTestCase.html</filename>
    <base>IMP::test::TestCase</base>
    <member kind="function">
      <type>def</type>
      <name>assertApplicationExitedCleanly</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>ad7c12d3e9d4db2430a8c12ca10f3fe6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>import_python_application</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>a97a5367e496ca8a8ec37aa597a785dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>read_shell_commands</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>a3310a6a54fa38ba5d5e4cab2a9ff6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_application</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>a65694fef1c421502adddce2d7a46ba80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_python_application</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>ae465282db18fa818276052affbcaa9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_script</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>a6c1de518350a5ba35f6cce8e173ac6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_shell_command</name>
      <anchorfile>classIMP_1_1test_1_1ApplicationTestCase.html</anchorfile>
      <anchor>a7970ff514e48d40b1a861cf7615da6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertClassNames</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a4e86efa823aa88e12351aebb1d24477f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertCompileFails</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a99db9598519cfc2002a9b8d7ee6f66f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertFunctionNames</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a516b1d3a04401c00b811ca9f150892a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertNotImplemented</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a1406d2e8b5790db4cad4499ddf266e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertNumPyArrayEqual</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a61e975078c13c75abd11828425dca1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertRaisesInternalException</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>afd3db37c0fd63fd8844f7b1baa18f0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertRaisesUsageException</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a25df1e6ebb433d945e6aebb5425b7c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertSequenceAlmostEqual</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a394ca52e92bb0159fd7f94e3ac4211da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertShow</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a6e144b9ce9fdcd902110c17d426b5d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertValueObjects</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a07c23159373e76fcf0a43a74dee06f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>assertXYZDerivativesInTolerance</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a8d59130cce646ccd7c3ae6ed0c581e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_runnable_python_module</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>ae88ce7531b103052b834b340a291ae50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_standard_object_methods</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a9803bf3c434d70002dcc452a7a9da5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_unary_function_deriv</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a54d5f0d56a1a81c1db38928a3f15e3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>check_unary_function_min</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a0cad2bdd57b60df2619d185db662ae00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_particles_in_box</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>aaf2f3ceed42b3327e165a3c7776deb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>create_point_particle</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a81157fafb9c054e3445ce0ebab9d43e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>failure_probability</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a8ce92e4b3a531f0ac836c52220de5497</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_input_file_name</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a7cfb567ea7760a166d7a3035db38cbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_magnitude</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>ae3d3a66dd7843ecb2e512e47c0a1e18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>get_tmp_file_name</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>abcb2265c473593530391abb8e403bed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>open_input_file</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>ae77af252096ac2427065327c8741881b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>particle_distance</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a78fd8fa11f62b1e23aa9055772af853f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>probabilistic_check</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a2029b4087d5c4fdc45b9128fab30ffec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>randomize_particles</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a41c462f88032234d4671444706c1c138</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_example</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>a4b6bdc5802cedb2f3ebffcc72f47f14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>def</type>
      <name>run_python_module</name>
      <anchorfile>classIMP_1_1test_1_1TestCase.html</anchorfile>
      <anchor>ad096d2f23e85f61d4d01179bf63fb175</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::test::DirectorObjectChecker</name>
    <filename>classIMP_1_1test_1_1DirectorObjectChecker.html</filename>
    <member kind="function">
      <type>def</type>
      <name>assert_number</name>
      <anchorfile>classIMP_1_1test_1_1DirectorObjectChecker.html</anchorfile>
      <anchor>a2c14b4d05ba43b3b3112be5ea2b64385</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::test::RefCountChecker</name>
    <filename>classIMP_1_1test_1_1RefCountChecker.html</filename>
    <member kind="function">
      <type>def</type>
      <name>assert_number</name>
      <anchorfile>classIMP_1_1test_1_1RefCountChecker.html</anchorfile>
      <anchor>afb099dbff97ca6052604f08eeb7e6c9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMP::test::TestCase</name>
    <filename>classIMP_1_1test_1_1TestCase.html</filename>
  </compound>
  <compound kind="namespace">
    <name>IMP_npctransport</name>
    <filename>namespaceIMP__npctransport.html</filename>
  </compound>
  <compound kind="class">
    <name>write_a_metric::MyMetric</name>
    <filename>classwrite__a__metric_1_1MyMetric.html</filename>
    <base>IMP::statistics::Metric</base>
    <member kind="function">
      <type>def</type>
      <name>__init__</name>
      <anchorfile>classwrite__a__metric_1_1MyMetric.html</anchorfile>
      <anchor>acf93321442238be95baa2681fe22422b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>algebra</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/algebra/</path>
    <filename>dir_4d4e8ded5596ebf1c58afc7e6757b3f5.html</filename>
    <file>algebra/geometry.py</file>
    <file>grid.cpp</file>
    <file>grid_space.py</file>
  </compound>
  <compound kind="dir">
    <name>algebra</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/algebra/</path>
    <filename>dir_45c13356ed4116de3c6bc3c636eb2b91.html</filename>
    <file>algebra_config.h</file>
    <file>algebra_macros.h</file>
    <file>BoundingBoxD.h</file>
    <file>Cone3D.h</file>
    <file>algebra/connolly_surface.h</file>
    <file>algebra/constants.h</file>
    <file>Cylinder3D.h</file>
    <file>algebra/distance.h</file>
    <file>eigen_analysis.h</file>
    <file>Ellipsoid3D.h</file>
    <file>endian.h</file>
    <file>Gaussian3D.h</file>
    <file>geometric_alignment.h</file>
    <file>geometric_primitive_macros.h</file>
    <file>GeometricPrimitiveD.h</file>
    <file>grid_embeddings.h</file>
    <file>grid_indexes.h</file>
    <file>grid_ranges.h</file>
    <file>grid_storages.h</file>
    <file>grid_utility.h</file>
    <file>GridD.h</file>
    <file>algebra/io.h</file>
    <file>Line3D.h</file>
    <file>LinearFit.h</file>
    <file>ParabolicFit.h</file>
    <file>Plane3D.h</file>
    <file>algebra/python_only.h</file>
    <file>ReferenceFrame3D.h</file>
    <file>Reflection3D.h</file>
    <file>Rotation2D.h</file>
    <file>Rotation3D.h</file>
    <file>Segment3D.h</file>
    <file>shortest_segment.h</file>
    <file>Sphere3D.h</file>
    <file>SphereD.h</file>
    <file>SpherePatch3D.h</file>
    <file>SphericalVector3D.h</file>
    <file>standard_grids.h</file>
    <file>Torus3D.h</file>
    <file>Transformation2D.h</file>
    <file>Transformation3D.h</file>
    <file>Triangle3D.h</file>
    <file>UnitSimplexD.h</file>
    <file>algebra/utility.h</file>
    <file>Vector2D.h</file>
    <file>Vector3D.h</file>
    <file>vector_generators.h</file>
    <file>vector_metrics.h</file>
    <file>vector_search.h</file>
    <file>VectorBaseD.h</file>
    <file>VectorD.h</file>
  </compound>
  <compound kind="dir">
    <name>algebra</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/algebra/</path>
    <filename>dir_d3e6e38a939cd84fbb4bfae06bbb3122.html</filename>
    <file>algebra/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>atom</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/atom/</path>
    <filename>dir_c591f0e5c0eb7a530728e6c13f6e6039.html</filename>
    <file>assess_dope.py</file>
    <file>brownian_statistics.py</file>
    <file>cg_pdb.py</file>
    <file>charmm_forcefield.py</file>
    <file>charmm_forcefield_verbose.py</file>
    <file>charmm_topology.py</file>
    <file>Diffusion_decorator.py</file>
    <file>dope_and_excluded_volume.cpp</file>
    <file>edit_molecular_hierarchy.py</file>
    <file>load_protein_restrain_bonds.py</file>
    <file>markers.py</file>
    <file>molecular_hierarchy.py</file>
    <file>atom/multiresolution.py</file>
    <file>multistate.py</file>
    <file>rigid_brownian_dynamics.py</file>
    <file>score_protein_with_ligand.py</file>
    <file>structure_from_sequence.py</file>
  </compound>
  <compound kind="dir">
    <name>atom</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/atom/</path>
    <filename>dir_dfa9f2370ba6438c371434cc9d463e69.html</filename>
    <file>alignment.h</file>
    <file>angle_decorators.h</file>
    <file>AngleSingletonScore.h</file>
    <file>atom/Atom.h</file>
    <file>atom_config.h</file>
    <file>atom_macros.h</file>
    <file>BerendsenThermostatOptimizerState.h</file>
    <file>bond_decorators.h</file>
    <file>bond_graph.h</file>
    <file>BondedPairFilter.h</file>
    <file>BondEndpointsRefiner.h</file>
    <file>BondPairContainer.h</file>
    <file>BondSingletonScore.h</file>
    <file>BrownianDynamics.h</file>
    <file>BrownianDynamicsTAMD.h</file>
    <file>CAAngleRestraint.h</file>
    <file>CADihedralRestraint.h</file>
    <file>CenterOfMass.h</file>
    <file>Chain.h</file>
    <file>Charged.h</file>
    <file>charmm_segment_topology.h</file>
    <file>charmm_topology.h</file>
    <file>CHARMMAtom.h</file>
    <file>CHARMMParameters.h</file>
    <file>CHARMMStereochemistryRestraint.h</file>
    <file>atom/constants.h</file>
    <file>Copy.h</file>
    <file>CoulombPairScore.h</file>
    <file>CoverBond.h</file>
    <file>Diffusion.h</file>
    <file>dihedrals.h</file>
    <file>DihedralSingletonScore.h</file>
    <file>atom/distance.h</file>
    <file>Domain.h</file>
    <file>DopePairScore.h</file>
    <file>element.h</file>
    <file>estimates.h</file>
    <file>EzRestraint.h</file>
    <file>force_fields.h</file>
    <file>ForceFieldParameters.h</file>
    <file>Fragment.h</file>
    <file>HelixRestraint.h</file>
    <file>atom/Hierarchy.h</file>
    <file>hierarchy_tools.h</file>
    <file>ImproperSingletonScore.h</file>
    <file>LangevinThermostatOptimizerState.h</file>
    <file>LennardJones.h</file>
    <file>LennardJonesPairScore.h</file>
    <file>LoopStatisticalPairScore.h</file>
    <file>Mass.h</file>
    <file>mmcif.h</file>
    <file>mol2.h</file>
    <file>atom/MolecularDynamics.h</file>
    <file>Molecule.h</file>
    <file>OrientedSoapPairScore.h</file>
    <file>pdb.h</file>
    <file>protein_ligand_score.h</file>
    <file>atom/python_only.h</file>
    <file>RemoveRigidMotionOptimizerState.h</file>
    <file>RemoveTranslationOptimizerState.h</file>
    <file>Representation.h</file>
    <file>Residue.h</file>
    <file>SameResiduePairFilter.h</file>
    <file>secondary_structure_reader.h</file>
    <file>SecondaryStructureResidue.h</file>
    <file>Selection.h</file>
    <file>Simulator.h</file>
    <file>smoothing_functions.h</file>
    <file>SoapPairFilter.h</file>
    <file>State.h</file>
    <file>StereochemistryPairFilter.h</file>
    <file>StructureSource.h</file>
    <file>TAMDCentroid.h</file>
    <file>TAMDParticle.h</file>
    <file>VelocityScalingOptimizerState.h</file>
  </compound>
  <compound kind="dir">
    <name>atom</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/atom/</path>
    <filename>dir_3bc0e5108501a9a3b08a9ada2bf1665a.html</filename>
    <file>atom/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>bayesianem</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/bayesianem/</path>
    <filename>dir_4555865c270edf34b104846b364a477c.html</filename>
    <file>bayesianem_config.h</file>
    <file>bayesianem/GaussianEMRestraint.h</file>
    <file>bayesianem/utilities.h</file>
  </compound>
  <compound kind="dir">
    <name>bayesianem</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/bayesianem/</path>
    <filename>dir_8e671a632f41116bf3bab888005f7e1c.html</filename>
    <file>bayesianem/__init__.py</file>
    <file>gaussians2ellipsoids.py</file>
    <file>movers.py</file>
    <file>bayesianem/restraint.py</file>
  </compound>
  <compound kind="dir">
    <name>benchmark</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/benchmark/</path>
    <filename>dir_0408d473e89f55f6e178ca633ef76ed7.html</filename>
    <file>benchmark_config.h</file>
    <file>benchmark_macros.h</file>
    <file>Profiler.h</file>
    <file>benchmark/utility.h</file>
  </compound>
  <compound kind="dir">
    <name>benchmark</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/benchmark/</path>
    <filename>dir_5322dd7c0d2c5b49c1a1f03262d9533f.html</filename>
    <file>benchmark/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>cgal</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cgal/</path>
    <filename>dir_6fd1f97bf44a6deb803e1055479ee150.html</filename>
    <file>cgal_config.h</file>
  </compound>
  <compound kind="dir">
    <name>cgal</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/cgal/</path>
    <filename>dir_9bb59ab5937edf93c6ea111818bb5e9b.html</filename>
    <file>cgal/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>cnmultifit</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/cnmultifit/</path>
    <filename>dir_e81fe3a9ac9dfdffe1e677578bbcd6b6.html</filename>
    <file>AlignSymmetric.h</file>
    <file>cn_rmsd.h</file>
    <file>cnmultifit_config.h</file>
    <file>CnSymmAxisDetector.h</file>
    <file>MolCnSymmAxisDetector.h</file>
    <file>symmetric_multifit.h</file>
    <file>symmetry_utils.h</file>
  </compound>
  <compound kind="dir">
    <name>cnmultifit</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/cnmultifit/</path>
    <filename>dir_d1a1071e16a43565fe53aaff4bf60ccf.html</filename>
    <file>cnmultifit/__init__.py</file>
    <file>build.py</file>
    <file>chimera_models.py</file>
    <file>cnmultifit/param.py</file>
    <file>rmsd.py</file>
    <file>surface.py</file>
  </compound>
  <compound kind="dir">
    <name>container</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/container/</path>
    <filename>dir_66751ffb6eb01b31a0723f012846dc20.html</filename>
    <file>bipartite_nonbonded_interactions.py</file>
    <file>connectivity.py</file>
    <file>filter_close_pairs.py</file>
    <file>nonbonded_interactions.py</file>
    <file>container/restrain_in_sphere.py</file>
    <file>statistical.py</file>
  </compound>
  <compound kind="dir">
    <name>container</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/container/</path>
    <filename>dir_c4262fba2fa697caecb9b0f09fe87eb8.html</filename>
    <file>AllBipartitePairContainer.h</file>
    <file>AllPairContainer.h</file>
    <file>CloseBipartitePairContainer.h</file>
    <file>ClosePairContainer.h</file>
    <file>ConnectingPairContainer.h</file>
    <file>ConsecutivePairContainer.h</file>
    <file>container_config.h</file>
    <file>DistributePairsScoreState.h</file>
    <file>DistributeQuadsScoreState.h</file>
    <file>DistributeSingletonsScoreState.h</file>
    <file>DistributeTripletsScoreState.h</file>
    <file>DynamicListPairContainer.h</file>
    <file>DynamicListQuadContainer.h</file>
    <file>DynamicListSingletonContainer.h</file>
    <file>DynamicListTripletContainer.h</file>
    <file>EventPairsOptimizerState.h</file>
    <file>EventQuadsOptimizerState.h</file>
    <file>EventSingletonsOptimizerState.h</file>
    <file>EventTripletsOptimizerState.h</file>
    <file>container/generic.h</file>
    <file>InContainerPairFilter.h</file>
    <file>InContainerQuadFilter.h</file>
    <file>InContainerSingletonFilter.h</file>
    <file>InContainerTripletFilter.h</file>
    <file>ListPairContainer.h</file>
    <file>ListQuadContainer.h</file>
    <file>ListSingletonContainer.h</file>
    <file>ListTripletContainer.h</file>
    <file>MinimumPairRestraint.h</file>
    <file>MinimumPairScore.h</file>
    <file>MinimumQuadRestraint.h</file>
    <file>MinimumQuadScore.h</file>
    <file>MinimumSingletonRestraint.h</file>
    <file>MinimumSingletonScore.h</file>
    <file>MinimumTripletRestraint.h</file>
    <file>MinimumTripletScore.h</file>
    <file>PairContainerSet.h</file>
    <file>PairContainerStatistics.h</file>
    <file>PairsConstraint.h</file>
    <file>PairsOptimizerState.h</file>
    <file>PairsRestraint.h</file>
    <file>PredicatePairsRestraint.h</file>
    <file>PredicateQuadsRestraint.h</file>
    <file>PredicateSingletonsRestraint.h</file>
    <file>PredicateTripletsRestraint.h</file>
    <file>QuadContainerSet.h</file>
    <file>QuadContainerStatistics.h</file>
    <file>QuadsConstraint.h</file>
    <file>QuadsOptimizerState.h</file>
    <file>QuadsRestraint.h</file>
    <file>SingletonContainerSet.h</file>
    <file>SingletonContainerStatistics.h</file>
    <file>SingletonsConstraint.h</file>
    <file>SingletonsOptimizerState.h</file>
    <file>SingletonsRestraint.h</file>
    <file>TripletContainerSet.h</file>
    <file>TripletContainerStatistics.h</file>
    <file>TripletsConstraint.h</file>
    <file>TripletsOptimizerState.h</file>
    <file>TripletsRestraint.h</file>
  </compound>
  <compound kind="dir">
    <name>container</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/container/</path>
    <filename>dir_916b707dcb383ae687f7e1af0b124c8f.html</filename>
    <file>container/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>core</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/core/</path>
    <filename>dir_b910820ead82a4c5215790b954cc555b.html</filename>
    <file>bounding_box_restraint.py</file>
    <file>connectivity_restraint.py</file>
    <file>cover_particles.py</file>
    <file>custom_hierarchy.py</file>
    <file>excluded_volume.py</file>
    <file>linear_and_harmonic_scores.py</file>
    <file>model_numpy.py</file>
    <file>move_aware_mc.py</file>
    <file>ms_connectivity_restraint.py</file>
    <file>optimize_balls.py</file>
    <file>pair_restraint.py</file>
    <file>randomize_rigid_body.py</file>
    <file>restrain_diameter.py</file>
    <file>core/restrain_in_sphere.py</file>
    <file>restrain_minimum_distance.py</file>
    <file>rigid_bodies.py</file>
    <file>rigid_collisions.py</file>
    <file>simple.cpp</file>
    <file>simple.py</file>
    <file>core/symmetry.py</file>
    <file>XYZ_Decorator.py</file>
    <file>XYZR_Decorator.py</file>
  </compound>
  <compound kind="dir">
    <name>core</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/core/</path>
    <filename>dir_c9e0ff693e9f435c792ac83970203335.html</filename>
    <file>AngleRestraint.h</file>
    <file>AngleTripletScore.h</file>
    <file>core/BallMover.h</file>
    <file>blame.h</file>
    <file>BoundingBox3DSingletonScore.h</file>
    <file>BoundingSphere3DSingletonScore.h</file>
    <file>BoxSweepClosePairsFinder.h</file>
    <file>CentroidOfRefined.h</file>
    <file>ChecksScoreState.h</file>
    <file>ChildrenRefiner.h</file>
    <file>ClosedCubicSpline.h</file>
    <file>ClosePairsFinder.h</file>
    <file>ClosePairsPairScore.h</file>
    <file>core/ConjugateGradients.h</file>
    <file>ConnectivityRestraint.h</file>
    <file>ConstantRestraint.h</file>
    <file>core_config.h</file>
    <file>Cosine.h</file>
    <file>CoverRefined.h</file>
    <file>DataObject.h</file>
    <file>DerivativesFromRefined.h</file>
    <file>DerivativesToRefined.h</file>
    <file>DiameterRestraint.h</file>
    <file>DihedralRestraint.h</file>
    <file>direction.h</file>
    <file>DirectionMover.h</file>
    <file>core/DistancePairScore.h</file>
    <file>DistanceRestraint.h</file>
    <file>DistanceToSingletonScore.h</file>
    <file>ExcludedVolumeRestraint.h</file>
    <file>FixedRefiner.h</file>
    <file>core/Gaussian.h</file>
    <file>core/generic.h</file>
    <file>GenericAttributeSingletonScore.h</file>
    <file>GridClosePairsFinder.h</file>
    <file>core/Harmonic.h</file>
    <file>core/HarmonicLowerBound.h</file>
    <file>core/HarmonicUpperBound.h</file>
    <file>HarmonicWell.h</file>
    <file>core/Hierarchy.h</file>
    <file>LeavesRefiner.h</file>
    <file>Linear.h</file>
    <file>LogNormalMover.h</file>
    <file>MCCGSampler.h</file>
    <file>MinimumRestraint.h</file>
    <file>model_statistics.h</file>
    <file>MonteCarlo.h</file>
    <file>MonteCarloMover.h</file>
    <file>MoveStatisticsScoreState.h</file>
    <file>MSConnectivityRestraint.h</file>
    <file>MultipleBinormalRestraint.h</file>
    <file>NearestNeighborsClosePairsFinder.h</file>
    <file>NeighborsTable.h</file>
    <file>NormalMover.h</file>
    <file>core/OpenCubicSpline.h</file>
    <file>pair_predicates.h</file>
    <file>PairConstraint.h</file>
    <file>PairRestraint.h</file>
    <file>PeriodicOptimizerState.h</file>
    <file>predicates.h</file>
    <file>provenance.h</file>
    <file>core/python_only.h</file>
    <file>quad_predicates.h</file>
    <file>QuadConstraint.h</file>
    <file>QuadraticClosePairsFinder.h</file>
    <file>QuadRestraint.h</file>
    <file>RefinedPairsPairScore.h</file>
    <file>RestraintsScoringFunction.h</file>
    <file>rigid_bodies.h</file>
    <file>rigid_body_geometries.h</file>
    <file>RigidBodyAnglePairScore.h</file>
    <file>RigidBodyDistancePairScore.h</file>
    <file>core/RigidBodyMover.h</file>
    <file>RigidBodyTunneler.h</file>
    <file>RigidBodyUmbrella.h</file>
    <file>RigidClosePairsFinder.h</file>
    <file>SerialMover.h</file>
    <file>singleton_predicates.h</file>
    <file>SingletonConstraint.h</file>
    <file>SingletonRestraint.h</file>
    <file>SphereDistancePairScore.h</file>
    <file>StatisticalPairScore.h</file>
    <file>SteepestDescent.h</file>
    <file>SubsetMover.h</file>
    <file>Surface.h</file>
    <file>core/SurfaceDistancePairScore.h</file>
    <file>SurfaceMover.h</file>
    <file>SurfaceSymmetryConstraint.h</file>
    <file>SurfaceTetheredChain.h</file>
    <file>core/symmetry.h</file>
    <file>TableRefiner.h</file>
    <file>Transform.h</file>
    <file>TransformedDistancePairScore.h</file>
    <file>triplet_predicates.h</file>
    <file>TripletConstraint.h</file>
    <file>TripletRestraint.h</file>
    <file>TruncatedHarmonic.h</file>
    <file>Typed.h</file>
    <file>TypedPairScore.h</file>
    <file>core/utility.h</file>
    <file>VolumeRestraint.h</file>
    <file>WeightedDerivativesToRefined.h</file>
    <file>WeightedSum.h</file>
    <file>WeightedSumOfExponential.h</file>
    <file>XYZ.h</file>
    <file>XYZR.h</file>
  </compound>
  <compound kind="dir">
    <name>core</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/core/</path>
    <filename>dir_0ea4c1b9c7739dee908cbe74759a2464.html</filename>
    <file>core/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>display</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/display/</path>
    <filename>dir_88f99ac0a2b178ddea43beec2b135b65.html</filename>
    <file>Color.h</file>
    <file>Colored.h</file>
    <file>declare_Geometry.h</file>
    <file>display_config.h</file>
    <file>display_macros.h</file>
    <file>FilterGeometry.h</file>
    <file>geometry.h</file>
    <file>geometry_macros.h</file>
    <file>GeometryProcessor.h</file>
    <file>GeometrySet.h</file>
    <file>LogOptimizerState.h</file>
    <file>particle_geometry.h</file>
    <file>primitive_geometries.h</file>
    <file>PymolWriter.h</file>
    <file>display/python_only.h</file>
    <file>restraint_geometry.h</file>
    <file>Writer.h</file>
    <file>writer_macros.h</file>
  </compound>
  <compound kind="dir">
    <name>display</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/display/</path>
    <filename>dir_b10eb5a10b302621fe920fcb2b20fdd4.html</filename>
    <file>basic_geometry.py</file>
    <file>display_log.py</file>
    <file>displaying_ensembles.py</file>
    <file>show_particles_as_spheres.py</file>
  </compound>
  <compound kind="dir">
    <name>display</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/display/</path>
    <filename>dir_8b75a0d4f03c59c0ce75bae26711a04d.html</filename>
    <file>display/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>doc</name>
    <path>/private/tmp/nightly-build-83334/build/doc/</path>
    <filename>dir_e68e8157741866f444e17edd764ebbae.html</filename>
    <dir>examples</dir>
  </compound>
  <compound kind="dir">
    <name>dof</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/dof/</path>
    <filename>dir_c6fd9fe7b2c9315442a2a97ff0304f24.html</filename>
    <file>pmi/dof/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>domino</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/domino/</path>
    <filename>dir_5bc35ff94b68f204e669d4468624d402.html</filename>
    <file>custom_filter.py</file>
    <file>domino_approach.py</file>
    <file>interactive.py</file>
    <file>interactive_with_containers.py</file>
    <file>marina_party.py</file>
    <file>doc/examples/domino/merge_tree.py</file>
    <file>domino/multiscale.py</file>
    <file>restraint_cache.py</file>
    <file>rigid_body_excluded_volume.py</file>
    <file>save_assignments.py</file>
    <file>six_particles_optimization.py</file>
  </compound>
  <compound kind="dir">
    <name>domino</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/domino/</path>
    <filename>dir_1bb7ef261568c80df9bf617a251108ae.html</filename>
    <file>analysis.h</file>
    <file>Assignment.h</file>
    <file>assignment_containers.h</file>
    <file>assignment_tables.h</file>
    <file>BranchAndBoundSampler.h</file>
    <file>DependencyScoreState.h</file>
    <file>DiscreteSampler.h</file>
    <file>domino_config.h</file>
    <file>domino_macros.h</file>
    <file>DominoSampler.h</file>
    <file>interactive.h</file>
    <file>Order.h</file>
    <file>particle_states.h</file>
    <file>Slice.h</file>
    <file>Subset.h</file>
    <file>subset_filters.h</file>
    <file>subset_graphs.h</file>
    <file>subset_scores.h</file>
    <file>domino/utility.h</file>
  </compound>
  <compound kind="dir">
    <name>domino</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/domino/</path>
    <filename>dir_fa216f73d3127fdab2c05e7496822fdc.html</filename>
    <file>domino/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>em</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em/</path>
    <filename>dir_a29a870c848eca6d4ffe60947606d1f4.html</filename>
    <file>BayesEM3D.h</file>
    <file>CoarseCC.h</file>
    <file>CoarseCCatIntervals.h</file>
    <file>CoarseConvolution.h</file>
    <file>converters.h</file>
    <file>def.h</file>
    <file>density_map_volumetrics.h</file>
    <file>density_utilities.h</file>
    <file>DensityFillingRestraint.h</file>
    <file>DensityHeader.h</file>
    <file>DensityMap.h</file>
    <file>em_config.h</file>
    <file>em/embedding.h</file>
    <file>EMReaderWriter.h</file>
    <file>envelope_penetration.h</file>
    <file>EnvelopeFitRestraint.h</file>
    <file>EnvelopePenetrationRestraint.h</file>
    <file>EnvelopeScore.h</file>
    <file>exp.h</file>
    <file>FitRestraint.h</file>
    <file>FitRestraintBayesEM3D.h</file>
    <file>header_converters.h</file>
    <file>ImageHeader.h</file>
    <file>KernelParameters.h</file>
    <file>MapDistanceTransform.h</file>
    <file>MapReaderWriter.h</file>
    <file>masking.h</file>
    <file>MRCReaderWriter.h</file>
    <file>PCAAligner.h</file>
    <file>PCAFitRestraint.h</file>
    <file>rigid_fitting.h</file>
    <file>SampledDensityMap.h</file>
    <file>SpiderHeader.h</file>
    <file>SpiderReaderWriter.h</file>
    <file>SurfaceShellDensityMap.h</file>
    <file>Voxel.h</file>
    <file>XplorReaderWriter.h</file>
  </compound>
  <compound kind="dir">
    <name>em</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/em/</path>
    <filename>dir_8012b5fe27d1740a3acf0772581287c2.html</filename>
    <file>analyze_convergence.py</file>
    <file>cube.py</file>
    <file>fit_restraint.py</file>
    <file>generate_density_map_of_fixed_dimension.py</file>
    <file>local_fitting.py</file>
    <file>numpy_data.py</file>
    <file>pdb2density.py</file>
  </compound>
  <compound kind="dir">
    <name>em</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/em/</path>
    <filename>dir_2c6b25cecff8073c86c1ee4e4ccf8737.html</filename>
    <file>em/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>em2d</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/em2d/</path>
    <filename>dir_064f56e8ea1f836883a4ff3fdf56f912.html</filename>
    <file>clustering_of_pdb_models.py</file>
    <file>collision_cross_section.py</file>
    <file>em_images_conversion.py</file>
    <file>optimize_em2d_with_montecarlo.py</file>
  </compound>
  <compound kind="dir">
    <name>em2d</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/em2d/</path>
    <filename>dir_0da9b89e07717e7a9f30500656735eda.html</filename>
    <file>align2D.h</file>
    <file>CollisionCrossSection.h</file>
    <file>domino_filter_tables.h</file>
    <file>domino_filters.h</file>
    <file>domino_particle_states.h</file>
    <file>DummyRestraint.h</file>
    <file>em2d_config.h</file>
    <file>em2d/Em2DRestraint.h</file>
    <file>FFToperations.h</file>
    <file>filenames_manipulation.h</file>
    <file>hierarchical_clustering.h</file>
    <file>Image.h</file>
    <file>image_processing.h</file>
    <file>ImageReaderWriter.h</file>
    <file>JPGImageReaderWriter.h</file>
    <file>model_interaction.h</file>
    <file>opencv_interface.h</file>
    <file>d/PCAFitRestraint.h</file>
    <file>PolarResamplingParameters.h</file>
    <file>project.h</file>
    <file>ProjectionFinder.h</file>
    <file>ProjectionMask.h</file>
    <file>ProjectionParameters.h</file>
    <file>RegistrationResult.h</file>
    <file>RelativePositionMover.h</file>
    <file>RigidBodiesImageFitRestraint.h</file>
    <file>scores2D.h</file>
    <file>SpiderImageReaderWriter.h</file>
    <file>TIFFImageReaderWriter.h</file>
  </compound>
  <compound kind="dir">
    <name>em2d</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/em2d/</path>
    <filename>dir_30635c42748eadfef820cf8221a21407.html</filename>
    <file>em2d/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>EMageFit</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/EMageFit/</path>
    <filename>dir_209509d0ff9ddd55962eef3f77c5fba7.html</filename>
    <dir>imp_general</dir>
    <file>EMageFit/__init__.py</file>
    <file>argminmax.py</file>
    <file>buildxlinks.py</file>
    <file>csv_related.py</file>
    <file>database.py</file>
    <file>domino_model.py</file>
    <file>monte_carlo.py</file>
    <file>restraints.py</file>
    <file>sampling.py</file>
    <file>solutions_io.py</file>
    <file>utility.py</file>
  </compound>
  <compound kind="dir">
    <name>example</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/example/</path>
    <filename>dir_5c9d032e5395cedd7e5d0554ae3a423b.html</filename>
    <file>range_restriction.py</file>
  </compound>
  <compound kind="dir">
    <name>example</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/example/</path>
    <filename>dir_37e65d9de6b238af2dfaa2a734db40c1.html</filename>
    <file>counting.h</file>
    <file>creating_restraints.h</file>
    <file>example_config.h</file>
    <file>ExampleComplexRestraint.h</file>
    <file>ExampleConstraint.h</file>
    <file>ExampleDecorator.h</file>
    <file>ExampleObject.h</file>
    <file>ExamplePairScore.h</file>
    <file>ExampleRestraint.h</file>
    <file>ExampleSingletonModifier.h</file>
    <file>ExampleSubsetFilterTable.h</file>
    <file>ExampleTemplateClass.h</file>
    <file>ExampleUnaryFunction.h</file>
    <file>randomizing.h</file>
  </compound>
  <compound kind="dir">
    <name>example</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/example/</path>
    <filename>dir_5489c68de3dc37a68a97e130d87a485f.html</filename>
    <file>example/__init__.py</file>
    <file>randomize.py</file>
  </compound>
  <compound kind="dir">
    <name>examples</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/</path>
    <filename>dir_687bdf86e8e626c2168c3a2d1c125116.html</filename>
    <dir>algebra</dir>
    <dir>atom</dir>
    <dir>container</dir>
    <dir>core</dir>
    <dir>display</dir>
    <dir>domino</dir>
    <dir>em</dir>
    <dir>em2d</dir>
    <dir>example</dir>
    <dir>gsl</dir>
    <dir>kernel</dir>
    <dir>kmeans</dir>
    <dir>misc</dir>
    <dir>modeller</dir>
    <dir>mpi</dir>
    <dir>nestor</dir>
    <dir>npctransport</dir>
    <dir>parallel</dir>
    <dir>pmi</dir>
    <dir>rmf</dir>
    <dir>rotamer</dir>
    <dir>saxs</dir>
    <dir>statistics</dir>
    <dir>symmetry</dir>
  </compound>
  <compound kind="dir">
    <name>foxs</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/foxs/</path>
    <filename>dir_f4bfb52b085529d73c86c9bef1b728df.html</filename>
    <file>foxs_config.h</file>
  </compound>
  <compound kind="dir">
    <name>foxs</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/foxs/</path>
    <filename>dir_fe2673e5cef8d8fb512c03bbb767b536.html</filename>
    <file>foxs/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>gsl</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/gsl/</path>
    <filename>dir_6ae04ef5d9a25ddcc3b65465336c74fd.html</filename>
    <file>simplex.py</file>
  </compound>
  <compound kind="dir">
    <name>gsl</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/gsl/</path>
    <filename>dir_879c00b8cc3222fa251a5f4cba496b61.html</filename>
    <file>gsl/ConjugateGradients.h</file>
    <file>gsl_config.h</file>
    <file>GSLOptimizer.h</file>
    <file>QuasiNewton.h</file>
    <file>Simplex.h</file>
  </compound>
  <compound kind="dir">
    <name>gsl</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/gsl/</path>
    <filename>dir_e504110d371bb382623f9c89e11dcfa7.html</filename>
    <file>gsl/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>IMP</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/</path>
    <filename>dir_1a9326a490ecc32bc4f7f5f0eab62276.html</filename>
    <dir>algebra</dir>
    <dir>atom</dir>
    <dir>bayesianem</dir>
    <dir>benchmark</dir>
    <dir>cgal</dir>
    <dir>cnmultifit</dir>
    <dir>container</dir>
    <dir>core</dir>
    <dir>display</dir>
    <dir>domino</dir>
    <dir>em</dir>
    <dir>em2d</dir>
    <dir>example</dir>
    <dir>foxs</dir>
    <dir>gsl</dir>
    <dir>integrative_docking</dir>
    <dir>isd</dir>
    <dir>kinematics</dir>
    <dir>kmeans</dir>
    <dir>misc</dir>
    <dir>mpi</dir>
    <dir>multi_state</dir>
    <dir>multifit</dir>
    <dir>npc</dir>
    <dir>npctransport</dir>
    <dir>pmi</dir>
    <dir>pmi1</dir>
    <dir>rmf</dir>
    <dir>rotamer</dir>
    <dir>saxs</dir>
    <dir>score_functor</dir>
    <dir>scratch</dir>
    <dir>spb</dir>
    <dir>statistics</dir>
    <dir>symmetry</dir>
    <dir>test</dir>
    <file>algebra.h</file>
    <file>Array.h</file>
    <file>Atom.h</file>
    <file>AttributeOptimizer.h</file>
    <file>base_macros.h</file>
    <file>base_types.h</file>
    <file>bayesianem.h</file>
    <file>benchmark.h</file>
    <file>bracket_macros.h</file>
    <file>cache.h</file>
    <file>cgal.h</file>
    <file>check_macros.h</file>
    <file>cnmultifit.h</file>
    <file>comparison_macros.h</file>
    <file>compiler_macros.h</file>
    <file>Configuration.h</file>
    <file>ConfigurationSet.h</file>
    <file>constants.h</file>
    <file>Constraint.h</file>
    <file>ConstVector.h</file>
    <file>container.h</file>
    <file>container_base.h</file>
    <file>container_macros.h</file>
    <file>core.h</file>
    <file>CreateLogContext.h</file>
    <file>Decorator.h</file>
    <file>decorator_macros.h</file>
    <file>dependency_graph.h</file>
    <file>deprecation.h</file>
    <file>deprecation_macros.h</file>
    <file>DerivativeAccumulator.h</file>
    <file>display.h</file>
    <file>domino.h</file>
    <file>doxygen_macros.h</file>
    <file>em.h</file>
    <file>em2d.h</file>
    <file>enums.h</file>
    <file>example.h</file>
    <file>exception.h</file>
    <file>file.h</file>
    <file>Flag.h</file>
    <file>flags.h</file>
    <file>FloatIndex.h</file>
    <file>foxs.h</file>
    <file>functor.h</file>
    <file>generic.h</file>
    <file>graph_macros.h</file>
    <file>gsl.h</file>
    <file>hash.h</file>
    <file>hash_macros.h</file>
    <file>Index.h</file>
    <file>input_output.h</file>
    <file>InputAdaptor.h</file>
    <file>integrative_docking.h</file>
    <file>io.h</file>
    <file>isd.h</file>
    <file>kernel_config.h</file>
    <file>Key.h</file>
    <file>kinematics.h</file>
    <file>KMeans.h</file>
    <file>live_objects.h</file>
    <file>log.h</file>
    <file>log_macros.h</file>
    <file>macros.h</file>
    <file>math.h</file>
    <file>misc.h</file>
    <file>Model.h</file>
    <file>model_object_helpers.h</file>
    <file>ModelObject.h</file>
    <file>mpi.h</file>
    <file>multi_state.h</file>
    <file>multifit.h</file>
    <file>NonCopyable.h</file>
    <file>npc.h</file>
    <file>npctransport.h</file>
    <file>Object.h</file>
    <file>object_cast.h</file>
    <file>object_macros.h</file>
    <file>Optimizer.h</file>
    <file>OptimizerState.h</file>
    <file>pair_macros.h</file>
    <file>PairContainer.h</file>
    <file>PairDerivativeModifier.h</file>
    <file>PairModifier.h</file>
    <file>PairPredicate.h</file>
    <file>PairScore.h</file>
    <file>Particle.h</file>
    <file>particle_index.h</file>
    <file>pmi.h</file>
    <file>pmi1.h</file>
    <file>Pointer.h</file>
    <file>python_only.h</file>
    <file>quad_macros.h</file>
    <file>QuadContainer.h</file>
    <file>QuadDerivativeModifier.h</file>
    <file>QuadModifier.h</file>
    <file>QuadPredicate.h</file>
    <file>QuadScore.h</file>
    <file>RAII.h</file>
    <file>raii_macros.h</file>
    <file>random.h</file>
    <file>random_utils.h</file>
    <file>ref_counted_macros.h</file>
    <file>Refiner.h</file>
    <file>Restraint.h</file>
    <file>RestraintInfo.h</file>
    <file>RestraintSet.h</file>
    <file>rmf.h</file>
    <file>rotamer.h</file>
    <file>Sampler.h</file>
    <file>saxs.h</file>
    <file>scoped.h</file>
    <file>score_functor.h</file>
    <file>ScoreAccumulator.h</file>
    <file>ScoreState.h</file>
    <file>ScoringFunction.h</file>
    <file>scratch.h</file>
    <file>set_map_macros.h</file>
    <file>SetCheckState.h</file>
    <file>SetLogState.h</file>
    <file>Showable.h</file>
    <file>showable_macros.h</file>
    <file>singleton_macros.h</file>
    <file>SingletonContainer.h</file>
    <file>SingletonDerivativeModifier.h</file>
    <file>SingletonModifier.h</file>
    <file>SingletonPredicate.h</file>
    <file>SingletonScore.h</file>
    <file>spb.h</file>
    <file>Statistics.h</file>
    <file>swap_macros.h</file>
    <file>swig_macros.h</file>
    <file>symmetry.h</file>
    <file>thread_macros.h</file>
    <file>threads.h</file>
    <file>triplet_macros.h</file>
    <file>TripletContainer.h</file>
    <file>TripletDerivativeModifier.h</file>
    <file>TripletModifier.h</file>
    <file>TripletPredicate.h</file>
    <file>TripletScore.h</file>
    <file>tuple_macros.h</file>
    <file>types.h</file>
    <file>UnaryFunction.h</file>
    <file>Undecorator.h</file>
    <file>utility.h</file>
    <file>utility_macros.h</file>
    <file>Value.h</file>
    <file>value_macros.h</file>
    <file>Vector.h</file>
    <file>VersionInfo.h</file>
    <file>warning_macros.h</file>
    <file>WarningContext.h</file>
    <file>WeakPointer.h</file>
  </compound>
  <compound kind="dir">
    <name>IMP</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/</path>
    <filename>dir_08b5b520fc1ada15e908cc822ca55b15.html</filename>
    <dir>algebra</dir>
    <dir>atom</dir>
    <dir>bayesianem</dir>
    <dir>benchmark</dir>
    <dir>cgal</dir>
    <dir>cnmultifit</dir>
    <dir>container</dir>
    <dir>core</dir>
    <dir>display</dir>
    <dir>domino</dir>
    <dir>em</dir>
    <dir>em2d</dir>
    <dir>EMageFit</dir>
    <dir>example</dir>
    <dir>foxs</dir>
    <dir>gsl</dir>
    <dir>integrative_docking</dir>
    <dir>isd</dir>
    <dir>kinematics</dir>
    <dir>kmeans</dir>
    <dir>misc</dir>
    <dir>mmcif</dir>
    <dir>modeller</dir>
    <dir>mpi</dir>
    <dir>multi_state</dir>
    <dir>multifit</dir>
    <dir>nestor</dir>
    <dir>npc</dir>
    <dir>npctransport</dir>
    <dir>parallel</dir>
    <dir>pepdock</dir>
    <dir>pmi</dir>
    <dir>pmi1</dir>
    <dir>rmf</dir>
    <dir>rotamer</dir>
    <dir>sampcon</dir>
    <dir>saxs</dir>
    <dir>saxs_merge</dir>
    <dir>score_functor</dir>
    <dir>scratch</dir>
    <dir>spatiotemporal</dir>
    <dir>spb</dir>
    <dir>statistics</dir>
    <dir>symmetry</dir>
    <dir>test</dir>
    <file>__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>imp_general</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/EMageFit/imp_general/</path>
    <filename>dir_27208eca0178891bcb1562bd9f268082.html</filename>
    <file>EMageFit/imp_general/__init__.py</file>
    <file>alignments.py</file>
    <file>comparisons.py</file>
    <file>io.py</file>
    <file>movement.py</file>
    <file>EMageFit/imp_general/representation.py</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/private/tmp/nightly-build-83334/build/include/</path>
    <filename>dir_d44c64559bbebec7f509842c48db8b23.html</filename>
    <dir>IMP</dir>
    <file>IMP.h</file>
  </compound>
  <compound kind="dir">
    <name>integrative_docking</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/integrative_docking/</path>
    <filename>dir_85a8b5e74e115ef3c1168213b5d6b868.html</filename>
    <file>integrative_docking_config.h</file>
  </compound>
  <compound kind="dir">
    <name>integrative_docking</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/integrative_docking/</path>
    <filename>dir_83b5018f868ee57c8814b15d1392a3f9.html</filename>
    <file>integrative_docking/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>io</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi1/io/</path>
    <filename>dir_16c91d94412f7562478b570d66e1166f.html</filename>
    <file>pmi1/io/__init__.py</file>
    <file>/io/crosslink.py</file>
    <file>utilities.py</file>
    <file>xltable.py</file>
  </compound>
  <compound kind="dir">
    <name>io</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/io/</path>
    <filename>dir_074ab6b255194f6cd173743f1e23adf8.html</filename>
    <file>pmi/io/__init__.py</file>
    <file>io/crosslink.py</file>
  </compound>
  <compound kind="dir">
    <name>isd</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/isd/</path>
    <filename>dir_632b5540d1ceb599bf6538941057a5a6.html</filename>
    <file>AmbiguousNOERestraint.h</file>
    <file>AmbiguousRestraint.h</file>
    <file>AtomicCrossLinkMSRestraint.h</file>
    <file>bivariate_functions.h</file>
    <file>CrossLinkData.h</file>
    <file>CrossLinkMSRestraint.h</file>
    <file>CysteineCrossLinkData.h</file>
    <file>CysteineCrossLinkRestraint.h</file>
    <file>isd/distribution.h</file>
    <file>em_utilities.h</file>
    <file>FNormal.h</file>
    <file>FretData.h</file>
    <file>FretRestraint.h</file>
    <file>FStudentT.h</file>
    <file>GammaPrior.h</file>
    <file>GaussianAnchorEMRestraint.h</file>
    <file>isd/GaussianEMRestraint.h</file>
    <file>GaussianProcessInterpolation.h</file>
    <file>GaussianProcessInterpolationRestraint.h</file>
    <file>GaussianRestraint.h</file>
    <file>HybridMonteCarlo.h</file>
    <file>isd_config.h</file>
    <file>isd/ISDRestraint.h</file>
    <file>JeffreysRestraint.h</file>
    <file>LognormalAmbiguousRestraint.h</file>
    <file>LognormalRestraint.h</file>
    <file>LogWrapper.h</file>
    <file>MarginalHBondRestraint.h</file>
    <file>MarginalNOERestraint.h</file>
    <file>isd/MolecularDynamics.h</file>
    <file>MolecularDynamicsMover.h</file>
    <file>MultivariateFNormalSufficient.h</file>
    <file>NOERestraint.h</file>
    <file>NormalSigmaPCRestraint.h</file>
    <file>Nuisance.h</file>
    <file>PenalizedComplexityPrior.h</file>
    <file>RepulsiveDistancePairScore.h</file>
    <file>ResidueProteinProximityRestraint.h</file>
    <file>Scale.h</file>
    <file>StudentTRestraint.h</file>
    <file>Switching.h</file>
    <file>TALOSRestraint.h</file>
    <file>UniformPrior.h</file>
    <file>univariate_functions.h</file>
    <file>vonMises.h</file>
    <file>vonMisesKappaConjugateRestraint.h</file>
    <file>vonMisesKappaJeffreysRestraint.h</file>
    <file>vonMisesSufficient.h</file>
    <file>Weight.h</file>
    <file>WeightMover.h</file>
    <file>WeightRestraint.h</file>
  </compound>
  <compound kind="dir">
    <name>isd</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/isd/</path>
    <filename>dir_a155f79b2078c1ce3923f427f271a53d.html</filename>
    <file>isd/__init__.py</file>
    <file>isd/Analysis.py</file>
    <file>create_gmm.py</file>
    <file>demux_trajs.py</file>
    <file>Entry.py</file>
    <file>gmm_tools.py</file>
    <file>History.py</file>
    <file>Replica.py</file>
    <file>shared_functions.py</file>
    <file>Statistics.py</file>
    <file>TALOSReader.py</file>
    <file>TBLReader.py</file>
    <file>TuneRex.py</file>
    <file>utils.py</file>
  </compound>
  <compound kind="dir">
    <name>kernel</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/kernel/</path>
    <filename>dir_019db91aaba5d39af45014ff9cb3c364.html</filename>
    <file>basic_optimization.py</file>
    <file>chain.py</file>
    <file>dependency_graph.py</file>
    <file>flags.cpp</file>
    <file>flags.py</file>
    <file>graph.py</file>
    <file>log.py</file>
    <file>setup.py</file>
    <file>write_a_restraint.py</file>
    <file>write_an_optimizer_state.py</file>
  </compound>
  <compound kind="dir">
    <name>kinematics</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kinematics/</path>
    <filename>dir_502006d625c66d8f5a3aadb680044406.html</filename>
    <file>CCDLoopClosure.h</file>
    <file>CompositeJoint.h</file>
    <file>DihedralMover.h</file>
    <file>directional_DOFs.h</file>
    <file>DOF.h</file>
    <file>DOFsSampler.h</file>
    <file>DOFValues.h</file>
    <file>FibrilSampler.h</file>
    <file>helpers.h</file>
    <file>Joint.h</file>
    <file>KinematicForest.h</file>
    <file>KinematicForestScoreState.h</file>
    <file>KinematicNode.h</file>
    <file>kinematics_config.h</file>
    <file>local_planners.h</file>
    <file>PrismaticJoint.h</file>
    <file>ProteinKinematics.h</file>
    <file>revolute_joints.h</file>
    <file>RevoluteJointMover.h</file>
    <file>RMSDClustering.h</file>
    <file>RRT.h</file>
    <file>TransformationJoint.h</file>
    <file>UniformBackboneSampler.h</file>
  </compound>
  <compound kind="dir">
    <name>kinematics</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/kinematics/</path>
    <filename>dir_095d623f4132acb8456d2b5990b1fb8a.html</filename>
    <file>kinematics/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>kmeans</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/kmeans/</path>
    <filename>dir_7b0a352b51be93a7a7de2df107244996.html</filename>
    <file>kmeans_example.py</file>
  </compound>
  <compound kind="dir">
    <name>kmeans</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/kmeans/</path>
    <filename>dir_a7b5fb8b4e041b4cbebcc86c66e62289.html</filename>
    <file>kmeans/KMeans.h</file>
    <file>kmeans_config.h</file>
  </compound>
  <compound kind="dir">
    <name>kmeans</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/kmeans/</path>
    <filename>dir_70a36afecbdbb0f8195a2af11bcceb4d.html</filename>
    <file>kmeans/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>lib</name>
    <path>/private/tmp/nightly-build-83334/build/lib/</path>
    <filename>dir_97aefd0d527b934f1d99a682da8fe6a9.html</filename>
    <dir>IMP</dir>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/misc/</path>
    <filename>dir_62e382db3e94c3b2641cdffe230ce3cd.html</filename>
    <file>decay.py</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/misc/</path>
    <filename>dir_fbfb90fd33115838113f4e50ca75b239.html</filename>
    <file>CommonEndpointPairFilter.h</file>
    <file>CustomXYZR.h</file>
    <file>DecayPairContainerOptimizerState.h</file>
    <file>FreelyJointedChain.h</file>
    <file>LogPairScore.h</file>
    <file>LowestRefinedPairScore.h</file>
    <file>MetricClosePairsFinder.h</file>
    <file>misc_config.h</file>
    <file>SoftCylinderPairScore.h</file>
    <file>StateAdaptor.h</file>
    <file>WormLikeChain.h</file>
  </compound>
  <compound kind="dir">
    <name>misc</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/misc/</path>
    <filename>dir_8916f32f16e70511e4f86ef896861605.html</filename>
    <file>misc/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>mmcif</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/mmcif/</path>
    <filename>dir_89313e1e4b982b9620e9219ca3a41275.html</filename>
    <file>mmcif/__init__.py</file>
    <file>data.py</file>
    <file>mmcif/metadata.py</file>
    <file>mmcif/restraint.py</file>
    <file>mmcif/util.py</file>
  </compound>
  <compound kind="dir">
    <name>modeller</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/modeller/</path>
    <filename>dir_03323400a142722128e295b2d0ac677e.html</filename>
    <file>imp_restraints_in_modeller.py</file>
    <file>load_modeller_model.py</file>
    <file>modeller_restraints_in_imp.py</file>
  </compound>
  <compound kind="dir">
    <name>modeller</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/modeller/</path>
    <filename>dir_259fa6b535138f0dc02cddaa06b649a0.html</filename>
    <file>modeller/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>mpi</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/mpi/</path>
    <filename>dir_22dd9eda1cbe5b516f346bee9c940a00.html</filename>
    <file>temperature_rem.py</file>
  </compound>
  <compound kind="dir">
    <name>mpi</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/mpi/</path>
    <filename>dir_a3b01f92a4c0270742a7e7fb59dbc270.html</filename>
    <file>mpi_config.h</file>
    <file>ReplicaExchange.h</file>
  </compound>
  <compound kind="dir">
    <name>mpi</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/mpi/</path>
    <filename>dir_4c3848dec7b29abbea6c146756a859ce.html</filename>
    <file>mpi/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>multi_state</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multi_state/</path>
    <filename>dir_f7c4516666f0fd3ae60180629ba50be1.html</filename>
    <file>EnsembleGenerator.h</file>
    <file>multi_state_config.h</file>
    <file>MultiStateModel.h</file>
    <file>MultiStateModelScore.h</file>
    <file>SAXSMultiCombinationScore.h</file>
    <file>SAXSMultiStateModelScore.h</file>
    <file>stat_helpers.h</file>
  </compound>
  <compound kind="dir">
    <name>multi_state</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/multi_state/</path>
    <filename>dir_74d00a9299d20f3955378d078ea1b784.html</filename>
    <file>multi_state/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>multifit</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/multifit/</path>
    <filename>dir_e962c57b9effc4b06b7edc320487caa9.html</filename>
    <file>AlignmentParams.h</file>
    <file>anchor_graph.h</file>
    <file>anchor_utilities.h</file>
    <file>anchors_reader.h</file>
    <file>coarse_molecule.h</file>
    <file>ComplementarityRestraint.h</file>
    <file>multifit/connolly_surface.h</file>
    <file>DataPointsAssignment.h</file>
    <file>density_analysis.h</file>
    <file>DensityDataPoints.h</file>
    <file>ensemble_analysis.h</file>
    <file>fft_based_rigid_fitting.h</file>
    <file>fitting_solutions_reader_writer.h</file>
    <file>fitting_states.h</file>
    <file>fitting_tools.h</file>
    <file>fitting_utils.h</file>
    <file>FittingSolutionRecord.h</file>
    <file>GeometricHash.h</file>
    <file>merge_tree_utils.h</file>
    <file>multifit_config.h</file>
    <file>path_reader_writer.h</file>
    <file>pca_based_rigid_fitting.h</file>
    <file>protein_anchors_mapping_reader.h</file>
    <file>proteomics_em_alignment_atomic.h</file>
    <file>proteomics_reader.h</file>
    <file>multifit/RadiusOfGyrationRestraint.h</file>
    <file>RigidLeavesRefiner.h</file>
    <file>SettingsData.h</file>
    <file>weighted_excluded_volume.h</file>
    <file>WeightedExcludedVolumeRestraint.h</file>
  </compound>
  <compound kind="dir">
    <name>multifit</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/multifit/</path>
    <filename>dir_b08c3befd1b46902a919f9907c88ae59.html</filename>
    <file>multifit/__init__.py</file>
    <file>add_fit_rmsd.py</file>
    <file>align.py</file>
    <file>anchors.py</file>
    <file>cluster.py</file>
    <file>cluster_coarse.py</file>
    <file>fit_fft.py</file>
    <file>indexes.py</file>
    <file>lib/IMP/multifit/merge_tree.py</file>
    <file>models.py</file>
    <file>multifit/param.py</file>
    <file>multifit/proteomics.py</file>
    <file>reference.py</file>
    <file>refine_fft.py</file>
    <file>score.py</file>
    <file>segment.py</file>
    <file>transforms.py</file>
  </compound>
  <compound kind="dir">
    <name>nestor</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/nestor/</path>
    <filename>dir_f2072cd50249da3aad3c7845b14c1bd2.html</filename>
    <file>nude_modeling.py</file>
  </compound>
  <compound kind="dir">
    <name>nestor</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/nestor/</path>
    <filename>dir_9f01dd3d4ba2ff175bd9ec0e2fd77483.html</filename>
    <file>nestor/__init__.py</file>
    <file>compare_runs_v2_w_pyplot.py</file>
    <file>wrapper_v6.py</file>
    <file>xl_datasplitter.py</file>
  </compound>
  <compound kind="dir">
    <name>npc</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npc/</path>
    <filename>dir_f8a50e429cd5781784c42ca6e8795229.html</filename>
    <file>npc/CompositeRestraint.h</file>
    <file>MinimumSphereDistancePairScore.h</file>
    <file>npc_config.h</file>
    <file>ProteinLocalizationRestraint.h</file>
    <file>SlabWithPore.h</file>
    <file>SlabWithSphericalIndent.h</file>
    <file>SlabWithSphericalIndentGeometry.h</file>
    <file>SlabWithSphericalIndentMBMScore.h</file>
    <file>SlabWithToroidalPore.h</file>
    <file>SlabWithToroidalPoreGeometry.h</file>
    <file>SlabWithToroidalPoreGoPairScore.h</file>
    <file>SlabWithToroidalPoreMBMScore.h</file>
    <file>SphericalIndentSurfaceDepthPairScore.h</file>
    <file>ToroidalPoreSurfaceDepthPairScore.h</file>
  </compound>
  <compound kind="dir">
    <name>npc</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/npc/</path>
    <filename>dir_10a50e9531859973f5d86dd053e29f2d.html</filename>
    <file>npc/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>npctransport</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/npctransport/</path>
    <filename>dir_8be920b70865f94dfb7cc7a9ffdd255e.html</filename>
    <file>display_slab.py</file>
    <file>make_cfg.py</file>
    <file>slab.py</file>
  </compound>
  <compound kind="dir">
    <name>npctransport</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/npctransport/</path>
    <filename>dir_3166ba321d76c84b113a754e4c514eed.html</filename>
    <file>AnchorToCylindricalPorePairScore.h</file>
    <file>automatic_parameters.h</file>
    <file>avro.h</file>
    <file>Avro2PBReader.h</file>
    <file>AvroDataFileData.h</file>
    <file>BipartitePairsStatisticsOptimizerState.h</file>
    <file>BodyStatisticsOptimizerState.h</file>
    <file>BrownianDynamicsTAMDWithSlabSupport.h</file>
    <file>ChainStatisticsOptimizerState.h</file>
    <file>npctransport/enums.h</file>
    <file>ExcludeZRangeSingletonScore.h</file>
    <file>FGChain.h</file>
    <file>functor_linear_distance_pair_scores.h</file>
    <file>functor_linear_distance_pair_scores_typedefs.h</file>
    <file>GlobalStatisticsOptimizerState.h</file>
    <file>harmonic_distance_pair_scores.h</file>
    <file>HarmonicSpringSingletonScore.h</file>
    <file>initialize_positions.h</file>
    <file>npctransport/io.h</file>
    <file>linear_distance_pair_scores.h</file>
    <file>main.h</file>
    <file>npctransport_config.h</file>
    <file>npctransport_proto.fwd.h</file>
    <file>Parameter.h</file>
    <file>ParticleFactory.h</file>
    <file>ParticleTransportStatisticsOptimizerState.h</file>
    <file>PoreRadiusSingletonScore.h</file>
    <file>protobuf.h</file>
    <file>randomize_particles.h</file>
    <file>RelaxingSpring.h</file>
    <file>rmf_links.h</file>
    <file>Scoring.h</file>
    <file>SimulationData.h</file>
    <file>SitesGeometry.h</file>
    <file>SitesPairScore.h</file>
    <file>SitesPairScoreParameters.h</file>
    <file>SlabWithCylindricalPore.h</file>
    <file>SlabWithCylindricalPoreGeometry.h</file>
    <file>SlabWithCylindricalPorePairScore.h</file>
    <file>ransport/SlabWithPore.h</file>
    <file>ransport/SlabWithToroidalPore.h</file>
    <file>ransport/SlabWithToroidalPoreGeometry.h</file>
    <file>SlabWithToroidalPorePairScore.h</file>
    <file>npctransport/Statistics.h</file>
    <file>Transporting.h</file>
    <file>typedefs.h</file>
    <file>util.h</file>
    <file>ZBiasSingletonScore.h</file>
  </compound>
  <compound kind="dir">
    <name>npctransport</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/npctransport/</path>
    <filename>dir_9e0c281872d829cbe909faa34b2e10d3.html</filename>
    <file>npctransport/__init__.py</file>
    <file>npctransport_pb2.py</file>
  </compound>
  <compound kind="dir">
    <name>parallel</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/parallel/</path>
    <filename>dir_306750589abe04a626fd0fe1766f26c6.html</filename>
    <file>local_distance.py</file>
    <file>tasks.py</file>
  </compound>
  <compound kind="dir">
    <name>parallel</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/parallel/</path>
    <filename>dir_ccb23d86708d341663785df1b093ebd9.html</filename>
    <file>parallel/__init__.py</file>
    <file>manager_communicator.py</file>
    <file>subproc.py</file>
    <file>parallel/util.py</file>
    <file>worker_handler.py</file>
    <file>workerstate.py</file>
  </compound>
  <compound kind="dir">
    <name>pepdock</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pepdock/</path>
    <filename>dir_5142ea28af42d8e406ec8da67d21345f.html</filename>
    <file>pepdock/__init__.py</file>
    <file>atomicDomino.py</file>
    <file>atomicDominoUtilities.py</file>
    <file>osPeptideDocker.py</file>
    <file>peptideDocker.py</file>
    <file>serialPeptideDocker.py</file>
  </compound>
  <compound kind="dir">
    <name>plotting</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi1/plotting/</path>
    <filename>dir_7f785dbe80754e504d956dcee39212df.html</filename>
    <file>pmi1/plotting/__init__.py</file>
    <file>/plotting/topology.py</file>
  </compound>
  <compound kind="dir">
    <name>plotting</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/plotting/</path>
    <filename>dir_73c6ded6ed32ea251db0e988c9f8cdd7.html</filename>
    <file>pmi/plotting/__init__.py</file>
    <file>plotting/topology.py</file>
  </compound>
  <compound kind="dir">
    <name>pmi</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi/</path>
    <filename>dir_1134c5ebd25565e1da0b181160042183.html</filename>
    <file>pmi/CompositeRestraint.h</file>
    <file>CrossLinkRestraintSet.h</file>
    <file>MembraneRestraint.h</file>
    <file>pmi_config.h</file>
    <file>Resolution.h</file>
    <file>Symmetric.h</file>
    <file>TransformMover.h</file>
    <file>Uncertainty.h</file>
    <file>pmi/utilities.h</file>
  </compound>
  <compound kind="dir">
    <name>pmi</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/pmi/</path>
    <filename>dir_70fc8b0bbbe9435eca4e2c95f3f26230.html</filename>
    <file>ambiguity.py</file>
    <file>atomistic.py</file>
    <file>automatic.py</file>
    <file>doc/examples/pmi/em.py</file>
    <file>ideal_helix.py</file>
    <file>membrane.py</file>
    <file>pmi/multiscale.py</file>
    <file>protein_residue_binding.py</file>
    <file>selection.py</file>
    <file>pmi/symmetry.py</file>
  </compound>
  <compound kind="dir">
    <name>pmi</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/</path>
    <filename>dir_84c1f56e81383d06002bb658dc4ffbb0.html</filename>
    <dir>dof</dir>
    <dir>io</dir>
    <dir>plotting</dir>
    <dir>restraints</dir>
    <dir>topology</dir>
    <file>pmi/__init__.py</file>
    <file>alphabets.py</file>
    <file>pmi/Analysis.py</file>
    <file>macros.py</file>
    <file>mmcif.py</file>
    <file>output.py</file>
    <file>process_output.py</file>
    <file>process_output_rmf.py</file>
    <file>samplers.py</file>
    <file>tools.py</file>
  </compound>
  <compound kind="dir">
    <name>pmi1</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/pmi1/</path>
    <filename>dir_13f17e000b617b67a095676008bab612.html</filename>
    <file>pmi1/CompositeRestraint.h</file>
    <file>InternalCoordinatesConstraint.h</file>
    <file>/MembraneRestraint.h</file>
    <file>pmi1_config.h</file>
    <file>/Resolution.h</file>
    <file>SigmoidRestraintSphere.h</file>
    <file>/Symmetric.h</file>
    <file>/TransformMover.h</file>
    <file>/Uncertainty.h</file>
    <file>pmi1/utilities.h</file>
  </compound>
  <compound kind="dir">
    <name>pmi1</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi1/</path>
    <filename>dir_b7d00e34a5cb7dd8a1abb2cd04ad985f.html</filename>
    <dir>io</dir>
    <dir>plotting</dir>
    <dir>restraints</dir>
    <dir>topology</dir>
    <file>pmi1/__init__.py</file>
    <file>pmi1/Analysis.py</file>
    <file>/macros.py</file>
    <file>pmi1/metadata.py</file>
    <file>/mmcif.py</file>
    <file>nonmantained.py</file>
    <file>/output.py</file>
    <file>/process_output.py</file>
    <file>/process_output_rmf.py</file>
    <file>pmi1/representation.py</file>
    <file>/samplers.py</file>
    <file>/tools.py</file>
  </compound>
  <compound kind="dir">
    <name>restraints</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi1/restraints/</path>
    <filename>dir_a19491a5f3322b5bf32ee1b0f4e5d1b2.html</filename>
    <file>pmi1/restraints/__init__.py</file>
    <file>/restraints/basic.py</file>
    <file>/restraints/crosslinking.py</file>
    <file>crosslinking_new.py</file>
    <file>lib/IMP/pmi1/restraints/em.py</file>
    <file>/restraints/em2d.py</file>
    <file>/restraints/npc.py</file>
    <file>/restraints/parameters.py</file>
    <file>pmi1/restraints/proteomics.py</file>
    <file>/restraints/saxs.py</file>
    <file>/restraints/stereochemistry.py</file>
  </compound>
  <compound kind="dir">
    <name>restraints</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/restraints/</path>
    <filename>dir_050dd08eefa27f17f0a14ec16d0ca976.html</filename>
    <file>pmi/restraints/__init__.py</file>
    <file>restraints/basic.py</file>
    <file>restraints/crosslinking.py</file>
    <file>lib/IMP/pmi/restraints/em.py</file>
    <file>restraints/em2d.py</file>
    <file>restraints/npc.py</file>
    <file>restraints/parameters.py</file>
    <file>pmi/restraints/proteomics.py</file>
    <file>restraints/saxs.py</file>
    <file>restraints/stereochemistry.py</file>
  </compound>
  <compound kind="dir">
    <name>rmf</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/rmf/</path>
    <filename>dir_c3b71f63d3ff682fd9b2a678a30ec855.html</filename>
    <file>rmf/geometry.py</file>
    <file>link.py</file>
    <file>rmf/multiresolution.py</file>
    <file>pdb.py</file>
    <file>simulation.py</file>
  </compound>
  <compound kind="dir">
    <name>rmf</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rmf/</path>
    <filename>dir_85720f42fcfef2c25f8b9142a68926f1.html</filename>
    <file>associations.h</file>
    <file>atom_io.h</file>
    <file>atom_links.h</file>
    <file>frames.h</file>
    <file>geometry_io.h</file>
    <file>HierarchyLoadLink.h</file>
    <file>HierarchySaveLink.h</file>
    <file>link_macros.h</file>
    <file>links.h</file>
    <file>particle_io.h</file>
    <file>restraint_io.h</file>
    <file>rmf_config.h</file>
    <file>RMFWriter.h</file>
    <file>SaveOptimizerState.h</file>
    <file>simple_links.h</file>
  </compound>
  <compound kind="dir">
    <name>rmf</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/rmf/</path>
    <filename>dir_f5136d223bb87ed571745e120a5027e9.html</filename>
    <file>rmf/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>rotamer</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/rotamer/</path>
    <filename>dir_e12611631842593afacb5ab33804a447.html</filename>
    <file>rotamer_pdb.py</file>
    <file>rotamer_pdb2.py</file>
  </compound>
  <compound kind="dir">
    <name>rotamer</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/rotamer/</path>
    <filename>dir_aea443af18509888014b3886e8497b71.html</filename>
    <file>rotamer_config.h</file>
    <file>RotamerCalculator.h</file>
    <file>RotamerLibrary.h</file>
  </compound>
  <compound kind="dir">
    <name>rotamer</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/rotamer/</path>
    <filename>dir_3b4436c4463d16e9dece44a65f94b001.html</filename>
    <file>rotamer/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>sampcon</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/sampcon/</path>
    <filename>dir_ae923fea0579b2ed2620a6a4bf224b28.html</filename>
    <file>sampcon/__init__.py</file>
    <file>clustering_rmsd.py</file>
    <file>exhaust.py</file>
    <file>good_scoring_model_selector.py</file>
    <file>plot_score.py</file>
    <file>precision_rmsd.py</file>
    <file>rmsd_calculation.py</file>
    <file>scores_convergence.py</file>
    <file>select_good.py</file>
    <file>show_stat.py</file>
  </compound>
  <compound kind="dir">
    <name>saxs</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/saxs/</path>
    <filename>dir_886421271003a30e64e090c7876f5703.html</filename>
    <file>profile.py</file>
    <file>profile_fit.py</file>
  </compound>
  <compound kind="dir">
    <name>saxs</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/saxs/</path>
    <filename>dir_1e5d5e4155633668954de627ece6c2cc.html</filename>
    <file>ChiFreeScore.h</file>
    <file>ChiScore.h</file>
    <file>ChiScoreLog.h</file>
    <file>DerivativeCalculator.h</file>
    <file>saxs/distribution.h</file>
    <file>FitParameters.h</file>
    <file>FormFactorTable.h</file>
    <file>nnls.h</file>
    <file>Profile.h</file>
    <file>ProfileClustering.h</file>
    <file>ProfileFitter.h</file>
    <file>saxs/RadiusOfGyrationRestraint.h</file>
    <file>RatioVolatilityScore.h</file>
    <file>saxs/Restraint.h</file>
    <file>RigidBodiesProfileHandler.h</file>
    <file>saxs_config.h</file>
    <file>SolventAccessibleSurface.h</file>
    <file>saxs/utility.h</file>
    <file>WeightedFitParameters.h</file>
    <file>WeightedProfileFitter.h</file>
  </compound>
  <compound kind="dir">
    <name>saxs</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/saxs/</path>
    <filename>dir_7dae742dd207356cdd49ad5d42254ed2.html</filename>
    <file>saxs/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>saxs_merge</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/saxs_merge/</path>
    <filename>dir_51fb08937ef85bd5996bcbb64ee3c22c.html</filename>
    <file>saxs_merge/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>score_functor</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/score_functor/</path>
    <filename>dir_32eac30827f44733cce7c6cba650cf15.html</filename>
    <file>AddScores.h</file>
    <file>distance_pair_score_macros.h</file>
    <file>score_functor/DistancePairScore.h</file>
    <file>DistancePairScoreWithCache.h</file>
    <file>Dope.h</file>
    <file>score_functor/Harmonic.h</file>
    <file>score_functor/HarmonicLowerBound.h</file>
    <file>score_functor/HarmonicUpperBound.h</file>
    <file>LinearLowerBound.h</file>
    <file>LoopStatistical.h</file>
    <file>score_functor/OpenCubicSpline.h</file>
    <file>OrientedSoap.h</file>
    <file>PointToSphereDistance.h</file>
    <file>Score.h</file>
    <file>score_functor_config.h</file>
    <file>ScoreUnaryFunction.h</file>
    <file>ScoreWithCache.h</file>
    <file>Shift.h</file>
    <file>SingletonStatistical.h</file>
    <file>Soap.h</file>
    <file>SphereDistance.h</file>
    <file>Statistical.h</file>
    <file>surface_distance_pair_score_macros.h</file>
    <file>score_functor/SurfaceDistancePairScore.h</file>
    <file>UnaryFunctionEvaluate.h</file>
    <file>WeightScore.h</file>
  </compound>
  <compound kind="dir">
    <name>score_functor</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/score_functor/</path>
    <filename>dir_7d0db94e05c77aa05aa5800f3b3dec2e.html</filename>
    <file>score_functor/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>scratch</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/scratch/</path>
    <filename>dir_72e4bca803eb60dec92268b9ba40b22b.html</filename>
    <file>scratch_config.h</file>
  </compound>
  <compound kind="dir">
    <name>scratch</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/scratch/</path>
    <filename>dir_206f9b65ee4c187e4992e469d65cf7d7.html</filename>
    <file>scratch/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>spatiotemporal</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/spatiotemporal/</path>
    <filename>dir_9c9a4ac4a48cd3df9e527742cff3ab95.html</filename>
    <file>spatiotemporal/__init__.py</file>
    <file>spatiotemporal/Analysis.py</file>
    <file>composition_scoring.py</file>
    <file>create_DAG.py</file>
    <file>graphNode.py</file>
    <file>score_graph.py</file>
    <file>write_output.py</file>
  </compound>
  <compound kind="dir">
    <name>spb</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/spb/</path>
    <filename>dir_652ae069353bca094a1694b96f090ba8.html</filename>
    <file>AttributeDistancePairScore.h</file>
    <file>BoxedMover.h</file>
    <file>CellMover.h</file>
    <file>spb/ChiSquareMetric.h</file>
    <file>ContactMapMetric.h</file>
    <file>DiameterRgyrRestraint.h</file>
    <file>DistanceRMSDMetric.h</file>
    <file>DistanceTerminiRestraint.h</file>
    <file>spb/Em2DRestraint.h</file>
    <file>spb/Gaussian.h</file>
    <file>HelixDecorator.h</file>
    <file>spb/ISDRestraint.h</file>
    <file>KinkPairScore.h</file>
    <file>MolecularDynamicsWithWte.h</file>
    <file>MonteCarloWithWte.h</file>
    <file>NuisanceRangeModifier.h</file>
    <file>PbcBoxedMover.h</file>
    <file>PbcBoxedRigidBodyMover.h</file>
    <file>pt_stuff.h</file>
    <file>RigidBodyNewMover.h</file>
    <file>RigidBodyPackingScore.h</file>
    <file>RMSDMetric.h</file>
    <file>SameParticlePairFilter.h</file>
    <file>SameRigidBodyPairFilter.h</file>
    <file>spb_assemble_restraints.h</file>
    <file>spb_config.h</file>
    <file>spb_ISD_particles.h</file>
    <file>spb_main.h</file>
    <file>spb_parser.h</file>
    <file>spb_representation.h</file>
    <file>spb_restraint.h</file>
    <file>spb_sampler.h</file>
    <file>TiltSingletonScore.h</file>
    <file>TransformationSymmetry.h</file>
    <file>TwoStateGoModelRestraint.h</file>
    <file>UniformBoundedRestraint.h</file>
  </compound>
  <compound kind="dir">
    <name>spb</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/spb/</path>
    <filename>dir_36df02b4c6f03df0914fee6376e57b7f.html</filename>
    <file>spb/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>statistics</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/statistics/</path>
    <filename>dir_2b6ee67f7dc41c55a3a59733e73a751a.html</filename>
    <file>kmeans.py</file>
    <file>write_a_metric.py</file>
  </compound>
  <compound kind="dir">
    <name>statistics</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/statistics/</path>
    <filename>dir_68a55b4513b8792cc7eac9661c26f9d8.html</filename>
    <file>statistics/ChiSquareMetric.h</file>
    <file>statistics/embedding.h</file>
    <file>embeddings.h</file>
    <file>HistogramD.h</file>
    <file>Metric.h</file>
    <file>metric_clustering.h</file>
    <file>metrics.h</file>
    <file>PartitionalClustering.h</file>
    <file>PartitionalClusteringWithCenter.h</file>
    <file>point_clustering.h</file>
    <file>statistics/python_only.h</file>
    <file>RecursivePartitionalClusteringEmbedding.h</file>
    <file>RecursivePartitionalClusteringMetric.h</file>
    <file>statistics_config.h</file>
    <file>statistics/utility.h</file>
  </compound>
  <compound kind="dir">
    <name>statistics</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/statistics/</path>
    <filename>dir_d0e2021a317ccdd8466038ed704b7f5a.html</filename>
    <file>statistics/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>symmetry</name>
    <path>/private/tmp/nightly-build-83334/build/doc/examples/symmetry/</path>
    <filename>dir_a46ed5695ee89d0c5883aa74b1a1940e.html</filename>
    <file>BallMover.py</file>
  </compound>
  <compound kind="dir">
    <name>symmetry</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/symmetry/</path>
    <filename>dir_a92b0fff50ea0b6e9401d073e853c6fe.html</filename>
    <file>symmetry/BallMover.h</file>
    <file>symmetry/RigidBodyMover.h</file>
    <file>symmetry_config.h</file>
  </compound>
  <compound kind="dir">
    <name>symmetry</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/symmetry/</path>
    <filename>dir_a623494ff716b0cf6effb04931cfffe5.html</filename>
    <file>symmetry/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>test</name>
    <path>/private/tmp/nightly-build-83334/build/include/IMP/test/</path>
    <filename>dir_4344bcc1e7044511b22c80b5d855e9ad.html</filename>
    <file>test_macros.h</file>
  </compound>
  <compound kind="dir">
    <name>test</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/test/</path>
    <filename>dir_4d10a567f85c5166ecc6bf8834bec71a.html</filename>
    <file>test/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>topology</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi1/topology/</path>
    <filename>dir_34fddddf6f007bfa56bd6862e5f8d6ee.html</filename>
    <file>pmi1/topology/__init__.py</file>
  </compound>
  <compound kind="dir">
    <name>topology</name>
    <path>/private/tmp/nightly-build-83334/build/lib/IMP/pmi/topology/</path>
    <filename>dir_c9250ba396f6992f5a76fd67ce56a7a3.html</filename>
    <file>pmi/topology/__init__.py</file>
    <file>system_tools.py</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
  </compound>
</tagfile>
